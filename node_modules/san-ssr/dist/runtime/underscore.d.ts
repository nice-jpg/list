import { ComponentClass } from '../models/component';
export interface Context {
    parentCtx?: Context;
}
declare function includes<T>(array: T[], value: T): boolean;
declare function escapeHTML(source: any): string;
declare function output(value: any, needEscape: boolean): any;
declare function _classFilter(source: string | string[]): string;
declare function _styleFilter(source: object): string | object;
declare function _xclassFilter(inherits: string | string[], own: string): string;
declare function _xstyleFilter(inherits: object | string | string[], own: string): string | object;
declare function attrFilter(name: string, value: string, needHTMLEscape: boolean): string;
declare function boolAttrFilter(name: string, value: string): string;
declare function defaultStyleFilter(source: object | string | string[]): string | object;
declare function createFromPrototype(proto: object): any;
declare function createInstanceFromClass(Clazz: ComponentClass): import("../../types/san").SanComponent<{}>;
declare function getRootCtx<T extends {
    parentCtx?: T;
}>(ctx: T): T;
export declare const _: {
    output: typeof output;
    createInstanceFromClass: typeof createInstanceFromClass;
    escapeHTML: typeof escapeHTML;
    defaultStyleFilter: typeof defaultStyleFilter;
    boolAttrFilter: typeof boolAttrFilter;
    attrFilter: typeof attrFilter;
    includes: typeof includes;
    _classFilter: typeof _classFilter;
    _styleFilter: typeof _styleFilter;
    _xstyleFilter: typeof _xstyleFilter;
    _xclassFilter: typeof _xclassFilter;
    createFromPrototype: typeof createFromPrototype;
    getRootCtx: typeof getRootCtx;
};
export {};
