"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SanFileParser = void 0;
const javascript_san_parser_1 = require("./javascript-san-parser");
const assert_1 = __importDefault(require("assert"));
const js_ast_util_1 = require("../utils/js-ast-util");
class SanFileParser {
    constructor(scriptContent, templateContent, filePath) {
        this.scriptContent = scriptContent;
        this.templateContent = templateContent;
        this.filePath = filePath;
        this.parser = new javascript_san_parser_1.JavaScriptSanParser(filePath, scriptContent, 'module');
    }
    parse() {
        const expr = js_ast_util_1.findDefaultExport(this.parser.root);
        assert_1.default(expr, 'default export not found');
        // export default { inited() {} }
        if (js_ast_util_1.isObjectExpression(expr))
            this.expandToSanComponent(expr);
        // defineComponent({}) -> defineComponent({ template: `${templateContent}` })
        this.insertTemplate(expr);
        return this.parser.parse();
    }
    /**
     * 把简写的 san options 替换为 san Component。
     * { inited(){} } -> require('san').defineComponent({ inited(){} })
     */
    expandToSanComponent(options) {
        const defineComponent = {
            type: 'CallExpression',
            callee: {
                type: 'MemberExpression',
                object: {
                    type: 'CallExpression',
                    callee: { type: 'Identifier', name: 'require' },
                    arguments: [{ type: 'Literal', value: 'san', raw: "'san'" }],
                    optional: false
                },
                property: { type: 'Identifier', name: 'defineComponent' },
                computed: false,
                optional: false
            },
            arguments: [Object.assign({}, options)],
            optional: false
        };
        Object.assign(options, defineComponent);
    }
    /**
     * 把模板字符串插入到 san 组件定义中
     * - 情况一：defineComponent({ inited(){} }) -> defineComponent({ inited(){}, template: '<div>...</div>' })
     * - 情况二：class XComponent { constructor() {} } -> class XComponent { constructor() { this.template='<div>...</div>' } }
     */
    insertTemplate(expr) {
        if (js_ast_util_1.isCallExpression(expr)) {
            assert_1.default(expr.arguments[0], 'cannot parse san script');
            js_ast_util_1.assertObjectExpression(expr.arguments[0]);
            js_ast_util_1.addStringPropertyForObject(expr.arguments[0], 'template', this.templateContent);
        }
        else if (js_ast_util_1.isClass(expr)) {
            let fn = js_ast_util_1.getConstructor(expr);
            if (!fn) {
                fn = this.createEmptyConstructor();
                expr.body.body.push(fn);
            }
            fn.value.body.body.push(this.createTemplateAssignmentExpression());
        }
        else {
            throw new Error('entry component not found');
        }
    }
    createEmptyConstructor() {
        return {
            type: 'MethodDefinition',
            kind: 'constructor',
            static: false,
            computed: false,
            key: { type: 'Identifier', name: 'constructor' },
            value: {
                type: 'FunctionExpression',
                id: null,
                generator: false,
                async: false,
                params: [],
                body: { type: 'BlockStatement', body: [] }
            }
        };
    }
    /**
     * 创建给 this.template 赋值为 this.templateContent 的表达式
     */
    createTemplateAssignmentExpression() {
        return {
            type: 'ExpressionStatement',
            expression: {
                type: 'AssignmentExpression',
                operator: '=',
                left: {
                    type: 'MemberExpression',
                    object: { type: 'ThisExpression' },
                    property: { type: 'Identifier', name: 'template' },
                    computed: false,
                    optional: false
                },
                right: {
                    type: 'Literal',
                    value: this.templateContent,
                    raw: JSON.stringify(this.templateContent)
                }
            }
        };
    }
}
exports.SanFileParser = SanFileParser;
//# sourceMappingURL=san-file-parser.js.map