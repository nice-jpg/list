"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractInterpNodeFromRootANode = exports.parseAndNormalizeTemplate = void 0;
const san_1 = require("san");
const TypeGuards = __importStar(require("../utils/type-guards"));
const anode_util_1 = require("../utils/anode-util");
function parseAndNormalizeTemplate(template, options) {
    const rootANode = san_1.parseTemplate(template, options).children[0];
    rootANode && normalizeRootANode(rootANode);
    return rootANode;
}
exports.parseAndNormalizeTemplate = parseAndNormalizeTemplate;
/**
 * 归一化 ANode
 *
 * 做的事情类似 san 核心中 preheat 的前期处理，比如
 *
 * - 给 style, class 等添加处理器，使之能从父组件合并 class
 * - <template> 的 tagName 置空，使之接受父组件定义的 tagName
 */
function normalizeRootANode(rootANode) {
    if (TypeGuards.isATemplateNode(rootANode)) {
        normalizeRootATemplateNode(rootANode);
    }
    for (const prop of rootANode.props || []) {
        if (prop.name === 'class')
            normalizeRootClassProp(prop);
        else if (prop.name === 'style')
            normalizeRootStyleProp(prop);
    }
    anode_util_1.visitANodeRecursively(rootANode, (aNode) => {
        if (aNode.tagName === 'option')
            normalizeOptionTag(aNode);
        normalizeANodeProps(aNode);
    });
}
// ie 下，如果 option 没有 value 属性，select.value = xx 操作不会选中 option
// 所以没有设置 value 时，默认把 option 的内容作为 value
function normalizeOptionTag(aNode) {
    if (aNode.props.find(prop => prop.name === 'value'))
        return;
    if (!aNode.children.length)
        return;
    aNode.props.push({
        name: 'value',
        expr: aNode.children[0].textExpr
    });
}
function normalizeANodeProps(aNode) {
    if (aNode.props)
        aNode.props = anode_util_1.parseANodeProps(aNode);
}
function normalizeRootClassProp(clazz) {
    const parentClassExpr = clazz.expr;
    const expr = extractInterpNodeFromRootANode(san_1.parseTemplate('{{class | _xclass}}'));
    expr.filters[0].args.push(parentClassExpr);
    clazz.expr = expr;
}
function normalizeRootStyleProp(style) {
    const parentStyleExpr = style.expr;
    const expr = extractInterpNodeFromRootANode(san_1.parseTemplate('{{style | _xstyle}}'));
    expr.filters[0].args.push(parentStyleExpr);
    style.expr = expr;
}
function extractInterpNodeFromRootANode(root) {
    const expr = root.children[0].textExpr;
    if (TypeGuards.isExprInterpNode(expr)) {
        return expr;
    }
    if (TypeGuards.isExprTextNode(expr)) {
        return expr.segs[0];
    }
    throw new Error('root aNode not recognized');
}
exports.extractInterpNodeFromRootANode = extractInterpNodeFromRootANode;
function normalizeRootATemplateNode(rootANode) {
    // 组件根节点，用来让父组件定义根节点 tagName
    // 令 isATemplateNode=false
    rootANode.tagName = '';
}
//# sourceMappingURL=parse-template.js.map