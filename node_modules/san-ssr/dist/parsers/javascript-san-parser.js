"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JavaScriptSanParser = void 0;
const debug_1 = __importDefault(require("debug"));
const acorn_walk_1 = require("acorn-walk");
const acorn_1 = require("acorn");
const astring_1 = require("astring");
const component_info_1 = require("../models/component-info");
const js_ast_util_1 = require("../utils/js-ast-util");
const san_source_file_1 = require("../models/san-source-file");
const component_reference_1 = require("../models/component-reference");
const fs_1 = require("fs");
const debug = debug_1.default('ts-component-parser');
const DEFAULT_LOADER_CMP = 'SanSSRDefaultLoaderComponent';
/**
 * 把包含 San 组件定义的 JavaScript 源码，通过静态分析（AST），得到组件信息。
 */
class JavaScriptSanParser {
    constructor(filePath, fileContent, sourceType = 'script') {
        this.filePath = filePath;
        this.componentInfos = [];
        this.imports = new Map();
        this.exports = new Map();
        this.componentIDs = new Map();
        this.id = 0;
        this.root = acorn_1.parse(fileContent === undefined ? fs_1.readFileSync(filePath, 'utf8') : fileContent, { ecmaVersion: 2020, sourceType });
    }
    parse() {
        this.parseNames();
        this.parseComponents();
        this.wireChildComponents();
        return new san_source_file_1.JSSanSourceFile(this.filePath, this.stringify(this.root), this.componentInfos, this.entryComponentInfo);
    }
    parseComponents() {
        const parseComponentFromNode = (node, ancestors) => {
            const parent = ancestors[ancestors.length - 2];
            if (!this.isComponent(node))
                return;
            const component = this.parseComponentFromNode(node, parent);
            if (component.className === this.defaultExport) {
                this.entryComponentInfo = component;
            }
        };
        acorn_walk_1.ancestor(this.root, {
            CallExpression: parseComponentFromNode,
            ClassExpression: parseComponentFromNode,
            ClassDeclaration: parseComponentFromNode
        });
        return [this.componentInfos, this.entryComponentInfo];
    }
    wireChildComponents() {
        for (const info of this.componentInfos) {
            for (const [key, value] of info.getComponentsDelcarations()) {
                info.childComponents.set(key, this.createChildComponentReference(value));
            }
        }
    }
    createChildComponentReference(child) {
        if (this.componentIDs.has(child)) {
            return new component_reference_1.ComponentReference('.', this.componentIDs.get(child));
        }
        if (js_ast_util_1.isIdentifier(child)) {
            if (this.imports.has(child.name)) {
                const [specifier, id] = this.imports.get(child.name);
                return new component_reference_1.ComponentReference(specifier, id);
            }
            return new component_reference_1.ComponentReference('.', child.name);
        }
        if (this.isCreateComponentLoaderCall(child)) {
            const options = child.arguments[0];
            const placeholder = js_ast_util_1.isObjectExpression(options) && js_ast_util_1.getPropertyFromObject(options, 'placeholder');
            // placeholder 是一个组件声明或组件的引用
            if (placeholder)
                return this.createChildComponentReference(placeholder);
            // placeholder 未定义，生成一个默认的组件
            const cmpt = this.getOrCreateDefaultLoaderComponent();
            return new component_reference_1.ComponentReference('.', cmpt.id);
        }
        throw new Error(`${js_ast_util_1.location(child)} cannot parse components`);
    }
    parseComponentFromNode(node, parent) {
        // export default Component
        if (js_ast_util_1.isExportDefaultDeclaration(parent)) {
            return (this.entryComponentInfo = this.createComponent(node, undefined, true));
        }
        // module.exports = Component
        if (js_ast_util_1.isAssignmentExpression(parent) && js_ast_util_1.isModuleExports(parent.left)) {
            return (this.entryComponentInfo = this.createComponent(node, undefined, true));
        }
        // exports.Foo = Component
        if (js_ast_util_1.isAssignmentExpression(parent) && js_ast_util_1.isExportsMemberExpression(parent.left)) {
            return this.createComponent(node, js_ast_util_1.getStringValue(parent.left['property']));
        }
        // const Foo = Component
        if (js_ast_util_1.isVariableDeclarator(parent)) {
            return this.createComponent(node, parent.id['name']);
        }
        // Foo = Component
        if (js_ast_util_1.isAssignmentExpression(parent) && js_ast_util_1.isIdentifier(parent.left)) {
            return this.createComponent(node, parent.left.name);
        }
        // { 'x-list': san.defineComponent() }
        if (js_ast_util_1.isProperty(parent) && this.isComponent(parent.value)) {
            return this.createComponent(node);
        }
        return this.createComponent(node);
    }
    /**
     * 解析文件中出现的名字：找到重要的类名、方法名以及它们的来源
     */
    parseNames() {
        for (const [local, specifier, imported] of this.parseImportedNames()) {
            this.imports.set(local, [specifier, imported]);
            if (imported === 'Component' && specifier === 'san') {
                this.sanComponentIdentifier = local;
            }
            if (imported === 'defineComponent' && specifier === 'san') {
                this.defineComponentIdentifier = local;
            }
        }
        for (const [local, exported] of js_ast_util_1.findExportNames(this.root)) {
            if (exported === 'default')
                this.defaultExport = local;
            this.exports.set(local, exported);
        }
    }
    *parseImportedNames() {
        for (const entry of js_ast_util_1.findESMImports(this.root))
            yield entry;
        for (const entry of js_ast_util_1.findScriptRequires(this.root))
            yield entry;
    }
    createComponent(node, name = js_ast_util_1.getClassName(node), isDefault = false) {
        const properties = new Map(this.getPropertiesFromComponentDeclaration(node, name));
        const id = component_reference_1.componentID(isDefault, (name
            ? (this.exports.get(name) || name)
            : ('SanSSRAnonymousComponent' + this.id++)));
        this.componentIDs.set(node, id);
        const comp = new component_info_1.JSComponentInfo(id, name, properties, this.stringify(node));
        this.componentInfos.push(comp);
        return comp;
    }
    getOrCreateDefaultLoaderComponent() {
        if (!this.defaultPlaceholderComponent) {
            this.defaultPlaceholderComponent = new component_info_1.JSComponentInfo(DEFAULT_LOADER_CMP, '', new Map(), 'function(){}');
            this.componentInfos.push(this.defaultPlaceholderComponent);
        }
        return this.defaultPlaceholderComponent;
    }
    *getPropertiesFromComponentDeclaration(node, name) {
        if (this.isComponentClass(node))
            yield* js_ast_util_1.getMembersFromClassDeclaration(node);
        else
            yield* js_ast_util_1.getPropertiesFromObject(node['arguments'][0]);
        yield* js_ast_util_1.getMemberAssignmentsTo(this.root, name);
    }
    isComponent(node) {
        return this.isDefineComponentCall(node) || this.isComponentClass(node);
    }
    isDefineComponentCall(node) {
        return js_ast_util_1.isCallExpression(node) && this.isImportedFromSan(node.callee, 'defineComponent');
    }
    isCreateComponentLoaderCall(node) {
        return js_ast_util_1.isCallExpression(node) && this.isImportedFromSan(node.callee, 'createComponentLoader');
    }
    isComponentClass(node) {
        return js_ast_util_1.isClass(node) && !!node.superClass && this.isImportedFromSan(node.superClass, 'Component');
    }
    isImportedFromSan(expr, sanExport) {
        if (js_ast_util_1.isIdentifier(expr))
            return this.isImportedFrom(expr.name, 'san', sanExport);
        if (js_ast_util_1.isMemberExpression(expr))
            return this.isImportedFromSan(expr.object, 'default') && js_ast_util_1.getStringValue(expr.property) === sanExport;
        if (js_ast_util_1.isCallExpression(expr))
            return js_ast_util_1.isRequireSpecifier(expr, 'san') && sanExport === 'default';
        return false;
    }
    isImportedFrom(localName, packageSpec, importedName) {
        if (!this.imports.has(localName))
            return false;
        const [spec, name] = this.imports.get(localName);
        return spec === packageSpec && name === importedName;
    }
    stringify(node) {
        return astring_1.generate(node, { indent: '    ' });
    }
}
exports.JavaScriptSanParser = JavaScriptSanParser;
//# sourceMappingURL=javascript-san-parser.js.map