"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderOnthefly = exports.getRenderArguments = exports.readCaseData = exports.compileCaseToRenderer = exports.compileTS = exports.compileComponent = exports.compileJS = exports.readExpected = exports.ls = exports.tsExists = exports.jsExists = exports.caseRoot = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const san_project_1 = require("../models/san-project");
const target_js_1 = __importDefault(require("../target-js"));
const debug_1 = __importDefault(require("debug"));
const index_1 = require("../index");
const debug = debug_1.default('case');
exports.caseRoot = path_1.join(__dirname, '../../node_modules/san-html-cases/src');
const tsConfigFilePath = path_1.join(__dirname, '../../test/tsconfig.json');
const sanProject = new san_project_1.SanProject(tsConfigFilePath);
const importHelpers = path_1.join(__dirname, '../../dist/runtime/helpers');
function jsExists(caseName) {
    return fs_1.existsSync(path_1.join(exports.caseRoot, caseName, 'component.js'));
}
exports.jsExists = jsExists;
function tsExists(caseName) {
    return fs_1.existsSync(path_1.join(exports.caseRoot, caseName, 'component.ts'));
}
exports.tsExists = tsExists;
function ls() {
    return fs_1.readdirSync(exports.caseRoot)
        .filter(caseName => fs_1.lstatSync(path_1.join(exports.caseRoot, caseName)).isDirectory());
}
exports.ls = ls;
function readExpected(caseName) {
    const htmlPath = path_1.join(exports.caseRoot, caseName, 'expected.html');
    return fs_1.readFileSync(htmlPath, 'utf8');
}
exports.readExpected = readExpected;
function compileJS(caseName, compileToFunctionBodyCode) {
    debug('compile js', caseName);
    const caseDir = path_1.join(exports.caseRoot, caseName);
    const jsFile = path_1.join(caseDir, 'component.js');
    const ssrOnly = /-so/.test(caseName);
    const targetCode = sanProject.compile(jsFile, target_js_1.default, { ssrOnly, bareFunctionBody: compileToFunctionBodyCode, importHelpers });
    const targetFile = path_1.join(exports.caseRoot, caseName, 'ssr.js');
    return compileToFunctionBodyCode ? targetCode : fs_1.writeFileSync(targetFile, targetCode);
}
exports.compileJS = compileJS;
function compileComponent(caseName, compileToFunctionBodyCode) {
    debug('compile js', caseName);
    const caseDir = path_1.join(exports.caseRoot, caseName);
    const jsFile = path_1.join(caseDir, 'component.js');
    const ssrOnly = /-so/.test(caseName);
    const targetCode = sanProject.compile(require(jsFile), target_js_1.default, { ssrOnly, bareFunctionBody: compileToFunctionBodyCode, importHelpers });
    const targetFile = path_1.join(exports.caseRoot, caseName, 'ssr.js');
    return compileToFunctionBodyCode ? targetCode : fs_1.writeFileSync(targetFile, targetCode);
}
exports.compileComponent = compileComponent;
function compileTS(caseName) {
    debug('compile ts', caseName);
    const caseDir = path_1.join(exports.caseRoot, caseName);
    const ssrOnly = /-so/.test(caseName);
    for (const file of fs_1.readdirSync(caseDir).filter(file => /\.ts$/.test(file))) {
        const targetCode = sanProject.compile(path_1.join(caseDir, file), target_js_1.default, { ssrOnly, importHelpers });
        const targetFile = file === 'component.ts'
            ? path_1.join(caseDir, 'ssr.js')
            : path_1.join(caseDir, file.replace(/\.ts$/, '.js'));
        fs_1.writeFileSync(targetFile, targetCode);
    }
}
exports.compileTS = compileTS;
function compileCaseToRenderer(caseName) {
    const caseDir = path_1.join(exports.caseRoot, caseName);
    const ComponentClass = require(path_1.join(caseDir, 'component.js'));
    return index_1.compileToRenderer(ComponentClass, {
        ssrOnly: /-so/.test(caseDir)
    });
}
exports.compileCaseToRenderer = compileCaseToRenderer;
function readCaseData(caseName) {
    const caseDir = path_1.join(exports.caseRoot, caseName);
    const dataJSPath = path_1.join(caseDir, 'data.js');
    if (fs_1.existsSync(dataJSPath)) {
        return require(dataJSPath);
    }
    const dataPath = path_1.join(caseDir, 'data.json');
    return JSON.parse(fs_1.readFileSync(dataPath, 'utf8'));
}
exports.readCaseData = readCaseData;
function getRenderArguments(caseName) {
    const data = readCaseData(caseName);
    const noDataOutput = /-ndo$/.test(caseName);
    return [data, noDataOutput];
}
exports.getRenderArguments = getRenderArguments;
function renderOnthefly(caseName) {
    const render = compileCaseToRenderer(caseName);
    const data = readCaseData(caseName);
    const noDataOutput = /-ndo$/.test(caseName);
    return render(data, noDataOutput);
}
exports.renderOnthefly = renderOnthefly;
//# sourceMappingURL=case.js.map