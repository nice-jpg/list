"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringifier = void 0;
exports.stringifier = {
    obj: function (source) {
        let prefixComma;
        let result = '{';
        for (const key in source) {
            if (!Object.prototype.hasOwnProperty.call(source, key) || typeof source[key] === 'undefined') {
                continue;
            }
            if (prefixComma) {
                result += ',';
            }
            prefixComma = 1;
            result += exports.stringifier.str(key) + ':' + exports.stringifier.any(source[key]);
        }
        return result + '}';
    },
    arr: function (source) {
        let prefixComma;
        let result = '[';
        for (const value of source) {
            if (prefixComma) {
                result += ',';
            }
            prefixComma = 1;
            result += exports.stringifier.any(value);
        }
        return result + ']';
    },
    str: function (source) {
        return '"' + source
            .replace(/\x5C/g, '\\\\')
            .replace(/"/g, '\\"')
            .replace(/\n/g, '\\n')
            .replace(/\t/g, '\\t')
            .replace(/\r/g, '\\r') + '"';
    },
    date: function (source) {
        return 'new Date(' + source.getTime() + ')';
    },
    any: function (source) {
        switch (typeof source) {
            case 'string':
                return exports.stringifier.str(source);
            case 'number':
                return '' + source;
            case 'boolean':
                return source ? 'true' : 'false';
            case 'object':
                if (!source)
                    return 'null';
                if (source instanceof Array)
                    return exports.stringifier.arr(source);
                if (source instanceof Date)
                    return exports.stringifier.date(source);
                return exports.stringifier.obj(source);
        }
        throw new Error(`Cannot Stringify: ${source}`);
    }
};
//# sourceMappingURL=stringifier.js.map