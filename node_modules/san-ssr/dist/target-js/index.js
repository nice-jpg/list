"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const js_emitter_1 = require("./js-emitter");
const create_helpers_1 = require("../runtime/create-helpers");
const component_compiler_1 = require("./compilers/component-compiler");
const san_source_file_1 = require("../models/san-source-file");
const renderer_compiler_1 = require("../compilers/renderer-compiler");
const ts2js_1 = require("../compilers/ts2js");
const debug = debug_1.default('target-js');
class ToJSCompiler {
    constructor(project) {
        this.project = project;
    }
    /**
     * 编译到 JS Render 源码
     *
     * @param sourceFile 解析过的 San 源文件
     * @param ssrOnly 只在服务端渲染，客户端无法反解，可用来减少渲染标记
     * @param bareFunction 只输出一个 function，不输出 CMD 包装
     * @param bareFunctionBody 只输出 function body
     */
    compileToSource(sourceFile, { importHelpers = '', ssrOnly = false, bareFunction = false, bareFunctionBody = false } = {}) {
        const emitter = new js_emitter_1.JSEmitter();
        if (bareFunctionBody) {
            emitter.writeLine('let exports = {}, module = { exports };');
            this.doCompileToSource(sourceFile, ssrOnly, importHelpers, emitter);
            emitter.writeLine('return module.exports(data, noDataOutput);');
        }
        else if (bareFunction) {
            emitter.writeFunction('render', ['data', 'noDataOutput'], () => {
                emitter.writeLine('let exports = {}, module = { exports };');
                this.doCompileToSource(sourceFile, ssrOnly, importHelpers, emitter);
                emitter.writeLine('return module.exports(data, noDataOutput);');
            });
        }
        else {
            this.doCompileToSource(sourceFile, ssrOnly, importHelpers, emitter);
        }
        return emitter.fullText();
    }
    /**
     * 编译到 JS Render 函数
     *
     * @param sourceFile 解析过的 San 源文件
     * @param ssrOnly 只在服务端渲染，客户端无法反解，可用来减少渲染标记
     */
    compileToRenderer(sourceFile, { ssrOnly = false } = {}) {
        const { componentInfos, entryComponentInfo } = sourceFile;
        const helpers = create_helpers_1.createHelpers();
        const resolver = helpers.createResolver({}, require);
        for (const info of componentInfos) {
            const { id } = info;
            const cc = new renderer_compiler_1.RendererCompiler(ssrOnly);
            const renderFnBody = cc.compileComponentRendererBody(info);
            const render = this.createRender(renderFnBody, [helpers, resolver]);
            resolver.setPrototype(id, info.componentClass.prototype);
            resolver.setRenderer(id, render);
        }
        return (data, noDataOutput = false) => {
            const render = resolver.getRenderer({ id: entryComponentInfo.id });
            return render(data, noDataOutput);
        };
    }
    emitHelpers() {
        const emitter = new js_emitter_1.JSEmitter();
        create_helpers_1.emitHelpers(emitter);
        return emitter.fullText();
    }
    /**
     * 解决 render 函数的依赖（即 helpers）
     */
    createRender(fnBody, args) {
        const emitter = new js_emitter_1.JSEmitter();
        emitter.writeBlock(`return function(${renderer_compiler_1.RENDERER_ARGS.join(', ')})`, () => {
            emitter.writeLines(fnBody);
        });
        const argNames = ['sanSSRHelpers', 'sanSSRResolver'];
        const body = emitter.fullText();
        const creator = new Function(...argNames, body); // eslint-disable-line no-new-func
        return creator(...args);
    }
    doCompileToSource(sourceFile, ssrOnly, importHelpers, emitter) {
        // 如果源文件中有 san 组件，才输出一个运行时
        if (sourceFile.componentInfos.length)
            this.ensureHelpers(importHelpers, emitter);
        // 编译源文件到 JS
        if (san_source_file_1.isTypedSanSourceFile(sourceFile))
            this.compileTSComponentToSource(sourceFile, emitter);
        else if (san_source_file_1.isJSSanSourceFile(sourceFile))
            this.compileJSComponentToSource(sourceFile, emitter);
        // DynamicSanSourceFile
        else
            this.compileComponentClassToSource(sourceFile, emitter);
        // 编译 render 函数
        const cc = new renderer_compiler_1.RendererCompiler(ssrOnly, emitter);
        for (const info of sourceFile.componentInfos) {
            emitter.nextLine(`sanSSRResolver.setRenderer("${info.id}", `);
            cc.compileComponentRendererSource(info);
            emitter.feedLine(');');
        }
        // 导出入口 render 函数
        const entryInfo = sourceFile.entryComponentInfo;
        if (entryInfo) {
            emitter.writeLine(`module.exports = Object.assign(sanSSRResolver.getRenderer({id:"${entryInfo.id}"}), exports)`);
        }
    }
    ensureHelpers(importHelpers, emitter) {
        emitter.nextLine('const sanSSRHelpers = ');
        if (importHelpers) {
            emitter.feedLine(`require("${importHelpers}");`);
        }
        else {
            create_helpers_1.emitHelpersAsIIFE(emitter);
        }
        emitter.writeLine('const sanSSRResolver = sanSSRHelpers.createResolver(exports, require);');
    }
    compileTSComponentToSource(sourceFile, emitter) {
        const dst = ts2js_1.tsSourceFile2js(sourceFile.tsSourceFile, this.project.getCompilerOptionsOrThrow());
        emitter.writeLines(dst);
        for (const info of sourceFile.componentInfos) {
            const className = info.classDeclaration.getName();
            emitter.writeLine(`sanSSRResolver.setPrototype("${info.id}", sanSSRHelpers._.createInstanceFromClass(${className}));`);
        }
    }
    compileJSComponentToSource(sourceFile, emitter) {
        emitter.writeLines(sourceFile.getFileContent());
        for (const info of sourceFile.componentInfos) {
            const proto = info.className ? info.className : info.sourceCode;
            emitter.writeLine(`sanSSRResolver.setPrototype("${info.id}", sanSSRHelpers._.createInstanceFromClass(${proto}));`);
        }
    }
    compileComponentClassToSource(sourceFile, emitter) {
        const cc = new component_compiler_1.ComponentClassCompiler(emitter);
        for (const info of sourceFile.componentInfos) {
            emitter.nextLine(`sanSSRResolver.setPrototype("${info.id}", `);
            emitter.writeBlock('', () => cc.compile(info), false);
            emitter.feedLine(');');
        }
    }
}
exports.default = ToJSCompiler;
//# sourceMappingURL=index.js.map