"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSEmitter = void 0;
const id_generator_1 = require("../utils/id-generator");
const emitter_1 = require("../utils/emitter");
const expr_compiler_1 = require("./compilers/expr-compiler");
const stringifier_1 = require("./compilers/stringifier");
class JSEmitter extends emitter_1.Emitter {
    constructor() {
        super(...arguments);
        this.buffer = '';
        this.idGen = new id_generator_1.IDGenerator();
    }
    genID(name) {
        return this.idGen.generate(name);
    }
    fullText() {
        this.clearStringLiteralBuffer();
        return super.fullText();
    }
    write(str) {
        this.clearStringLiteralBuffer();
        return this.defaultWrite(str);
    }
    writeHTMLExpression(code) {
        this.writeLine(`html += ${code};`);
    }
    writeDataComment() {
        this.writeHTMLExpression(`"<!--s-data:" + JSON.stringify(${expr_compiler_1.dataAccess(undefined, 'expr', '_.getRootCtx(ctx)')}).replace(/(?<=-)-/g, '\\\\-') + "-->"`);
    }
    writeHTMLLiteral(str) {
        this.buffer += str;
    }
    clearStringLiteralBuffer() {
        if (this.buffer === '')
            return;
        const buffer = this.buffer;
        this.buffer = '';
        this.writeHTMLExpression(stringifier_1.stringifier.str(buffer));
    }
    writeSwitch(expr, body) {
        this.writeLine(`switch (${expr}) {`);
        this.indent();
        body();
        this.unindent();
        this.writeLine('}');
    }
    writeCase(expr, body = () => null) {
        this.writeLine(`case ${expr}:`);
        this.indent();
        body();
        this.unindent();
    }
    writeBreak() {
        this.writeLine('break;');
    }
    writeDefault(body = () => null) {
        this.writeLine('default:');
        this.indent();
        body();
        this.unindent();
    }
    writeFunction(name = '', args = [], body = () => null) {
        const nameStr = name ? `${name} ` : '';
        const argsStr = args.join(', ');
        this.feedLine(`function ${nameStr}(${argsStr}) {`);
        this.indent();
        body();
        this.unindent();
        this.nextLine('}');
    }
    writeFunctionCall(name, args) {
        this.write(`${name}(${args.join(', ')})`);
    }
    writeAnonymousFunction(args = [], body = () => null) {
        return this.writeFunction('', args, body);
    }
    writeIf(expr, cb) {
        this.beginIf(expr);
        cb();
        this.endIf();
    }
    beginIf(expr) {
        this.beginBlock(`if (${expr})`);
    }
    beginElseIf(expr) {
        this.beginBlock(`else if (${expr})`);
    }
    beginElse() {
        this.beginBlock('else');
    }
    endIf() {
        this.endBlock();
    }
    writeFor(expr, cb) {
        this.beginFor(expr);
        cb();
        this.endFor();
    }
    beginFor(expr) {
        this.beginBlock(`for (${expr})`);
    }
    endFor() {
        this.endBlock();
    }
    writeContinue() {
        this.writeLine('continue;');
    }
    writeBlock(expr, cb = () => null, nl = true) {
        this.beginBlock(expr, nl);
        cb();
        this.endBlock(nl);
    }
    beginBlock(expr, nl = true) {
        const text = `${expr ? expr + ' ' : ''}{`;
        nl ? this.writeLine(text) : this.feedLine(text);
        this.indent();
    }
    endBlock(nl = true) {
        this.clearStringLiteralBuffer();
        this.unindent();
        nl ? this.writeLine('}') : this.nextLine('}');
    }
}
exports.JSEmitter = JSEmitter;
//# sourceMappingURL=js-emitter.js.map