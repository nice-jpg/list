"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SanProject = void 0;
const assert_1 = __importDefault(require("assert"));
const ts_morph_1 = require("ts-morph");
const component_class_parser_1 = require("../parsers/component-class-parser");
const typescript_san_parser_1 = require("../parsers/typescript-san-parser");
const javascript_san_parser_1 = require("../parsers/javascript-san-parser");
const san_file_parser_1 = require("../parsers/san-file-parser");
const index_1 = __importDefault(require("../target-js/index"));
const tsconfig_1 = require("../parsers/tsconfig");
const options_1 = require("./options");
/**
 * A SanProject corresponds to a TypeScript project,
 * which is is a set of source files in a directory using one tsconfig.json.
 */
class SanProject {
    constructor(tsConfigFilePath = tsconfig_1.getDefaultTSConfigPath()) {
        this.tsConfigFilePath = tsConfigFilePath;
        this.compilers = new Map();
        if (tsConfigFilePath !== null) {
            this.tsProject = new ts_morph_1.Project({ tsConfigFilePath, addFilesFromTsConfig: false });
        }
    }
    /**
     * 兼容旧版用法
     * @alias SanProject.compileToSource
     */
    compile(input, target = 'js', options = {}) {
        return this.compileToSource(input, target, options);
    }
    /**
     * 源文件/组件类编译到源代码
     */
    compileToSource(input, target = 'js', options = {}) {
        const sanSourceFile = this.parseSanSourceFile(input);
        const compiler = this.getOrCreateCompilerInstance(target);
        return compiler.compileToSource(sanSourceFile, options);
    }
    parseSanSourceFile(input) {
        if (options_1.isComponentClass(input))
            return new component_class_parser_1.ComponentClassParser(input, '').parse();
        if (options_1.isSanFileDescriptor(input)) {
            return new san_file_parser_1.SanFileParser(input.scriptContent, input.templateContent, input.filePath).parse();
        }
        const filePath = options_1.isFileDescriptor(input) ? input.filePath : input;
        const fileContent = options_1.isFileDescriptor(input) ? input.fileContent : undefined;
        if (/\.ts$/.test(filePath)) {
            if (!this.tsProject)
                throw new Error(`Error parsing ${input}, tsconfig not specified`);
            const sourceFile = fileContent
                ? this.tsProject.createSourceFile(filePath, fileContent, { overwrite: true })
                : this.tsProject.addSourceFileAtPath(filePath);
            !fileContent && sourceFile.refreshFromFileSystemSync();
            return new typescript_san_parser_1.TypeScriptSanParser().parse(sourceFile);
        }
        return new javascript_san_parser_1.JavaScriptSanParser(filePath).parse();
    }
    /**
     * 编译成当前 JavaScript 进程里的 render 函数
     *
     *  * `target` 固定为 "js"
     *  * `options.bareFunction` 固定为 true
     */
    compileToRenderer(componentClass, options) {
        const sanSourceFile = new component_class_parser_1.ComponentClassParser(componentClass, '').parse();
        const compiler = this.getOrCreateCompilerInstance(index_1.default);
        return compiler.compileToRenderer(sanSourceFile, options);
    }
    /**
     * 输出工具库：组件渲染时需要使用的公共工具。
     */
    emitHelpers(target, options = {}) {
        const compiler = this.getOrCreateCompilerInstance(target);
        assert_1.default(compiler.emitHelpers, `emit helpers not supported by "${target}"`);
        return compiler.emitHelpers(options);
    }
    getCompilerOptionsOrThrow() {
        return this.tsProject.getCompilerOptions();
    }
    getOrCreateCompilerInstance(target) {
        const CC = this.loadCompilerClass(target);
        if (!this.compilers.has(CC)) {
            this.compilers.set(CC, new CC(this));
        }
        return this.compilers.get(CC);
    }
    loadCompilerClass(target) {
        if (typeof target !== 'string')
            return target;
        const name = `san-ssr-target-${target}`;
        if (name === 'san-ssr-target-js')
            return index_1.default;
        let path;
        try {
            path = require.resolve(name);
        }
        catch (e) {
            throw new Error(`failed to load "san-ssr-target-${target}"`);
        }
        const plugin = require(path);
        return plugin.default || plugin;
    }
}
exports.SanProject = SanProject;
//# sourceMappingURL=san-project.js.map