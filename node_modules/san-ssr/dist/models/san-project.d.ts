import type { ComponentConstructor } from 'san';
import { Project } from 'ts-morph';
import { TypedSanSourceFile, DynamicSanSourceFile, SanSourceFile } from '../models/san-source-file';
import { ToJSCompileOptions } from '../target-js/index';
import { Renderer } from './renderer';
import { Compiler } from '../models/compiler';
import { ComponentClass, FileDescriptor, CompileInput } from './options';
declare type CompilerClass<T extends Compiler = Compiler> = {
    new (project: SanProject): T;
};
/**
 * A SanProject corresponds to a TypeScript project,
 * which is is a set of source files in a directory using one tsconfig.json.
 */
export declare class SanProject {
    tsConfigFilePath: null | string | undefined;
    tsProject?: Project;
    private compilers;
    constructor(tsConfigFilePath?: null | string | undefined);
    /**
     * 兼容旧版用法
     * @alias SanProject.compileToSource
     */
    compile(input: CompileInput, target?: string | CompilerClass, options?: {}): string;
    /**
     * 源文件/组件类编译到源代码
     */
    compileToSource<T extends Compiler>(input: CompileInput, target?: string | CompilerClass<T>, options?: {}): string;
    /**
     * 源文件/组件类解析为 SanSourceFile
     */
    parseSanSourceFile(componentClass: ComponentClass): DynamicSanSourceFile;
    parseSanSourceFile(fileDescriptor: FileDescriptor): TypedSanSourceFile;
    parseSanSourceFile(input: CompileInput): SanSourceFile;
    /**
     * 编译成当前 JavaScript 进程里的 render 函数
     *
     *  * `target` 固定为 "js"
     *  * `options.bareFunction` 固定为 true
     */
    compileToRenderer(componentClass: ComponentConstructor<{}, any>, options?: ToJSCompileOptions): Renderer;
    /**
     * 输出工具库：组件渲染时需要使用的公共工具。
     */
    emitHelpers(target: string, options?: any): string;
    getCompilerOptionsOrThrow(): import("typescript").CompilerOptions;
    getOrCreateCompilerInstance<T extends Compiler = Compiler>(target: string | CompilerClass<T>): T;
    loadCompilerClass(target: string | CompilerClass): any;
}
export {};
