"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isJSSanSourceFile = exports.isTypedSanSourceFile = exports.TypedSanSourceFile = exports.JSSanSourceFile = exports.DynamicSanSourceFile = exports.SanSourceFileImpl = void 0;
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default('san-source-file');
/**
 * 一个 San 项目中的源文件
 *
 * 是 TypeScript SourceFile 的封装，但包含组件信息
 */
class SanSourceFileImpl {
    constructor(
    /**
     * 每个组件对应一个 ComponentInfo，它们可以在运行时互相调用，是平铺关系
     */
    componentInfos, 
    /**
     * componentInfos 中作为入口组件的那个
     * - 对于 TypeScript 解析来的组件，是默认导出的组件
     * - 对于 ComponentClass 解析来的组件，是根组件
     */
    entryComponentInfo) {
        this.componentInfos = componentInfos;
        this.entryComponentInfo = entryComponentInfo;
    }
}
exports.SanSourceFileImpl = SanSourceFileImpl;
class DynamicSanSourceFile extends SanSourceFileImpl {
    constructor(componentInfos, filePath, entryComponentInfo) {
        super(componentInfos, entryComponentInfo);
        this.filePath = filePath;
        this.entryComponentInfo = entryComponentInfo;
    }
    getFilePath() {
        return this.filePath;
    }
}
exports.DynamicSanSourceFile = DynamicSanSourceFile;
class JSSanSourceFile extends SanSourceFileImpl {
    constructor(filePath, fileContent, componentInfos, entryComponentInfo) {
        super(componentInfos, entryComponentInfo);
        this.filePath = filePath;
        this.fileContent = fileContent;
        this.entryComponentInfo = entryComponentInfo;
    }
    getFilePath() {
        return this.filePath;
    }
    getFileContent() {
        return this.fileContent;
    }
}
exports.JSSanSourceFile = JSSanSourceFile;
class TypedSanSourceFile extends SanSourceFileImpl {
    constructor(componentInfos, tsSourceFile, entryComponentInfo) {
        super(componentInfos, entryComponentInfo);
        this.tsSourceFile = tsSourceFile;
    }
    getFilePath() {
        return this.tsSourceFile.getFilePath();
    }
    /**
     * 遍历组件类声明
     */
    *getComponentClassDeclarations() {
        for (const info of this.componentInfos) {
            yield info.classDeclaration;
        }
    }
}
exports.TypedSanSourceFile = TypedSanSourceFile;
function isTypedSanSourceFile(sourceFile) {
    return Object.prototype.hasOwnProperty.call(sourceFile, 'tsSourceFile');
}
exports.isTypedSanSourceFile = isTypedSanSourceFile;
function isJSSanSourceFile(sourceFile) {
    return !isTypedSanSourceFile(sourceFile) && Object.prototype.hasOwnProperty.call(sourceFile, 'fileContent');
}
exports.isJSSanSourceFile = isJSSanSourceFile;
//# sourceMappingURL=san-source-file.js.map