"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.componentID = exports.DynamicComponentReference = exports.ComponentReference = void 0;
/**
 * 表示一个组件的引用，被引用组件可能在当前文件，也可能在外部文件。例如：
 *
 * // ComponentReference { specifier: './b.san', id: 'default' }
 * import AComponent from './b.san'
 *
 * // ComponentReference { specifier: './b.san', id: 'AComponent' }
 * import { AComponent } from './b.san'
 */
class ComponentReference {
    constructor(
    /**
     * 组件所在源文件的相对路径
     */
    specifier, 
    /**
     * 组件在所属 SanSourceFile 中的唯一标识，用来文件间引用组件。
     *
     * - 默认导出为的 ID 为 default，包括 module.exports = Component, export default Component
     * - 其他导出的 ID 为 class 名，对于 ComponentClass（没有 Class 名）为递增数字
     * - ID 是语言无关的。不可直接用于目标语言文件中的标识符，后者需要解决名字冲突和标识符合法性的问题，是语言相关的。
     */
    id) {
        this.specifier = specifier;
        this.id = id;
    }
    toString() {
        const { specifier, id } = this;
        return `{specifier: "${specifier}", id: "${id}"}`;
    }
}
exports.ComponentReference = ComponentReference;
/**
 * ComponentReference 的特型，用于 ComponentClassParser
 */
class DynamicComponentReference extends ComponentReference {
    constructor(specifier, id, 
    /**
     * 从 ComponentClass 解析时，可以引用到子组件的 ComponentClass
     */
    componentClass) {
        super(specifier, id);
        this.specifier = specifier;
        this.id = id;
        this.componentClass = componentClass;
    }
}
exports.DynamicComponentReference = DynamicComponentReference;
function componentID(isDefault, genID) {
    return isDefault ? 'default' : (typeof genID === 'function' ? genID() : genID);
}
exports.componentID = componentID;
//# sourceMappingURL=component-reference.js.map