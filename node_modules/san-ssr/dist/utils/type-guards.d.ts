import { ExprNode, ExprNullNode, ExprObjectNode, ExprArrayNode, ExprStringNode, ExprNumberNode, ExprBoolNode, ExprAccessorNode, ExprInterpNode, ExprCallNode, ExprTextNode, ExprBinaryNode, ExprUnaryNode, ExprTertiaryNode, ANode, AIfNode, AForNode, ASlotNode, ATextNode, ATemplateNode, AFragmentNode } from 'san';
export declare function isExprUnaryNode(node: ExprNode): node is ExprUnaryNode;
export declare function isExprStringNode(node: ExprNode): node is ExprStringNode;
export declare function isExprNumberNode(node: ExprNode): node is ExprNumberNode;
export declare function isExprBoolNode(node: ExprNode): node is ExprBoolNode;
export declare function isExprAccessorNode(node: ExprNode): node is ExprAccessorNode;
export declare function isExprInterpNode(node: ExprNode): node is ExprInterpNode;
export declare function isExprCallNode(node: ExprNode): node is ExprCallNode;
export declare function isExprTextNode(node: ExprNode): node is ExprTextNode;
export declare function isExprBinaryNode(node: ExprNode): node is ExprBinaryNode;
export declare function isExprTertiaryNode(node: ExprNode): node is ExprTertiaryNode;
export declare function isExprArrayNode(node: ExprNode): node is ExprArrayNode;
export declare function isExprObjectNode(node: ExprNode): node is ExprObjectNode;
export declare function isExprNullNode(node: ExprNode): node is ExprNullNode;
export declare function isASlotNode(aNode: ANode): aNode is ASlotNode;
export declare function isAIfNode(aNode: ANode): aNode is AIfNode;
export declare function isAForNode(aNode: ANode): aNode is AForNode;
export declare function isATextNode(aNode: ANode): aNode is ATextNode;
export declare function isATemplateNode(aNode: ANode): aNode is ATemplateNode;
export declare function isAFragmentNode(aNode: ANode): aNode is AFragmentNode;
