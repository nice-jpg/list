"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAFragmentNode = exports.isATemplateNode = exports.isATextNode = exports.isAForNode = exports.isAIfNode = exports.isASlotNode = exports.isExprNullNode = exports.isExprObjectNode = exports.isExprArrayNode = exports.isExprTertiaryNode = exports.isExprBinaryNode = exports.isExprTextNode = exports.isExprCallNode = exports.isExprInterpNode = exports.isExprAccessorNode = exports.isExprBoolNode = exports.isExprNumberNode = exports.isExprStringNode = exports.isExprUnaryNode = void 0;
const san_1 = require("san");
/*
 * TypeGuards for Expression Node
 */
function isExprUnaryNode(node) {
    return node.type === san_1.ExprType.UNARY;
}
exports.isExprUnaryNode = isExprUnaryNode;
function isExprStringNode(node) {
    return node.type === san_1.ExprType.STRING;
}
exports.isExprStringNode = isExprStringNode;
function isExprNumberNode(node) {
    return node.type === san_1.ExprType.NUMBER;
}
exports.isExprNumberNode = isExprNumberNode;
function isExprBoolNode(node) {
    return node.type === san_1.ExprType.BOOL;
}
exports.isExprBoolNode = isExprBoolNode;
function isExprAccessorNode(node) {
    return node.type === san_1.ExprType.ACCESSOR;
}
exports.isExprAccessorNode = isExprAccessorNode;
function isExprInterpNode(node) {
    return node.type === san_1.ExprType.INTERP;
}
exports.isExprInterpNode = isExprInterpNode;
function isExprCallNode(node) {
    return node.type === san_1.ExprType.CALL;
}
exports.isExprCallNode = isExprCallNode;
function isExprTextNode(node) {
    return node.type === san_1.ExprType.TEXT;
}
exports.isExprTextNode = isExprTextNode;
function isExprBinaryNode(node) {
    return node.type === san_1.ExprType.BINARY;
}
exports.isExprBinaryNode = isExprBinaryNode;
function isExprTertiaryNode(node) {
    return node.type === san_1.ExprType.TERTIARY;
}
exports.isExprTertiaryNode = isExprTertiaryNode;
function isExprArrayNode(node) {
    return node.type === san_1.ExprType.ARRAY;
}
exports.isExprArrayNode = isExprArrayNode;
function isExprObjectNode(node) {
    return node.type === san_1.ExprType.OBJECT;
}
exports.isExprObjectNode = isExprObjectNode;
function isExprNullNode(node) {
    return node.type === san_1.ExprType.NULL;
}
exports.isExprNullNode = isExprNullNode;
/*
 * TypeGuards for ANode
 */
function isASlotNode(aNode) {
    return aNode.tagName === 'slot';
}
exports.isASlotNode = isASlotNode;
function isAIfNode(aNode) {
    return !!aNode.directives.if;
}
exports.isAIfNode = isAIfNode;
function isAForNode(aNode) {
    return !!aNode.directives.for;
}
exports.isAForNode = isAForNode;
function isATextNode(aNode) {
    return !!aNode.textExpr;
}
exports.isATextNode = isATextNode;
function isATemplateNode(aNode) {
    return aNode.tagName === 'template';
}
exports.isATemplateNode = isATemplateNode;
function isAFragmentNode(aNode) {
    return aNode.tagName === 'fragment';
}
exports.isAFragmentNode = isAFragmentNode;
//# sourceMappingURL=type-guards.js.map