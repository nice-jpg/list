"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepEqual = exports.compareSanHTML = exports.assertDeepEqual = exports.assertSanHTMLEqual = exports.parseSanHTML = void 0;
/**
 * san ssr 测试样例工具，包括：
 *
 * - 数据部分的提取
 * - HTML 部分的判等
 * - 顺序无关的数据对象比较
 */
const debug_1 = __importDefault(require("debug"));
const debug = debug_1.default('case');
function parseSanHTML(str) {
    const begin = str.indexOf('<!--s-data:');
    let data = {};
    let html = str;
    if (begin !== -1) {
        const end = str.indexOf('-->', begin);
        if (end !== -1) {
            // eslint-disable-next-line no-new-func
            data = (new Function('return ' + str.slice(begin + 11, end)))();
            html = str.slice(0, begin) + str.slice(end + 3);
        }
    }
    return [data, html];
}
exports.parseSanHTML = parseSanHTML;
function assertSanHTMLEqual(expected, got) {
    const result = compareSanHTML(expected, got);
    if (result) {
        throw new Error(result);
    }
}
exports.assertSanHTMLEqual = assertSanHTMLEqual;
function assertDeepEqual(lhs, rhs) {
    if (!deepEqual(lhs, rhs)) {
        const msg = `San Data not equal, Expected:\n${JSON.stringify(lhs)}\nReceived\n${JSON.stringify(rhs)}`;
        throw new Error(msg);
    }
}
exports.assertDeepEqual = assertDeepEqual;
/**
 * San HTML 数据和 DOM 部分比较（不依赖 Object key 顺序）
 *
 * @returns 相等时返回空（undefined），不相等时返回信息（比如 "data not equal"）
 */
function compareSanHTML(expected, got) {
    const [data0, html0] = parseSanHTML(expected);
    const [data1, html1] = parseSanHTML(got);
    if (!deepEqual(data0, data1)) {
        return 'data not equal';
    }
    if (html0 !== html1) {
        return 'html not equal';
    }
}
exports.compareSanHTML = compareSanHTML;
function deepEqual(lhs, rhs) {
    if (!isObject(lhs))
        return lhs === rhs;
    if (!isObject(rhs))
        return false;
    const keys = new Set([...Object.keys(lhs), ...Object.keys(rhs)]);
    for (const key of keys) {
        if (!deepEqual(lhs[key], rhs[key]))
            return false;
    }
    return true;
}
exports.deepEqual = deepEqual;
function isObject(val) {
    return typeof val === 'object' && val !== null;
}
//# sourceMappingURL=case.js.map