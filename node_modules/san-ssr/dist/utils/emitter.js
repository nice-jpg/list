"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Emitter = void 0;
class Emitter {
    constructor(shiftWidth = 4) {
        this.indentLevel = 0;
        this.code = '';
        this.shiftWidth = shiftWidth;
    }
    fullText() {
        return this.code;
    }
    indent() {
        this.indentLevel++;
    }
    unindent() {
        this.indentLevel--;
    }
    writeNewLine() {
        this.write('\n');
    }
    nextLine(str) {
        for (const line of str.split('\n')) {
            this.carriageReturn();
            this.write(line);
        }
    }
    feedLine(str) {
        let first = true;
        for (const line of str.split('\n')) {
            if (!first)
                this.carriageReturn();
            first = false;
            this.write(line);
        }
        this.writeNewLine();
    }
    writeLine(str) {
        for (const line of str.split('\n')) {
            this.carriageReturn();
            this.write(line);
        }
        this.writeNewLine();
    }
    writeLines(str) {
        for (const line of str.trim().split('\n')) {
            this.carriageReturn();
            this.write(line);
            this.writeNewLine();
        }
    }
    writeIndentedLines(str) {
        this.indent();
        this.writeLines(str);
        this.unindent();
    }
    carriageReturn() {
        if (!this.atLineBegin())
            this.writeNewLine();
        for (let i = 0; i < this.indentLevel * this.shiftWidth; i++) {
            this.write(' ');
        }
    }
    defaultWrite(str) {
        this.code += str;
    }
    atLineBegin() {
        if (!this.size())
            return true;
        return this.lastChar() === '\n';
    }
    size() {
        return this.code.length;
    }
    lastChar() {
        return this.code[this.size() - 1];
    }
}
exports.Emitter = Emitter;
//# sourceMappingURL=emitter.js.map