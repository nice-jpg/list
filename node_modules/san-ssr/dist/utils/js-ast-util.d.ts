import { MethodDefinition, ExportDefaultDeclaration, ImportDeclaration, Property, BinaryExpression, ClassExpression, ClassDeclaration, ThisExpression, ExpressionStatement, TemplateLiteral, Literal, Identifier, MemberExpression, ArrayExpression, CallExpression, ObjectExpression, Node, Program, Pattern, VariableDeclaration, ObjectPattern, Class, AssignmentExpression, Expression, ImportSpecifier, ImportDefaultSpecifier, VariableDeclarator } from 'estree';
export declare function filterByType(node: Node, type: 'VariableDeclaration'): VariableDeclaration[];
export declare function filterByType(node: Node, type: 'ImportDeclaration'): ImportDeclaration[];
export declare function getRequireSpecifier(node: Node): string;
export declare function isRequireSpecifier(node: Expression, spec: string): boolean;
export declare function isModuleExports(node: Node): boolean;
export declare function isExportsMemberExpression(expr: Pattern): boolean;
export declare function findScriptRequires(node: Node): Generator<[string, string, string]>;
export declare function findESMImports(root: Node): Generator<[string, string, string]>;
/**
 * 找到每个 localName 对应的 exportName。
 */
export declare function findExportNames(root: Program): [string, string][];
export declare function getStringArrayValue(expr: Node): any[];
export declare function getMembersFromClassDeclaration(expr: Class): Generator<[string, Node]>;
export declare function getConstructor(expr: Class): undefined | MethodDefinition;
export declare function addStringPropertyForObject(expr: ObjectExpression, key: string, value: string): void;
export declare function getPropertyFromObject(obj: ObjectExpression | ObjectPattern, propertyName: string): Node | undefined;
export declare function getPropertiesFromObject(obj: ObjectExpression | ObjectPattern): Generator<[string, Node]>;
export declare function isClass(node: Node): node is Class;
export declare function getClassName(node: Node): string;
export declare function getStringValue(node: Expression): any;
export declare function getLiteralValue(node: Node): any;
export declare function getMemberAssignmentsTo(program: Program, objName: string): [string, Node][];
export declare function location(node: Node): string;
export declare function findDefaultExport(node: Program): undefined | Node;
export declare function isRequire(node: Node): node is CallExpression;
export declare function isMemberExpression(expr: Node): expr is MemberExpression;
export declare function isBinaryExpression(expr: Node): expr is BinaryExpression;
export declare function isIdentifier(expr: Node): expr is Identifier;
export declare function isTemplateLiteral(expr: Node): expr is TemplateLiteral;
export declare function isLiteral(expr: Node): expr is Literal;
export declare function isVariableDeclaration(expr: Node): expr is VariableDeclaration;
export declare function isVariableDeclarator(expr: Node): expr is VariableDeclarator;
export declare function isCallExpression(expr: Node): expr is CallExpression;
export declare function isObjectPattern(expr: Node): expr is ObjectPattern;
export declare function isObjectExpression(expr: Node): expr is ObjectExpression;
export declare function isImportDefaultSpecifier(expr: Node): expr is ImportDefaultSpecifier;
export declare function isImportSpecifier(expr: Node): expr is ImportSpecifier;
export declare function isExpressionStatement(expr: Node): expr is ExpressionStatement;
export declare function isAssignmentExpression(expr: Node): expr is AssignmentExpression;
export declare function isThisExpression(expr: Node): expr is ThisExpression;
export declare function isClassDeclaration(expr: Node): expr is ClassDeclaration;
export declare function isClassExpression(expr: Node): expr is ClassExpression;
export declare function isProperty(expr: Node): expr is Property;
export declare function isExportDefaultDeclaration(node: Node): node is ExportDefaultDeclaration;
export declare function isArrayExpression(expr: Node): expr is ArrayExpression;
export declare function assertProperty(expr: Node): asserts expr is Property;
export declare function assertLiteral(expr: Node): asserts expr is Literal;
export declare function assertIdentifier(expr: Node): asserts expr is Identifier;
export declare function assertArrayExpression(expr: Node): asserts expr is ArrayExpression;
export declare function assertObjectExpression(expr: Node): asserts expr is ObjectExpression;
export declare function assertVariableDeclarator(expr: Node): asserts expr is VariableDeclarator;
