/**
 * @file send error
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */

// @ts-ignore
import H5ErrLogInstance from '@baidu/ug-error-log';
// @ts-ignore
import Url from 'url-parse';
import qs from 'query-string';
import {InnerInvokeConfig} from '../../api/invokeApp';
import {Status} from '../../config/Status';

H5ErrLogInstance.init({
    url: 'https://activity.baidu.com/activity/felog/log',
    app: 'ug-invoke-app_prod02',
    watch: false,
});

export function getRandomNumber() {
    return Math.floor(100 * Math.random());
}

// 当次调起  是否命中抽样
// query上_uia_h=1参数优先级最高
// 或者计算抽样比例
export function isHit(statRatio: number) {
    let url = new Url(window.location.href);
    let query = qs.parse(url.query) || {};
    return query._uia_h === '1' || getRandomNumber() < statRatio;
}

/**
 *
 *
 * ug-invoke-app行为统计打点
 * 尝试调起
 * 异常报错
 * 调起成功、失败、应用商店等
 * status必须传，其他的会根据invokeapp第一次进入的时候的缓存发出
 * 如果有单次覆盖参数，可以在这个方法里传，不影响缓存
 *
 *
 */
export function sendH5ErrLog(options: InnerInvokeConfig, status: Status, useSendBeacon = true) {
    if (options.isHitStat) {
        // 前面这三个不需要打点了
        const {marketScheme, isHitStat, pkgName, ...rest} = options;
        const uiaVer = (window as any).__UIA_VERSION__ || '-';
        H5ErrLogInstance.send({
            ...rest,
            uiaVer,
            /* eslint-disable */
            _uia_status: status,
            /* eslint-enable */
        }, useSendBeacon);
    }
}
