/**
 * @file execInvoke index
 * @author zhuzhibo(zhuzhibo@baidu.com)
 */
import {Status} from '../config/Status';
import {IS_ANDROID, IS_IOS} from '../utils/detect/os';
import {matchedUlink} from '../config/rules/invokeTypeRules';
import {isDeeplinkApp} from '../config/app/deeplinkConfigMap';
import {openYYB} from '../utils/invoke/openYYB';
import {checkNotTryJump} from '../utils/invoke/checkNotTryJump';
import {invokeWithType} from '../utils/invoke/invokeWithType';
import {naDeeplink} from '../utils/invoke/naDeeplink';
import {InvokeType} from '../config/app/InvokeType';
import {handleInvokeFailed} from '../utils/invoke/handleInvokeFailed';
import {InnerInvokeConfig} from './invokeApp';
import {sendH5ErrLog} from '../utils/log/errorLog';
import {execCopy} from '../utils/copy/execCopy';


export async function execInvoke(options: InnerInvokeConfig): Promise<Status> {
    // 开始 尝试调起！打点！
    // 复制口令可能失败，也要算到尝试调起的结果中
    // 所以这里要提到最前
    sendH5ErrLog(options, Status.TRY_JUMP);
    // 处理口令
    if (options.token) {
        await execCopy(options);
    }
    const {browser, appName, os} = options;
    // 安卓和ios才有调起的意义
    // 其他系统直接报错就行了
    if (IS_IOS || IS_ANDROID) {
        // 应用宝调起
        if (IS_ANDROID && options.toYYB && browser === 'wechat') {
            console.warn('进入应用宝调起流程！');
            return openYYB(options);
        }
        // deeplink调起
        else if (options.useDeeplink && /baidu\.com/i.test(location.href) && isDeeplinkApp(browser)) {
            console.warn('进入naDeeplink调起流程！');
            return naDeeplink(options, browser);
        }
        // 黑名单浏览器不尝试调起，注意这里的notTryJump行为，本意上因为知道无法成功调起，所以不做操作直接调起失败
        else if (options.useNotTryList && checkNotTryJump(browser, appName, os)) {
            console.warn('notTryJump: true,直接进入失败调起流程！');
            return handleInvokeFailed(options, InvokeType.NOT_TRY);
        }
        // ulink调起
        else if (options.ulink && matchedUlink(browser, appName)) {
            return invokeWithType(options, InvokeType.ULINK);
        }
        // scheme调起
        return invokeWithType(options, InvokeType.SCHEME);
    }
    return Promise.reject(Status.NOT_SUPPORT_SYSTEM);
}
