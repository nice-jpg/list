/**
 * @file: utils.js
 * @des: 通用方法库
 * @author: zhangjiaqi03
 * @date: 2020-08-17 17:30:44
 * @last modified by:   zhangjiaqi03
 * @last modified time: 2020-08-17 17:30:44
 */

/**
 * 将给定对象转成序列化的 queryString
 *
 * @param {Object} query 待转换对象
 * @return {string} queryString
 */
export function toQueryString(query) {
    const search = Object.keys(query)
        .reduce((res, key) => {
            const value = query[key];
            res += '&' + key + '=' + encodeURIComponent(value);
            return res;
        }, '');
    return search.slice(1);
}

/**
 * 生成一个随机id
 *
 * @return {string} id
 */
export function getId() {
    let str = '';
    const dict = 'abcdefghijklmnopqrstuvwxyz01234567890';
    for (let i = 0, length = 8; i < length; ++i) {
        str += dict[Math.floor(Math.random() * dict.length)];
    }
    return str;
}

/**
 * formatParams
 * copy from ug-swan-logger
 * @param {Object} params params入参
 *
 * @returns {Object} 返回转化后数据
*/
export function formatParams(params) {
    let tmp = {...params};
    // 遍历params参数 保证最终传参都是string
    Object.keys(tmp).forEach(key => {
        let param = tmp[key];
        if (!param || typeof param === 'string') {
            return;
        }
        let paramType = customTypeof(param);
        // Error
        if (paramType === 'error') {
            tmp[key] = JSON.stringify(param, Object.getOwnPropertyNames(param));
        }
        // Event
        else if (paramType === 'event') {
            let type = param.target.localName;
            let link = '';
            switch (param.target.localName) {
                case 'script': // 脚本加载报错
                    link = param.target.src;
                    break;
                case 'link': // 样式文件加载报错
                    link = param.target.href;
                    break;
                case 'img': // 图片加载报错
                    link = param.target.src;
                    break;
            }
            tmp[key] = JSON.stringify({
                type,
                link,
            });
        }
        // ErrorEvent
        else if (paramType === 'errorevent') {
            tmp[key] = JSON.stringify({
                error: customTypeof(param.error) === 'error'
                    ? JSON.stringify(param.error, Object.getOwnPropertyNames(param.error))
                        : 'errorevent',
                colno: param.colno ?? '',
                lineno: param.lineno ?? '',
                message: param.message || '',
            });
        }
        else {
            tmp[key] = JSON.stringify(param);
        }
    });
    return tmp;
};

/**
 * customTypeof
 * @param {any} obj 待检测类型的数据
 *
 * @returns {string} 数据类型字符串
*/
export function customTypeof(obj) {
    return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
}
