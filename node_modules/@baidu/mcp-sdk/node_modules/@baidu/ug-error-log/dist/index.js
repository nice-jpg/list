/**
 * @file: utils.js
 * @des: 通用方法库
 * @author: zhangjiaqi03
 * @date: 2020-08-17 17:30:44
 * @last modified by:   zhangjiaqi03
 * @last modified time: 2020-08-17 17:30:44
 */

/**
 * 将给定对象转成序列化的 queryString
 *
 * @param {Object} query 待转换对象
 * @return {string} queryString
 */
function toQueryString(query) {
  const search = Object.keys(query).reduce((res, key) => {
    const value = query[key];
    res += '&' + key + '=' + encodeURIComponent(value);
    return res;
  }, '');
  return search.slice(1);
}
/**
 * 生成一个随机id
 *
 * @return {string} id
 */

function getId() {
  let str = '';
  const dict = 'abcdefghijklmnopqrstuvwxyz01234567890';

  for (let i = 0, length = 8; i < length; ++i) {
    str += dict[Math.floor(Math.random() * dict.length)];
  }

  return str;
}
/**
 * formatParams
 * copy from ug-swan-logger
 * @param {Object} params params入参
 *
 * @returns {Object} 返回转化后数据
*/

function formatParams(params) {
  let tmp = { ...params
  }; // 遍历params参数 保证最终传参都是string

  Object.keys(tmp).forEach(key => {
    let param = tmp[key];

    if (!param || typeof param === 'string') {
      return;
    }

    let paramType = customTypeof(param); // Error

    if (paramType === 'error') {
      tmp[key] = JSON.stringify(param, Object.getOwnPropertyNames(param));
    } // Event
    else if (paramType === 'event') {
        let type = param.target.localName;
        let link = '';

        switch (param.target.localName) {
          case 'script':
            // 脚本加载报错
            link = param.target.src;
            break;

          case 'link':
            // 样式文件加载报错
            link = param.target.href;
            break;

          case 'img':
            // 图片加载报错
            link = param.target.src;
            break;
        }

        tmp[key] = JSON.stringify({
          type,
          link
        });
      } // ErrorEvent
      else if (paramType === 'errorevent') {
          var _param$colno, _param$lineno;

          tmp[key] = JSON.stringify({
            error: customTypeof(param.error) === 'error' ? JSON.stringify(param.error, Object.getOwnPropertyNames(param.error)) : 'errorevent',
            colno: (_param$colno = param.colno) !== null && _param$colno !== void 0 ? _param$colno : '',
            lineno: (_param$lineno = param.lineno) !== null && _param$lineno !== void 0 ? _param$lineno : '',
            message: param.message || ''
          });
        } else {
          tmp[key] = JSON.stringify(param);
        }
  });
  return tmp;
}
/**
 * customTypeof
 * @param {any} obj 待检测类型的数据
 *
 * @returns {string} 数据类型字符串
*/

function customTypeof(obj) {
  return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
}

/**
 * @file: index.js
 * @des: 用户增长h5错误日志打点库
 * @author: zhangjiaqi03
 * @date: 2020-08-17 17:20:40
 * @last modified by:   zhangjiaqi03
 * @last modified time: 2020-08-17 17:20:40
 */
const DEFAULT_CONFIG = {
  // 业务标识
  app: '',
  // 上报地址
  url: 'https://activity.baidu.com/activity/felog/error',
  // 监听页面错误，自动上报
  watch: true
};
/**
 * H5错误打点类
 */

class H5ErrLog {
  /**
   * 原型
   */
  constructor() {
    // 配置
    this.config = {}; // 参数是否校验通过

    this.isCheckedParams = true;
  }
  /**
   * 初始化配置
   *
   * @param {Object} config 初始化配置
   * @returns {void}
   */


  init(config = {}) {
    this.config = Object.assign({}, DEFAULT_CONFIG, config);

    if (!this.config.app) {
      this.isCheckedParams = false;
      console.error('[h5-error-log]: app参数必填~');
      return;
    } // 重置isCheckedParams，防止多次init


    this.isCheckedParams = true;

    if (this.config.watch) {
      this.watch();
    }

    delete this.config.watch;
  }
  /**
   * 监控页面报错并上报
   *
   * @returns {void}
   */


  watch() {
    window.addEventListener('error', e => {
      this.send({
        level: 'error',
        type: 'page',
        content: e
      });
    }, true); // 捕获为catch的异步错误

    window.addEventListener('unhandledrejection', event => {
      event.preventDefault();
      this.send({
        level: 'unhandledrejection',
        type: 'page',
        content: event.reason
      });
    });
  }
  /**
   * 日志发送
   *
   * @param {Object} errInfo 错误信息入参
   * @param {string} errInfo.level 日志等级 info/error
   * @param {string} errInfo.type 日志类型 net/app/api/...等
   * @param {string} errInfo.content 日志错误信息
   * @param {Object} errInfo.ext 日志额外信息
   * @param {string} errInfo.ext.errmsg 日志额外信息字符串
   * @param {boolean} useSendbeacon 使用Sendbeacon发送日志，默认关闭
   *
   * @returns {void}
   */


  send(errInfo = {
    level: 'info',
    type: '-',
    content: '-',
    ext: {
      errmsg: ''
    }
  }, useSendbeacon = false) {
    if (!this.isCheckedParams) {
      console.error('[h5-error-log]: 参数校验失败，请检查init参数');
      return;
    }

    let data = { ...this.config,
      ...errInfo
    };
    data.h5 = '1';
    delete data.url;
    let queryString = toQueryString(formatParams(data)); // 如果sendBeacon失败则使用loadImage方式

    if (!useSendbeacon || useSendbeacon && !this.sendBeacon(queryString)) {
      this.loadImage(queryString);
    }
  }
  /**
   * 发送图片请求
   *
   * @param {string} query 拼接成get请求字符串
   *
   * @returns {void}
   */


  loadImage(query) {
    let img = new Image();
    let imgId = '_img_' + getId();
    window[imgId] = img;

    img.onload = img.onerror = img.onabort = function () {
      img = img.onload = img.onerror = img.onabort = null;
      delete window[imgId];
    };

    img.src = this.config.url + '?' + query;
  }
  /**
   * 通过sendBeacon发送请求
   * @param {string} query 拼接成请求字符串
   *
   * @returns {void}
   */


  sendBeacon(query) {
    if ('sendBeacon' in navigator) {
      return navigator.sendBeacon(`${this.config.url}?${query}`);
    }

    return false;
  }

} // 默认导出new好的实例


var index = new H5ErrLog(); // 导出构造函数

export { H5ErrLog, index as default };
