import { H5ErrLog } from './index';
import { UbcLogger } from '@baidu/ubc-report-sdk';

/**
 * @file: performanceLog
 * @des: H5性能打点
 * @author: zhenghaiwang
 * @date: 2021-08-16 13:54:16
 * @last modified by:   zhenghaiwang
 * @last modified time: 2021-08-16 13:54:16
 */

const errorLogger = new H5ErrLog();
errorLogger.init({
  watch: false,
  app: 'performance'
});
const DEFAULT_CONFIG = {
  app: 'default',
  debugger: false
}; // 默认发送的参数字段

const defaultKeys = ['first', 'FP', 'FCP', 'FMP', 'TTI', 'timestamp'];
/**
 * 性能打点类
 */

class PerformanceLog {
  /**
   * 原型
   *
   * @param {Object} data 初始化数据
   */
  constructor(data = {}) {
    // 配置，目前只需传递活动标识
    this.config = {}; // 自定义数据

    this.customData = { ...data
    }; // 是否为第一次进入页面 0 非首次、1首次

    this.first = 0;
    this.allPerformanceTime = {
      FP: 0,
      FCP: 0,
      FMP: 0,
      TTI: 0,
      timestamp: 0
    };
  }

  /**
   * 初始化性能打点数据
   *
   * @param {Object} config 初始化配置
   * @param {String} config.page 活动名称，用户性能报表检索
   *
   * @returns {void}
   */
  init(config = {}) {
    this.config = Object.assign({}, DEFAULT_CONFIG, config);

    if (!this.config.page) {
      console.error('[h5-performanceLog]: app参数必填,否则报表无法拿到数据');
      return;
    }
  }
  /**
   * 初始化各个节点时间戳并做各节点数据处理（内部调用)
   *
   * @returns {void}
   */


  formatData() {
    if (window.performanceTime && Object.prototype.toString.call(window.performanceTime) === '[object Object]') {
      const performanceTime = window.performanceTime;
      const startTimeStamp = window.performance.timing.navigationStart;
      this.allPerformanceTime = {
        FP: performanceTime.FPTimeStamp ? performanceTime.FPTimeStamp - startTimeStamp : -1,
        FCP: performanceTime.FCPTimeStamp ? performanceTime.FCPTimeStamp - startTimeStamp : -1,
        FMP: performanceTime.FMPTimeStamp ? performanceTime.FMPTimeStamp - startTimeStamp : -1,
        TTI: performanceTime.TTITimeStamp ? performanceTime.TTITimeStamp - startTimeStamp : -1,
        timestamp: `${startTimeStamp}_${performanceTime.FPTimeStamp}_${performanceTime.FCPTimeStamp}_${performanceTime.FMPTimeStamp}_${performanceTime.TTITimeStamp}`
      };
    } else {
      console.error('[h5-performanceLog]: 性能数据未定义，请检查模板数据');
    }
  }
  /**
   * 设置自定义参数
   *
   * @param {Object} customData 自定义数据，注意不能与库内字段相同，否则整体都不会在打点数据里添加
   *
   * @returns {void}
   */


  setCustomData(customData = {}) {
    let dataKeys = Object.keys(customData);
    let intersection = dataKeys.filter(k => defaultKeys.includes(k));

    if (intersection.length) {
      console.warn('[h5-performanceLog]', `设置自定义数据失败, 与默认字段'${intersection.toString()}'冲突，不生效`);
      return;
    }

    this.customData = { ...this.customData,
      ...customData
    };
  }
  /**
   * 是否第一次进入本页面
   *
   * @returns {void}
   */


  setIsFristEnter() {
    const first = window.localStorage.getItem(`${this.config.page}_first`);

    try {
      if (!first) {
        // 如果用户之前没进入过，也就是没有设置过first,拿到的null
        window.localStorage.setItem(`${this.config.page}_first`, '0'); //

        this.first = 1;
      }
    } catch (e) {
      console.warn('[h5-performanceLog]', `设置是否第一次进入失败，失败原因${e.toString()}`);
    }
  }
  /**
   * 发送打点数据
   *
   * @param {Function} callback 用户执行完打点之后，增加自己想做的事
   * 目前的需求是增加ubc自定义打点，还没想好是本库增加还是业务自己做，所以先暴露回调
   *
   * @returns {void}
   */


  send(callback) {
    if (!this.config.page) {
      console.error('[h5-performanceLog]: app参数必填,否则报表无法拿到数据');
      return;
    } // 先设置用户是否进入过此页面


    this.setIsFristEnter(); // 整合数据为最后发送做准备

    this.formatData(); // 将三部分数据整合

    const ext = {
      page: this.config.page,
      first: this.first,
      ...this.allPerformanceTime,
      ...this.customData
    };

    if (this.config.debugger) {
      console.log('[h5-performanceLog]性能数据', ext);
    }

    errorLogger.send({
      level: 'info',
      type: 'performance',
      ext
    }); // 发送ubc打点日志

    const ubcLogger = new UbcLogger();
    ubcLogger.set({
      serverId: '13061',
      page: this.config.page,
      from: 'ugPerformance'
    });
    ubcLogger.send({
      type: 'H5',
      ext
    });
    callback && callback(ext);
  }

}
const performanceLogger = new PerformanceLog();

export { PerformanceLog, performanceLogger };
