/**
 * @file observeClick
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */

import {execInvoke} from '../execInvoke/index';
import {invokeConf} from '../api/getInvokeInfo';

/**
 * 监听targetNode的冒泡事件
 * 有mcpPosid的元素,监听到点击事件后
 * 通过invokeConf里的config来执行调起
 *
 * @param {HTMLElement} targetNode 要监听的祖先dom元素
 */
export function handleClick(targetNode) {
    targetNode.addEventListener('click', async e => {

        const node = e.target;
        const {
            mcpPosid,
            mcpPosIndex = 0,
            mcpConfig,
            mcpSuccess,
            mcpFailed
        } = node.dataset;

        const invokeInfo = mcpPosid && invokeConf?.[mcpPosid]?.[mcpPosIndex];
        // 拿不到信息，报错
        // 直接返回
        if (!invokeInfo) {
            console.log('none invokeInfo => posid: ' + mcpPosid + ', index: ' + mcpPosIndex);
            return;
        }

        try {
            await execInvoke(mcpPosid, invokeInfo);
            mcpSuccess && window[mcpSuccess]();
        }
        catch (e) {
            mcpFailed && window[mcpFailed]();
        }
    });
}
