/**
 * @file 检查点击是否命中退场及屏蔽策略
 * @author zhuzhibo(zhuzhibo@baidu.com)
 */
import ExpiredStorage from 'expired-storage';
import {getInvokeInfo} from '../../api/getInvokeInfo';
import {statusCode} from '../../config/statusCode';

const LOCAL_STORAGE_MARK = 'MCP_INVOKE_';

const expiredStorage = new ExpiredStorage();

/**
 * 检查点击调起是否有效，命中退场/屏蔽则无效
 *
 * @param  {string} posId 位置ID
 * @param  {Object} conf 调起conf，后端配置直接传入
 * @param  {Object} invokeInfo 其他调起相关信息（为后续需求变更留接口
 * @return {Object} result 返回值
 * @return {boolean} result.clickValid 是否有效
 * @return {Object} result.info 附带信息
 */
export function checkClickValid(posId, conf, invokeInfo = {}) {
    const clickInterval = conf?.click_interval;
    // clickInterval存在且不为零走退场判断逻辑
    if (clickInterval) {
        const exitInfo = getInfoFromLocalStorage(posId);
        if (clickInterval === -1) {
            // 此处情况直接调起，clickInterval无效不计入localStorage中
            // 点击的请求，需要发req_type= 1给后端做展现的策略退场
            /* eslint-disable */
            getInvokeInfo({posId, req_type: 1}, {});
            /* eslint-enable */
            return {
                clickValid: true
            };
        }
        // exitInfo存在，没有新的逻辑替换则退场
        if (exitInfo && (clickInterval * 60) === exitInfo.clickInterval) {
            return {
                clickValid: false,
                info: statusCode.EXITED
            };
        }
    }
    // 判断是否命中不调起策略
    if (isNotInvoke(conf)) {
        return {
            clickValid: false,
            info: statusCode.NOT_INVOkE
        };
    }
    // 其余情况不退场
    setInfoToLocalStorage(posId, invokeInfo, clickInterval * 60);
    return {
        clickValid: true
    };
}

/**
 * 获取退场信息
 *
 * @param  {string} posId 位置ID
 * @return {Object} 退场信息
 */
export function getExitInfo(posId) {
    let isExit = false;
    const exitInfo = getInfoFromLocalStorage(posId);
    const timeLeft = getTimeLeft(posId);
    if (exitInfo && timeLeft) {
        isExit = true;
    }
    return {
        isExit,
        timeLeft
    };
}

/**
 * 获取策略是否为不调起
 *
 * @param  {Object} conf 调起conf，后端配置直接传入
 * @return {boolean} 是否不调起
 */
export function isNotInvoke(conf) {
    return !Number(conf?.action_flag) > 0;
}

function setInfoToLocalStorage(posId, invokeInfo, expiration) {
    if (expiration === 0) {
        return;
    }
    const exitInfo = {
        posId,
        clickInterval: expiration,
        ...invokeInfo
    };
    expiredStorage.setJson(LOCAL_STORAGE_MARK + posId, exitInfo, expiration);
}

function getInfoFromLocalStorage(posId) {
    return expiredStorage.getJson(LOCAL_STORAGE_MARK + posId);
}

function getTimeLeft(posId) {
    return expiredStorage.getTimeLeft(LOCAL_STORAGE_MARK + posId);
}
