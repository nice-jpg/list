/**
 * @file 执行调起
 * @author zhuzhibo(zhuzhibo@baidu.com)
 */
import {invokeApp} from '@baidu/ug-invoke-app';
import {checkClickValid} from './tools/checkClickValid';
import {getCommonParams} from '../api/commonParams';
import {ubc} from '../index';

// 默认流程失败后不处理
let processConf = {
    toStore: false,
    failedUrl: ''
};

// 失败后处理方式
const failCodeMap = {
    1: 'appStore',
    2: 'failedUrl',
    3: 'defaultUrl'
};

/**
 * 执行调起
 *
 * @param  {string} posId 调起位的位置ID
 * @param  {Object} conf 调起conf，后端配置直接传入
 * @param  {string} conf.appName 需要调起的APP名称
 * @param  {string} conf.token 度口令
 * @param  {string} conf.scheme 调起需要用到的scheme
 * @param  {number} conf.click_interval 调起退场时间 单位分钟
 * @param  {number} conf.fail 调起失败后操作
 * @param  {string} conf.failedUrl 调起失败后跳转链接
 * @param  {string} logId 打点所需参数
 * @param  {Object=} extParam 业务所需其他参数
 * @return {Promise} 调起结果
 */
export async function execInvoke(posId, conf, logId, extParam = {}) {
    const checkResult = checkClickValid(posId, conf);
    if (!checkResult.clickValid) {
        return Promise.reject(checkResult.info);
    }
    switch (failCodeMap[conf.jump_id]) {
        case 'defaultUrl':
            processConf = {
                toStore: false,
                failedUrl: ''
            };
            break;
        case 'failedUrl':
            processConf = {
                toStore: false,
                failedUrl: conf.jump_url
            };
            break;
        case 'appStore':
            processConf = {
                toStore: true,
                failedUrl: conf.jump_url
            };
    }
    const commonParams = getCommonParams();
    // 打点参数预置
    const ubcParam = {
        page: commonParams.scene,
        ext: {
            p1: posId, // 位置id
            p2: logId, // 全链路识别id
            p3: conf.sid, // 实验id
            p4: conf.app_name, // 被调App
            p5: conf.channel_conf, // 渠道号串（包含调起&下载&剪贴板号）
            p6: 0, // 展现id
            p8: extParam // 附加信息
        }
    };
    ubc.send({
        type: 'try_jump',
        ...ubcParam
    });
    try {
        const status = await invokeApp({
            appName: conf.app_name,
            token: conf.token,
            scheme: conf.scheme,
            toStore: processConf.toStore,
            failedUrl: processConf.failedUrl,
            checkTokenCopied: false
        });
        const IS_IOS = /(iPhone|iPod|iPad|Macintosh)/i.test(navigator.userAgent);
        if (!IS_IOS) {
            // 打点
            switch (status) {
                case 10000:
                    ubc.send({
                        type: 'done_jump',
                        ...ubcParam
                    });
                    break;
                case 10001:
                    ubc.send({
                        type: 'go_store',
                        ...ubcParam
                    });
                    break;
                case 10004:
                    ubc.send({
                        type: 'go_failed_url',
                        ...ubcParam
                    });
                    break;
            }
        }
        return Promise.resolve({status});
    }
    catch (status) {
        ubc.send({
            type: 'jump_go_failed',
            ...ubcParam
        });
        return Promise.reject({status});
    }
}
