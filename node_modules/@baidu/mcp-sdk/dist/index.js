import { UbcLogger } from '@baidu/ubc-report-sdk';
import { invokeApp } from '@baidu/ug-invoke-app';
export { appConfigMap, invokeApp, invokeMarket, invokeTpApp } from '@baidu/ug-invoke-app';
import ExpiredStorage from 'expired-storage';
import Fly from 'flyio/dist/npm/fly';
import isstring from 'lodash.isstring';

const logConf = {
  serverid: '10432',
  pagelog: {
    page: 'default',
    version: '2.0'
  }
};

/**
 * @file 是否命中了mcp策略
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */

/**
 * hitMcp
 *
 * @param {Array} posVal 调起位的数组结果 有可能是个undefined
 * @param {number} index 某个物料对象，默认是第一个
 * @returns {boolean} 是否需要执行调起策略
 */
function hitMcp(posVal, index = 0) {
  var _posVal$index;

  return (posVal === null || posVal === void 0 ? void 0 : (_posVal$index = posVal[index]) === null || _posVal$index === void 0 ? void 0 : _posVal$index.action_flag) !== undefined;
}

/**
 * @file 请求库封装
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
const request = new Fly(); // 5秒超时时间

request.config.timeout = 3000;
request.config.withCredentials = true; // 请求拦截器

/**
 * @file 设置、获取公参
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
// 公参存储对象
let commonParams = {
  // 默认是展现请求

  /* eslint-disable */
  req_type: 0
  /* eslint-enable */

};
/**
 * 获得公参
 *
 * @returns {{}}
 */

function getCommonParams() {
  return Object.assign({}, commonParams);
}
/**
 * 设置公参
 *
 * @param {Object} config 公参配置
 * @param {boolean} reset 是否重置
 */

function setCommonParams(config = {}, reset = false) {
  reset ? commonParams = config : Object.assign(commonParams, config);
}

/**
 * @file 请求地址
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
const host = 'https://ug.baidu.com';

/**
 * @file 获取远端信息
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
// 存起来给模板标记调用

let invokeConf = {};
/**
 * 获取策略配置信息
 *
 * @param {Object} invokeConfig 调起id等配置
 * @param {Object} selectIndex 调起id增量顺序
 * @param {string} url 请求地址, 默认不传
 *
 * @returns {Promise<*>}
 */

async function getInvokeInfo(invokeConfig = {}, selectIndex = {}, url) {
  const {
    app,
    scene,
    ...rest
  } = getCommonParams(); // 请求数据体

  /* eslint-disable */

  let data = {
    app,
    scene,
    ...rest,
    ...invokeConfig,
    select_index: selectIndex
  };
  /* eslint-enable */

  try {
    const requestUrl = url || `${host}/mcp/${app}/${scene}`;
    let res = await request.post(requestUrl, data, {
      headers: {
        'Content-Type': 'text/plain'
      }
    });

    if (res.data.errno === 0) {
      return res.data.data;
    }
  } catch (e) {
    console.log(e); // todo 请求失败 打点
    // todo 请求异常，怎么返回给业务方？
  }
}

/**
 * @file 返回值列表
 * @author zhuzhibo(zhuzhibo@baidu.com)
 */

/* eslint-disable */

/**
 * 调起失败定义
 * 20009: 命中退避策略
 * 20010: 当前策略为不调起
* */
const statusCode = {
  EXITED: {
    status: 50001,
    msg: '命中退避策略'
  },
  NOT_INVOkE: {
    status: 50002,
    msg: '当前策略为不调起'
  }
};

/**
 * @file 检查点击是否命中退场及屏蔽策略
 * @author zhuzhibo(zhuzhibo@baidu.com)
 */
const LOCAL_STORAGE_MARK = 'MCP_INVOKE_';
const expiredStorage = new ExpiredStorage();
/**
 * 检查点击调起是否有效，命中退场/屏蔽则无效
 *
 * @param  {string} posId 位置ID
 * @param  {Object} conf 调起conf，后端配置直接传入
 * @param  {Object} invokeInfo 其他调起相关信息（为后续需求变更留接口
 * @return {Object} result 返回值
 * @return {boolean} result.clickValid 是否有效
 * @return {Object} result.info 附带信息
 */

function checkClickValid(posId, conf, invokeInfo = {}) {
  const clickInterval = conf === null || conf === void 0 ? void 0 : conf.click_interval; // clickInterval存在且不为零走退场判断逻辑

  if (clickInterval) {
    const exitInfo = getInfoFromLocalStorage(posId);

    if (clickInterval === -1) {
      // 此处情况直接调起，clickInterval无效不计入localStorage中
      // 点击的请求，需要发req_type= 1给后端做展现的策略退场

      /* eslint-disable */
      getInvokeInfo({
        posId,
        req_type: 1
      }, {});
      /* eslint-enable */

      return {
        clickValid: true
      };
    } // exitInfo存在，没有新的逻辑替换则退场


    if (exitInfo && clickInterval * 60 === exitInfo.clickInterval) {
      return {
        clickValid: false,
        info: statusCode.EXITED
      };
    }
  } // 判断是否命中不调起策略


  if (isNotInvoke(conf)) {
    return {
      clickValid: false,
      info: statusCode.NOT_INVOkE
    };
  } // 其余情况不退场


  setInfoToLocalStorage(posId, invokeInfo, clickInterval * 60);
  return {
    clickValid: true
  };
}
/**
 * 获取退场信息
 *
 * @param  {string} posId 位置ID
 * @return {Object} 退场信息
 */

function getExitInfo(posId) {
  let isExit = false;
  const exitInfo = getInfoFromLocalStorage(posId);
  const timeLeft = getTimeLeft(posId);

  if (exitInfo && timeLeft) {
    isExit = true;
  }

  return {
    isExit,
    timeLeft
  };
}
/**
 * 获取策略是否为不调起
 *
 * @param  {Object} conf 调起conf，后端配置直接传入
 * @return {boolean} 是否不调起
 */

function isNotInvoke(conf) {
  return !Number(conf === null || conf === void 0 ? void 0 : conf.action_flag) > 0;
}

function setInfoToLocalStorage(posId, invokeInfo, expiration) {
  if (expiration === 0) {
    return;
  }

  const exitInfo = {
    posId,
    clickInterval: expiration,
    ...invokeInfo
  };
  expiredStorage.setJson(LOCAL_STORAGE_MARK + posId, exitInfo, expiration);
}

function getInfoFromLocalStorage(posId) {
  return expiredStorage.getJson(LOCAL_STORAGE_MARK + posId);
}

function getTimeLeft(posId) {
  return expiredStorage.getTimeLeft(LOCAL_STORAGE_MARK + posId);
}

/**
 * @file 执行调起
 * @author zhuzhibo(zhuzhibo@baidu.com)
 */

let processConf = {
  toStore: false,
  failedUrl: ''
}; // 失败后处理方式

const failCodeMap = {
  1: 'appStore',
  2: 'failedUrl',
  3: 'defaultUrl'
};
/**
 * 执行调起
 *
 * @param  {string} posId 调起位的位置ID
 * @param  {Object} conf 调起conf，后端配置直接传入
 * @param  {string} conf.appName 需要调起的APP名称
 * @param  {string} conf.token 度口令
 * @param  {string} conf.scheme 调起需要用到的scheme
 * @param  {number} conf.click_interval 调起退场时间 单位分钟
 * @param  {number} conf.fail 调起失败后操作
 * @param  {string} conf.failedUrl 调起失败后跳转链接
 * @param  {string} logId 打点所需参数
 * @param  {Object=} extParam 业务所需其他参数
 * @return {Promise} 调起结果
 */

async function execInvoke(posId, conf, logId, extParam = {}) {
  const checkResult = checkClickValid(posId, conf);

  if (!checkResult.clickValid) {
    return Promise.reject(checkResult.info);
  }

  switch (failCodeMap[conf.jump_id]) {
    case 'defaultUrl':
      processConf = {
        toStore: false,
        failedUrl: ''
      };
      break;

    case 'failedUrl':
      processConf = {
        toStore: false,
        failedUrl: conf.jump_url
      };
      break;

    case 'appStore':
      processConf = {
        toStore: true,
        failedUrl: conf.jump_url
      };
  }

  const commonParams = getCommonParams(); // 打点参数预置

  const ubcParam = {
    page: commonParams.scene,
    ext: {
      p1: posId,
      // 位置id
      p2: logId,
      // 全链路识别id
      p3: conf.sid,
      // 实验id
      p4: conf.app_name,
      // 被调App
      p5: conf.channel_conf,
      // 渠道号串（包含调起&下载&剪贴板号）
      p6: 0,
      // 展现id
      p8: extParam // 附加信息

    }
  };
  ubc.send({
    type: 'try_jump',
    ...ubcParam
  });

  try {
    const status = await invokeApp({
      appName: conf.app_name,
      token: conf.token,
      scheme: conf.scheme,
      toStore: processConf.toStore,
      failedUrl: processConf.failedUrl,
      checkTokenCopied: false
    });
    const IS_IOS = /(iPhone|iPod|iPad|Macintosh)/i.test(navigator.userAgent);

    if (!IS_IOS) {
      // 打点
      switch (status) {
        case 10000:
          ubc.send({
            type: 'done_jump',
            ...ubcParam
          });
          break;

        case 10001:
          ubc.send({
            type: 'go_store',
            ...ubcParam
          });
          break;

        case 10004:
          ubc.send({
            type: 'go_failed_url',
            ...ubcParam
          });
          break;
      }
    }

    return Promise.resolve({
      status
    });
  } catch (status) {
    ubc.send({
      type: 'jump_go_failed',
      ...ubcParam
    });
    return Promise.reject({
      status
    });
  }
}

/**
 * @file observeClick
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
/**
 * 监听targetNode的冒泡事件
 * 有mcpPosid的元素,监听到点击事件后
 * 通过invokeConf里的config来执行调起
 *
 * @param {HTMLElement} targetNode 要监听的祖先dom元素
 */

function handleClick(targetNode) {
  targetNode.addEventListener('click', async e => {
    var _invokeConf$mcpPosid;

    const node = e.target;
    const {
      mcpPosid,
      mcpPosIndex = 0,
      mcpConfig,
      mcpSuccess,
      mcpFailed
    } = node.dataset;
    const invokeInfo = mcpPosid && (invokeConf === null || invokeConf === void 0 ? void 0 : (_invokeConf$mcpPosid = invokeConf[mcpPosid]) === null || _invokeConf$mcpPosid === void 0 ? void 0 : _invokeConf$mcpPosid[mcpPosIndex]); // 拿不到信息，报错
    // 直接返回

    if (!invokeInfo) {
      console.log('none invokeInfo => posid: ' + mcpPosid + ', index: ' + mcpPosIndex);
      return;
    }

    try {
      await execInvoke(mcpPosid, invokeInfo);
      mcpSuccess && window[mcpSuccess]();
    } catch (e) {
      mcpFailed && window[mcpFailed]();
    }
  });
}

/**
 * @file mutationObserver
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
/**
 * 监听dom元素
 *
 * @param {HTMLElement} targetNode 要监听的祖先dom元素
 */

function observeDom(targetNode) {
  handleClick(targetNode);
}

/**
 * @file titihuan
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
/**
 * 替换占位符
 *
 * @param {Object} invokeConf 调起conf
 * @param {Object} placeholders 占位符
 */

function replaceStubs(invokeConf, placeholders = {}) {
  if (!(invokeConf === null || invokeConf === void 0 ? void 0 : invokeConf.action_rule)) {
    console.log('invokeConf.action_rule not found. ');
    return false;
  }

  const copiedObj = JSON.parse(JSON.stringify(invokeConf));
  const rule = copiedObj.action_rule;

  for (let pos in rule) {
    rule[pos].forEach(invokeOptions => {
      for (let k in invokeOptions) {
        isstring(invokeOptions[k]) && (invokeOptions[k] = replaceStr(invokeOptions[k], placeholders));
      }
    });
  }

  return copiedObj;
} // 单一字符串中的桩位替换

function replaceStr(str, placeholders) {
  for (let [k, v] of Object.entries(placeholders)) {
    str = str.replace(`{{${k}}}`, v);
  }

  return str;
}

/**
 * @file index
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
const ubc = new UbcLogger({
  page: logConf.pagelog,
  serverId: logConf.serverid,
  useSendBeacon: true
});

window.__MCP_VERSION__ = '1.15.2'; // 把uginvokeapp的接口暴露出去 给搜索用

export { execInvoke, getCommonParams, getExitInfo, getInvokeInfo, hitMcp, isNotInvoke, observeDom, replaceStubs, setCommonParams, ubc };
