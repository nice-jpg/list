/**
 * @file MethodQueue 任务管理队列
 * @author wangbing11(wangbing11@baidu.com)
 */

import Command from './Command';
import {isObject} from './utils/utils';
let MethodQueue = {
    cmdQueue: []
};

// 初始化 cmdQueue 为空队列
MethodQueue.init = function () {
    MethodQueue.cmdQueue = [];
};

// 执行队列中的所有命令
MethodQueue.run = function (inputsList) {
    let cmds = inputsList.map(function (inputs) {
        return MethodQueue.toCommands.apply(MethodQueue, [inputs]);
    });
    let tmpCmds = MethodQueue.cmdQueue.concat(cmds);

    // 每次将 MethodQueue.cmdQueue 合并到 tmpCmds 中后，就清空MethodQueue.cmdQueue。
    MethodQueue.cmdQueue = [];

    while (tmpCmds.length > 0) {
        if (MethodQueue.runCommand.apply(this, [tmpCmds[0]])) {
            // 如果没有执行，则再次存起来
            MethodQueue.cmdQueue.push(tmpCmds[0]);
        }
        tmpCmds.shift();
    }
};

/**
 *  根据参数进行处理，转换成规范的指令，
 *
 *  @param {Array} inputs 用户输入的指令参数
 *  @return {Object} 返回一个规范的指令 Command 实例
 *
 */
MethodQueue.toCommands = function (inputs) {
    let cmd = new Command(inputs);
    return cmd;
};

// 执行单个命令
MethodQueue.runCommand = function (cmd) {
    // 如果是创建 Tracker 的命令
    if (cmd.isCreateCommand) {
        // 创建一个跟踪器
        this.create(cmd.trackerName, ...cmd.fields);
    }
    // 如果是配置 Tracker 的命令
    else if (cmd.isConfigCommand) {
        let tracker = this.getByName(cmd.trackerName);
        if (!tracker) {
            throw '不存在' + cmd.trackerName + '实例';
        }
        let configs = cmd.fields[0];
        for (let i in configs) {
            if (configs.hasOwnProperty(i)) {
                if (isObject(configs[i])) {
                    tracker.set(i, Object.assign({}, tracker.get(i), configs[i]));
                }
                else {
                    tracker.set(i, configs[i]);
                }

            }
        }
    }
    // 如果是事件上报的命令
    else if (cmd.isEventCommand) {
        let tracker = this.getByName(cmd.trackerName);
        if (!tracker) {
            throw '不存在' + cmd.trackerName + '实例';
        }
        tracker.send.call(tracker, {
            type: 'event',
            fields: cmd.fields
        });
    }
    // 如果是时长上报的命令
    else if (cmd.isTimingCommand) {
        let tracker = this.getByName(cmd.trackerName);
        if (!tracker) {
            throw '不存在' + cmd.trackerName + '实例';
        }
        let type = cmd.fields[0];
        let fields = [].slice.call(cmd.fields, 1);
        if (type === 'start') {
            tracker.regestTimingReportor(fields);
        }
        else if (type === 'end') {
            tracker.endTimingReportor(fields);
        }
    }
};


MethodQueue.init();

export default MethodQueue;
