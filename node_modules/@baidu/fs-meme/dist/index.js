/**
 * Copyright (C) 2021 ~ present baidu.com
 *
 * @author lvkunjie <lvkunjie@baidu.com>
 */
import { LIKE_OPINION_ERROR, LIKE_OPINION_SUCCESS, } from '@baidu/fs-actions';
import { CLICK_MORE_LINK, CLICK_OPINION_ITEM, } from '@baidu/mo-actions';
import Base from '@baidu/mo-base';
import Card from '@baidu/mo-card';
import Opinion from '@baidu/mo-opinion';
import { json2query, loadJS, numberFormat, } from '@baidu/xbox';
import styles from './style.module.less';
export * from './interface';
// 表态异步接口
const LIKE_API = 'https://ext.baidu.com/api/attitude/v1/post/receive';
// @san/component
export default class MoMeme extends Base {
    static template = /* html */ `
        <mo-card
            title="{{title}}"
            desc="{{desc}}"
            more-url="{{moreUrl}}"
            has-desc="{{hasDesc && attitude_conf && attitude_conf.length}}"
            color="{{color}}"
            desc-color="{{descColor}}"
            title-img="{{titleImg}}"
        >
            <mo-opinion
                slot="content"
                list="{{attitude_conf}}"
                selected-index="{{selectedIndex}}"
                animate-index="{{animateIndex}}"
                gif-animation="{{gifAnimation}}"
                gif-animation-duration="{{gifAnimationDuration}}"
            />
        </mo-card>
    `;
    static components = {
        'mo-card': Card,
        'mo-opinion': Opinion,
    };
    static messages = {
        [CLICK_OPINION_ITEM]({ value }) {
            this.handleOpinionItemClick(value);
        },
        [CLICK_MORE_LINK]({ value }) {
            this.handleMoreUrlClick(value);
        },
    };
    initData() {
        return {
            gifAnimation: true,
            gifAnimationDuration: 4 * 1000,
            selectedIndex: -1,
            animateIndex: -1,
            timer: null,
            styles,
        };
    }
    attached() {
        this.watch('attitude_status', val => {
            this.setSelectedItem(val);
            const total = this.data.get('attitude_total') || 0;
            this.changeDesc(+total);
        });
        this.watch('attitude_total', val => {
            let totalNumber = val ? +val : 0;
            this.changeDesc(+totalNumber);
        });
    }
    inited() {
        this.setSelectedItem(this.data.get('attitude_status'));
        // 更新标题描述
        const total = this.data.get('attitude_total') || 0;
        this.changeDesc(+total);
        const timer = setTimeout(() => {
            this.data.set('gifAnimation', false);
            clearTimeout(timer);
        }, this.data.get('gifAnimationDuration'));
    }
    // @TODO computed san-ssr有问题
    // 更新标题描述
    changeDesc(total) {
        let selectedIndex = this.data.get('selectedIndex');
        selectedIndex = typeof selectedIndex !== 'undefined' ? selectedIndex : -1;
        this.data.set('desc', `${+selectedIndex >= 0 ? '你和其他' : ''}${numberFormat(total)}人已表态`);
    }
    setSelectedItem(val) {
        let list = this.data.get('attitude_conf');
        if (val && list && list.length) {
            this.data.get('attitude_conf').forEach((item, index) => {
                if (item.attitude_type === val) {
                    this.data.set('selectedIndex', index);
                }
            });
        }
        else {
            this.data.set('selectedIndex', -1);
        }
    }
    // 表态项的点击事件
    handleOpinionItemClick(value) {
        let { isRequesting, selectedIndex, attitude_conf = [] } = this.data.get();
        if (typeof selectedIndex === 'undefined') {
            selectedIndex = -1;
        }
        const currentIndex = value.index;
        const currentOption = value.list[currentIndex] || {};
        const isCancel = selectedIndex === currentIndex;
        const oldCurCount = (currentOption.like_num && +currentOption.like_num) || 0;
        // 前端 +1 -1 动效，不论请求成功与否都假上屏
        if (isCancel) {
            // 此次的选项-1
            let newCount = oldCurCount > 1 ? oldCurCount - 1 : 0;
            this.data.set(`attitude_conf[${currentIndex}]`, {
                ...currentOption,
                like_num: newCount,
            });
            currentOption.like_num = newCount;
            this.data.set('selectedIndex', -1);
        }
        else {
            // 已经表态其他选项：此次的选项+1，之前的选项-1  ，
            // 从未表态其他选项：此次的选项+1
            if (selectedIndex >= 0) {
                // +1
                this.data.set(`attitude_conf[${currentIndex}]`, {
                    ...currentOption,
                    like_num: oldCurCount + 1,
                });
                currentOption.like_num = oldCurCount + 1;
                // -1
                const preOption = attitude_conf[selectedIndex];
                const oldPreCount = (preOption.like_num && +preOption.like_num) || 0;
                this.data.set(`attitude_conf[${selectedIndex}]`, {
                    ...preOption,
                    like_num: oldPreCount > 1 ? oldPreCount - 1 : 0,
                });
                value.list[selectedIndex].like_num = oldPreCount > 1 ? oldPreCount - 1 : 0;
            }
            else {
                // +1
                this.data.set(`attitude_conf[${currentIndex}]`, {
                    ...currentOption,
                    like_num: oldCurCount + 1,
                });
                currentOption.like_num = oldCurCount + 1;
            }
            const timer = setTimeout(() => {
                this.data.set('animateIndex', -1);
                clearTimeout(this.data.get('timer'));
            }, 2 * 1000);
            this.data.set('timer', timer);
            this.data.set('animateIndex', currentIndex);
            this.data.set('selectedIndex', currentIndex);
        }
        // 更新标题描述
        const total = this.data.get('attitude_total') || 0;
        this.changeDesc(+total);
        this.eventDispatch('modify:attitude:status', {
            attitude_status: isCancel ? '' : currentOption.attitude_type || '',
            ...value,
            operationType: isCancel ? 'cancel' : 'add',
        });
        this.eventDispatch('modify:attitude:title', {
            ...value,
            operationType: isCancel ? 'cancel' : 'add',
        });
        // 判断请求锁
        if (isRequesting) {
            return;
        }
        // 添加请求锁
        this.data.set('isRequesting', true);
        // 请求服务端
        Promise.all(isCancel
            ? [this.requestLike(currentOption.attitude_type || '', 'cancel')]
            : [this.requestLike(currentOption.attitude_type || '', 'add')])
            .then(res => {
            this.eventDispatch(LIKE_OPINION_SUCCESS, {
                ...value,
                operationType: isCancel ? 'cancel' : 'add',
                res,
            });
        })
            .catch(err => {
            this.eventDispatch(LIKE_OPINION_ERROR, {
                ...value,
                operationType: isCancel ? 'cancel' : 'add',
                err,
            });
        })
            .finally(() => {
            this.eventDispatch(CLICK_OPINION_ITEM, {
                ...value,
                operationType: isCancel ? 'cancel' : 'add'
            });
            this.data.set('isRequesting', false);
        });
    }
    // 单个点赞或取消赞的接口请求
    requestLike(attitude_type, opType) {
        const sData = this.data.get('sData');
        return new Promise((resolve, reject) => {
            loadJS({
                url: LIKE_API,
                data: json2query({
                    op_type: opType,
                    id: this.data.get('attitude_id'),
                    attitude_type,
                    ...sData,
                }),
                jsonpCallbackName: 'callback',
                success: (res) => {
                    if (+res.errno === 0) {
                        resolve(res);
                    }
                    else {
                        reject(res);
                    }
                },
                error: err => {
                    reject(err);
                },
            });
        });
    }
    // 点击跳转更多
    handleMoreUrlClick(moreUrl) {
        this.eventDispatch(CLICK_MORE_LINK, {
            moreUrl,
        });
    }
}
