define(['exports', '@baidu/fs-actions', '@baidu/mo-actions', '@baidu/mo-base', '@baidu/mo-card', '@baidu/mo-opinion', '@baidu/xbox', './style.module.less'], (function (exports, fsActions, moActions, Base, Card, Opinion, xbox, styles) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var Base__default = /*#__PURE__*/_interopDefaultLegacy(Base);
    var Card__default = /*#__PURE__*/_interopDefaultLegacy(Card);
    var Opinion__default = /*#__PURE__*/_interopDefaultLegacy(Opinion);
    var styles__default = /*#__PURE__*/_interopDefaultLegacy(styles);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * Copyright (C) 2021 ~ present baidu.com
     *
     * @author lvkunjie <lvkunjie@baidu.com>
     */
    var _a;
    // 表态异步接口
    var LIKE_API = 'https://ext.baidu.com/api/attitude/v1/post/receive';
    // @san/component
    var MoMeme = /** @class */ (function (_super) {
        __extends(MoMeme, _super);
        function MoMeme() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MoMeme.prototype.initData = function () {
            return {
                gifAnimation: true,
                gifAnimationDuration: 4 * 1000,
                selectedIndex: -1,
                animateIndex: -1,
                timer: null,
                styles: styles__default["default"],
            };
        };
        MoMeme.prototype.attached = function () {
            var _this = this;
            this.watch('attitude_status', function (val) {
                _this.setSelectedItem(val);
                var total = _this.data.get('attitude_total') || 0;
                _this.changeDesc(+total);
            });
            this.watch('attitude_total', function (val) {
                var totalNumber = val ? +val : 0;
                _this.changeDesc(+totalNumber);
            });
        };
        MoMeme.prototype.inited = function () {
            var _this = this;
            this.setSelectedItem(this.data.get('attitude_status'));
            // 更新标题描述
            var total = this.data.get('attitude_total') || 0;
            this.changeDesc(+total);
            var timer = setTimeout(function () {
                _this.data.set('gifAnimation', false);
                clearTimeout(timer);
            }, this.data.get('gifAnimationDuration'));
        };
        // @TODO computed san-ssr有问题
        // 更新标题描述
        MoMeme.prototype.changeDesc = function (total) {
            var selectedIndex = this.data.get('selectedIndex');
            selectedIndex = typeof selectedIndex !== 'undefined' ? selectedIndex : -1;
            this.data.set('desc', "".concat(+selectedIndex >= 0 ? '你和其他' : '').concat(xbox.numberFormat(total), "\u4EBA\u5DF2\u8868\u6001"));
        };
        MoMeme.prototype.setSelectedItem = function (val) {
            var _this = this;
            var list = this.data.get('attitude_conf');
            if (val && list && list.length) {
                this.data.get('attitude_conf').forEach(function (item, index) {
                    if (item.attitude_type === val) {
                        _this.data.set('selectedIndex', index);
                    }
                });
            }
            else {
                this.data.set('selectedIndex', -1);
            }
        };
        // 表态项的点击事件
        MoMeme.prototype.handleOpinionItemClick = function (value) {
            var _this = this;
            var _a = this.data.get(), isRequesting = _a.isRequesting, selectedIndex = _a.selectedIndex, _b = _a.attitude_conf, attitude_conf = _b === void 0 ? [] : _b;
            if (typeof selectedIndex === 'undefined') {
                selectedIndex = -1;
            }
            var currentIndex = value.index;
            var currentOption = value.list[currentIndex] || {};
            var isCancel = selectedIndex === currentIndex;
            var oldCurCount = (currentOption.like_num && +currentOption.like_num) || 0;
            // 前端 +1 -1 动效，不论请求成功与否都假上屏
            if (isCancel) {
                // 此次的选项-1
                var newCount = oldCurCount > 1 ? oldCurCount - 1 : 0;
                this.data.set("attitude_conf[".concat(currentIndex, "]"), __assign(__assign({}, currentOption), { like_num: newCount }));
                currentOption.like_num = newCount;
                this.data.set('selectedIndex', -1);
            }
            else {
                // 已经表态其他选项：此次的选项+1，之前的选项-1  ，
                // 从未表态其他选项：此次的选项+1
                if (selectedIndex >= 0) {
                    // +1
                    this.data.set("attitude_conf[".concat(currentIndex, "]"), __assign(__assign({}, currentOption), { like_num: oldCurCount + 1 }));
                    currentOption.like_num = oldCurCount + 1;
                    // -1
                    var preOption = attitude_conf[selectedIndex];
                    var oldPreCount = (preOption.like_num && +preOption.like_num) || 0;
                    this.data.set("attitude_conf[".concat(selectedIndex, "]"), __assign(__assign({}, preOption), { like_num: oldPreCount > 1 ? oldPreCount - 1 : 0 }));
                    value.list[selectedIndex].like_num = oldPreCount > 1 ? oldPreCount - 1 : 0;
                }
                else {
                    // +1
                    this.data.set("attitude_conf[".concat(currentIndex, "]"), __assign(__assign({}, currentOption), { like_num: oldCurCount + 1 }));
                    currentOption.like_num = oldCurCount + 1;
                }
                var timer = setTimeout(function () {
                    _this.data.set('animateIndex', -1);
                    clearTimeout(_this.data.get('timer'));
                }, 2 * 1000);
                this.data.set('timer', timer);
                this.data.set('animateIndex', currentIndex);
                this.data.set('selectedIndex', currentIndex);
            }
            // 更新标题描述
            var total = this.data.get('attitude_total') || 0;
            this.changeDesc(+total);
            this.eventDispatch('modify:attitude:status', __assign(__assign({ attitude_status: isCancel ? '' : currentOption.attitude_type || '' }, value), { operationType: isCancel ? 'cancel' : 'add' }));
            this.eventDispatch('modify:attitude:title', __assign(__assign({}, value), { operationType: isCancel ? 'cancel' : 'add' }));
            // 判断请求锁
            if (isRequesting) {
                return;
            }
            // 添加请求锁
            this.data.set('isRequesting', true);
            // 请求服务端
            Promise.all(isCancel
                ? [this.requestLike(currentOption.attitude_type || '', 'cancel')]
                : [this.requestLike(currentOption.attitude_type || '', 'add')])
                .then(function (res) {
                _this.eventDispatch(fsActions.LIKE_OPINION_SUCCESS, __assign(__assign({}, value), { operationType: isCancel ? 'cancel' : 'add', res: res }));
            })
                .catch(function (err) {
                _this.eventDispatch(fsActions.LIKE_OPINION_ERROR, __assign(__assign({}, value), { operationType: isCancel ? 'cancel' : 'add', err: err }));
            })
                .finally(function () {
                _this.eventDispatch(moActions.CLICK_OPINION_ITEM, __assign(__assign({}, value), { operationType: isCancel ? 'cancel' : 'add' }));
                _this.data.set('isRequesting', false);
            });
        };
        // 单个点赞或取消赞的接口请求
        MoMeme.prototype.requestLike = function (attitude_type, opType) {
            var _this = this;
            var sData = this.data.get('sData');
            return new Promise(function (resolve, reject) {
                xbox.loadJS({
                    url: LIKE_API,
                    data: xbox.json2query(__assign({ op_type: opType, id: _this.data.get('attitude_id'), attitude_type: attitude_type }, sData)),
                    jsonpCallbackName: 'callback',
                    success: function (res) {
                        if (+res.errno === 0) {
                            resolve(res);
                        }
                        else {
                            reject(res);
                        }
                    },
                    error: function (err) {
                        reject(err);
                    },
                });
            });
        };
        // 点击跳转更多
        MoMeme.prototype.handleMoreUrlClick = function (moreUrl) {
            this.eventDispatch(moActions.CLICK_MORE_LINK, {
                moreUrl: moreUrl,
            });
        };
        MoMeme.template = "\n        <mo-card\n            title=\"{{title}}\"\n            desc=\"{{desc}}\"\n            more-url=\"{{moreUrl}}\"\n            has-desc=\"{{hasDesc && attitude_conf && attitude_conf.length}}\"\n            color=\"{{color}}\"\n            desc-color=\"{{descColor}}\"\n            title-img=\"{{titleImg}}\"\n        >\n            <mo-opinion\n                slot=\"content\"\n                list=\"{{attitude_conf}}\"\n                selected-index=\"{{selectedIndex}}\"\n                animate-index=\"{{animateIndex}}\"\n                gif-animation=\"{{gifAnimation}}\"\n                gif-animation-duration=\"{{gifAnimationDuration}}\"\n            />\n        </mo-card>\n    ";
        MoMeme.components = {
            'mo-card': Card__default["default"],
            'mo-opinion': Opinion__default["default"],
        };
        MoMeme.messages = (_a = {},
            _a[moActions.CLICK_OPINION_ITEM] = function (_a) {
                var value = _a.value;
                this.handleOpinionItemClick(value);
            },
            _a[moActions.CLICK_MORE_LINK] = function (_a) {
                var value = _a.value;
                this.handleMoreUrlClick(value);
            },
            _a);
        return MoMeme;
    }(Base__default["default"]));

    exports["default"] = MoMeme;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
