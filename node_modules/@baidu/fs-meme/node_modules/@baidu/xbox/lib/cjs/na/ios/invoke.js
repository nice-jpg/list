"use strict";
/**
 * @file ios invoke
 * @module ios
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.invokeWithCallback = exports.iosSyncInvoke = exports.componentInvoke = exports.postMsgInvoke = exports.iosInvokeApp = exports.iosInvoke = exports.isSchemaValid = void 0;
var is_1 = require("../../is");
var get_global_object_1 = require("../../get-global-object");
var get_schema_head_1 = require("../../get-schema-head");
var json2query_1 = require("../../json2query");
var stringify_1 = require("../../stringify");
/**
 * 校验schema协议
 *
 * @param schema iOS schema 或双端统一调起协议
 * @returns 判断结果
 */
function isSchemaValid(schema) {
    return (0, is_1.isString)(schema) && schema.length > 10 && (0, is_1.isWindow)(get_global_object_1.globalObject);
}
exports.isSchemaValid = isSchemaValid;
/**
 * 任意 scheme 调起，不校验 baiduboxapp://
 *
 * @param scheme 任意 scheme
 */
function iosInvoke(schema) {
    if (!isSchemaValid(schema)) {
        return;
    }
    var body = document.body || document.getElementsByTagName('body')[0];
    var $node = document.createElement('iframe');
    $node.style.display = 'none';
    $node.src = schema;
    body.appendChild($node);
    // 销毁 iframe
    setTimeout(function () {
        $node && body.removeChild($node);
        $node = null;
    }, 0);
}
exports.iosInvoke = iosInvoke;
/**
 * iosInvokeApp，因为需要创建iframe，所以回调是异步的请求
 *
 * @param action 调用的action，例如downloadnovel
 * @param params 参数对象
 * @param callback 回调函数
 * @example
 * iosInvokeApp('getspeedlogdata', function(cData) {
 *     console.log(cData);
 * });
 * iosInvokeApp('downloadnovel', {
 *     url:'xxxx',
 *     title: 'xxxxxxx'
 * }, function(cData) {
 *     if(cData.error==0){
 *         console.log('success');
 *         alert(cData.result);
 *     }else{
 *         console.log('fail');
 *     }
 * });
 */
function iosInvokeApp(action, params, callback, schemaHead) {
    if (schemaHead === void 0) { schemaHead = (0, get_schema_head_1.getSchemaHead)(); }
    var queryObject = {};
    if ((0, is_1.isFunction)(params)) {
        Object.assign(queryObject, { func: params });
    }
    else {
        Object.assign(queryObject, params);
    }
    if (callback && ((0, is_1.isFunction)(callback) || (0, is_1.isString)(callback))) {
        Object.assign(queryObject, { func: callback });
    }
    return iosInvoke(schemaHead + '://' + action + '?' + (0, json2query_1.json2query)(queryObject));
}
exports.iosInvokeApp = iosInvokeApp;
/**
 * 使用 postMsg 调起
 * BBAMNPJSBridge.postMessage
 *
 * @param schema 调起命令
 */
function postMsgInvoke(schema) {
    var _a, _b, _c;
    if (isSchemaValid(schema)) {
        (_c = (_b = (_a = get_global_object_1.globalObject === null || get_global_object_1.globalObject === void 0 ? void 0 : get_global_object_1.globalObject.webkit) === null || _a === void 0 ? void 0 : _a.messageHandlers) === null || _b === void 0 ? void 0 : _b.BBAMNPJSBridge) === null || _c === void 0 ? void 0 : _c.postMessage(schema);
    }
}
exports.postMsgInvoke = postMsgInvoke;
/**
 * BBAMNPJSBridgeWebViewComponent.postMessage
 *
 * @param scheme 调起命令
 */
function componentInvoke(schema) {
    var _a, _b, _c;
    if (isSchemaValid(schema)) {
        (_c = (_b = (_a = get_global_object_1.globalObject === null || get_global_object_1.globalObject === void 0 ? void 0 : get_global_object_1.globalObject.webkit) === null || _a === void 0 ? void 0 : _a.messageHandlers) === null || _b === void 0 ? void 0 : _b.BBAMNPJSBridgeWebViewComponent) === null || _c === void 0 ? void 0 : _c.postMessage(schema);
    }
}
exports.componentInvoke = componentInvoke;
/**
 * iosSyncInvoke
 *
 * @param schema 调起协议
 * @return 返回结果
 */
function iosSyncInvoke(schema) {
    if (!isSchemaValid(schema)) {
        return null;
    }
    return get_global_object_1.globalObject === null || get_global_object_1.globalObject === void 0 ? void 0 : get_global_object_1.globalObject.prompt("BdboxApp:" + (0, stringify_1.stringify)({
        obj: 'mnp',
        func: 'dispatch',
        args: [schema],
    }));
}
exports.iosSyncInvoke = iosSyncInvoke;
/**
 * 带回调的端能力
 *
 * @deprecated
 * @param url 页面地址
 * @param callback 回调函数
 */
function invokeWithCallback(url, callback) {
    if (!url && (0, is_1.isFunction)(callback)) {
        callback(false);
        return;
    }
    // 记录起始时间
    var last = Date.now();
    // 创建一个iframe
    var ifr = document.createElement('iframe');
    ifr.src = url;
    ifr.style.display = 'none';
    // 飘出屏幕外
    ifr.style.position = 'absolute';
    ifr.style.left = '-2000px';
    ifr.style.top = '-1000px';
    ifr.style.width = '1px';
    ifr.style.height = '1px';
    // 设置一个4秒的动画用于检查客户端是否被调起
    ifr.style.webkitTransition = 'all 1s';
    ifr.style.transition = 'all 1s';
    document.body.appendChild(ifr);
    setTimeout(function () {
        var end = function () {
            document.body.removeChild(ifr);
            if (Date.now() - last < 1500) {
                // 如果动画执行时间在预设范围内，就认为没有调起客户端
                callback(true);
            }
            else {
                // 动画执行超过预设范围，认为调起成功
                callback(false);
            }
        };
        // 监听动画完成时间
        ifr.addEventListener('webkitTransitionEnd', end, false);
        ifr.addEventListener('transitionEnd', end, false);
        // 启动动画
        ifr.style.left = '-10px';
    }, 0);
}
exports.invokeWithCallback = invokeWithCallback;
