"use strict";
/**
 * @file Created on Tue Nov 27 2018
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadFile = void 0;
var is_1 = require("../is");
var noop = function () { };
/**
 * 加载单个文件，支持 css/img/js
 *
 * @param path url 地址
 * @param callback 回调函数
 * @param params 配置参数，包括 async，timeout，maxTries，before 等
 * @param numTries 不对外参数，用于重试次数
 * @example
 * loadFile('/path/to/foo.js', function(err, path) {
 *     // foo.js loaded
 * });
 * loadFile('css!/path/to/foo', function(err, path) {
 *     // foo css loaded
 * });
 * loadFile('img!/path/to/foo', function(err, path) {
 *     // foo img loaded
 * });
 */
function loadFile(path, callback, params, numTries) {
    if (numTries === void 0) { numTries = 0; }
    var doc = document;
    var pathStripped = path.replace(/^(css|img)!/, '');
    var isCSS = /(^css!|\.css$)/.test(path);
    var _a = params.async, async = _a === void 0 ? true : _a, _b = params.maxTries, maxTries = _b === void 0 ? 1 : _b, _c = params.timeout, timeout = _c === void 0 ? 2e4 : _c, before = params.before;
    var beforeCallback = before && (0, is_1.isFunction)(before) ? before : noop;
    // eslint-disable-next-line @typescript-eslint/init-declarations
    var elem;
    var timer = 0;
    var cb = function (ev) {
        var result = '';
        timer && clearTimeout(timer);
        if (ev instanceof Error) {
            result = 'e';
        }
        else {
            result = ev.type[0];
        }
        // Note: The following code isolates IE using `hideFocus` and treats empty
        // stylesheets as failures to get around lack of onerror support
        if (isCSS && 'hideFocus' in elem) {
            try {
                if (!elem.sheet.cssText.length) {
                    result = 'e';
                }
            }
            catch (x) {
                // sheets objects created from load errors don't allow access to
                // `cssText`
                result = 'e';
            }
        }
        // handle retries in case of load failure
        if (result === 'e') {
            // increment counter
            numTries += 1;
            // exit function and try again
            if (numTries < maxTries) {
                loadFile(path, callback, params, numTries);
                return;
            }
        }
        elem.onload = elem.onerror = elem.onbeforeload = null;
        elem = null;
        // error first
        callback(result === 'e' ? (ev ? ev : 'error') : null, path);
    };
    if (isCSS) {
        // css
        elem = doc.createElement('link');
        elem.rel = 'stylesheet';
        elem.href = pathStripped;
    }
    else if (/(^img!|\.(png|gif|jpg|svg)$)/.test(path)) {
        // image
        elem = doc.createElement('img');
        elem.src = pathStripped;
    }
    else {
        // javascript
        elem = doc.createElement('script');
        elem.src = path;
        elem.async = !!async;
    }
    elem.onload = elem.onerror = cb;
    if (beforeCallback(path, elem) !== false) {
        var head = doc.head || doc.getElementsByTagName('script')[0];
        head.appendChild(elem);
        // timeout
        if (timeout > 0) {
            timer = window.setTimeout(function () {
                cb(new Error('timeout'));
            }, timeout);
        }
    }
}
exports.loadFile = loadFile;
