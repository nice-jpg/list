/**
 * @file EventEmitter 实现
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
import { isString, isFunction, isUndefined } from './is';
import { typeError } from './type-error';
/**
 * 事件发射器类
 *
 * @class EventEmitter
 */
export class EventEmitter {
    constructor() {
        this._events = {};
        this._events = {};
    }
    /**
     * 绑定事件
     *
     * @param name 事件名称
     * @param callback 监听函数
     * @param 可选，上下文
     * @return 当前 emitter 实例
     */
    on(name, callback, ctx) {
        if (!isString(name)) {
            throw typeError('name', 'string', name);
        }
        if (!isFunction(callback)) {
            throw typeError('callback', 'function', callback);
        }
        const events = this._events;
        if (!events[name]) {
            events[name] = [];
        }
        events[name].push({
            fn: callback,
            ctx,
        });
        return this;
    }
    /**
     * 一次绑定事件
     *
     * @param {string} name 事件名称
     * @param {function} callback 监听函数
     * @param {object} [ctx] 可选，上下文
     * @return 当前 emitter 实例
     */
    once(name, callback, ctx) {
        const listener = (...args) => {
            this.off(name, listener);
            callback.apply(ctx, args);
        };
        listener._ = callback;
        return this.on(name, listener, ctx);
    }
    /**
     * 事件发送
     *
     * @param name 事件名称
     * @param data 发送的数据
     * @return 当前 emitter 实例
     */
    emit(name, ...data) {
        if (!isString(name)) {
            throw typeError('name', 'string', name);
        }
        const evts = (this._events[name] || []).slice();
        for (let i = 0, len = evts.length; i < len; i++) {
            const { fn, ctx = null } = evts[i];
            fn.apply(ctx, data);
        }
        return this;
    }
    /**
     * 移除事件
     *
     * @param name 事件名称
     * @param callback 监听函数，不传在移除 name 下的所有事件
     * @return 当前 emitter 实例
     */
    off(name, callback) {
        const events = this._events;
        const evts = events[name];
        if (evts && evts.length) {
            if (isUndefined(callback)) {
                // 清理 name 的回调数组
                // 解除所有 name 的事件监听
                delete events[name];
            }
            else if (isFunction(callback)) {
                let liveEvents = [];
                for (let i = 0, len = evts.length; i < len; i++) {
                    const fn = evts[i].fn;
                    if (fn !== callback && fn._ !== callback) {
                        liveEvents.push(evts[i]);
                    }
                }
                if (liveEvents.length) {
                    events[name] = liveEvents;
                }
                else {
                    delete events[name];
                }
            }
        }
        return this;
    }
}
/**
 * 获取一个 EventEmitter 类实例
 *
 * @return 返回默认实例
 */
export function eventEmitter() {
    return new EventEmitter();
}
