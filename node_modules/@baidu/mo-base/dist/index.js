/**
 * Copyright (C) 2021 ~ present baidu.com
 */
/* eslint-disable @typescript-eslint/ban-types */
import { Component } from 'san';
import { env, registerScrollview, } from '@baidu/mo-core';
// @san/component
export default class Base extends Component {
    static template = /* html */ `
        <div>This is base component.</div>
    `;
    static trimWhitespace = 'all';
    static dispatchMode = 'message';
    env = env;
    name = 'base';
    scrollview = false;
    store;
    constructor(options) {
        super(options);
    }
    /**
     * 父类 Base 组件，在 attached 生命周期进行真实展现事件的派发处理
     * 需要在子类的初始数据添加 showAction 字段
     * 然后调用 super.attached() 方法
     */
    attached() {
        const payload = this.data.get();
        const showAction = payload.showAction;
        if (!this.el || !showAction) {
            return;
        }
        this.scrollview = registerScrollview({
            element: this.el,
            options: {
                event: ({ type }) => {
                    if (type === 'show') {
                        this.eventDispatch(showAction, payload);
                    }
                },
            },
        });
    }
    disposed() {
        this.scrollview && this.scrollview.stop();
        this.scrollview = false;
    }
    /**
     * 使用 san 消息机制派发事件
     *
     * @param action 名称
     * @param payload 参数
     */
    dispatch(action, payload) {
        super.dispatch(action, payload);
    }
    /**
     * 使用 san-store 进行状态管理时的派发事件
     *
     * @param action 名称
     * @param payload 参数
     */
    storeDispatch(action, payload) {
        this.store?.dispatch(action, payload);
    }
    /**
     * 根据派发模式派发事件
     *
     * @param action 名称
     * @param payload 参数
     */
    eventDispatch(action, payload) {
        if (Base.dispatchMode === 'message') {
            this.dispatch(action, payload);
        }
        else if (Base.dispatchMode === 'store') {
            this.storeDispatch(action, payload);
        }
    }
}
/**
 * 注入一个 store 实例，将派发模式设置为 store
 */
export const setupStore = (store) => {
    if (!Base.prototype.store) {
        Base.dispatchMode = 'store';
        Base.prototype.store = store;
    }
};
