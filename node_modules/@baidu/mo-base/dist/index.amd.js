define(['exports', 'san', '@baidu/mo-core'], (function (exports, san, moCore) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * Copyright (C) 2021 ~ present baidu.com
     */
    // @san/component
    var Base = /** @class */ (function (_super) {
        __extends(Base, _super);
        function Base(options) {
            var _this = _super.call(this, options) || this;
            _this.env = moCore.env;
            _this.name = 'base';
            _this.scrollview = false;
            return _this;
        }
        /**
         * 父类 Base 组件，在 attached 生命周期进行真实展现事件的派发处理
         * 需要在子类的初始数据添加 showAction 字段
         * 然后调用 super.attached() 方法
         */
        Base.prototype.attached = function () {
            var _this = this;
            var payload = this.data.get();
            var showAction = payload.showAction;
            if (!this.el || !showAction) {
                return;
            }
            this.scrollview = moCore.registerScrollview({
                element: this.el,
                options: {
                    event: function (_a) {
                        var type = _a.type;
                        if (type === 'show') {
                            _this.eventDispatch(showAction, payload);
                        }
                    },
                },
            });
        };
        Base.prototype.disposed = function () {
            this.scrollview && this.scrollview.stop();
            this.scrollview = false;
        };
        /**
         * 使用 san 消息机制派发事件
         *
         * @param action 名称
         * @param payload 参数
         */
        Base.prototype.dispatch = function (action, payload) {
            _super.prototype.dispatch.call(this, action, payload);
        };
        /**
         * 使用 san-store 进行状态管理时的派发事件
         *
         * @param action 名称
         * @param payload 参数
         */
        Base.prototype.storeDispatch = function (action, payload) {
            var _a;
            (_a = this.store) === null || _a === void 0 ? void 0 : _a.dispatch(action, payload);
        };
        /**
         * 根据派发模式派发事件
         *
         * @param action 名称
         * @param payload 参数
         */
        Base.prototype.eventDispatch = function (action, payload) {
            if (Base.dispatchMode === 'message') {
                this.dispatch(action, payload);
            }
            else if (Base.dispatchMode === 'store') {
                this.storeDispatch(action, payload);
            }
        };
        Base.template = "\n        <div>This is base component.</div>\n    ";
        Base.trimWhitespace = 'all';
        Base.dispatchMode = 'message';
        return Base;
    }(san.Component));
    /**
     * 注入一个 store 实例，将派发模式设置为 store
     */
    var setupStore = function (store) {
        if (!Base.prototype.store) {
            Base.dispatchMode = 'store';
            Base.prototype.store = store;
        }
    };

    exports["default"] = Base;
    exports.setupStore = setupStore;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
