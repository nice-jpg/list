"use strict";
/**
 * @file Created on Thu Nov 15 2018
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.xRegister = exports.invokeP = exports.invoke = exports.json2params = void 0;
var tslib_1 = require("tslib");
var is_1 = require("../is");
var is_box_1 = require("../is-box");
var is_matrix_1 = require("../is-matrix");
var get_box_name_1 = require("../get-box-name");
var get_box_version_1 = require("../get-box-version");
var get_global_func_1 = require("../get-global-func");
var get_global_object_1 = require("../get-global-object");
var get_schema_head_1 = require("../get-schema-head");
var json2query_1 = require("../json2query");
var os_1 = require("../os");
var stringify_1 = require("../stringify");
var type_1 = require("../type");
var version_compare_1 = require("../version-compare");
var const_1 = require("./const");
var invoke_1 = require("./ios/invoke");
var invoke_2 = require("./android/invoke");
/**
 * 将 json 转成 params 字符串
 * 经常会出现 params 的 stringify 之后再encode 的情况，这里统一处理了
 * 还处理了函数问题，可以直接传入匿名函数即可自动转为全局函数
 *
 * @param json 参数
 * @param [encode=true] 是否encode
 * @return 处理结果
 */
function json2params(json, encode) {
    if (encode === void 0) { encode = true; }
    if ((0, is_1.isString)(json)) {
        return json;
    }
    var res = json;
    var keys = Object.keys(json);
    keys.forEach(function (key) {
        var val = res[key];
        if ((0, is_1.isArray)(val)) {
            res[key] = (0, json2query_1.mapArray)(val);
        }
        else if ((0, is_1.isFunction)(val)) {
            res[key] = (0, get_global_func_1.getGlobalFunc)(val);
        }
    });
    return (0, stringify_1.stringify)(res, encode);
}
exports.json2params = json2params;
function getValidScheme(schema) {
    // 都是以 baidubox 开头包括，baiduboxapp,baiduboxmission
    if (!schema.startsWith('baidubox')) {
        return 'baiduboxapp://' + schema;
    }
    return schema;
}
/**
 * 新调起能力，完全 scheme 形式，支持 ios 和安卓相同或者不同，
 * 不同时，先传 android 后 ios（首字母排序）
 * 必须 baiduboxapp 开头
 *
 * @param as 安卓调起 schema
 * @param is ios调起 schema，如果相同省略改参数
 */
function invoke() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var as = args[0];
    if (!as || (!(0, is_box_1.isBox)() && !(0, is_matrix_1.isMatrix)())) {
        return;
    }
    // 安卓 ios 公用一个相同的 scheme
    var is = args[1] ? args[1] : as;
    if ((0, os_1.isIOS)() && is) {
        (0, invoke_1.iosInvoke)(getValidScheme(is));
    }
    else if ((0, os_1.isAndroid)()) {
        (0, invoke_2.androidInvoke)(getValidScheme(as));
    }
}
exports.invoke = invoke;
/**
 * Promise 调起命令，host 和 params 分开处理，支持函数直接传入
 *
 * @param action schema host 部分
 * @param params 调起参数
 * @param schemaHead schema 头，默认 baiduboxapp
 * @return Promise 对象
 */
function invokeP(action, params, schemaHead) {
    if (params === void 0) { params = {}; }
    if (schemaHead === void 0) { schemaHead = (0, get_schema_head_1.getSchemaHead)(); }
    if (!(0, is_box_1.isBox)() && !(0, is_matrix_1.isMatrix)()) {
        return Promise.reject(const_1.NOT_IN_BOX);
    }
    return new Promise(function (resolve, reject) {
        var tmp = params.params || {};
        // 处理 params 带有 callback 的情况
        var callback = params.callback;
        // 删除 callback，防止 json2query 被处理到 query 中
        delete params.callback;
        // 将 callback 情况进行处理
        var defaultCallback = function (data) {
            if (callback) {
                if (typeof callback === 'function') {
                    callback(data);
                }
                else if (typeof callback === 'string' && typeof get_global_object_1.globalObject[callback] === 'function') {
                    get_global_object_1.globalObject[callback](data);
                }
            }
        };
        if ((0, is_1.isEmptyObject)(tmp) || tmp === '%7B%7D' || tmp === '{}') {
            // 删除空的params对象
            delete params.params;
        }
        else if ((0, type_1.getType)(tmp) === 'object') {
            params.params = json2params(tmp);
        }
        // 重新赋值 callback
        params.callback = function (result) {
            var data = result;
            if ((0, is_1.isString)(result)) {
                try {
                    data = JSON.parse(result);
                }
                catch (e) {
                    console.info(e);
                }
            }
            var _a = data, status = _a.status, successData = _a.data;
            if (+status === 0) {
                // 成功回调
                resolve(successData);
                defaultCallback(successData);
                return;
            }
            // 失败回调，失败也回调 callback，给出错误码的情况
            reject(data);
            defaultCallback(data);
        };
        var queryObject = (0, json2query_1.json2query)(params);
        var schema = schemaHead + "://" + action + "?" + queryObject;
        invoke(schema);
    });
}
exports.invokeP = invokeP;
/**
 * 新版本的注册，只用于安卓和 ios 相同的 scheme 类，返回 promise
 * @function xRegister
 * @param {Array|String} range - 版本范围
 * @param action action 部分，去掉 vxx 部分，例如 v26/swan 实际传入 swan
 * @param params 参数部分，例如 params={url}，传入{url}即可
 * @param schemaHead scheme协议头
 * @return Promise 对象
 * @example
 *  xRegister(
        {
            lite: {
                v: 34,
                versionRange: '3.9'
            },
            main: {
                v: 41,
                versionRange: '11.3.5'
            }
        },
        'audio/playSound',
        {url}
    );
 */
function xRegister(range, action, params, schemaHead) {
    if (range === void 0) { range = {}; }
    if (params === void 0) { params = {}; }
    if (schemaHead === void 0) { schemaHead = (0, get_schema_head_1.getSchemaHead)(); }
    if (!(0, is_box_1.isBox)() && !(0, is_matrix_1.isMatrix)()) {
        return Promise.reject(const_1.NOT_IN_BOX);
    }
    var osName = (0, os_1.getOSName)();
    var boxName = (0, get_box_name_1.getBoxName)() || 'unknown';
    // 优先读取 androidmission 这个，然后是 mission(ios+android全平台)，最后主板 android/ios
    var opt = (range["" + osName + boxName] || range[boxName] || range[osName] || {});
    // 必须要有 v
    if (opt.v) {
        var version = (0, get_box_version_1.getBoxVersion)(boxName);
        var versionRange = opt.versionRange;
        if (versionRange && (0, is_1.isString)(versionRange)) {
            // 支持 '3.9-7.0' 写法
            versionRange = versionRange.split('-');
        }
        var _a = versionRange, startV = _a[0], endV = _a[1];
        if ((0, version_compare_1.versionCompare)(version, startV) >= 0 && (!endV || (endV && (0, version_compare_1.versionCompare)(version, endV) <= 0))) {
            params = opt.params ? opt.params : params;
            var others = {};
            if (params.params) {
                // 含有 params 的 params = {params: {}, upgrade:1}
                var tmp = Object.assign({}, params.params);
                params.params = null; // 删不掉？
                delete params.params;
                others = Object.assign({}, params);
                params = tmp;
            }
            var args = {};
            if (others && (0, type_1.getType)(others) === 'object') {
                args = (0, tslib_1.__assign)({ params: json2params(params) }, others);
            }
            else {
                args = { params: json2params(params) };
            }
            // 兼容 action 不一样的情况，直接写在配置里面
            action = "v" + opt.v + "/" + (opt.action ? opt.action : action);
            return invokeP(action, args, schemaHead);
        }
    }
    return Promise.reject(const_1.COMMAND_NOT_EXIST);
}
exports.xRegister = xRegister;
