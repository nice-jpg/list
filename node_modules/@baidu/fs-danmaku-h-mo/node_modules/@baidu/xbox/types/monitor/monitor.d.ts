/**
 * @file 统计、监控类用到的基类
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
import type { KeyValue } from '../is';
declare type MonitorBeforeMethod = (data: KeyValue) => false | KeyValue;
interface MonitorOptions {
    before?: MonitorBeforeMethod;
    globalData?: KeyValue;
}
/**
 * Monitor 日志监控类，可以直接用，或者继承他扩展他！
 *
 * @class Monitor
 * @param url 接受打点的 url 地址
 * @param options 配置，包括 before 处理函数和全局通用数据 globalData
 * @example
 * const monitor = new Monitor('http://baidu.com/gt.gif', {
 *      before:(data)=> {
 *          return data;
 *      },
 *      globalData: {
 *          a:1
 *      }
 * });
 * monitor.mark({b:1}).mark({cd:1}).send();
 * monitor.report({c:1});
 */
export declare class Monitor {
    private _mdata;
    private readonly _url;
    private readonly _default;
    private readonly _data;
    private readonly _before?;
    constructor(url: string, options?: MonitorOptions);
    /**
     * 设置全局数据
     *
     * @param data 需要 set 的数据对象
     * @return 当前实例
     */
    setGlobalData(data: KeyValue): this;
    /**
     * 用于多次记录数据，数据会累计，只有调用过一次 send 方法才会清空
     * **注意**：后面传入同名的字段会覆盖掉之前传入的
     * **注意**：mark 的数据只能通过手动调用 send 才发送
     * 期间 report 方法的数据是单独发送的
     * 用于数据采集打点，比如速度统计，一个时间点一个打点，最后汇总发送
     *
     * @param data 用于添加的数据
     * @return 当前实例
     */
    mark(data?: {}): this;
    _send(data: KeyValue, force?: boolean): this;
    /**
     * 跟 mark 配合使用，发送 mark 记录的数据
     *
     * @param force 是否跳过 before 函数处理直接发请求
     * @return 当前示例
     */
    send(force: boolean): this;
    /**
     * 发送数据
     *
     * @param data 发送的数据
     * @param force 是否跳过 before 函数处理直接发请求
     * @return 当前实例
     */
    report(data: {} | undefined, force: boolean): this;
}
export {};
