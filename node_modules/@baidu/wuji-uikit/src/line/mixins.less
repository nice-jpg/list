/**
 * @file line mixins
 * @author Sheeta(wuhayao@gmail.com)
 */

// 设置线条背景颜色
.set-background-color(@color) {
    & when (iscolor(@color) = true) {
        background-color: @color;
    }
    & when (iscolor(@color) = false) {
        .wuji-background(@color);
    }
}

// hack: 安卓夜间模式1px看不清，通过在伪元素:after上定义rgba颜色后再微调透明度
// .hairline-nightmode() {
//     @{selector-night} &:after {
//         border-color: rgba(0, 0, 0, .9);
//         background-color: rgba(0, 0, 0, .01);
//         opacity: .3;
//     }
// }

// 单独设置边框宽度属性
.wuji-border-width(@code, @position: around) {
    // 确定边框属性
    @prop: if(@position = around, e('border-width'), e('border-@{position}-width'));
    @{prop}: addUnit(getLine(@code), @dpr, @unit);
}
// 单独设置上边框宽度↑
.wuji-border-top-width(@code) {
    .wuji-border-width(@code, top);
}
// 单独设置右边框宽度→
.wuji-border-right-width(@code) {
    .wuji-border-width(@code, right);
}
// 单独设置下边框宽度↓
.wuji-border-bottom-width(@code) {
    .wuji-border-width(@code, bottom);
}
// 单独设置左边框宽度←
.wuji-border-left-width(@code) {
    .wuji-border-width(@code, left);
}

// 设置边框样式，参数说明：
// @params: 第一项可以是数值或线条编码，第三项可以是颜色值或CAM编码
// @position: around/top/right/bottom/left
.wuji-border(@params, @position: around) when (length(@params) = 3) {
    @border-prop: if(@position = around, e('border'), e('border-@{position}'));
    // 宽度不是数字时按编码取值
    @tmp-width: extract(@params, 1);
    // @width: if(isnumber(@tmp-width), @tmp-width, addUnit(getLine(@tmp-width), @dpr, @unit));
    @style: extract(@params, 2);
    @color: extract(@params, 3);

    // eg: 1px solid red
    & when (iscolor(@color)) and (isnumber(@tmp-width)) {
        @{border-prop}: @tmp-width @style @color;
    }

    // eg: L_X03 dashed red
    & when (iscolor(@color)) and not (isnumber(@tmp-width)) {
        @width: addUnit(getLine(@tmp-width), @dpr, @unit);
        @{border-prop}: @width @style @color;
    }

    // eg: 1px solid CAM_X001
    & when not (iscolor(@color)) and (isnumber(@tmp-width)) {
        @{border-prop}: @tmp-width @style;
        .wuji-border-color(@color, @position);
    }

    // eg: L_X03 solid CAM_X001
    & when not (iscolor(@color)) and not (isnumber(@tmp-width)) {
        @width: addUnit(getLine(@tmp-width), @dpr, @unit);
        @{border-prop}: @width @style;
        .wuji-border-color(@color, @position);
    }
}
// 单独设置上边框样式↑
.wuji-border-top(@params) {
    .wuji-border(@params, top);
}
// 单独设置右边框样式→
.wuji-border-right(@params) {
    .wuji-border(@params, right);
}
// 单独设置下边框样式↓
.wuji-border-bottom(@params) {
    .wuji-border(@params, bottom);
}
// 单独设置左边框样式←
.wuji-border-left(@params) {
    .wuji-border(@params, left);
}

// 以容器元素border属性实现线条时的样式
// @code: L_X*
// @position: around/top/right/bottom/left
// @color: color/CAM_X*
// @radius: J_X*
.wuji-line(@code: L_X03, @position: around, @color: #000, @radius: false) {
    // 判断是否需要添加伪元素
    @pseudo: if(getLine(@code) < 3, after, false);

    // 线条宽度不小于3时添加边框样式
    & when (@pseudo = false) {
        .wuji-border(@code solid @color, @position);
    }

    // 线条宽度小于3时添加伪元素
    & when (@pseudo = after) {
        position: relative;
        overflow: visible;

        &:after {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            pointer-events: none;
            transform-origin: 0 0;
            .wuji-border(if(@code = L_X01, 1px, 2px) solid @color, @position);
        }

        .set-media(1.5, {
            &:after {
                width: 150%;
                height: 150%;
                // less4以下
                // transform: scale(1 / 1.5);
                // less4以上，除运算要额外使用括号括起来
                // transform: scale((1 / 1.5));
                transform: scale(0.66666667);
            }
        });

        .set-media(2, {
            &:after {
                width: 200%;
                height: 200%;
                transform: scale(0.5);
            }
        });

        .set-media(3, {
            &:after {
                width: 300%;
                height: 300%;
                transform: scale(0.33333333);
            }
        });
    }

    // 按圆角编码添加圆角
    & when not (@radius = false) {
        .wuji-border-radius(@radius, around, @pseudo);
    }
}

// 以元素宽高实现线条时的样式
// @code: L_X*
// @color: color/CAM_X*
// @direction: horizontal/vertical
// @width: horizontal时有效
// @height: vertical时有效
.wuji-divider(@code: L_X03, @color: transparent, @direction: horizontal, @width: auto, @height: auto) {
    // 判断是否需要添加伪元素
    @pseudo: if(getLine(@code) < 3, after, false);
    // 线宽属性
    @line-prop: if(@direction = horizontal, height, width);
    // 线长属性
    @size-prop: if(@direction = horizontal, width, height);
    // 设置线长
    @{size-prop}: if(@size-prop = width, @width, @height);

    // 线条宽度不小于3时添加边框样式
    & when (@pseudo = false) {
        // 设置线宽
        @{line-prop}: addUnit(getLine(@code), @dpr, @unit);
        // 添加背景色
        .set-background-color(@color);
    }

    // 线条宽度小于3时添加伪元素，本身占宽度1px
    & when (@pseudo = after) {
        position: relative;
        background-color: transparent;
        @{line-prop}: 1px;

        // 水平方向按Y轴缩放，垂直方向按X轴缩放
        @scale: if(@direction = horizontal, scaleY, scaleX);

        &:after {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            transform-origin: 0 0;
            @{line-prop}: if(@code = L_X01, 1px, 2px);
            @{size-prop}: 100%;
            .set-background-color(@color);
        }

        .set-media(1.5, {
            &:after {
                transform: e(%('@{scale}(%d)', 0.66666667));
            }
        });

        .set-media(2, {
            &:after {
                transform: e(%('@{scale}(%d)', 0.5));
            }
        });

        .set-media(3, {
            &:after {
                transform: e(%('@{scale}(%d)', 0.33333333));
            }
        });
    }
}
