/**
 * @file color mixins
 * @author wuji.baidu-int.com
 *
 * 区别于color、background-color、border-color等受全局dark-mode和night-mode变量影响。
 * fill属性可以定义局部变量night-mode，这在关闭夜间模式情况下，可以单独保留svg填充颜色fill属性。
 * 究其原因：百度APP安卓夜间模式下，基本的颜色属性不能通过css定义生效，svg的颜色属性例外。建议自行测试验证和理解。
 */

// TODO: 使用css变量
// .use-cssvar() {}

// mixin: 生成背景颜色
.wuji-background-color(@code: undefined) {
    @color-default: getColor(@code);
    background-color: @color-default;

    & when (@multi-mode = true) and (@dark-mode = true) {
        @color-dark: getColor(@code, dark);

        & when (@force-dark-output = true), not (@color-dark = 'null') and not (@color-dark = @color-default) {
            @{selector-dark} & {
                background-color: @color-dark;
            }
        }
    }

    & when (@multi-mode = true) and (@night-mode = true) {
        @color-night: getColor(@code, night);

        & when not (@color-night = 'null') and not (@color-night = @color-default) {
            @{selector-night} & {
                background-color: @color-night;
            }
        }
    }

    & when (@multi-mode = true) and not (@selector-default = '') {
        @{selector-default} & {
            background-color: @color-default;
        }
    }
}

// mixin: 添加区分模式的背景图片(可置于全局mixin中)
.wuji-background-image(@src: null, @src-dark: null, @src-night: null) {
    & when not (@src = null) {
        background-image: url(@src);
    }
    & when (@multi-mode = true) {
        & when not (@src-dark = null) and (@dark-mode = true) and not (@src = @src-dark) {
            @{selector-dark} & {
                background-image: url(@src-dark);
            }
        }
        & when not (@src-night = null) and (@night-mode = true) and not (@src = @src-night) {
            @{selector-night} & {
                background-image: url(@src-night);
            }
        }
    }
}

// mixin: 生成背景颜色
.wuji-background(@code: undefined) {
    .wuji-background-color(@code);
}

// mixin: 生成描边颜色
.wuji-border-color(@code: undefined, @position: around) {
    @color-default: getColor(@code);
    @prop: if(@position = around, e('border-color'), e('border-@{position}-color'));
    @{prop}: @color-default;

    & when (@multi-mode = true) and (@dark-mode = true) {
        @color-dark: getColor(@code, dark);

        & when (@force-dark-output = true), not (@color-dark = 'null') and not (@color-dark = @color-default) {
            @{selector-dark} & {
                @{prop}: @color-dark;
            }
        }
    }

    & when (@multi-mode = true) and (@night-mode = true) {
        @color-night: getColor(@code, night);

        & when not (@color-night = 'null') and not (@color-night = @color-default) {
            @{selector-night} & {
                @{prop}: @color-night;
            }
        }
    }

    & when (@multi-mode = true) and not (@selector-default = '') {
        @{selector-default} & {
            @{prop}: @color-default;
        }
    }
}

// mixin: 生成描边颜色
// 当第一个参数是多值情况且固定顺序 <line-width> <line-style> <color> 时
// 会调用line/mixin.less中的wuji-border方法，参数示例：1px solid red
.wuji-border(@code: undefined, @position: around) when (length(@code) = 1) {
    .wuji-border-color(@code, @position);
}

// mixn: 生成上描边颜色
.wuji-border-top-color(@code: undefined) {
    .wuji-border-color(@code, top);
}

// mixn: 生成下描边颜色
.wuji-border-bottom-color(@code: undefined) {
    .wuji-border-color(@code, bottom);
}

// mixn: 生成左描边颜色
.wuji-border-left-color(@code: undefined) {
    .wuji-border-color(@code, left);
}

// mixn: 生成右描边颜色
.wuji-border-right-color(@code: undefined) {
    .wuji-border-color(@code, right);
}

// mixin: 生成文字颜色
.wuji-color(@code: undefined) {
    @color-default: getColor(@code);
    color: @color-default;

    & when (@multi-mode = true) and (@dark-mode = true) {
        @color-dark: getColor(@code, dark);

        & when (@force-dark-output = true), not (@color-dark = 'null') and not (@color-dark = @color-default) {
            @{selector-dark} & {
                color: @color-dark;
            }
        }
    }

    & when (@multi-mode = true) and (@night-mode = true) {
        @color-night: getColor(@code, night);

        & when not (@color-night = 'null') and not (@color-night = @color-default) {
            @{selector-night} & {
                color: @color-night;
            }
        }
    }

    & when (@multi-mode = true) and not (@selector-default = '') {
        @{selector-default} & {
            color: @color-default;
        }
    }
}

// mixin: 生成svg填充颜色
.wuji-fill(@code: undefined, @night-mode: true) {
    @color-default: getColor(@code);
    fill: @color-default;

    & when (@multi-mode = true) and (@dark-mode = true) {
        @color-dark: getColor(@code, dark);

        & when (@force-dark-output = true), not (@color-dark = 'null') and not (@color-dark = @color-default) {
            @{selector-dark} & {
                fill: @color-dark;
            }
        }
    }

    & when (@multi-mode = true) and (@night-mode = true) {
        @color-night: getColor(@code, night);

        & when not (@color-night = 'null') and not (@color-night = @color-default) {
            @{selector-night} & {
                fill: @color-night;
            }
        }
    }

    & when (@multi-mode = true) and not (@selector-default = '') {
        @{selector-default} & {
            fill: @color-default;
        }
    }
}

// mixin: 生成光标颜色
.wuji-caret(@code: undefined) {
    @color-default: getColor(@code);
    caret-color: @color-default;

    & when (@multi-mode = true) and (@dark-mode = true) {
        @color-dark: getColor(@code, dark);

        & when (@force-dark-output = true), not (@color-dark = 'null') and not (@color-dark = @color-default) {
            @{selector-dark} & {
                caret-color: @color-dark;
            }
        }
    }

    & when (@multi-mode = true) and (@night-mode = true) {
        @color-night: getColor(@code, night);

        & when not (@color-night = 'null') and not (@color-night = @color-default) {
            @{selector-night} & {
                caret-color: @color-night;
            }
        }
    }

    & when (@multi-mode = true) and not (@selector-default = '') {
        @{selector-default} & {
            caret-color: @color-default;
        }
    }
}

// mixin: 生成透明度
.wuji-opacity(@code: undefined) {
    opacity: getOpacity(@code);
}

// mixin: 根元素注入默认color、background-color, 默认根元素html
.wuji-root(
    @color: CAM_X791, // GC1
    @background: CAM_X392, // GC9
    @selector-root: @selector-root,
    @selector-dark: @selector-dark,
    @selector-night: @selector-night
) {
    // 如果选择器参数是字符串类型，需要escape
    @rule1: if(isstring(@selector-root), e(@selector-root), @selector-root);
    @rule2: if(isstring(@selector-dark), e(@selector-dark), @selector-dark);
    @rule3: if(isstring(@selector-night), e(@selector-night), @selector-night);

    @{rule1} {
        color: getColor(@color);
        background-color: getColor(@background);

        & when (@multi-mode = true) and (@dark-mode = true) {
            &@{rule2} {
                color: getColor(@color, Dark);
                background-color: getColor(@background, Dark);
            }
        }

        & when (@multi-mode = true) and (@night-mode = true) {
            &@{rule3} {
                color: getColor(@color, Night);
                background-color: getColor(@background, Night);
            }
        }
    }
}
