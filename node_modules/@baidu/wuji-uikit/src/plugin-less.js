/**
 * @file 自定义less插件 plugin-less.js
 * @author baozhixin, zhoutingshuai
 *
 * TIPS(调试中遇到的小问题，初步判断对性能并没有大的影响)
 * 在less文件中调用插件中定义的方法时，执行一次，eg
 *     color: getColor(CAM_X001); // 执行一次
 * 在less文件的mixin中以变量赋值的形式调用，并在后续代码逻辑中使用这个变量，插件中的方法会重复执行，eg
 *     @color: getColor(CAM_X001); // 执行一次
 *     color: @color; // 又执行一次
 */

/* global less */

const DESIGN_DPR = 3;

// 字符串处理为首字母大写
const capitalize = s => {
    if (typeof s !== 'string') {
        return '';
    }
    return s.charAt(0).toUpperCase() + s.slice(1);
};

// 提示编码错误
const warn = code => {
    throw {
        type: 'Argument',
        message: `
    - 编码错误【${code}】
    - 既不是业务编码，也不是共生编码
    - 请查看平台元素 http://wuji.baidu-int.com/uikit
    - 或查看开发文档 http://wuji.baidu-int.com/docs/develop/materials/wuji-uikit.html
`,
    };
};

// 格式化属性值
const format = ({code, value, target}) => {
    if (typeof value === 'undefined') {
        warn(code);
    }
    // 要想返回字符串需要调用quoted方法，空值返回'null'，可以在less中做条件判断，暂时没有其他更好的处理方式
    if (value === null) {
        return less.quoted("'", 'null', false);
    }
    // 不透明度编码/线条编码/字号编码/间距编码等返回数值类型
    if (~['opacity', 'line', 'fontSize', 'spacing'].indexOf(target) < 0) { // eslint-disable-line
        return new less.tree.Dimension(value);
    }
    // 边角编码返回数值类型，取值为0.5H处理为极大值900实现全圆角
    if (target === 'radius') {
        return value === '0.5H' ? 900 : value;
    }
    if (target === 'shadow') {
        return new less.tree.Expression(value.split(' ').map(val => new less.tree.Keyword(val)));
    }
    return value;
};

// 从共生编码和业务编码表中获取不同模式下编码值的方法
const compatibleFunc = ({subdir, target, patten, defaultMode = 'default'}) => {
    return ({value: code} = {}, {value: mode = defaultMode} = {}) => {
        if (code === 'undefined') {
            warn(code);
        }

        const BASE = require(`./${subdir}/${target}`);
        const keyMode = `${capitalize(mode)}_${capitalize(target)}`;

        let keyCode = code;
        if (!patten.test(code)) {
            const bussinessMap = require(`./${subdir}/bussiness.js`)[`Bussiness_${capitalize(subdir)}`];
            if (bussinessMap.hasOwnProperty(code)) {
                keyCode = bussinessMap[code];
            }
        }

        const value = BASE[keyMode][keyCode];
        return format({code, value, mode, target});
    };
};

module.exports = {
    install(_less, _pluginManager, functions) {
        functions.addMultiple({
            // 数值类型属性添加单位
            addUnit({value}, {value: dpr}, {value: un, unit}) {
                let vals;
                if (typeof value === 'string') {
                    vals = value.trim().split(' ');
                }
                else {
                    vals = Array.isArray(value) ? value : [value]; // eslint-disable-line
                }
                const trans = val => {
                    if (val === null || +val === 0) {
                        return new less.tree.Dimension(0);
                    }
                    if (val instanceof less.tree.Node) {
                        val = val.value;
                    }
                    return new less.tree.Dimension(((parseFloat(val) * dpr) / DESIGN_DPR) * un, unit);
                };

                return new less.tree.Expression(vals.map(trans));
            },
            // 获取颜色编码在给定模式下的色值，编码不存在时给出错误提示
            getColor: compatibleFunc({
                subdir: 'color',
                target: 'cam',
                patten: /^CAM_X/,
            }),
            // 获取透明度
            getOpacity: compatibleFunc({
                subdir: 'color',
                target: 'opacity',
                patten: /^A_X/,
            }),
            // 获取字形编码在给定模式下的值
            getFontWeight: compatibleFunc({
                subdir: 'font',
                target: 'fontWeight',
                defaultMode: 'h5',
                patten: /^F_X/,
            }),
            // 获取字号编码在给定模式下的值
            getFontSize: compatibleFunc({
                subdir: 'font',
                target: 'fontSize',
                defaultMode: 'h5',
                patten: /^T_X/,
            }),
            // 获取间距编码在给定模式下的值
            getSpacing: compatibleFunc({
                subdir: 'spacing',
                target: 'spacing',
                defaultMode: 'h5',
                patten: /^(M_H_X|M_W_X|M_T_X)/,
            }),
            // 获取边角编码在给定模式下的值
            getRadius: compatibleFunc({
                subdir: 'radius',
                target: 'radius',
                defaultMode: 'h5',
                patten: /^J_X/,
            }),
            // 获取线条编码在给定模式下的值
            getLine: compatibleFunc({
                subdir: 'line',
                target: 'line',
                defaultMode: 'h5',
                patten: /^L_X/,
            }),
            // 获取投影编码的内容，之后要在less/css中处理
            getShadow: compatibleFunc({
                subdir: 'shadow',
                target: 'shadow',
                patten: /^(S_I_X|S_O_X)/,
            }),
            // 获取高度编码在给定模式下的值
            getHeight: compatibleFunc({
                subdir: 'dimension',
                target: 'height',
                defaultMode: 'h5',
                patten: /^H_X/,
            }),
            // 获取宽度编码在给定模式下的值
            getWidth: compatibleFunc({
                subdir: 'dimension',
                target: 'width',
                defaultMode: 'h5',
                patten: /^W_X/,
            }),
        });
    },
};
