"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.invokeApp = invokeApp;
exports.postMsgInvoke = postMsgInvoke;
exports.componentInvoke = componentInvoke;
exports.syncInvoke = syncInvoke;
exports.invokeWithCb = invokeWithCb;
exports.default = void 0;

var _stringify = _interopRequireDefault(require("../../stringify"));

var _is = require("../../is");

var _getGlobalFunc = _interopRequireDefault(require("../../get-global-func"));

var _getMatrixSchema = _interopRequireDefault(require("../../get-matrix-schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * 任意 scheme 调起，不校验baiduboxapp://
 * @function default
 * @param {string} scheme - 任意 scheme
 */
var invoke = function invoke(scheme) {
  if (isSchemeValid(scheme)) {
    var $node = document.createElement('iframe');
    $node.style.display = 'none';
    $node.src = scheme;
    var body = document.body || document.getElementsByTagName('body')[0];
    body.appendChild($node); // 销毁 iframe

    setTimeout(function () {
      body.removeChild($node);
      $node = null;
    }, 0);
  }
};
/**
 * @function default
 * @param {string} scheme - ios schema
 */


var _default = invoke;
/**
 * ios.invokeApp，因为需要创建iframe，所以回调是异步的请求
 * @function invokeApp
 * @param  {String}   action   调用的action，例如downloadnovel
 * @param  {Object}   params   参数对象
 * @param  {Function} callback 回调函数
 * @example
 * invokeApp('getspeedlogdata', function(cData) {
 *     console.log(cData);
 * });
 * invokeApp('downloadnovel', {
 *     url:'xxxx',
 *     title: 'xxxxxxx'
 * }, function(cData) {
 *     if(cData.error==0){
 *         console.log('success');
 *         alert(cData.result);
 *     }else{
 *         console.log('fail');
 *     }
 * });
 */

exports.default = _default;

function invokeApp(action, params, callback) {
  var schemaHead = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : (0, _getMatrixSchema.default)();
  var url = [];

  if ((0, _is.isFunction)(params)) {
    callback = params;
  } else {
    for (var i in params) {
      url.push(i + '=' + params[i]);
    }
  }

  if ((0, _is.isFunction)(callback)) {
    var funcName = (0, _getGlobalFunc.default)(callback);
    url.push('func=' + funcName);
  } else if (callback) {
    url.push('func=' + callback);
  }

  return invoke(schemaHead + '://' + action + '?' + url.join('&'));
}
/**
 * 使用 postMsg 调起
 * BBAMNPJSBridge.postMessage
 * @function postMsgInvoke
 * @param {string} scheme - 调起命令
 */


function postMsgInvoke(scheme) {
  if (isSchemeValid(scheme)) {
    /* eslint-disable no-undef */
    window.webkit && webkit.messageHandlers.BBAMNPJSBridge.postMessage(scheme);
  }
}
/**
 * BBAMNPJSBridgeWebViewComponent.postMsg
 * @function componentInvoke
 * @param {string} scheme - 调起命令
 */


function componentInvoke(scheme) {
  if (isSchemeValid(scheme)) {
    window.webkit && webkit.messageHandlers.BBAMNPJSBridgeWebViewComponent.postMessage(scheme);
  }
}

function syncInvoke(scheme) {
  if (isSchemeValid(scheme)) {
    return window.prompt("BdboxApp:".concat((0, _stringify.default)({
      obj: 'mnp',
      func: 'dispatch',
      args: [scheme]
    })));
  }

  return null;
}

function isSchemeValid(scheme) {
  return scheme && typeof scheme === 'string' && scheme.length > 10 && (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object';
}
/**
 * 带回调的端能力
 * @function easyOpen
 * @param url  {String}
 * @param callback  {callback}
 */


function invokeWithCb(url, callback) {
  if (!url) {
    typeof callback === 'function' && callback(false);
    return;
  } // 记录起始时间


  var last = Date.now(); // 创建一个iframe

  var ifr = document.createElement('IFRAME');
  ifr.src = url;
  ifr.style.display = 'none'; // 飘出屏幕外

  ifr.style.position = 'absolute';
  ifr.style.left = '-2000px';
  ifr.style.top = '-1000px';
  ifr.style.width = '1px';
  ifr.style.height = '1px'; // 设置一个4秒的动画用于检查客户端是否被调起

  ifr.style.webkitTransition = 'all 1s';
  ifr.style.transition = 'all 1s';
  document.body.appendChild(ifr);
  setTimeout(function () {
    var end = function end() {
      document.body.removeChild(ifr);

      if (Date.now() - last < 1500) {
        // 如果动画执行时间在预设范围内，就认为没有调起客户端
        callback(true);
      } else {
        // 动画执行超过预设范围，认为调起成功
        callback(false);
      }
    }; // 监听动画完成时间


    ifr.addEventListener('webkitTransitionEnd', end, false);
    ifr.addEventListener('transitionEnd', end, false); // 启动动画

    ifr.style.left = '-10px';
  }, 0);
}