"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BILog = void 0;

var _pblog = require("./pblog");

var _is = require("../is");

var _getBoxVersion = _interopRequireWildcard(require("../get-box-version"));

var _extend = _interopRequireDefault(require("../extend"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var UA = navigator.userAgent;
/**
 * @class BILog
 * @param    {string}    id      统计指标唯一ID
 * @param    {obj}       obj     actiondata的content结构
 * @example
 * 初始化：      let log = pblogExt('100'); || pblogExt('100', {...}) 同时配置参数
 * 配置基本公参： log.config({cuid: 1000});
 * 统计上报：    log.event({type: 'pageclk'}); || event({...}, '11100') 上报修改初始化id
 */

var BILog = /*#__PURE__*/function () {
  function BILog(id, obj) {
    _classCallCheck(this, BILog);

    this.pblog = new _pblog.PBLog();
    var actionData = {
      // 统计指标唯一ID
      id: id,
      // 日志类型：0—事件类  1—流类型
      type: '0',
      // 事件上报的时间戳，单位：毫秒
      timestamp: '',
      // 扩展内容字段
      content: {
        boxV: (0, _getBoxVersion.getV)(),
        boxVersion: (0, _getBoxVersion.default)(),
        boxPlatform: UA.match(/(iPad|iPhone|iPod)/gim) ? 'ios' : 'android',
        hybridVersion: '',
        network: 'unknown',
        cuid: '',
        // 统一业务指标公共字段
        from: '',
        type: '',
        page: '',
        source: '',
        value: '',
        ext: {}
      }
    };
    (0, _is.isPlainObject)(obj) && (0, _extend.default)(actionData.content, obj);
    var data = {
      // 日志来源，12---UBC日志  99---H5前端日志 100---Server端日志
      cateid: 99,
      // 区分主动/被动，1---主动  0---被动
      actiontype: 1,
      actiondata: actionData
    };
    this.data = data;
    this.pblog.setGlobalData({
      data: data
    });
  } // 设置actiondata的content


  _createClass(BILog, [{
    key: "config",
    value: function config(params) {
      (0, _extend.default)(this.data.actiondata.content, params);
      this.pblog.setGlobalData({
        data: this.data
      });
      return this;
    }
  }, {
    key: "event",
    value: function event(params) {
      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var type = '0';
      var timestamp = Math.floor(Date.now() / 1000);
      var actionData = {
        type: type,
        timestamp: timestamp,
        content: params
      };

      if (typeof id === 'string') {
        actionData.id = id;
      }

      this.pblog.newEvent([actionData]);
    }
  }]);

  return BILog;
}();

exports.BILog = BILog;

var _default = function _default(id) {
  var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return new BILog(id, obj);
};

exports.default = _default;