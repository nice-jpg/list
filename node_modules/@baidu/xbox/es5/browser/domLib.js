"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDivByClass = createDivByClass;
exports.createDomFromString = createDomFromString;
exports.closest = closest;

/**
 * @file Dom相关函数库
 * @author jianglian(jianglian01@baidu.com)
 */

/**
 * 通过类名生成div元素
 *
 * @param {!string} className 多个类名空格隔开
 * @return {Object} 返回生成div元素dom对象
 */
function createDivByClass(className) {
  var div = document.createElement('div');
  div.setAttribute('class', className);
  return div;
}
/**
 * html字符串转换为对应dom结构
 *
 * @param {!string} str 对应html字符串
 * @param {boolean} isArray 若str非单一闭合元素，则为真
 * @return {Object} 返回生成dom元素，多个dom则只返回第一个元素
 *                  若指定isArray为true且包含多个元素，返回对应fragment
 */


function createDomFromString(str, isArray) {
  var el = document.createElement('div');
  el.innerHTML = str;
  var length = el.children.length;

  if (!isArray || length === 1) {
    return el.children[0];
  }

  var fragment = document.createDocumentFragment();

  for (var i = 0; i < length; i++) {
    fragment.appendChild(el.children[0]);
  }

  return fragment;
}
/**
 * 查找指定dom的包含特定类名的最近祖先，不存在返回null
 *
 * @param {!Object} dom 对应dom元素
 * @param {!string} className 指定单一类名
 * @return {?Object} 指定最近祖先元素
 */


function closest(dom, className) {
  while (dom && dom !== document) {
    if (!dom.classList.contains(className)) {
      dom = dom.parentNode;
    } else {
      return dom;
    }
  }

  return null;
}