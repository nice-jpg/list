let toString = Object.prototype.toString;

function map(obj, callback, merge) {
    let index = 0;
    for (let key in obj) {
        if (obj.hasOwnProperty(key)) {
            if (merge) {
                callback[key] = obj[key];
            } else if (callback(key, obj[key], index++)) {
                break;
            }
        }
    }
}

export function clone(source) {
    let ret;
    switch (toString.call(source)) {
        case '[object Object]':
            ret = {};
            map(source, function (k, v) {
                ret[k] = clone(v);
            });
            break;
        case '[object Array]':
            ret = [];
            source.forEach(function (ele) {
                ret.push(clone(ele));
            });
            break;
        default:
            ret = source;
    }
    return ret;
}
