/**
 * @file 统计、监控类用到的基类
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
import {isPlainObject, isFunction, isString, isUndefined} from '../is';
import guid from '../guid';
import json2query from '../json2query';
import parseUrl from '../parse-url';
import typeError from '../type-error';
import extend from '../extend';

/**
 * Monitor 日志监控类，可以直接用，或者继承他扩展他！
 * @class Monitor
 * @param {String} url - 接受打点的 url 地址
 * @param {Object} options - 配置，包括 before处理函数 和 全局通用数据：globalData
 * @example
 * const monitor = new Monitor('http://baidu.com/gt.gif', {
 *      before:(data)=>{
 *      return data;
 * },
 * globalData:{
 *          a:1
 *      }
 * });
 * monitor.mark({b:1}).mark({cd:1}).send();
 * monitor.report({c:1});
 */
class Monitor {
    constructor(url, options = {}) {
        const urlObj = parseUrl(url);
        url = urlObj.url;
        if (url.indexOf('//') === 0) {
            // 通用协议，这里需要处理，解决 hybrid 使用 file 协议的情况
            let protocol = location.protocol;
            if (protocol !== 'http:') {
                protocol = 'https:';
            }

            url = protocol + url;
        }

        this.url = url;
        const globalData = options.globalData || {};
        this._default = Object.assign(urlObj.query || {}, globalData);
        this._data = {};
        this._before = options.before;
    }
    /**
     * 设置全局数据
     * @param {Object} data - 需要 set 的数据对象
     */
    setGlobalData(data) {
        if (isPlainObject(data)) {
            extend(this._default, data);
        }
        return this;
    }

    /**
     * 用于多次记录数据，数据会累计，只有调用过一次 send 方法才会清空
     * **注意**：后面传入同名的字段会覆盖掉之前传入的
     * **注意**：mark 的数据只能通过手动调用 send 才发送
     * 期间 report 方法的数据是单独发送的
     * 用于数据采集打点，比如速度统计，一个时间点一个打点，最后汇总发送
     * @param {Object} data - 用于添加的数据
     * @return {Monitor}
     */
    mark(data = {}) {
        if (!isPlainObject(data)) {
            throw typeError('data', 'object', data);
        }
        // 增加
        if (isPlainObject(data)) {
            Object.assign(this._mdata, data);
        }

        // 其他类型数据扔掉，只收 object|string
        return this;
    }
    _send(data, force = false) {
        if (!isPlainObject(data)) {
            throw typeError('data', 'object', data);
        }

        let img = new Image(1, 1);
        const imgName = `_xbox_mt_${guid()}`;
        window[imgName] = img;

        img.onload = img.onerror = img.onabort = () => {
            img.onload = img.onerror = img.onabort = null;
            window[imgName] = img = null;
        };
        // 增加 默认数据
        data = extend({}, this._default, data);

        const before = this._before;
        if (!force && isFunction(before)) {
            const result = before(data);
            // 如果返回是 false 则不发送
            if (result === false) {
                return this;
            } else if (isUndefined(result)) {
                // 如果是 undefined， 则继续使用 data
            } else if (isPlainObject(result) || isString(result)) {
                // 如果是对象或者字符串，则替换 data；
                data = result;
            }
        }

        const url = `${this.url}?${isString(data) ? data : json2query(data, true)}`;
        img.src = url + '&_rnd=' + guid();
        return this;
    }

    /**
     * 跟 mark 配合使用，发送 mark 记录的数据
     * @param {Boolean} force - 是否跳过 before 函数处理直接发请求
     * @return {Monitor}
     */
    send(force) {
        this._send(this._data, force);
        // 发送过一次之后就清空
        delete this._mdata;
        this._mdata = {};

        return this;
    }

    /**
     * @param {Object} data - 发送的数据
     * @param {Boolean} force - 是否跳过 before 函数处理直接发请求
     * @return {Monitor}
     */
    report(data = {}, force) {
        if (!isPlainObject(data)) {
            throw typeError('data', 'object', data);
        }

        return this._send(data, force);
    }
}
// eslint-disable-next-line JS630
export default Monitor;
