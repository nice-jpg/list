/**
 * @file XMLHttpRequest 简单封装(应该满足90%需求)，主要用于sdk 类对 ajax简单的应用，复杂应用使用 flyjs等
 * @module browser
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
import type from '../type';
const accepts = {
    json: 'application/json',
    xml: 'application/xml, text/xml',
    html: 'text/html',
    text: 'text/plain'
};
const empty = () => {};
/**
 * @function ajax
 * @param {string} url - 地址
 * @param {object} options - 参数
 * @return {Promise} promise 支持 abort 的 promise
 * ajax(
 *  url,
 * {
 * method: 'get',
 *  timeout = 0,
        dataType:'json',
        contentType: 'application/x-www-form-urlencoded',
        data,
        username,
        password,
        success,
        before,
        error,
        complete,
        context
 * }
 * );
 */
export default (url, options) => {
    const xhr = new XMLHttpRequest();
    if (type(url) === 'object') {
        options = url;
        url = options.url;
    }
    if (!url) {
        // 默认使用本页 url
        url = location.toString();
    }
    const protocol = /^([\w-]+:)\/\//.test(url) ? RegExp.$1 : location.protocol;

    const {
        timeout = 0,
        dataType = 'json',
        contentType = 'application/x-www-form-urlencoded',
        username,
        password,
        success,
        error,
        complete,
        before,
        context
    } = type(options) === 'object' ? options : {};
    const method = type(options.method) === 'string' ? options.method.toUpperCase() : 'GET';
    const isGet = method === 'GET';
    let data = options.data;
    let dataStr = '';
    for (let key in data) {
        if (data.hasOwnProperty(key)) {
            dataStr += `${key}=${data[key]}&`;
        }
    }
    data = dataStr.slice(0, -1);
    if (isGet && data) {
        url += '?' + data;
    }

    // 处理 headers
    const headers = {};
    const setHeader = (name, value) => (headers[name.toLowerCase()] = [name, value]);

    const mime = accepts[dataType];
    setHeader('Accept', mime || '*/*');

    if (contentType || (contentType !== false && data && !isGet)) {
        // post 使用 application/x-www-form-urlencoded
        setHeader('Content-Type', contentType);
    }

    // 这个是 abortTimeout
    let abortTimeout;
    const p = new Promise((resolve, reject) => {
        function ajaxSuccess(data) {
            const status = 'success';
            getFn(success).call(context, data, xhr, options);
            resolve(data, xhr, options);
            ajaxComplete(status);
        }
        // type: "timeout", "error", "abort", "parsererror"
        function ajaxError(e, type) {
            getFn(error).call(context, e, type, xhr, options);
            reject(e, type, xhr, options);
            ajaxComplete(type);
        }
        // status: "success", "notmodified", "error", "timeout", "abort", "parsererror"
        function ajaxComplete(status) {
            getFn(complete).call(context, status, xhr, options);
        }

        xhr.onreadystatechange = () => {
            const readyState = parseInt(xhr.readyState, 10);
            if (readyState === 4) {
                xhr.onreadystatechange = empty;
                clearTimeout(abortTimeout);
                let result;
                let error = false;
                const status = parseInt(xhr.status, 10);
                if ((status >= 200 && status < 300) || status === 304 || (status === 0 && protocol === 'file:')) {
                    if (xhr.responseType === 'arraybuffer' || xhr.responseType === 'blob') {
                        result = xhr.response;
                    } else {
                        result = xhr.responseText;

                        try {
                            if (dataType === 'xml') {
                                result = xhr.responseXML;
                            } else if (dataType === 'json') {
                                result = /^\s*$/.test(result) ? null : JSON.parse(result);
                            }
                        } catch (e) {
                            error = e;
                        }

                        if (error) {
                            return ajaxError(error, 'parsererror');
                        }
                    }

                    ajaxSuccess(result);
                } else {
                    ajaxError(xhr.statusText || null, status ? 'error' : 'abort');
                }
            }
        };

        const async = 'async' in options ? options.async : true;
        xhr.open(method, url, async, username, password);
        const nativeSetHeader = xhr.setRequestHeader;
        for (let name in headers) {
            nativeSetHeader.apply(xhr, headers[name]);
        }

        if (timeout > 0) {
            abortTimeout = setTimeout(() => {
                xhr.onreadystatechange = empty;
                xhr.abort();
                ajaxError(null, 'timeout');
            }, timeout);
        }
        if (getFn(before).call(context, xhr, options) === false) {
            xhr.abort();
            ajaxError(null, 'abort');
            return xhr;
        }

        // 避免发送空的字符串，发送 null
        xhr.send(data ? data : null);
    });
    p.abort = () => {
        xhr.abort();
    };
    return p;
};

function getFn(fn) {
    return type(fn) === 'function' ? fn : empty;
}
