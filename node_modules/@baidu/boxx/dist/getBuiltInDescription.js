/**
 * boxx.js 
 * v3.0.69
 */

'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var allDescription = _interopDefault(require('./allDescription.json'));

/**
 * @file 重定向 API 以在低版本手百上 映射 API 到低版本端能力 ， 同时删除低版本的暴露
 * @author zhoudan03
 * @date 2019/8/9
 */

// key 为对外输出的 API 名称，同时也是高版本存在的端能力的 name
// value 为具有同样功能的低版本端能力，仅对内作为低版本兼容手段，不对外暴露
var compatibleMap = {
    'account.login': 'account.openLoginDialog',
    'album.image.open': 'album.image.openOld',
    'commonUI.closeLoading': 'commonUI.closeLoadingOld',
    'commonUI.showToast': 'commonUI.showToastOld',
    'easyBrowser.openHybrid': 'easyBrowser.openHybridOld',
    'easyBrowser.performanceFlowLog': 'easyBrowser.onPerformanceFlowEvent',
    'device.getNetworkType': 'device.getDeviceInfo'
};

/**
 * 通过描述表名获取兜底描述表信息
 *
 * @param {Array} descNames
 */
function getBuiltInDescription(descNames) {
    var result = {};
    var moduleTypeList = ['ios', 'iosCompatibility', 'android', 'androidCompatibility'];
    var needBuiltInDesc = new Set(descNames);
    descNames.forEach(function (name) {
        if (compatibleMap[name]) {
            needBuiltInDesc.add(compatibleMap[name]);
        }
    });
    moduleTypeList.forEach(function (type) {
        result[type] = allDescription[type].filter(function (desc) {
            return needBuiltInDesc.has(desc.name);
        });
    });
    return result;
}

module.exports = getBuiltInDescription;
