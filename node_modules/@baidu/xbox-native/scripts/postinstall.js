/**
 * @file 安装 boxjs 依赖
 */
const Path = require('path');
const fs = require('fs-extra');
const map = require('map-stream');
const vfs = require('vinyl-fs');
// babel
const traverse = require('@babel/traverse').default;
const parser = require('@babel/parser');
const gen = require('@babel/generator').default;
const t = require('@babel/types');

const wrapper = require('./loader/boxjs-loader');

const BOXJS_NAME = '@baidu/Boxjs';
// 开始
start();

function start() {
    const modulePath = findBoxjsModule();
    if (modulePath) {
        console.log(`找到${BOXJS_NAME}所在路径: ${modulePath}`);
        const dist = Path.join(modulePath, './boxjs');
        fs.removeSync(dist);

        console.log(`开始 copy 文件到新路径: ${dist}`);
        vfs.src(['**/*.js'], {
            cwd: Path.join(modulePath, BOXJS_NAME)
        })
            .pipe(map(amdWrapper))
            .pipe(vfs.dest(dist));
    } else {
        throw new Error('没有在 node_modules 中找到 @baidu/Boxjs，请确认安装了 @baidu/Boxjs');
    }
}
// 包装 boxjs 的代码，解决 return 的错误
function amdWrapper(file, cb) {
    let content = file.contents.toString();
    content = wrapper(content);
    content = replacePromise(
        content,
        file.path
            .split(BOXJS_NAME)
            .slice(-1)
            .join('')
    );

    content = replaceCoreInvoke(content, file.path);

    file.contents = new Buffer(content);
    cb(null, file);
}
// 根据 module.paths 查找 boxjs的位置
function findBoxjsModule() {
    return module.paths.find(p => {
        p = `${p}/${BOXJS_NAME}/package.json`;
        if (fs.existsSync(p)) {
            return true;
        }
        return false;
    });
}
/**
 * 替换boxjs 中使用的 es6-promise
 */
function replacePromise(content, filepath) {
    if (!~content.indexOf('es6-promise') && !~content.indexOf(BOXJS_NAME)) {
        return content;
    }
    const ast = parser.parse(content);
    const emptyAst = parser.parse('');
    const regBoxjs = new RegExp('^[\'"]' + BOXJS_NAME);
    traverse(ast, {
        StringLiteral: {
            enter(path) {
                // 处理掉@baidu/Boxjs 引用。。。
                const code = path.toString();
                if (regBoxjs.test(code)) {
                    console.log(`发现「${BOXJS_NAME}」引用: ${filepath}`);
                    path.replaceWithSourceString(code.replace(BOXJS_NAME, 'boxjs'));
                }
            }
        },
        VariableDeclaration: {
            enter(path) {
                if (/es6-promise/.test(path.toString())) {
                    console.log(`发现「es6-promise」引用: ${filepath}`);
                    path.replaceWith(emptyAst);
                }
            }
        }
    });
    return gen(ast).code;
}
/**
 * 替换掉 require core/invoke 用于将来做 mock native 替换使用
 */
function replaceCoreInvoke(content, filepath) {
    const ast = parser.parse(content);
    traverse(ast, {
        CallExpression: {
            enter(path) {
                // 处理掉@baidu/Boxjs 引用。。。
                const code = path.toString();
                const node = path.node;
                const callee = node.callee;
                if (callee.name === 'require' && t.isStringLiteral(node.arguments[0])) {
                    const value = node.arguments[0].value;
                    let p = Path.resolve(Path.dirname(filepath), value)
                        .split(BOXJS_NAME)
                        .slice(-1)
                        .join('');
                    if (p === '/dist/core/invoke') {
                        node.arguments[0] = t.stringLiteral('boxjs/dist/core/invoke');
                    }
                }
            }
        }
    });
    return gen(ast).code;
    // return content;
}
