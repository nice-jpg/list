/**
 * @file 移出xbox native相关库之后，还可能用到底层调用方法来打补丁，所以这里迁移过来
 * @module android
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
import stringify from '../../stringify';

/**
 * androidInvoke传入schema打开框架
 * @function default
 * @param {String} schema 协议
 * @return {Object} 发起schema请求
 */
export default schema => {
    if (typeof window !== 'object') {
        return;
    }
    let androidJsBridge = window.Bdbox_android_jsbridge;
    if (androidJsBridge && androidJsBridge.dispatch) {
        return androidJsBridge.dispatch(schema);
    } else {
        return prompt('Bdbox_android_jsbridge', 'dispatch', schema);
    }
};

/**
 * 老版本的调起，prompt实现
 * @function prompt
 * @param {String} obj - 类似 Bdbox_android_utils
 * @param {String} func - 类似 command
 * @param {String} args 参数数组
 */
export function prompt(obj, func, args) {
    if (typeof window === 'object' && typeof window.prompt === 'function') {
        if ({}.toString.call(args).slice(-6, -1) !== 'Array') {
            args = [args];
        }
        const data = stringify({
            obj,
            func,
            args
        });
        return window.prompt(`BdboxApp:${data}`);
    }
}

/**
 * 安卓command调起，使用 Bdbox_android_utils.command
 * @function command
 * @param  {String} intent 包含发送给客户端的参数
 * @param  {Number} [mode=0]   0代表调起框界面；1代表调起第三方界面
 * @param  {String} [comClass='']  调起客户端具体activity，缺省
 * @param  {String} [minV='']   调起的最小版本，可缺省
 * @return {Object}         返回对象格式的json
 */
export function command(intent, mode = 0, comClass, minV) {
    const commParams = {
        mode,
        intent
    };
    if (typeof comClass !== 'undefined') {
        commParams['class'] = comClass;
    }
    if (typeof minV !== 'undefined') {
        // eslint-disable-next-line
        commParams.min_v = minV;
    }
    return prompt('Bdbox_android_utils', 'command', stringify(commParams));
}

/**
 * 同步invoke， Bdbox_aiapps_jsbridge
 * @function syncInvoke
 * @param {String} scheme - scheme
 */
export function syncInvoke(scheme) {
    if (typeof window !== 'object') {
        return;
    }
    const androidJsBridge = window.Bdbox_aiapps_jsbridge;
    if (androidJsBridge && androidJsBridge.dispatch) {
        return androidJsBridge.dispatch(scheme);
    }
    return;
}
