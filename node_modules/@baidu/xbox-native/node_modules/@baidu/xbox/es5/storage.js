"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = storage;
exports.Storage = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * @file 封装 ls 和 ss 的 cache 用法
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
var storageSupport = {};
['local', 'session'].forEach(function (v) {
  try {
    var name = v + 'Storage';
    var t = name in window && window[name] !== null;
    var test = {
      k: '__xbox_test_',
      v: 'it\'s great'
    };

    if (t) {
      var _storage = window[name];

      _storage.setItem(test.k, test.v);

      t = test.v === _storage.getItem(test.k);

      _storage.removeItem(test.k);
    }

    storageSupport[v] = true;
  } catch (e) {
    storageSupport[v] = false;
  }
});
var fakeStorage = {
  __fake__: true,
  data: {},
  setItem: function setItem(k, v) {
    fakeStorage.data[k] = v;
  },
  getItem: function getItem(k) {
    return fakeStorage.data[k];
  },
  removeItem: function removeItem(k) {
    delete fakeStorage.data[k];
  }
};
var defaultValue = undefined;
/**
 * localstorage和sessionStorage函数封装类，如果不支持则自动封装内存对象
 * @class Storage
 * @param  {string} [prefix='_default_'] 缓存前缀
 * @param  {number} [expire=0] 缓存时间
 * @param  {string} [type='local']   类型，local或者session
 * @author wangyongqing01
 */

var Storage = /*#__PURE__*/function () {
  function Storage() {
    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '_default_';
    var expire = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'session';

    _classCallCheck(this, Storage);

    if (type.length > 7) {
      // 处理localstorage -> local
      // sessionstorage -> session
      type = type.slice(0, -7);
    }

    this.type = type;
    this.prefix = prefix + '_';
    this.storage = storageSupport[type] ? window[type + 'Storage'] : fakeStorage;
  }
  /**
   * 清理过期key
   * @return {Storage} 返回cache
   */


  _createClass(Storage, [{
    key: "clearExpire",
    value: function clearExpire() {
      var keys = this.getKeys();
      var self = this;
      keys.forEach(function (key) {
        // 利用get清理过期storage
        self.get(key);
      });
      return this;
    }
    /**
     * 获取所有keys
     * @return {Array} 返回keys
     */

  }, {
    key: "getKeys",
    value: function getKeys() {
      var storage = this.storage;

      if (storage.__fake__) {
        storage = storage.data;
      }

      var reg = new RegExp('^' + this.prefix);
      var keys = Object.keys(storage);
      var result = [];

      for (var i = 0, len = keys.length; i < len; i++) {
        var key = keys[i];

        if (reg.test(key)) {
          result.push(key.replace(reg, ''));
        }
      }

      return result;
    }
    /**
     * 类似 Object.entries 返回所有数组
     * @return {array} 返回数组
     */

  }, {
    key: "getEntries",
    value: function getEntries() {
      var _this = this;

      var storage = this.storage;

      if (storage.__fake__) {
        storage = storage.data;
      }

      var reg = new RegExp('^' + this.prefix);
      return Object.entries(storage).filter(function (arr) {
        if (reg.test(arr[0])) {
          arr[1] = _this._get(arr[1]);

          if (arr[1] !== defaultValue) {
            arr[0] = arr[0].replace(reg, '');
            return true;
          }
        }

        return false;
      });
    }
    /**
     * 获取所有值
     * @return {object} 返回对象
     */

  }, {
    key: "getAll",
    value: function getAll() {
      var result = {};
      this.getEntries().forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        result[key] = value;
      });
      return result;
    }
  }, {
    key: "_get",
    value: function _get(value) {
      var expireCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

      try {
        value = JSON.parse(value);
        var t = Date.now();

        if ('expire' in value && value.expire <= t) {
          // 数据过期，清空
          value = defaultValue;
          expireCallback();
        } else {
          value = value.data;
        }
      } catch (e) {
        value = defaultValue;
      }

      return value;
    }
    /**
     * 设置缓存
     * @param {string} key  -  缓存名字
     * @param {any} value  - 缓存内容，支持object
     * @param {number} [expire=0] - 缓存时间
     * @return {Storage} 返回cache
     */

  }, {
    key: "set",
    value: function set(key, value) {
      var expire = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      expire = (expire || this.expire) | 0;
      var data = {
        data: value
      };

      if (expire !== 0) {
        data.expire = Date.now() + expire;
      }

      key = this.prefix + key;
      this.storage.setItem(key, JSON.stringify(data));
      return this;
    }
    /**
     * 获取缓存
     * @param  {string} key 缓存名称
     * @return {any}     缓存内容，过期返回null
     */

  }, {
    key: "get",
    value: function get(key) {
      key = this.prefix + key;
      var storage = this.storage;
      return this._get(storage.getItem(key), function () {
        storage.removeItem(key);
      });
    }
    /**
     * 清除所有缓存
     * @return {Storage} 返回cache
     */

  }, {
    key: "clear",
    value: function clear() {
      var keys = this.getKeys();
      var self = this;
      keys.forEach(function (key) {
        self.remove(key);
      });
      return this;
    }
    /**
     * 删除key的缓存内容
     * @param  {string} key 要删除的key
     * @return {Storage}     返回cache
     */

  }, {
    key: "remove",
    value: function remove(key) {
      this.storage.removeItem(this.prefix + key);
      return this;
    }
  }]);

  return Storage;
}();
/**
 * localstorage和sessionStorage函数封装类，如果不支持则自动封装内存对象
 * @function storage
 * @param  {string} prefix 缓存前缀
 * @param  {number} expire 缓存时间
 * @param  {string} [type='local']   类型，local或者session
 * @return {Storage}        store对象
 *
 * @example
 * var store = storage('prefix', 60e3, 'session');
 * store.set('a', {abc:1});
 * console.log(store.get('a'));
 * //缓存30s
 * store.set('b',{a:1}, 30E3);
 */


exports.Storage = Storage;

function storage(prefix, expire, type) {
  return new Storage(prefix, expire, type);
}