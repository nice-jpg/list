"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = o2o;

var _invoke = _interopRequireWildcard(require("./invoke"));

var _is = require("../is");

var _each = _interopRequireDefault(require("../each"));

var _detect = require("../browser/detect");

var _android = require("./android");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * 调起o2o框架，支持轻应用（直达号）调起
 * @memberOf Bdbox.client
 * @name o2o
 * @param  {string} url 调起的url
 * @param  {object} opt 调起的参数
 * @return {object}     Bdbox
 *
 * @author wangyongqing01
 * @version $Id: o2o.js 289534 2016-04-07 06:00:51Z yupeng07 $
 *
 * @example
 * ```js
 * //例如：调起o2o打开百度首页
 * Box.o2o('http://m.baidu.com', {color:'0000ff'});
 * //调起o2o框架，打开首页，并且指定顶框黑条颜色改变成0000ff(16进制颜色值)
 * Box.o2o('http://m.baidu.com', {color:'0000ff'});
 * //调起直达号
 * Bdbox.client.o2o('http://m.baidu.com', {appid:xxxx})
 * ```
 */
var encode = encodeURIComponent;
/* eslint-disable fecs-camelcase */

var min_v = '';
/* eslint-disable fecs-camelcase */

function o2o(url, opt) {
  if ((0, _detect.isIOS)()) {
    if ((0, _is.isPlainObject)(url)) {
      opt = url;
      url = url.url;
      delete opt.url;
    }

    var obj = {
      openurl: encode(url),
      minver: '5.3.0.0',
      isla: 0,
      opentype: 1,
      append: 0,
      rbtnstyle: 2
    };

    if ((0, _is.isPlainObject)(opt)) {
      var alias = {
        color: 'barcolor'
      };
      (0, _each.default)(opt, function o2o(value, key) {
        key = alias[key] || key;
        obj[key] = value;
      });
    }

    if (obj.appid) {
      obj.isla = 1;
    }

    (0, _invoke.invokeP)('easybrowse', obj);
    return;
  }

  if ((0, _is.isPlainObject)(url)) {
    opt = url;
    url = url.url;
    delete opt.url;
  }

  var intent = ['S.bdsb_light_start_url=' + encode(url)];

  if ((0, _is.isPlainObject)(opt)) {
    // android intent中不能传递不认参数，不然会报错,因为他们只是透传 intent,没有处理，所以要把多于参数去掉。
    // 2016.04.07

    /* eslint-disable fecs-camelcase */
    min_v = opt.min_v;
    delete opt.min_v;
    /* eslint-disable fecs-camelcase */

    var _alias = {
      color: 'i.extra_actionbar_color_id',
      appid: 'S.bdsb_wallet_appid'
    };
    (0, _each.default)(opt, function (value, key) {
      if (key === 'color') {
        value = parseInt('0x' + value, 16) | 0xff000000;
      }

      key = _alias[key] || key;
      intent.push(key + '=' + value);
    });
  }

  intent = intent.join(';');
  var params = {
    intent: 'intent:#Intent;' + intent + ';end',

    /* eslint-disable fecs-camelcase */
    min_v: min_v !== '' ? min_v : '16783629',

    /* eslint-disable fecs-camelcase */
    mode: '0'
  }; // android需要统计各种O2O打开时长，扩展了几个O2O 框架，需要传component参数来区分，以及版本信息，参数不能向下兼容。
  // 当参数存在component时，不设置class,因为端需要做统计使用的class不一样，为了统一以后都只传 component参数就OK。为了兼容之前的代码如果为空时class保持不变。
  // 2016.04.07

  if (!opt || !opt.component || opt.component === '') {
    params.class = 'com.baidu.searchbox.wallet.WalletServiceActivity';
  }

  (0, _android.command)(params.intent, params.mode, params.class, params.min_v);
}