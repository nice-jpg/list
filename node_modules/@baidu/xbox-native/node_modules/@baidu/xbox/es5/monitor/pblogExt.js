"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _clone = require("../clone");

var _extend = _interopRequireDefault(require("../extend"));

var _query2json = _interopRequireDefault(require("../query2json"));

var _is = require("../is");

var _isBox = _interopRequireDefault(require("../is-box"));

var _guid = _interopRequireDefault(require("../guid"));

var _ua = _interopRequireDefault(require("../ua"));

var _getBoxVersion = _interopRequireWildcard(require("../get-box-version"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file 评论模块bdcloud打点组件
 * @author jianglian(jianglian01@baidu.com)
 * 参考手百数据组日志新规范的bdCloud打点
 * 相关wiki: http://wiki.baidu.com/pages/viewpage.action?pageId=337347739
 * @version 1.1 只支持事件打点， 1.1更新ext参数在event打点时以拓展形式，而非重置形式
 * 初始化： let log = pblogExt('100'); || pblogExt('100', {...}) 同时配置参数
 * 配置基本公参： log.config({cuid: 1000});
 * 统计上报：log.event({type: 'pageclk'}); || event({...}, '11100') 上报修改初始化id
 *         || event({...}, function(){...}) 上报，完成后执行函数回调
 *
 */
// 根据白名单进行属性复制，对于ext额外处理
function setAttr(target, source, isResetExt) {
  if (!isResetExt) {
    source.ext && (target.ext = (0, _extend.default)(target.ext || {}, source.ext));
  } else {
    source.ext && (target.ext = source.ext);
  }

  ['type', 'source', 'from', 'page', 'value', 'cuid', 'ref', 'gmv'].forEach(function (v) {
    source[v] !== undefined && (target[v] = source[v]);
  });
}

var protocol = window.location.protocol;

if (protocol !== 'http:') {
  protocol = 'https:';
} else {
  protocol = 'http:';
}

var GIF_URI = protocol + '//m.baidu.com/tcbox';
var URL = (0, _query2json.default)(location.search); // 获取url信息（框内包含公参）

var version = (0, _getBoxVersion.default)();
var actiondata = {
  id: '',
  content: {
    // 公共维度，非hybrid，因此不设置hybridVersion
    boxVersion: version,
    boxV: (0, _getBoxVersion.getV)(),
    boxPlatform: _ua.default.match(/(iPad|iPhone|iPod)/gim) ? 'ios' : 'android',
    network: 'unknown',
    cuid: ''
  }
};
var baseData = {
  // 模块名
  action: 'pblog',
  // 服务标识
  service: 'bdbox',
  data: {
    // 客户端标记，默认基础版
    appid: 1,
    // 日志来源，12---UBC日志  99---H5前端日志 100---Server端日志
    cateid: 99,
    // 区分主动/被动，1---主动  0---被动
    actiontype: 1,
    actiondata: actiondata
  }
}; // 若存在公参，带上7大公参

if (URL.uid && URL.osname) {
  ['osname', 'ua', 'ut', 'from', 'cfrom', 'uid', 'pkgname'].forEach(function (v) {
    URL[v] && (baseData[v] = URL[v]);
  });
} // 更新版本标记


if ((0, _isBox.default)('lite')) {
  baseData.data.appid = 10001;
} else if ((0, _isBox.default)('info')) {
  baseData.data.appid = 10002;
}
/**
 * 打点规范类
 *
 * @class BdCloud
 * @param {string} id 设置对应打点id
 * @param {?Object} obj 公参设置
 */

/* eslint-disable fecs-prefer-class */


function BdCloudLog(id, obj) {
  /* eslint-enable fecs-prefer-class */
  var self = this;
  self.param = (0, _clone.clone)(baseData);
  self.actiondata = self.param.data.actiondata;
  self.actiondata.id = id;
  (0, _is.isPlainObject)(obj) && setAttr(self.actiondata.content, obj, true);
}

BdCloudLog.prototype.config = function (arg) {
  var self = this;

  if (typeof arg === 'string') {
    self.actiondata.id = arg;
  } else if ((0, _is.isPlainObject)(arg)) {
    setAttr(self.actiondata.content, arg, true);
  }
};

BdCloudLog.prototype.report = function (obj, callback) {
  var items = [];

  for (var i in obj) {
    if ((0, _is.isPlainObject)(obj[i])) {
      obj[i] = JSON.stringify(obj[i]);
    }

    items.push(i + '=' + window.encodeURIComponent(String(obj[i])));
  }

  var url = items.join('&');
  var img = new Image(1, 1);
  var imgName = '_box_mt' + (0, _guid.default)();
  window[imgName] = img;
  var isCallbackCalled = false;

  img.onload = img.onerror = img.onabort = function () {
    // 打点结束之后，执行 callback
    if (callback && typeof callback === 'function' && !isCallbackCalled) {
      isCallbackCalled = true;
      callback();
    }

    img.onload = img.onerror = img.onabort = null;
    window[imgName] = img = null;
  };

  url = GIF_URI + '?' + url;
  img.src = url; // 为了避免打点超时，设置 100ms 之后强制执行 callback

  setTimeout(function () {
    if (callback && typeof callback === 'function' && !isCallbackCalled) {
      isCallbackCalled = true;
      callback();
    }
  }, 100);
  return this;
};

BdCloudLog.prototype.event = function (data, ext, callback) {
  if ((0, _is.isPlainObject)(data)) {
    var param = (0, _clone.clone)(this.param);
    param.data.actiondata.type = '0';
    param.data.actiondata.timestamp = Math.floor(Date.now() / 1000);
    var content = param.data.actiondata.content;
    setAttr(content, data);

    if (typeof ext === 'string') {
      param.data.actiondata.id = ext;
    } else {
      callback = ext;
    }

    this.report(param, callback);
  }

  return this;
};

var _default = function _default(id, obj) {
  return new BdCloudLog(id, obj);
};

exports.default = _default;