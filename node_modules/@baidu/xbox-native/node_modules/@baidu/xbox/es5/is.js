"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNil = isNil;
exports.isUndefined = isUndefined;
exports.isWindow = isWindow;
exports.isPlainObject = isPlainObject;
exports.isFunction = isFunction;
exports.isString = isString;
exports.isArray = isArray;
exports.isNumber = isNumber;
exports.isBoolean = isBoolean;
exports.isEmpty = isEmpty;
exports.isBlank = isBlank;
exports.isEmptyObject = isEmptyObject;
exports.isJSON = isJSON;

var _type = require("./type");

/**
 * @file 判断方法
 * @module is
 * @author wangyongqing <wangyongqing01@baidu.com>
 */

/**
 * 判断是否为 null 或者 undefined
 * @param {any} obj - 判断的对象
 * @return {boolean} 返回判断结果
 * @example
 * isNil(null) // true
 * isNil(undefind) // true
 * isNil('') // false
 */
function isNil(obj) {
  return obj === undefined || obj === null;
}
/**
 * 判断是否为 undefined
 * @param {any} obj - 判断的对象
 * @return {boolean} 返回判断结果
 * @example
 * isUndefined(null) // false
 * isUndefined(undefind) // true
 * isUndefined('') // false
 */


function isUndefined(obj) {
  return obj === undefined;
}
/**
 * 判断是否是 window 对象
 * @param {any} obj - 判断的对象
 * @return {boolean} 返回判断结果
 * @example
 * isWindow( window) // true
 * isWindow(self) // true
 * isWindow('') // false
 */


function isWindow(obj) {
  return !isNil(obj) && obj === obj.window;
}
/**
 * 判断是否为普通对象
 * @param {any} obj - 需要判断的对象
 * @return {boolean} 返回判断结果
 * @example
 * isPlainObject({}) // true
 * isPlainObject(window) // false
 */


function isPlainObject(obj) {
  if ((0, _type.isType)(obj, 'Object')) {
    return Object.getPrototypeOf(obj) === null || Object === obj.constructor;
  }

  return false;
}
/**
 * 是否是function类型
 * @name isFunction
 * @function isFunction
 * @param  {any} obj 要判断的对象
 * @return {Boolean} bool  true|false
 * @example
 * isFunction(new Function()) // true
 * isFuction('') // false
 */


function isFunction(obj) {
  return (0, _type.isType)(obj, 'Function');
}
/**
 * 是否是string类型
 * @name isString
 * @function
 * @param  {any} obj 要判断的对象
 * @return {Boolean} bool true|false
 * isString([]) // false
 * isString('array') // true
 */


function isString(obj) {
  return (0, _type.isType)(obj, 'String');
}
/**
 * 是否是array类型
 * @param  {any} obj 要判断的对象
 * @return {Boolean} bool 返回true|false
 * @example
 * isArray([]) // true
 * isArray('array') // false
 */


function isArray(obj) {
  return (0, _type.isType)(obj, 'Array');
}
/**
 * 是否是一个Number类型
 * @param  {any} obj 要判断的对象
 * @return {Boolean} bool  返回true|false
 * @example
 * isNumber(1) // true
 * isNumber('1') // false
 */


function isNumber(obj) {
  return (0, _type.isType)(obj, 'Number');
}
/**
 * 判断是否为布尔类型
 * @param {any} bool - 要判断的对象
 * @return {Boolean} bool  返回true|false
 * @example
 * isBoolean(false) // true
 * isBoolean(/a/) // false
 */


function isBoolean(bool) {
  return bool === true || bool === false;
}
/**
 * 判断参数是否是空格或者由空格组成
 * @param {string} subject - 被判断的字符串
 * @return {boolean} 判断结果
 * @example
 * isEmpty(''); // => true
 * isEmpty('  '); // => false
 * isEmpty('World'); // => false
 */


function isEmpty(subject) {
  return String(subject).length === 0;
}
/**
 * 判断参数是否是空格或者由空格组成
 * @param {string} subject - 被判断的字符串
 * @return {boolean} 判断结果
 * @example
 * isBlank('');// => true
 * isBlank('  ');// => true
 * isBlank('World');// => false
 */


function isBlank(subject) {
  return String(subject).trim().length === 0;
}
/**
 * 判断一个对象是不是一个空对象
 * @param {object} obj - 待判断的对象
 * @return {boolean} 判断结果
 * @example
 * isEmptyObject({}) // true
 */


function isEmptyObject(obj) {
  return Object.keys(obj).length === 0 && obj.constructor === Object;
}

var reJSON = /^\{[\s\S]*\}$|^\[[\s\S]*\]$/;

function isJSON(value) {
  if (typeof value !== 'string') {
    return false;
  }

  if (!reJSON.test(value)) {
    return false;
  }

  try {
    JSON.parse(value);
  } catch (err) {
    return false;
  }

  return true;
}