"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _register = _interopRequireDefault(require("../register"));

var _utils = require("../utils");

var _stringify = _interopRequireDefault(require("../stringify"));

var _each = _interopRequireDefault(require("@baidu/xbox/es5/each"));

var _index = require("./index");

var _detect = require("../detect");

var _invoke = _interopRequireDefault(require("../invoke"));

var _json2query = _interopRequireDefault(require("@baidu/xbox/es5/json2query"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file Created on Thu Nov 15 2018
 * @module view
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
function easybrowseParams(data, type) {
  if (type === 'hybrid') {
    if (data.backup && data.backup.url) {
      data.backup.url = (0, _utils.encode)(data.backup.url);
    }
  } else {
    data.url = (0, _utils.encode)(data.url);
  }

  data.style = (0, _stringify.default)(data.style, true);

  for (var key in data) {
    if ((0, _utils.isPlainObject)(data[key])) {
      data[key] = (0, _stringify.default)(data[key]);
    }
  }

  return data;
}

(0, _register.default)('easybrowse/open', {
  v: 1,
  hasCB: true,
  versionRange: ['8.2'],
  iosinfoVersionRange: ['1.1'],
  iosliteVersionRange: ['1.1'],
  iosmissionVersionRange: ['1.0'],
  androidmissionVersionRange: ['1.0'],
  androidliteVersionRange: ['2.2.2'],
  androidinfoVersionRange: ['1.0'],
  filter: function filter(data) {
    if (data.type === 'h5') {
      delete data.type;
    }

    return {
      data: easybrowseParams(data, 'h5')
    };
  }
}, {
  androidlite: {
    versionRange: ['2.2.2']
  },
  androidinfo: {
    versionRange: ['1.0']
  },
  androidmission: {
    versionRange: ['1.0']
  },
  iosmission: {
    versionRange: ['1.0']
  },
  iosinfo: {
    versionRange: ['1.1']
  },
  ios: {
    noParams: true,
    hasCB: false,
    versionRange: ['5.3'],
    filter: function filter(module, action, data) {
      var obj = {
        openurl: (0, _utils.encode)(data.url),
        minver: '5.3.0.0',
        isla: 0,
        opentype: 1,
        append: 0,
        rbtnstyle: 2
      };
      var alias = {};

      if (data.type === 'h5') {
        delete data.type;
      }

      (0, _each.default)(data, function (value, key) {
        if (key !== 'url' && key !== 'style') {
          key = alias[key] || key;
          obj[key] = value;
        }
      });
      var toolids;

      if ((0, _utils.isPlainObject)(data.style)) {
        alias.color = 'barcolor';

        if (data.style.toolbaricons && data.style.toolbaricons.tids) {
          toolids = (0, _stringify.default)({
            toolids: data.style.toolbaricons.tids
          });
        }

        data.toolbar = toolids;
        (0, _each.default)(data.style, function (value, key) {
          key = alias[key] || key;
          obj[key] = value;
        });
        delete data.style;
        delete data.url;
      }

      if (obj.appid) {
        obj.isla = 1;
      }

      return {
        module: 'easybrowse',
        action: '',
        data: obj,
        noParams: true,
        extData: {
          minver: '5.3.0.0'
        }
      };
    }
  },
  android: {
    hasCB: false,
    versionRange: ['5.3'],
    filter: function filter(module, action, data) {
      var intent = ['S.bdsb_light_start_url=' + (0, _utils.encode)(data.url)];
      var map = {
        comments: 'component=com.baidu.searchbox/.home.feed.FeedCommentActivity',
        video: 'component=com.baidu.searchbox/.home.feed.ShortVideoDetailActivity',
        tags: 'component=com.baidu.searchbox/.xsearch.UserSubscribeCenterActivity',
        h5: 'component=com.baidu.searchbox/.lightbrowser.LightBrowserActivity',
        lockscreen: 'component=com.baidu.searchbox/.lockscreen.LockScreenContentDetail'
      };
      intent.push(map[data.type]);
      var minV = data['min_v'];
      delete data['min_v'];
      var toolids = (0, _stringify.default)({
        toolids: data.style.toolbaricons.tids
      }, true);
      intent.push('S.toolbaricons=' + toolids);

      if (data.menumode) {
        intent.push('S.menumode=' + data.menumode);
      }

      if (data.context) {
        intent.push('S.context=' + data.context);
      }

      intent = intent.join(';');
      var params = {
        intent: 'intent:#Intent;' + intent + ';end',
        min_v: minV && minV !== '' ? minV : '16783629',
        mode: '0'
      };
      return {
        module: 'Bdbox_android_utils',
        action: 'command',
        data: (0, _stringify.default)(params)
      };
    }
  }
});
(0, _register.default)('easybrowse/hybrid', {
  androidlite: {
    versionRange: ['2.2.2']
  },
  androidinfo: {
    versionRange: ['1.0']
  },
  iosinfo: {
    versionRange: ['1.1']
  },
  androidmission: {
    versionRange: ['1.0']
  },
  iosmission: {
    versionRange: ['1.0']
  },
  ios: {
    hasCB: false,
    versionRange: ['5.3'],
    filter: function filter(module, action, data) {
      var obj = {
        openurl: (0, _utils.encode)(data.url),
        minver: '5.3.0.0',
        isla: 0,
        opentype: 1,
        append: 0,
        rbtnstyle: 2,
        type: 'Hybrid'
      };
      var alias = {};
      delete data.type;
      (0, _each.default)(data, function (value, key) {
        if (key !== 'url' && key !== 'style') {
          key = alias[key] || key;
          obj[key] = value;
        }
      });
      var toolids;

      if ((0, _utils.isPlainObject)(data.style)) {
        alias.color = 'barcolor';

        if (data.style.toolbaricons && data.style.toolbaricons.tids) {
          toolids = (0, _stringify.default)({
            toolids: data.style.toolbaricons.tids
          });
        }

        data.toolbar = toolids;
        delete data.style;
        delete data.url;
        (0, _each.default)(data.style, function (value, key) {
          key = alias[key] || key;
          obj[key] = value;
        });
      }

      if (obj.appid) {
        obj.isla = 1;
      }

      return {
        module: 'common',
        action: 'easybrowse',
        data: obj,
        extData: {
          minver: '5.3.0.0'
        }
      };
    }
  },
  android: {
    hasCB: false,
    versionRange: ['5.3'],
    filter: function filter(module, action, data) {
      var backup = {
        url: (0, _utils.encode)(data.backup.url)
      };
      var intent = ['S.backup=' + JSON.stringify(backup), 'component=com.baidu.searchbox/.home.feed.FeedDetailActivity'];
      var minV = data.min_v;
      delete data.min_v;
      var toolids = (0, _stringify.default)({
        toolids: data.style.toolbaricons.tids
      });
      intent.push('S.toolbaricons=' + toolids);

      if (data.menumode) {
        intent.push('S.menumode=' + data.menumode);
      }

      intent = intent.join(';');
      var params = {
        intent: 'intent:#Intent;' + intent + ';end',
        min_v: minV && minV !== '' ? minV : '16783629',
        mode: '0'
      };
      return {
        module: 'Bdbox_android_utils',
        action: 'command',
        data: (0, _stringify.default)(params)
      };
    }
  }
}, {
  v: 1,
  hasCB: true,
  versionRange: ['8.2'],
  iosinfoVersionRange: ['1.3.1.10'],
  androidliteVersionRange: ['2.2.0.10'],
  androidinfoVersionRange: ['1.1'],
  iosmissionVersionRange: ['1.0'],
  androidmissionVersionRange: ['1.0'],
  filter: function filter(data) {
    return {
      data: easybrowseParams(data, 'hybrid')
    };
  }
});
/**
 * 打开h5或者hybrid框架
 * @function easybrowse
 * @param {Object} params 端能力参数，参数参看 http://ft.baidu.com/#/scheme/utils_showtoast
 * @return {Promise} 调用的返回
 */

var _default = function _default() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if ((0, _detect.isMatrix)('baiduboxvision')) {
    var martixParams = Object.assign({}, params, params.data);
    delete martixParams.data;
    params.name && delete martixParams.name;
    params.type && delete martixParams.type;
    return (0, _invoke.default)("baiduboxapp://v1/easybrowse/".concat(params.type === 'hybrid' ? 'hybrid' : 'open', "?").concat((0, _json2query.default)(martixParams, true)));
  }

  return (0, _index.open)((0, _utils.getParams)('easybrowse', params, {
    type: 'h5'
  }));
};

exports.default = _default;