"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPlainObject = isPlainObject;
exports.urlToSchema = exports.noEmptyQueryToJson = exports.decode = exports.encode = exports.getParams = exports.isFunction = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * @file Created on Thu Nov 15 2018
 * @module utils
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
var isFunction = function isFunction(obj) {
  return typeof obj === 'function';
};

exports.isFunction = isFunction;

function isPlainObject(obj) {
  if (_typeof(obj) === 'object') {
    return Object.getPrototypeOf(obj) === null || Object === obj.constructor;
  }

  return false;
}
/**
 * 根据传入的端能力参数，返回正确的参数
 * 主要用于处理 name 和 data 的情况
 * 默认不传入 name 这层就可以
 * @function getParams
 * @param {string} name - name 参数
 * @param {object} params - 参数
 * @param {object} defaultParams - 默认参数
 * @return {object} 可用的完整参数
 */


var getParams = function getParams(name) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var defaultParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (params.data && params.name) {
    return Object.assign({
      name: name
    }, defaultParams, params);
  } else {
    return Object.assign({
      name: name
    }, defaultParams, {
      data: params
    });
  }
};
/**
 * alias encodeURIComponent
 * @function encode
 * @param {string} str - 需要 encode 的字符串
 */


exports.getParams = getParams;

var encode = function encode(str) {
  return encodeURIComponent(str);
};
/**
 * alias decodeURIComponent
 * @function decode
 * @param {string} str - 需要 decode 的字符串
 */


exports.encode = encode;

var decode = function decode(str) {
  return decodeURIComponent(str);
};

exports.decode = decode;

var noEmptyQueryToJson = function noEmptyQueryToJson(url) {
  var locse = url.split('?');
  var search = locse[1] ? locse[1] : locse[0];
  var pairs = search.split('&');
  var result = {};
  pairs.forEach(function (pair) {
    pair = pair.split('=');

    if (pair[0].length > 0) {
      var resultPair = '';

      try {
        resultPair = decode(pair[1]) || '';
      } catch (e) {
        resultPair = pair[1];
      }

      result[pair[0]] = resultPair;
    }
  });
  return result;
};

exports.noEmptyQueryToJson = noEmptyQueryToJson;

var urlToSchema = function urlToSchema(url) {
  var style = encodeURIComponent(JSON.stringify({
    'menumode': '2',
    'showtoolbar': '1'
  }));
  var urlStr = encodeURIComponent(url);
  return 'baiduboxapp://v1/easybrowse/open?newbrowser=1&style=' + style + '&url=' + urlStr;
};

exports.urlToSchema = urlToSchema;