"use strict";

/**
 * @file 安装 boxjs 依赖
 */
var Path = require('path');

var fs = require('fs-extra');

var map = require('map-stream');

var vfs = require('vinyl-fs'); // babel


var traverse = require('@babel/traverse').default;

var parser = require('@babel/parser');

var gen = require('@babel/generator').default;

var t = require('@babel/types');

var wrapper = require('./loader/boxjs-loader');

var BOXJS_NAME = '@baidu/Boxjs'; // 开始

start();

function start() {
  var modulePath = findBoxjsModule();

  if (modulePath) {
    console.log("\u627E\u5230".concat(BOXJS_NAME, "\u6240\u5728\u8DEF\u5F84: ").concat(modulePath));
    var dist = Path.join(modulePath, './boxjs');
    fs.removeSync(dist);
    console.log("\u5F00\u59CB copy \u6587\u4EF6\u5230\u65B0\u8DEF\u5F84: ".concat(dist));
    vfs.src(['**/*.js'], {
      cwd: Path.join(modulePath, BOXJS_NAME)
    }).pipe(map(amdWrapper)).pipe(vfs.dest(dist));
  } else {
    throw new Error('没有在 node_modules 中找到 @baidu/Boxjs，请确认安装了 @baidu/Boxjs');
  }
} // 包装 boxjs 的代码，解决 return 的错误


function amdWrapper(file, cb) {
  var content = file.contents.toString();
  content = wrapper(content);
  content = replacePromise(content, file.path.split(BOXJS_NAME).slice(-1).join(''));
  content = replaceCoreInvoke(content, file.path);
  file.contents = new Buffer(content);
  cb(null, file);
} // 根据 module.paths 查找 boxjs的位置


function findBoxjsModule() {
  return module.paths.find(function (p) {
    p = "".concat(p, "/").concat(BOXJS_NAME, "/package.json");

    if (fs.existsSync(p)) {
      return true;
    }

    return false;
  });
}
/**
 * 替换boxjs 中使用的 es6-promise
 */


function replacePromise(content, filepath) {
  if (!~content.indexOf('es6-promise') && !~content.indexOf(BOXJS_NAME)) {
    return content;
  }

  var ast = parser.parse(content);
  var emptyAst = parser.parse('');
  var regBoxjs = new RegExp('^[\'"]' + BOXJS_NAME);
  traverse(ast, {
    StringLiteral: {
      enter: function enter(path) {
        // 处理掉@baidu/Boxjs 引用。。。
        var code = path.toString();

        if (regBoxjs.test(code)) {
          console.log("\u53D1\u73B0\u300C".concat(BOXJS_NAME, "\u300D\u5F15\u7528: ").concat(filepath));
          path.replaceWithSourceString(code.replace(BOXJS_NAME, 'boxjs'));
        }
      }
    },
    VariableDeclaration: {
      enter: function enter(path) {
        if (/es6-promise/.test(path.toString())) {
          console.log("\u53D1\u73B0\u300Ces6-promise\u300D\u5F15\u7528: ".concat(filepath));
          path.replaceWith(emptyAst);
        }
      }
    }
  });
  return gen(ast).code;
}
/**
 * 替换掉 require core/invoke 用于将来做 mock native 替换使用
 */


function replaceCoreInvoke(content, filepath) {
  var ast = parser.parse(content);
  traverse(ast, {
    CallExpression: {
      enter: function enter(path) {
        // 处理掉@baidu/Boxjs 引用。。。
        var code = path.toString();
        var node = path.node;
        var callee = node.callee;

        if (callee.name === 'require' && t.isStringLiteral(node.arguments[0])) {
          var value = node.arguments[0].value;
          var p = Path.resolve(Path.dirname(filepath), value).split(BOXJS_NAME).slice(-1).join('');

          if (p === '/dist/core/invoke') {
            node.arguments[0] = t.stringLiteral('boxjs/dist/core/invoke');
          }
        }
      }
    }
  });
  return gen(ast).code; // return content;
}