"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = invoke;
exports.invokeP = invokeP;
exports.xRegister = xRegister;

var _detect = require("./detect");

var _type = _interopRequireDefault(require("@baidu/xbox/es5/type"));

var _json2params = _interopRequireDefault(require("./json2params"));

var _ios = _interopRequireDefault(require("./ios"));

var _android = _interopRequireDefault(require("./android"));

var _json2query = _interopRequireDefault(require("@baidu/xbox/es5/json2query"));

var _const = require("./const");

var _os = require("@baidu/xbox/es5/os");

var _getBoxName = _interopRequireDefault(require("@baidu/xbox/es5/get-box-name"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * 新调起能力，完全 scheme 形式，支持 ios 和安卓相同或者不同，
 * 不同时，先传 android后 ios（首字母排序）
 * 必须 baiduboxapp 开头
 * @function invoke
 * @param {string} args0 - 安卓调起 schema
 * @param {string} args1 - ios调起 schema，如果相同省略改参数
 */
function invoke() {
  if (!(0, _detect.isBox)() && !(0, _detect.isMatrix)()) {
    return;
  }

  var as = arguments.length <= 0 ? undefined : arguments[0]; // 安卓 ios 公用一个相同的 scheme

  var is = (arguments.length <= 1 ? undefined : arguments[1]) ? arguments.length <= 1 ? undefined : arguments[1] : arguments.length <= 0 ? undefined : arguments[0];

  if ((0, _detect.isIOS)() && is) {
    (0, _ios.default)(getValidScheme(is));
  } else if ((0, _detect.isAndroid)() && as) {
    (0, _android.default)(getValidScheme(as));
  }
}

function getValidScheme(schema) {
  // 都是以 baidubox 开头包括，baiduboxapp,baiduboxmission
  if ((0, _type.default)(schema) === 'string' && schema.indexOf('baidubox') !== 0) {
    return 'baiduboxapp://' + schema;
  }

  return schema;
}
/**
 * Promise 调起命令，host 和 params 分开处理，支持函数直接传入
 * @param {String} action - schema host 部分
 * @param {object} params - 参数
 * @param {string} schemaHead - schema 头，默认 baiduboxapp
 * @return {Promise}
 */


function invokeP(action) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var schemaHead = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'baiduboxapp';

  if (!(0, _detect.isBox)() && !(0, _detect.isMatrix)()) {
    return Promise.reject(_const.NOT_IN_BOX);
  }

  return new Promise(function (resolve, reject) {
    var tmp = params.params || {};

    if (isEmptyObject(tmp) || tmp === '%7B%7D' || tmp === '{}') {
      // 删除空的params对象
      delete params.params;
    } else if ((0, _type.default)(tmp) === 'object') {
      params.params = (0, _json2params.default)(tmp);
    }

    var query = _objectSpread(_objectSpread({}, params), {}, {
      callback: function callback(result) {
        var data = result;

        if ((0, _type.default)(result) === 'string') {
          try {
            data = JSON.parse(result);
          } catch (e) {
            console.log(e);
          }
        }

        if (+data.status === 0) {
          resolve(data.data);
          return;
        }

        reject(data);
      }
    });

    var search = (0, _json2query.default)(query);
    var schema = "".concat(schemaHead, "://").concat(action, "?").concat(search);
    invoke(schema);
  });
}
/**
 * 新版本的注册，只用于安卓和 ios 相同的 scheme 类，返回 promise
 * @function xRegister
 * @param {Array|String} range - 版本范围
 * @param {String} action - action 部分，去掉 v 部分，例如v26/swan实际传入 swan。。。 vxx 之后的
 * @param {Object} params - 参数部分，例如 params={url}，传入{url}即可
 * @param {String} schemaHead - scheme 头
 * @return {Promise}
 * @example
 *  xRegister(
        {
            lite: {
                v: 34,
                versionRange: '3.9'
            },
            main: {
                v: 41,
                versionRange: '11.3.5'
            }
        },
        'audio/playSound',
        {url}
    );
 */


function xRegister() {
  var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;
  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var schemaHead = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'baiduboxapp';

  if (!(0, _detect.isBox)()) {
    return Promise.reject(_const.NOT_IN_BOX);
  }

  var osname = (0, _os.getOSName)();
  var boxname = (0, _getBoxName.default)(); // 优先读取 androidmission 这个，然后是 mission(ios+android全平台)，最后主板 android/ios

  var opt = range["".concat(osname).concat(boxname)] || range[boxname] || range[osname]; // 必须要有 v

  if (opt && opt.v) {
    var version = (0, _detect.getBoxVersion)(boxname);
    var versionRange = opt.versionRange;

    if ((0, _type.default)(versionRange) === 'string') {
      // 支持 '3.9-7.0' 写法
      versionRange = versionRange.split('-');
    }

    var _versionRange = versionRange,
        _versionRange2 = _slicedToArray(_versionRange, 2),
        startV = _versionRange2[0],
        endV = _versionRange2[1];

    if ((0, _detect.version_compare)(version, startV) >= 0 && (!endV || endV && (0, _detect.version_compare)(version, endV) <= 0)) {
      params = opt.params ? opt.params : params;
      var others = {};

      if (params.params) {
        // 含有 params 的 params = {params: {}, upgrade:1}
        var tmp = Object.assign({}, params.params);
        params.params = null; // 删不掉？

        delete params.params;
        others = Object.assign({}, params);
        params = tmp;
      }

      var args = {};

      if (others && (0, _type.default)(others) === 'object') {
        args = _objectSpread({
          params: (0, _json2params.default)(params)
        }, others);
      } else {
        args = {
          params: (0, _json2params.default)(params)
        };
      } // 兼容 action 不一样的情况，直接写在配置里面


      action = "v".concat(opt.v, "/").concat(opt.action ? opt.action : action);
      return invokeP(action, args, schemaHead);
    }
  }

  return Promise.reject(_const.COMMAND_NOT_EXIST);
}

function isEmptyObject(obj) {
  return Object.keys(obj).length === 0 && obj.constructor === Object;
}