/**
 * @file index.ts
 * @author lizhe21
 */

import AucComponent from '@baidu/auc-base/AucComponent';
import styles from './style.module.less';
import { AucVoteData } from './types';
import lottie from 'lottie-web';
import boxx from '@baidu/auc-base/boxx';
import { env } from '@baidu/auc-base/env';
import {componentLog} from '@baidu/auc-log';
import {formatNum} from '@baidu/auc-base/utils';

import axios from 'axios';
import qs from 'qs';


export class AucVote extends AucComponent {
    static template: string = /* html */ `
    <div class="{{styles.aucVoteWrapper}}" style="{{{'--positiveWidth': positiveWidth+'%', '--negativeWidth': negativeWidth+'%'}}}">
        <div class="{{styles.voteCard}}" s-ref="vs">
        <div class="{{styles.pulse}}"></div>

            <div
                class="{{[styles.positive, isChecked ? styles.voteChecked : '']}}" 
                on-click="handleVoteClick(options[0], 'positive')"
            >
                <div class="{{styles.view}}">
                    <div class="{{styles.posView}}">
                        <span class="{{styles.defaultView}} {{isChecked ? styles.checkedView : ''}}">{{options[0].value}}</span>
                        <span s-if="{{checkedType === 'positive' || options[0].checked !== '0'}}" class="{{styles.checkedIcon}}"></span>
                    </div>
                    <span s-if="{{isChecked}}">{{positiveWidth}}%</span>
                </div>
                <div class="{{styles.skew}}"></div>
            </div>
            <div
                class="{{[styles.negative, isChecked ? styles.voteChecked : '']}}"
                on-click="handleVoteClick(options[1], 'negative')"
            >
                <div class="{{styles.view}}">
                    <div class="{{styles.negView}}">
                        <span s-if="{{checkedType === 'negative'||  options[1].checked !== '0'}}" class="{{styles.checkedIcon}}"></span>
                        <span class="{{styles.defaultView}} {{isChecked ? styles.checkedView : ''}}">{{options[1].value}}</span>
                    </div>
                    <span s-if="{{isChecked}}" class="{{style.viewRatio}}">{{negativeWidth}}%</span>
                </div>
                <div class="{{styles.skew}}"></div>
            </div>
            <div s-if="{{!isChecked}}" class="{{styles.vsIcon}}"></div>
        </div>
        <div s-if="{{total_members}}" class="{{styles.voteDesc}}">
            <span class="{{styles.voteIcon}}"></span>
            <span class="{{styles.voteNum}}">{{totalVoteNum}}人已表态</span>
        </div>
    </div>
    `;

    initData(): AucVoteData {
        return {
            styles,
            voteData: {},
            negativeWidth: 50,
            positiveWidth: 50,
            vsIconAnimDom: null,
            pulseAnimDom: null,
            pulseInterval: null
        };
    }

    static computed = {
        isChecked() {
            return +this.data.get('checked');
        },
        totalVoteNum() {
            return formatNum(+this.data.get('total_members'));
        }
    }

    attached(): void {
        const isChecked = this.data.get('checked');
        // 已投票不展示动效
        if (+isChecked) {
            this.resetWidth();
        } else {
            this.handleEnterANim();
        }

        this.registerScrollInView().then(_ => {
            this.log('vote_show');
        });
    }
    handleEnterANim() {
        new Promise((resolve) => {
            this.handleSetAnimDom();
            resolve('success');
        }).then(() => {
            const vsIconAnim = this.data.get('vsIconAnimDom');
            vsIconAnim.playSegments([[0, 36]], true);
            vsIconAnim.addEventListener('complete', () => {
                Promise.resolve('success');
            })
        }).then(() => {
            this.handlePulseAnim();
        })
    }
    handleSetAnimDom() {
        this.data.set('vsIconAnimDom', lottie.loadAnimation({
            container: document.querySelectorAll(`.${styles.vsIcon}`)[0],
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: 'https://b.bdstatic.com/searchbox/image/gcp/20221230/1673597590.json	'
        }));
        this.data.set('pulseAnimDom', lottie.loadAnimation({
            container: document.querySelectorAll(`.${styles.pulse}`)[0],
            renderer: 'svg',
            loop: false,
            autoplay: false,
            path: 'https://b.bdstatic.com/searchbox/image/gcp/20230113/3515808159.json'
        }));
    }
    handlePulseAnim(): void {
        const positivePulse = this.data.get('pulseAnimDom');
        positivePulse.playSegments([[0, 25], [0, 25], [0, 25]], true);
        
    }
    handleVoteClick(data, checkedType): void {
        if (this.data.get('vsIconAnimDom') !==  null && this.data.get('pulseAnimDom') !== null) {
            this.data.get('vsIconAnimDom').pause();
            this.data.get('pulseAnimDom').stop();
            this.data.set('pulseAnimDom', null);
            const pulseInterval = this.data.get('pulseInterval');
            clearInterval(pulseInterval);
        }
        if (env.isBoxSeries || env.isXiaoMiBaiPai || env.isMatrix) {
            if (this.data.get('checked') !== '0') {
                boxx.call('commonUI.showToast', {
                    type: '1',
                    message: '你已经投过票了'
                });
                return;
            }

            const isLogin = this.data.get('isLogin');
            if (!isLogin) {
                this.userLogin(data, checkedType);
                return;
            }
            this.requestVote(data, checkedType);
        } else {
            this.fire('backShoubai');
        }
    }
    requestVote(data, checkedType) {
        const vote_id = this.data.get('vote_id');
        const option_id = data.option_id;
        axios.post('/newspage/data/topicvote', qs.stringify({
            vote_id,
            option_id
        })).then(res => {
            if (+res.data.errno === 0) {
                const data = res.data.data;
                this.data.set('checkedType',checkedType);
                this.data.set('checked', data.checked);
                this.data.set('total_members', +this.data.get('total_members') + 1);
                this.data.set('options', data.options);
                this.resetWidth();
                this.log('vote_click');
            }
        });

    }
    userLogin(data, checkedType): void {
        let that = this;
        boxx.call('account.login', {
            loginType: 'fast',
            showThirdLogin: '1',
            loginSource: 'hudong_trusted',
            normalizeAccount: '1',
            success() {
                that.data.set('isLogin', 1);
                this.request(data, checkedType);
                
            },
            fail() {
                boxx.call('commonUI.showToast', {
                    type: '1',
                    message: '登录失败'
                });
            }
        });
    }
    resetWidth():void {
        const num1:number = +this.data.get('options')[0].num;
        const num2:number = +this.data.get('options')[1].num;
        const positiveWidth = Math.round(num1 / (num1 + num2) * 100);
        const negativeWidth = 100 - positiveWidth;
        this.data.set('positiveWidth', positiveWidth);
        this.data.set('negativeWidth', negativeWidth);
    }
    log(type):void {
        componentLog(type, '', this.data.get('logExtraParams'));
    }

}

export default AucVote;
