/**
 * Copyright (C) 2021 ~ present baidu.com
 *
 * 将全部派发事件 action 的名字定义为常量放在这个文件中
 * 需要注释说明派发事件的 action 及 payload 含义
 *
 * 如果 payload 包含多个字段，尽量说明每个字段的含义
 * 建议使用 payload.event 传递事件对象
 *
 * 当 payload 主要是透传所有传递给组件的属性以及组件自身处理的属性时
 * 可以使用 const payload = this.data.get()
 * 注释中可以用 payload.* 表示组件当前 action 会透传所有属性（包括计算属性）
 */
export * from './audio';
export * from './event';
/**
 * action: 推荐语点击事件
 */
export declare const CLICK_PREORDER = "click:preorder";
/**
 * payload: 推荐语点击事件参数
 */
export interface CLICK_PREORDER_PAYLOAD {
    /**
     * 推荐语在全文中的TTS阅读进度, 主要用于阅读段落切换，该字段未定义时，表明该段落跳过TTS阅读，即不可点击交互和高亮文字
     */
    index?: number;
    /**
     * 推荐语内容-text, 转载自作者-name
     */
    type: 'text' | 'name';
}
/**
 * action: 图片封面点击事件\
 * payload.transData: 透传transData
 */
export declare const CLICK_VIDEOCOVER = "click:videoCover";
/**
 * action: 推荐语展现\
 * payload.*: 透传所有属性
 */
export declare const SHOW_PREORDER = "show:preorder";
/**
 * action: 段落点击事件\
 * payload.index: 推荐语在全文中的TTS阅读进度, 主要用于阅读段落切换\
 * payload.event: 推荐语内容-text, 转载自作者-name
 */
export declare const CLICK_PARAGRAPH = "click:paragraph";
/**
 * action: 段落展现\
 * payload.*: 透传所有属性
 */
export declare const SHOW_PARAGRAPH = "show:paragraph";
/**
 * action: 预览图片\
 * payload: 点击事件
 */
export declare const PREVIEW_IMAGE = "preview:image";
/**
 * action: 点击 AI 图片
 */
export declare const CLICK_IMAGE_AI = "click:image:ai";
/**
 * action: 图片 onload 事件
 */
export declare const LOAD_IMAGE = "load:image";
/**
 * action: 转发的第三方资源的点击事件\
 * payload.xxx: 组件运行时所有数据this.data.get()
 */
export declare const CLICK_THIRDORIGINAL = "click:thirdOriginal";
/**
 * action: 点击 AI 图片
 */
export declare const CLICK_CAPSULE_YOUJIA = "click:capsule:youjia";
/**
 * action: 正文大图小程序点击事件\
 * payload.*: 透传所有属性，主要包含：\
 * payload.appType: 0-小程序 1-小游戏\
 * payload.appKey: 小程序或小游戏key\
 * payload.url: 小程序或小游戏首页路径\
 * payload.midurl: 小程序或小游戏链接\
 * payload.nid: 文章id
 */
export declare const CLICK_MINI = "click:mini";
/**
 * action: 正文大图小程序展现事件\
 * payload.*: 透传所有属性，主要包含：\
 * payload.nid: 文章id
 */
export declare const SHOW_MINI = "show:mini";
/**
 * action: 标题点击事件\
 * payload.index: TTS阅读进度, 标题默认 -1
 */
export declare const CLICK_TITLE = "click:title";
/**
 * action: 视频点击事件
 */
export declare const CLICK_VIDEO = "click:video";
/**
 * action: 视频播放事件
 */
export declare const PLAY_VIDEO = "play:video";
/**
 * action: 视频播放状态变化事件\
 * payload.idx: 索引位置\
 * payload.state: 播放状态
 */
export declare const CHANGESTATE_VIDEO = "changeState:video";
/**
 * action: 宫格图点击图片\
 * payload.index: 点击的图片索引\
 * payload.itemInfo: 点击的图片信息
 */
export declare const CLICK_IMAGEGRID_ITEM = "click:imageGrid:item";
/**
 * action: 宫格图图片加载失败\
 * payload.index: 失败的图片索引\
 * payload.itemInfo: 失败的图片信息
 */
export declare const RENDER_IMAGEGRID_ERROR = "render:imageGrid:error";
/**
 * action: 宫格图点击更多\
 * payload.index: 点击的图片索引
 */
export declare const CLICK_IMAGEGRID_MORE = "click:imageGrid:more";
/**
 * action: 点击定位\
 * payload.extraData: 透传的对象\
 * payload.styleType: 样式类型
 */
export declare const CLICK_LOCATION_ITEM = "click:location:item";
/**
 * action: 可滑动的图文组件，点击列表中某一个\
 * payload.index: 点击的组件列表的索引\
 * payload.itemData: 点击的组件列表的信息
 */
export declare const CLICK_SLIDABLEIMGTEXT_ITEM = "click:slidableImgtext:item";
/**
 * action: 可滑动的图文组件，图片加载失败\
 * payload.index: 点击的组件列表的索引\
 * payload.itemData: 点击的组件列表的信息
 */
export declare const RENDER_SLIDABLEIMGTEXT_IMGERROR = "render:slidableImgtext:imgerror";
/**
 * action: 可滑动的图文组件，点击图片\
 * payload.index: 点击的组件列表的索引\
 * payload.itemData: 点击的组件列表的信息
 */
export declare const CLICK_SLIDABLEIMGTEXT_IMG = "click:slidableImgtext:img";
/**
 * action: 点击 PK
 */
export declare const CLICK_PK = "click:pk";
/**
 * action: 富文本标题点击事件\
 * payload: 组件运行时所有数据this.data.get()
 */
export declare const CLICK_RICHTEXT = "click:richText";
/**
 * action: 富文本标题点击话题事件\
 * payload: 该话题的全部数据
 */
export declare const CLICK_RICHTEXT_TOPIC = "click:richText:topic";
/**
 * action: 富文本标题点击用户事件\
 * payload: 该用户的全部数据
 */
export declare const CLICK_RICHTEXT_AT = "click:richText:at";
/**
 * action: 富文本标题点击普通链接事件\
 * payload: 该普通链的全部数据
 */
export declare const CLICK_RICHTEXT_LINK = "click:richText:link";
/**
 * action: 富文本标题点击视频链接事件\
 * payload: 该视频链接的全部数据
 */
export declare const CLICK_RICHTEXT_VIDEO = "click:richText:video";
/**
 * action: 富文本标题点击投票链接事件\
 * payload: 该投票链的全部数据
 */
export declare const CLICK_RICHTEXT_VOTE = "click:richText:Vote";
/**
 * action: 富文本标题点击图片链接事件\
 * payload: 该图片链接的全部数据
 */
export declare const CLICK_RICHTEXT_IMAGE = "click:richText:Image";
/**
 * action: 全民投票点击事件\
 * payload: 组件运行时所有数据this.data.get()
 */
export declare const CLICK_VOTE = "click:vote";
/**
 * action: 全民投票展现事件\
 * payload: 组件运行时所有数据this.data.get()
 */
export declare const SHOW_VOTE = "show:vote";
/**
 * action: 点击 footer left内容
 */
export declare const CLICK_FOOTER_LEFT = "click:footer:left";
/**
 * action: 点击 footer ext内容
 */
export declare const CLICK_FOOTER_EXT = "click:footer:ext";
/**
 * action: 点击 footer right内容
 */
export declare const CLICK_FOOTER_RIGHT = "click:footer:right";
/**
 * action: 点击关注按钮
 */
export declare const CLICK_FOLLOW_BUTTON = "click:follow:button";
/**
 * payload: 点击关注按钮事件参数
 */
export interface CLICK_FOLLOW_BUTTON_PAYLOAD {
    /**
     * 关注按钮唯一标识，可以用来区分打点，也作为 dom 的 id 属性值
     */
    key: string;
    /**
     * 关注按钮关联的作者属性
     */
    author: {
        /**
         * 是否已关注状态
         */
        followed?: boolean;
        /**
         * 关注、取消关注异步请求进行中
         */
        following?: boolean;
        /**
         * 是否使用关注红包样式
         */
        followRedbagStyle?: boolean;
    };
}
/**
 * action: 关注锁点击事件
 */
export declare const CLICK_FOLLOW_LOCK = "click:follow:lock";
/**
 * action: 关注锁展现事件
 */
export declare const SHOW_FOLLOW_LOCK = "show:follow:lock";
/**
 * action: 广告卡点击事件
 */
export declare const CLICK_ADS_CARD = "click:ads:card";
/**
 * payload: 广告卡点击事件参数
 */
export interface CLICK_ADS_CARD_PAYLOAD {
    /**
     * 文章nid
     */
    nid: string;
    /**
     * 商品id
     */
    goodsId: string;
    /**
     * 小程序key和path拼成的字符串
     */
    miniApp?: string;
    /**
     * event: 点击事件对象
     */
    event: Event;
}
/**
 * action: 广告卡展现事件\
 * payload: 组件运行时所有数据this.data.get()
 */
export declare const SHOW_ADS_CARD = "show:ads:card";
/**
 * action: 点击作者信息区域的 Badge（徽标）
 */
export declare const CLICK_AUTHOR_BADGE = "click:author:badge";
/**
 * payload: 点击作者徽标事件参数\
 * payload.e: MouseEvent点击事件\
 * payload.author.id: 作者id\
 * payload.bdage.url?: 跳转 schema\
 * payload.bdage.smtapp?: 跳转 H5url
 */
export interface CLICK_AUTHOR_BADGE_PAYLOAD {
    /**
     * 鼠标事件
     */
    e: MouseEvent;
    /**
     * 作者信息
     */
    author: {
        /**
         * 作者Id
         */
        id: string;
    };
    /**
     * 徽章
     */
    badge: {
        /**
         * 徽章跳转schema
         */
        smtapp?: string;
        /**
         * 徽章跳转Url
         */
        url?: string;
    };
}
/**
 * action: 点击作者信息区域
 */
export declare const CLICK_AUTHOR_INFO = "click:author:info";
/**
 * payload: 点击作者信息区域事件参数
 */
export interface CLICK_AUTHOR_INFO_PAYLOAD {
    e: MouseEvent;
    author: {
        id: string;
    };
}
/**
 * action: 导航栏使用粘性布局时随页面滚动吸顶状态的变化事件
 */
export declare const CHANGE_NAVBAR_STICKY = "change:navbar:sticky";
/**
 * payload: 导航栏吸顶状态的变化事件参数
 */
export interface CHANGE_NAVBAR_STICKY_PAYLOAD {
    isSticky: boolean;
}
/**
 * action: 正文小说卡卡片点击事件
 */
export declare const CLICK_NOVEL_CARD = "click:novel:card";
/**
 * payload: 正文小说卡点击事件参数
 */
export interface CLICK_NOVEL_CARD_PAYLOAD {
    /**
     * 书籍章节
     */
    card?: string;
    /**
     * 书籍ID
     */
    bookId?: string;
    /**
     * 来源
     */
    type?: string;
    /**
     * 是否在正文中
     */
    isContentNovel?: boolean;
}
/**
 * action: 正文小说卡按钮点击事件
 */
export declare const CLICK_NOVEL_BUTTON = "click:novel:button";
/**
 * payload: 正文小说卡按钮点击事件参数
 */
export interface CLICK_NOVEL_BUTTON_PAYLOAD {
    /**
     * 书籍章节
     */
    card?: string;
    /**
     * 在读人数
     */
    reading?: number;
    /**
     * 书籍ID
     */
    bookId?: string;
    /**
     * 来源
     */
    type?: string;
    /**
     * 是否在正文中
     */
    isContentNovel?: boolean;
    /**
     * 系统信息\
     * isBox: 是否端内\
     * isIOS: 是否IOS系统
     */
    env: {
        isBox: boolean;
        isIOS: boolean;
    };
}
/**
 * action: 正文小说卡展现事件\
 * payload: 正文小说卡组件全部数据
 */
export declare const SHOW_NOVEL = "show:novel";
/**
 * action: TTS按钮点击事件
 */
export declare const CLICK_TTS_BUTTON = "click:tts:button";
/**
 * action: TTS按钮点击事件参数
 */
export interface CLICK_TTS_BUTTON_PAYLOAD {
    /**
     * 是否TTS语音播放中
     */
    playing: boolean;
}
/**
 * action: 导航栏菜单按钮点击事件
 */
export declare const CLICK_NAVBAR_MENU = "click:navbar:menu";
/**
 * action: 点赞点击事件
 */
export declare const CLICK_PRAISE = "click:praise";
/**
 * payload: 点赞payload
 */
export interface CLICK_PRAISE_PAYLOAD {
    /**
     * 点赞id
     */
    replyId: string;
    /**
     * 是否已点赞 当前状态
     */
    isUped: boolean;
    /**
     * 当前点赞数
     */
    likeCount: number;
}
export interface CLICK_PUBLISH_DANMAKU_H_MO_PAYLOAD {
    /**
     * 弹幕跳转url
     */
    listUrl?: string;
    /**
     * 弹幕id
     */
    replyId: string;
    /**
     * 用户名
     */
    uname: string;
    /**
     * 点赞数
     */
    likeCount: string;
    /**
     * 用户头像
     */
    avatar: string;
    /**
     * 弹幕文案
     */
    content: string;
    /**
     * 是否已点赞
     */
    isUped: boolean;
    /**
     * 是否是用户发布的
     */
    isSelf?: boolean;
}
/**
 * action: 单条弹幕的点击事件
 */
export declare const CLICK_DANMAKU_H_ITEM = "click:danmakuHItem";
/**
 * payload: 单条弹幕的点击
 */
export declare type CLICK_DANMAKU_H_ITEM_PAYLOAD = CLICK_PUBLISH_DANMAKU_H_MO_PAYLOAD;
