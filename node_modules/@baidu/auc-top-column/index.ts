/**
 * @file index.ts
 * @author gaohong01
 */

import AucComponent from '@baidu/auc-base/AucComponent';
import styles from './style.module.less';
import {AucTopColumnData} from './types';
import AucVedioPlayer from '@baidu/auc-vedio-player';
import {jump} from '@baidu/auc-base/jump';
import {netWorkToast} from '@baidu/auc-base/boxLocalStorage';
import {env} from '@baidu/auc-base/env';
import {WujiImage, WujiIcon} from '@baidu/wuji-san';
import {componentLog} from '@baidu/auc-log';

export class AucTopColumn extends AucComponent {
    static template:string = /* html */ `
    <div class="{{wrapperClass}}">
        <auc-vedio-player
            s-if="topColumn.type === 'video' && !topColumn.videoData.isMiniVideo && videoSrc"
            vid="{{topColumn.videoData.vid}}"
            src="{{videoSrc}}"
            pageUrl="{{topColumn.videoData.pageUrl}}"
            title="{{topColumn.title}}"
            poster="{{topColumn.videoData.poster}}"
            duration="{{topColumn.videoData.vedioDuration}}"
            nid="{{topColumn.videoData.nid}}"
            autoplay="{{globalVedioAutoplay}}"
            muted="{{globalVedioMute}}"
            globalVedioVolume="{{globalVedioVolume}}"
            navColor="{{navColor}}"
            isBigEvent="{{isBigEvent}}"
            class="{{styles.vedioPlayer}}"
            isTopColumnInit="{{isTopColumnInit}}"
            statusBarHeight="{{statusBarHeight}}"
            titleBarHeight="{{titleBarHeight}}"
            on-click="vedioClick"
            on-changeTopColumnInit="changeTopColumnInit"
        >
        </auc-vedio-player>
        <div s-else class="{{styles.imageWrapper}}" on-click="vedioClick">
            <div class="{{styles.liveIconWrapper}} {{styles.playBack}}" s-if="topColumn.isPlayBack"><wuji-icon class="{{styles.liveIcon}}" type="live-newreview-f-30" size="30"></wuji-icon>直播回放</div>
            <div class="{{styles.liveIconWrapper}} {{styles.preload}}" s-if="topColumn.isPreload"><wuji-icon class="{{styles.liveIcon}}" type="live-newtrailer-f-30" size="30"></wuji-icon>直播预告</div>
            <div class="{{styles.liveIconWrapper}} {{styles.living}}" s-if="topColumn.isLive"><div class="{{styles.dotWrapper}}"><i class="{{styles.dot}} {{styles.dot1}}"></i><i class="{{styles.dot}} {{styles.dot2}}"></i><i class="{{styles.dot}} {{styles.dot3}}"></i></div>直播中</div>
            <wuji-image
                s-bind="{{topColumn.imageProps}}"
            ></wuji-image>
            <div class="{{styles.control}}">
                <div class="{{styles.mark}}"></div>
                <div class="{{styles.title}}">{{topColumn.title}}</div>
            </div>
            <div class="{{styles.after}}" style="{{navColor ? 'border-color:' + navColor : ''}}"></div>
        </div>
    </div>
    `;
    static components:object = {
        'auc-vedio-player': AucVedioPlayer,
        'wuji-image': WujiImage,
        'wuji-icon': WujiIcon
    };

    static computed:object = {
        wrapperClass() {
            return [
                styles.aucTopColumnWrapper,
                this.data.get('noHeadDesc') ? styles.noHeadDesc : '',
                this.data.get('hasOp') ? styles.hasOp : '',
                this.data.get('isBigEvent') ? styles.bigEvent : '',
                this.data.get('isBigEventHeader') ? this.data.get('imgType') === 3 ? styles.bigEventHeader : styles.bigEventHeader2 : '',
            ]
        }
    }

    initData(): AucTopColumnData {
        return {
            styles,
            topColumn: {},
            videoSrc: '',
            logBaseType: 'top_column_',
            isTopColumnInit: true
        };
    }
    inited() {
        if (this.data.get('topColumn').type === 'video') {
            const networtType = this.data.get('networtType');
            const clarityUrl = this.data.get('topColumn.videoData.clarityUrl');
            const srcType = networtType === 'wifi' ? 'sc' : 'hd';// wifi-超清-sc 4g-高清-hd
            let src = clarityUrl[srcType] ? clarityUrl[srcType].url : (clarityUrl.sd ? clarityUrl.sd.url : '');// 没有兜底取标清
            this.data.set('videoSrc', src);
        }
    }
    attached(): void {
        if (env.isSSR) {
            return;
        }
        // if (this.data.get('topColumn').type === 'video' && (env.isMatrix || env.isBoxSeries)) {
        //     netWorkToast(this.data.get('networtType'));
        // }
        this.registerScrollInView().then(() => {
            componentLog(this.data.get('logBaseType'), 'show', this.data.get('topColumn.logExtraParams'));
        });
    }

    vedioClick() {
        componentLog(this.data.get('logBaseType'), 'click', this.data.get('topColumn.logExtraParams'));
        jump(this.data.get('topColumn.jumpProps'))
    }
    changeTopColumnInit() {
        this.data.set('isTopColumnInit', false)
    }
}

export default AucTopColumn;
