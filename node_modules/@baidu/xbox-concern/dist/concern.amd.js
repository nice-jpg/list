/**
 * @baidu/xbox-concern v3.0.1
 * global xbox.concern 
 * Created at 2021-08-31 11:40:25
 */

define(['exports'], function (exports) { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  /**
   * @file Created on Mon Nov 26 2018
   * @author wangyongqing <wangyongqing01@baidu.com>
   */

  /**
   * @function type
   * @param {any} obj - 被判断的对象
   * @return {string} 返回类型：array/date/string/object/undefined/function/boolean/null/regexp/math 等
   */
  var getType = function getType(obj) {
    return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
  };
  /**
   * 根据传入的类型使用 Object.toString 进行判断
   * @function isType
   * @param {any} obj - 需要判断的类型
   * @param { string} type - 需要判断的类型字符串
   * @return {boolean} 返回判断结果
   * @example
   * isType('', 'String') // true
   * isType(new Date, 'Date') // true
   * isType('', 'Array') // false
   */


  function isType(obj, type) {
    return getType(obj) === type.toLowerCase();
  }

  /**
   * @file 判断方法
   * @module is
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * 判断是否为 null 或者 undefined
   * @param {any} obj - 判断的对象
   * @return {boolean} 返回判断结果
   * @example
   * isNil(null) // true
   * isNil(undefind) // true
   * isNil('') // false
   */

  function isNil(obj) {
    return obj === undefined || obj === null;
  }
  /**
   * 判断是否为 undefined
   * @param {any} obj - 判断的对象
   * @return {boolean} 返回判断结果
   * @example
   * isUndefined(null) // false
   * isUndefined(undefind) // true
   * isUndefined('') // false
   */

  function isUndefined(obj) {
    return obj === undefined;
  }
  /**
   * 判断是否为普通对象
   * @param {any} obj - 需要判断的对象
   * @return {boolean} 返回判断结果
   * @example
   * isPlainObject({}) // true
   * isPlainObject(window) // false
   */

  function isPlainObject(obj) {
    if (isType(obj, 'Object')) {
      return Object.getPrototypeOf(obj) === null || Object === obj.constructor;
    }

    return false;
  }
  /**
   * 是否是function类型
   * @name isFunction
   * @function isFunction
   * @param  {any} obj 要判断的对象
   * @return {Boolean} bool  true|false
   * @example
   * isFunction(new Function()) // true
   * isFuction('') // false
   */

  function isFunction(obj) {
    return isType(obj, 'Function');
  }
  /**
   * 是否是string类型
   * @name isString
   * @function
   * @param  {any} obj 要判断的对象
   * @return {Boolean} bool true|false
   * isString([]) // false
   * isString('array') // true
   */

  function isString(obj) {
    return isType(obj, 'String');
  }
  /**
   * 是否是array类型
   * @param  {any} obj 要判断的对象
   * @return {Boolean} bool 返回true|false
   * @example
   * isArray([]) // true
   * isArray('array') // false
   */

  function isArray(obj) {
    return isType(obj, 'Array');
  }
  /**
   * 判断是否为布尔类型
   * @param {any} bool - 要判断的对象
   * @return {Boolean} bool  返回true|false
   * @example
   * isBoolean(false) // true
   * isBoolean(/a/) // false
   */

  function isBoolean(bool) {
    return bool === true || bool === false;
  }
  /**
   * 判断一个对象是不是一个空对象
   * @param {object} obj - 待判断的对象
   * @return {boolean} 判断结果
   * @example
   * isEmptyObject({}) // true
   */

  function isEmptyObject(obj) {
    return Object.keys(obj).length === 0 && obj.constructor === Object;
  }

  /**
   * @file guid
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  var index = 0;
  /**
   * 获取 guid
   * @function guid
   * @param {number} [len = 8] - 获取的 guid 长度
   * @return {string} 获取的唯一guid
   */

  var guid = (function () {
    var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;
    index++; // 这里按照 now 的长度，应该在11左右
    // 所以 len 超过总长度，返回的是实际总长度
    // 即不补零

    return (Date.now().toString(16) + index).slice(-1 * len);
  });

  var gb = (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' ? window : global;
  /**
   * @function getGlobalFunc
   * @param {function} func - 全局函数
   * @return {string} funcName - 返回全局函数名
   */

  var getFunc = (function (func) {
    if (typeof func === 'function') {
      var name = "_xfunc_".concat(guid());

      gb[name] = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return func.apply(gb, args);
      };

      return name;
    }

    return func;
  });

  /**
   * @file A stricter URI encode adhering to RFC 3986
   * @author wangyongqing <wangyongqing01@baidu.com>
   * https://github.com/kevva/strict-uri-encode/blob/master/index.js
   */
  var oEncodeURIComponent = encodeURIComponent;
  var uriEncode = (function (str) {
    return oEncodeURIComponent(str).replace(/[!'()*]/g, function (x) {
      return "%".concat(x.charCodeAt(0).toString(16).toUpperCase());
    });
  });

  /**
   * @file 将对象转成url，但是没有添加对数组支持
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * 将对象转成url，但是没有添加对数组、对象支持，直接 JSON.stringify 输出
   * @function json2query
   * @param  {object} json - 待处理的json对象
   * @param  {boolean} [encode = false] - 是否 encodeURI 对象/数组字符串
   * @return {string}  str  - 处理之后的string字符串
   * @example
   * json2query({
   *       a: 1,
   *       b: 'string'
   *  });
   * //'a=1&b=string'
   * json2query({
   *       a: 1,
   *       b: 'string',
   *       c: [1, 2, 3]
   *   });
   * //'a=1&b=string&c=[1,2,3]'
   * json2query({
   *       a: 1,
   *       b: 'string',
   *       c: [1, 2, 3]
   *   }, true);
   * //'a=1&b=string&c=%5B1%2C2%2C3%5D'
   */

  function json2query(json) {
    var encode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (isString(json)) {
      return json;
    }

    var arr = [];

    for (var i in json) {
      var j = json[i];

      if (isArray(j)) {
        j = JSON.stringify(mapArray(j));
      } else if (isNil(j)) {
        j = '';
      } else if (isPlainObject(j)) {
        // 这里不再遍历处理，对于深层的 callback 需要注意了
        j = JSON.stringify(j);
      } else if (isFunction(j)) {
        j = getFunc(j);
      } // string/number/boolean 不处理


      arr.push("".concat(i, "=").concat(encode ? uriEncode(j) : j));
    }

    return arr.join('&');
  }

  function mapArray(args) {
    return args.map(function (arg) {
      switch (getType(arg)) {
        case 'string':
          return arg;

        case 'function':
          return getFunc(arg);

        default:
          return arg;
      }
    });
  }

  /**
   * @file Created on Mon Nov 26 2018
   * @author wangyongqing <wangyongqing01@baidu.com>
   */

  /**
   * 返回当前浏览器 UserAgent
   */
  var UA = (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' && window.self === window ? navigator.userAgent : '';

  /**
   * @file Created on Thu Nov 15 2018
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * 是否是手百产品，支持矩阵产品
   * @function isBox
   * @param {''|lite|pro|info|mission} [subName=''] - 手百矩阵产品标识
   * @param {string} ua - 传入的 userAgent，如果不传则取 navigator.userAgent
   * @return { boolean} 是否是手百判断结果
   * @example
   * isBoxApp()
   * isBoxApp('lite')
   * isBoxApp('pro', 'fdafafdafaf pro baiduboxapp')
   */

  var isBox = (function () {
    var subName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var ua = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UA;

    if (subName === 'main') {
      subName = '';
    } // baiduboxapp: 框的常规UA
    // biduboxapp:  个别网站会触发内核的风控策略(比如域名以le.com结尾)，UA会被替换


    var reg = / (baiduboxapp|biduboxapp)\//i;

    if (reg.test(ua) === false) {
      // 框外
      return false;
    }

    var matchRes = ua.match(reg);
    var sign = matchRes[1];

    if (!~ua.indexOf("".concat(subName, " ").concat(sign))) {
      // 具体的 app ：主线 / lite / info / pro 等
      return false;
    }

    return true;
  });

  /**
   * @file 判断是不是矩阵app，符合新的规范，规范地址：
   * @link http://agroup.baidu.com/share/md/0d6d1cc6b1c7417e8071057fb436001b
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * 是否是手百矩阵产品，需要符合新的ua规范
   * @function isMatrix
   * @param {''|'youjia'} [subName=''] - 手百矩阵产品标识
   * @param {string} ua - 传入的 userAgent，如果不传则取 navigator.userAgent
   * @return { boolean} 是否是手百判断结果
   * @example
   * isMatrix()
   * isMatrix('youjia')
   * isMatrix('youjia', 'fdafafdafaf pro baiduboxapp')
   */

  var matrix = (function () {
    var subName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var ua = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UA;

    if (subName === 'main') {
      subName = '';
    }

    var matrixUaExp = /\bbdapp\/\d+\.\d+\s+\((\w+);\s*(\w+)\)/;
    /**
     * Android示例	Mozilla/5.0 (.83 Mobile Safari/537.36 T7/11.16 light/1.0 bdapp/1.0 (youjia; youjia) youjia/1.0.1 (Baidu; P1 8.0.0)
     *  na 网络：Dalvik/2.1.0 (Linux; U; Android 8.0.0; MHA-AL00 Build/HUAWEIMHA-AL00) okhttp/3.11.0 bdapp/1.0 (youjia; youjia) youjia/1.0.1 (Baidu; P1 8.0.0)
        iOS示例	Mozilla/5.0 (iPhone; C.1.15 (KHTML, like Gecko) Mobile/15E148 main/1.0 SP-engine/2.14.0 NABar/1.0 bdapp/1.0 (youjia; youjia) youjia/1.0.1 (Baidu; P2 13.3)
        na网络：Mozilla/5.0 (iPho5.1.15 (KHTML, like Gecko) Mobile/15E148 youjia/1.0.1 (Baidu; P2 13.3)
     */

    if (subName === '') {
      var m = /\s(lite|pro|info|mission)\sbaiduboxapp\//.exec(ua);

      if (m) {
        return true;
      } // 只判断bdapp/1.0


      if (/\bbdapp\/\d+\.\d+\s/.test(ua)) {
        return true;
      }
    } else if (subName === false) {
      // 这里判断是新的matrix格式，即youjia这类，不包含lite info这类
      var _m = ua.match(matrixUaExp);

      if (_m && _m[1]) {
        return true;
      }
    } else {
      // TODO 判断老的
      if (new RegExp(new RegExp("\\s".concat(subName, "\\sbaiduboxapp/"))).test(ua)) {
        return true;
      }

      var _m2 = ua.match(matrixUaExp);

      if (_m2 && _m2[1] && _m2[1] === subName) {
        return true;
      }
    }

    return false;
  });

  var UA$1 = (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' && window.self === window ? navigator.userAgent : '';
  /**
   * 获取框的版本号
   * @function getBoxVersion
   * @param {''|lite|pro|info} [subName=''] - 手百矩阵产品标识
   * @param {string} ua - 传入的 userAgent，如果不传则取 navigator.userAgent
   * @return {String} version 返回框的版本号
   * @example
   * getBoxVersion('lite') // 2.0.1
   * getBoxVersion() // 11.1.0
   */

  function getBoxVersion() {
    var subName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var ua = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UA$1;

    if (subName === 'main') {
      subName = '';
    }

    var version = '0';

    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' && window.baiduboxapp_version) {
      /* eslint-disable no-undef */
      return baiduboxapp_version;
      /* eslint-enable no-undef */
    }

    if (isBox(subName, ua) || matrix(subName, ua)) {
      var a;

      if (a = /(baiduboxapp|baiduboxvision)\/([\d.]+)/.exec(ua)) {
        version = a[2];
      } else if (a = /([\d+.]+)_(?:diordna|enohpi)_/.exec(ua)) {
        // 老版本手百
        a = a[1].split('.');
        version = a.reverse().join('.');
      }
    }

    return version;
  } // 获取大版本号

  function getV(str) {
    var subName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var ua = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : UA$1;
    str = str || getBoxVersion(subName, ua);

    if (str && typeof str === 'string') {
      var match = /\d+\.\d+/.exec(str);

      if (match) {
        return match[0];
      }
    }

    return 0;
  }

  /**
   * @file 类型转换
   * @module to.js
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * 将传入对象返回字符串
   * @function toString
   * @param {any} value - 被转对象
   * @param { any} [defaultValue=null] - 如果不能转，默认返回值
   * @return {string} 返回字符串
   */

  function toString(value) {
    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (isNil(value)) {
      return defaultValue;
    }

    if (isString(value)) {
      return value;
    }

    return String(value);
  }

  /**
   * @file 版本比较，类似 php version_compare
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * 版本比较，类似 php version_compare
   * @function version_compare
   * @param {string} version1 - 比较的版本1
   * @param {string} version2 - 比较的版本2
   * @return {number} 返回比较结果：0，-1，1
   */

  var versionCompare = (function (version1, version2) {
    version1 = toString(version1, '');
    version2 = toString(version2, '');
    var a = version1.split('.');
    var b = version2.split('.');
    var i = 0;
    var len = Math.max(a.length, b.length);

    for (; i < len; i++) {
      if (a[i] && !b[i] && parseInt(a[i], 10) > 0 || parseInt(a[i], 10) > parseInt(b[i], 10)) {
        return 1;
      } else if (b[i] && !a[i] && parseInt(b[i], 10) > 0 || parseInt(a[i], 10) < parseInt(b[i], 10)) {
        return -1;
      }
    }

    return 0;
  });

  /**
   * 这里是精简版本的 is
   * @module os
   * @file Created on Mon Nov 26 2018
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * 是否是安卓
   * @function isAndroid
   * @param {string} ua - ua 默认是 userAgent
   */

  function isAndroid() {
    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UA;
    return /(Android);?[\s/]+([\d.]+)?/.test(ua);
  }
  /**
   * 是否是ios
   * @function isIOS
   * @param {string} ua - ua 默认是 userAgent
   */

  function isIOS() {
    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UA;
    return /(iPhone|iPod|iPad)/.test(ua);
  }

  /**
   * 判断浏览器类型
   * @module browser/detect
   * @file Created on Thu Nov 22 2018
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * @function isWeibo
   * @param {string} ua - 待判断的 UA，默认当前 userAgent
   */

  var isWeibo = function isWeibo() {
    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UA;
    return /\bweibo\b/i.test(ua);
  };
  /**
   * @function isWeixin
   * @param {string} ua - 待判断的 UA，默认当前 userAgent
   */

  var isWeixin = function isWeixin() {
    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UA;
    return /micromessenger\//i.test(ua);
  };
  var isMatrix = matrix;
  /**
   * @function isQQ
   * @param {string} ua - 待判断的 UA，默认当前 userAgent
   */

  var isQQ = function isQQ() {
    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UA;
    return /QQ\//.test(ua);
  };
  /**
   * @function isUC
   * @param {string} ua - 待判断的 UA，默认当前 userAgent
   */

  var isUC = function isUC() {
    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UA;
    return / UCBrowser\//.test(ua);
  };
  /**
   * @function isBaidubrowser
   * @param {string} ua - 待判断的 UA，默认当前 userAgent
   */

  var isBaidubrowser = function isBaidubrowser() {
    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UA;
    return /baidubrowser/i.test(ua);
  };
  var getUa = function getUa() {
    var browsers = null;

    switch (!0) {
      case isBox():
        browsers = 'bdbox';
        break;

      case isWeixin():
        browsers = 'wechat';
        break;

      case isWeibo():
        browsers = 'webo';
        break;

      case isQQ():
        browsers = 'qq';
        break;

      case isBaidubrowser():
        browsers = 'baidubrowser';
        break;

      case isUC():
        browsers = 'ucbrowser';
        break;

      default:
        browsers = 'others';
        break;
    }

    return browsers;
  };

  /**
   * @file 定义类型错误
   * @author wangyongqing <wangyongqing01@baidu.com>
   */

  /**
   * 获取错误类型的对象
   * @function typeError
   * @param {string} name - 展现的参数名
   * @param {string} wanted - 需要的类型字符串
   * @param {any} obj - 错误的类型对象
   * @return {TypeError} 返回错误类型
   */
  var typeError = (function (name, wanted, obj) {
    return new TypeError('Expected `' + name + '` to be of type `' + wanted + '`, got `' + _typeof(obj) + '`');
  });

  /**
   * @file decode uri 处理特殊字符
   * @author wangyongqing <wangyongqing01@baidu.com>
   * from https://github.com/SamVerschueren/decode-uri-component/blob/master/index.js
   */
  var oDecodeURIComponent = decodeURIComponent;
  var token = '%[a-f0-9]{2}';
  var singleMatcher = new RegExp(token, 'gi');
  var multiMatcher = new RegExp('(' + token + ')+', 'gi');

  function decodeComponents(components, split) {
    try {
      // Try to decode the entire string first
      return oDecodeURIComponent(components.join(''));
    } catch (err) {// Do nothing
    }

    if (components.length === 1) {
      return components;
    }

    split = split || 1; // Split the array in 2 parts

    var left = components.slice(0, split);
    var right = components.slice(split);
    return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
  }

  function decode(input) {
    try {
      return oDecodeURIComponent(input);
    } catch (err) {
      var tokens = input.match(singleMatcher);

      for (var i = 1; i < tokens.length; i++) {
        input = decodeComponents(tokens, i).join('');
        tokens = input.match(singleMatcher);
      }

      return input;
    }
  }

  function customDecodeURIComponent(input) {
    // Keep track of all the replacements and prefill the map with the `BOM`
    var replaceMap = {
      '%FE%FF': "\uFFFD\uFFFD",
      '%FF%FE': "\uFFFD\uFFFD"
    };
    var match = multiMatcher.exec(input);

    while (match) {
      try {
        // Decode as big chunks as possible
        replaceMap[match[0]] = oDecodeURIComponent(match[0]);
      } catch (err) {
        var result = decode(match[0]);

        if (result !== match[0]) {
          replaceMap[match[0]] = result;
        }
      }

      match = multiMatcher.exec(input);
    } // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else


    replaceMap['%C2'] = "\uFFFD";
    var entries = Object.keys(replaceMap);

    for (var i = 0; i < entries.length; i++) {
      // Replace all decoded components
      var key = entries[i];
      input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
    }

    return input;
  }

  var decode$1 = (function (encodedURI) {
    if (typeof encodedURI !== 'string') {
      throw typeError('encodedURI', 'string', encodedURI);
    }

    try {
      encodedURI = encodedURI.replace(/\+/g, ' '); // Try the built in decoder first

      return oDecodeURIComponent(encodedURI);
    } catch (err) {
      // Fallback to a more advanced decoder
      return customDecodeURIComponent(encodedURI);
    }
  });

  /**
   * @file 对传入url query 部分转成json格式
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * 对传入url query 部分转成json格式
   * @function query2json
   * @param {string} url  - 待处理的url
   * @param {boolean} [safe = true]- 是否启用安全 decode 模式，默认 true
   * @return {Object} obj - 返回处理后的json
   */

  var toJSON = (function (url) {
    var safe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var locse = url.split('?');
    var search = locse[1] ? locse[1] : locse[0];
    var pairs = search.split('&');
    var result = {};
    pairs.forEach(function (pair) {
      pair = pair.split('=');

      if (pair[0].length > 0) {
        var resultPair = '';

        try {
          resultPair = (safe ? decode$1(pair[1]) : decodeURIComponent(pair[1])) || '';
        } catch (e) {
          console.log(e);
        }

        result[pair[0]] = resultPair;
      }
    });
    return result;
  });

  /**
   * 解析 url，返回 url 和 query
   * @function parseUrl
   * @param {string} input - 需要解析的地址
   * @param {boolean} [parseQueryString = false] - 是否解析 query 为 object
   * @return {object} 返回{url,query}对象
   * @example
   * parseUrl('http://baidu.com?abc=1', true);
   *   {
   *       url: 'http://baidu.com',
   *       query: {
   *           abc: 1
   *       }
   *   }
   *   parseUrl('http://baidu.com?abc=1')
   *   {
   *       url: 'http://baidu.com',
   *       query: 'abc=1'
   *   }
   */

  var parseUrl = (function (input) {
    var parseQueryString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var _input$split = input.split('?'),
        _input$split2 = _slicedToArray(_input$split, 2),
        url = _input$split2[0],
        _input$split2$ = _input$split2[1],
        query = _input$split2$ === void 0 ? '' : _input$split2$;

    return {
      url: url,
      query: parseQueryString ? toJSON(query) : query
    };
  });

  /**
   * @file 对象深度merge方法
   * @author yanyiting <yanyiting@baidu.com>
   */

  function merge(target, source) {
    for (var key in source) {
      if (isPlainObject(source[key]) || isArray(source[key])) {
        if (isPlainObject(source[key]) && !isPlainObject(target[key])) {
          target[key] = {};
        }

        if (isArray(source[key]) && !isArray(target[key])) {
          target[key] = [];
        }

        merge(target[key], source[key]);
      } else if (!isUndefined(source[key])) {
        target[key] = source[key];
      }
    }
  }

  function extend(target) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (isBoolean(target)) {
      target = args.shift();
    }

    args.forEach(function (arg) {
      merge(target, arg);
    });
    return target;
  }

  /**
   * Monitor 日志监控类，可以直接用，或者继承他扩展他！
   * @class Monitor
   * @param {String} url - 接受打点的 url 地址
   * @param {Object} options - 配置，包括 before处理函数 和 全局通用数据：globalData
   * @example
   * const monitor = new Monitor('http://baidu.com/gt.gif', {
   *      before:(data)=>{
   *      return data;
   * },
   * globalData:{
   *          a:1
   *      }
   * });
   * monitor.mark({b:1}).mark({cd:1}).send();
   * monitor.report({c:1});
   */

  var Monitor = /*#__PURE__*/function () {
    function Monitor(url) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Monitor);

      var urlObj = parseUrl(url);
      url = urlObj.url;

      if (url.indexOf('//') === 0) {
        // 通用协议，这里需要处理，解决 hybrid 使用 file 协议的情况
        var protocol = location.protocol;

        if (protocol !== 'http:') {
          protocol = 'https:';
        }

        url = protocol + url;
      }

      this.url = url;
      var globalData = options.globalData || {};
      this._default = _extends(urlObj.query || {}, globalData);
      this._data = {};
      this._before = options.before;
    }
    /**
     * 设置全局数据
     * @param {Object} data - 需要 set 的数据对象
     */


    _createClass(Monitor, [{
      key: "setGlobalData",
      value: function setGlobalData(data) {
        if (isPlainObject(data)) {
          extend(this._default, data);
        }

        return this;
      }
      /**
       * 用于多次记录数据，数据会累计，只有调用过一次 send 方法才会清空
       * **注意**：后面传入同名的字段会覆盖掉之前传入的
       * **注意**：mark 的数据只能通过手动调用 send 才发送
       * 期间 report 方法的数据是单独发送的
       * 用于数据采集打点，比如速度统计，一个时间点一个打点，最后汇总发送
       * @param {Object} data - 用于添加的数据
       * @return {Monitor}
       */

    }, {
      key: "mark",
      value: function mark() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (!isPlainObject(data)) {
          throw typeError('data', 'object', data);
        } // 增加


        if (isPlainObject(data)) {
          _extends(this._mdata, data);
        } // 其他类型数据扔掉，只收 object|string


        return this;
      }
    }, {
      key: "_send",
      value: function _send(data) {
        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (!isPlainObject(data)) {
          throw typeError('data', 'object', data);
        }

        var img = new Image(1, 1);
        var imgName = "_xbox_mt_".concat(guid());
        window[imgName] = img;

        img.onload = img.onerror = img.onabort = function () {
          img.onload = img.onerror = img.onabort = null;
          window[imgName] = img = null;
        }; // 增加 默认数据


        data = extend({}, this._default, data);
        var before = this._before;

        if (!force && isFunction(before)) {
          var result = before(data); // 如果返回是 false 则不发送

          if (result === false) {
            return this;
          } else if (isUndefined(result)) ; else if (isPlainObject(result) || isString(result)) {
            // 如果是对象或者字符串，则替换 data；
            data = result;
          }
        }

        var url = "".concat(this.url, "?").concat(isString(data) ? data : json2query(data, true));
        img.src = url + '&_rnd=' + guid();
        return this;
      }
      /**
       * 跟 mark 配合使用，发送 mark 记录的数据
       * @param {Boolean} force - 是否跳过 before 函数处理直接发请求
       * @return {Monitor}
       */

    }, {
      key: "send",
      value: function send(force) {
        this._send(this._data, force); // 发送过一次之后就清空


        delete this._mdata;
        this._mdata = {};
        return this;
      }
      /**
       * @param {Object} data - 发送的数据
       * @param {Boolean} force - 是否跳过 before 函数处理直接发请求
       * @return {Monitor}
       */

    }, {
      key: "report",
      value: function report() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var force = arguments.length > 1 ? arguments[1] : undefined;

        if (!isPlainObject(data)) {
          throw typeError('data', 'object', data);
        }

        return this._send(data, force);
      }
    }]);

    return Monitor;
  }(); // eslint-disable-next-line JS630

  var URL = toJSON(location.search);
  var UA$2 = navigator.userAgent;
  var GIF_URI = 'https://mbd.baidu.com/tcbox';
  var NEW_GIF_URL = 'https://mbd.baidu.com/ztbox';
  var PBLog = /*#__PURE__*/function (_Monitor) {
    _inherits(PBLog, _Monitor);

    var _super = _createSuper(PBLog);

    function PBLog(action) {
      _classCallCheck(this, PBLog);

      var CUSTOM_ARG = {};

      if (URL.uid && URL.osname) {
        ['osname', 'ua', 'ut', 'from', 'cfrom', 'uid', 'pkgname'].forEach(function (v) {
          URL[v] && (CUSTOM_ARG[v] = URL[v]);
        });
      }

      return _super.call(this, action ? NEW_GIF_URL : GIF_URI, {
        globalData: _objectSpread2(_objectSpread2({}, CUSTOM_ARG), {}, {
          service: 'bdbox',
          action: action || 'pblog',
          // 表明参数协议第二个版本
          ctv: 2,
          // 表明参数加密
          cen: 'uid_ua_ut',
          data: {
            // 更新版本标记
            // 手百为1
            appid: isBox('lite') ? 10001 : isBox('info') ? 10002 : '1',
            // 客户端：1、JS：2、SERVER：3
            dataid: '2',
            // 区分主动/被动行为，主动：1、被动：0
            actiontype: '1',
            // 写死, actionid：2=事件统计，1=pv统计
            actionid: '2',
            actiondata: {
              boxV: getV(),
              ref: URL.ref || '',
              gmv: URL.vmgdb || '',
              source: URL.from || URL.ref || '',
              boxVersion: getBoxVersion(),
              boxPlatform: UA$2.match(/(iPad|iPhone|iPod)/gim) ? 'ios' : 'android'
            }
          }
        })
      });
    }

    _createClass(PBLog, [{
      key: "init",
      value: function init() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [],
            _ref2 = _slicedToArray(_ref, 2),
            cateId = _ref2[0],
            obj = _ref2[1];

        var CUSTOM_ARG = isPlainObject(obj) ? obj : {};
        CUSTOM_ARG.data = {};
        CUSTOM_ARG.data.cateid = cateId;
        return _get(_getPrototypeOf(PBLog.prototype), "setGlobalData", this).call(this, CUSTOM_ARG);
      }
      /**
       * pv统计
       * @param  {string} url 统计的pv url
       * @param  {string} su  来源url，可选
       * @return {this}     PBLOG
       */

    }, {
      key: "pv",
      value: function pv() {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [],
            _ref4 = _slicedToArray(_ref3, 2),
            url = _ref4[0],
            u = _ref4[1];

        var tmpArg = {
          // 写死, actionid：2=事件统计，1=pv统计
          actionid: '1',
          actiondata: {
            url: url || location.href
          }
        };

        if (u) {
          tmpArg.actiondata.u = u;
        }

        return _get(_getPrototypeOf(PBLog.prototype), "report", this).call(this, {
          data: tmpArg
        });
      }
      /**
       * 事件打点统计
       * @param  {string} evtName 事件名称
       * @param  {string} evtType   事件类型
       * @param  {string} evtTag    事件tag标示
       * @param  {?number} cateId    业务类型，可选用于指定打点业务类型
       * @return {object}  tc    tc函数
       */

    }, {
      key: "event",
      value: function event() {
        var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [],
            _ref6 = _slicedToArray(_ref5, 4),
            evtName = _ref6[0],
            _ref6$ = _ref6[1],
            evtType = _ref6$ === void 0 ? '' : _ref6$,
            _ref6$2 = _ref6[2],
            evtTag = _ref6$2 === void 0 ? '' : _ref6$2,
            cateId = _ref6[3];

        if (!evtName) {
          throw 'monitor.tc.event need a evtName';
        }

        var data = {};

        if (isPlainObject(evtType) && !evtTag) {
          data = {
            evtName: evtName
          };

          for (var i in evtType) {
            data[i] = evtType[i];
          }
        } else {
          data = {
            evtName: evtName,
            evtType: evtType,
            evtTag: evtTag
          };
        }

        var tmpArg = {
          // 写死, actionid：2=事件统计，1=pv统计
          actionid: '2',
          actiondata: data
        };

        if (cateId) {
          tmpArg.cateid = cateId;
        }

        return _get(_getPrototypeOf(PBLog.prototype), "report", this).call(this, {
          data: tmpArg
        });
      }
      /**
       * 事件打点统计
       * @param  {Object} data 事件上报数据
       * @param  {?number} cateId    业务类型，可选用于指定打点业务类型
       * @return {Object}  tc    tc函数
       */

    }, {
      key: "newEvent",
      value: function newEvent() {
        var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [],
            _ref8 = _slicedToArray(_ref7, 2),
            data = _ref8[0],
            cateId = _ref8[1];

        var tmpArg = {
          // 写死, actionid：2=事件统计，1=pv统计
          actionid: '2',
          actiondata: data
        };

        if (cateId) {
          tmpArg.cateid = cateId;
        }

        return _get(_getPrototypeOf(PBLog.prototype), "report", this).call(this, {
          data: tmpArg
        });
      }
    }]);

    return PBLog;
  }(Monitor);
  var pblog = new PBLog();

  var pblog$1 = (function (func) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return pblog[func].apply(pblog, args);
  });

  /**
  * @file: 类名处理
  * @author: xulinfeng@baidu.com
  * @date:   2019-11-27 18:38:45
  */
  function hasClass(obj, cls) {
    return obj.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));
  }
  function addClass(obj, cls) {
    if (!hasClass(obj, cls)) {
      obj.className = trim(obj.className) + ' ' + cls;
    }

    return obj;
  }
  function removeClass(obj, cls) {
    if (hasClass(obj, cls)) {
      var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
      obj.className = obj.className.replace(reg, ' ');
    }

    return obj;
  }
  function trim(str) {
    return str.replace(/(^\s*)|(\s*$)/g, '');
  }

  /**
   * 常用的工具：对象 stringify
   * @file 常用的工具：对象 stringify
   * @function stringify
   * @param {object} json - 需要 stringify 的对象
   * @param {*} encode - 是否 encodeURIComponent 编码
   */
  var stringify = (function (json) {
    var encode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (_typeof(json) === 'object') {
      json = JSON.stringify(json);
    }

    if (encode) {
      json = encodeURIComponent(json);
    }

    return json;
  });

  /**
   * 任意 scheme 调起，不校验baiduboxapp://
   * @function default
   * @param {string} scheme - 任意 scheme
   */

  var invoke = function invoke(scheme) {
    if (isSchemeValid(scheme)) {
      var $node = document.createElement('iframe');
      $node.style.display = 'none';
      $node.src = scheme;
      var body = document.body || document.getElementsByTagName('body')[0];
      body.appendChild($node); // 销毁 iframe

      setTimeout(function () {
        body.removeChild($node);
        $node = null;
      }, 0);
    }
  };

  function isSchemeValid(scheme) {
    return scheme && typeof scheme === 'string' && scheme.length > 10 && (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object';
  }

  /**
   * 老版本的调起，prompt实现
   * @function prompt
   * @param {String} obj - 类似 Bdbox_android_utils
   * @param {String} func - 类似 command
   * @param {String} args 参数数组
   */

  function prompt(obj, func, args) {
    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' && typeof window.prompt === 'function') {
      if ({}.toString.call(args).slice(-6, -1) !== 'Array') {
        args = [args];
      }

      var data = stringify({
        obj: obj,
        func: func,
        args: args
      });
      return window.prompt("BdboxApp:".concat(data));
    }
  }

  /**
   * boxx.js 
   * v3.0.9
   */

  /**
   * @file  获取全局对象
   * @author zhoudan03
   * @date 2019/8/6
   * @description 获取当前环境的全局对象, @todo 有必要这么判断么？
   */

  /* global globalThis */
  var global$1 =
  /* eslint-disable no-negated-condition */
  typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window // eslint-disable-next-line no-use-before-define
  : typeof global$1 !== 'undefined' // eslint-disable-next-line no-use-before-define
  ? global$1 : typeof self !== 'undefined' ? self : {};
  /* eslint-enable no-negated-condition */

  /**
   * @file  环境判断的变量及函数
   * @author zhoudan03
   * @date 2019/8/15
   */

  /**
   * 比较两个参数版本大小
   *
   * @param {string} version1 v1
   * @param {string} version2 v2
   * @return {number} 1 v1 > v2 ; -1 v1 < v2 ; 0 v1 = v2
   */

  function versionCompare$1(version1, version2) {
    if (version1 === version2) {
      return 0;
    }

    function toNumber(item) {
      if (!(+item >= 0)) {
        throw new Error('传递了非法版本号:: ' + item);
      }

      return +item;
    }

    var versionArray1 = ('' + version1).split('.').map(toNumber);
    var versionArray2 = ('' + version2).split('.').map(toNumber);
    var i = 0;
    var len = Math.max(versionArray1.length, versionArray2.length);

    for (; i < len; i++) {
      if (versionArray1[i] > versionArray2[i] || versionArray1[i] && !versionArray2[i] && versionArray1[i] > 0) {
        return 1;
      } else if (versionArray1[i] < versionArray2[i] || versionArray2[i] && !versionArray1[i] && versionArray2[i] > 0) {
        return -1;
      }
    }

    return 0;
  }

  var inBrowser = typeof window !== 'undefined';
  var UA$3 = inBrowser && window.navigator.userAgent.toLowerCase();
  var isIOS$1 = UA$3 && /iphone|ipad|ipod|ios/.test(UA$3);
  var isAndroid$1 = UA$3 && UA$3.indexOf('android') > 0; // 系统优先判断 android, 避免 android 的仿 IOS 系统，例如'android 1.1 xxxIOS 1.0'情况被识别为 ios 系统

  var OS = isAndroid$1 ? 'android' : isIOS$1 ? 'ios' : 'unknown';
  /**
   * 获取iOS/Android操作系统版本号
   *
   * @return {number}
   */

  function getOSVersion() {
    var result = 0;

    if (isAndroid$1) {
      var androidMatch = UA$3.match(/(android);?\s+([\d.]+)?/); // 优先判断android并且提前 return，避免 android 的仿 IOS 系统，例如'android 1.1 xxxIOS 1.0'情况被识别为 ios 系统并返回错误版本

      return androidMatch && androidMatch[2];
    }

    if (isIOS$1) {
      var iosMatch = UA$3.match(/(ipad|iphone|ipod).*os\s([\d_]+)/);
      return iosMatch && iosMatch[2].replace(/_/g, '.');
    }

    return result;
  } // 操作系统版本


  var OSVersion = getOSVersion(); // 手百系列产品

  var isBoxSeries = / baiduboxapp\//i.test(UA$3) || / bdapp\//i.test(UA$3); // bdapp协议的手百矩阵产品

  var isBdApp = / bdapp\//i.test(UA$3); // 获取bdapp协议头

  var schemaHeadReg = / bdapp\/\d+[.\d+]*\s\((\w+)[;]?\s?(\w+)?\)/g;
  var appSchemaHead = schemaHeadReg.exec(UA$3);
  var appProtoName = appSchemaHead ? appSchemaHead[2] || appSchemaHead[1] : 'baiduboxapp'; // 矩阵产品的端能力适配，端发版对齐新的主线版本时，这里需要新增

  var ADAPTVERSION = {
    tomas: {
      '1.0.0.0': '12.1.0.0'
    },
    baiduboxvision: {
      '1.0.0.0': '12.1.0.0',
      '2.0.0.0': '12.15.0.0'
    }
  };

  function getAdaptVersion(bdversion, uaType) {
    var versionList = ADAPTVERSION[uaType] || {};
    var len = Object.keys(versionList).length;

    if (len === 0) {
      return '';
    }

    for (var version in versionList) {
      if (versionList.hasOwnProperty(version) && versionCompare$1(bdversion, version) < 0) {
        return version;
      }
    }

    return Object.keys(versionList).pop();
  }
  /**
   * 获取手百版本号，包括手百的矩阵产品
   * @return {*}
   */


  function getBoxVersion$1() {
    // bdapp手百矩阵产品
    if (isBdApp) {
      var bdappMatch = new RegExp(appProtoName + '/([\\d+.]+)').exec(UA$3);

      if (bdappMatch && bdappMatch[1]) {
        return getAdaptVersion(bdappMatch[1], appProtoName);
      }
    } // 现代手百


    var match = /baiduboxapp\/([\d+.]+)/.exec(UA$3);

    if (match && match[1]) {
      return match[1];
    } // 某个历史版本手百


    if (global$1.baiduboxapp_version) {
      return global$1.baiduboxapp_version;
    } // 某个历史版本手百


    var oldMatch = /([\d+.]+)_(?:diordna|enohpi)_/.exec(UA$3);
    return oldMatch && oldMatch[1] && oldMatch[1].split('.').reverse().join('.') || 0;
  } // 手百版本（根据当前是什么类型的手百，返回对应APP的版本号）


  var boxVersion = getBoxVersion$1(); // 手百主版本

  var isBox$1 = / baiduboxapp\//i.test(UA$3) && !/ (lite|info|pro|mission) baiduboxapp/.test(UA$3) && !isBdApp; // 手百极速版（在 iOS，极速版的关键词是 info; 在 Android，极速版的 UA 关键字是 lite。其他也为 info 的产品为 lite 的前身，可以忽略）
  // wiki:  http://wiki.baidu.com/pages/viewpage.action?pageId=418333914

  var isLiteBox = isIOS$1 && / info baiduboxapp\//i.test(UA$3) || isAndroid$1 && / lite baiduboxapp\//i.test(UA$3); // 手百看多多

  var isMissionBox = / mission baiduboxapp\//i.test(UA$3); // 手百类型    'main'主版  'mission'看多多  'lite'极速版

  var boxType = isBox$1 ? 'main' : isMissionBox ? 'mission' : isLiteBox ? 'lite' : appProtoName || 'unknown'; // 浏览器框架  light：轻浏览器框架；search：主（搜索）浏览器框架; imagesearch mian: 多模半屏webview

  var boxBrowserType = /imagesearch[\s\S]+main/i.test(UA$3) ? 'imageseach' : /light/i.test(UA$3) ? 'light' : 'search';
  var env = /*#__PURE__*/Object.freeze({
    __proto__: null,
    versionCompare: versionCompare$1,
    inBrowser: inBrowser,
    UA: UA$3,
    isIOS: isIOS$1,
    isAndroid: isAndroid$1,
    OS: OS,
    OSVersion: OSVersion,
    isBoxSeries: isBoxSeries,
    isBdApp: isBdApp,
    appProtoName: appProtoName,
    boxVersion: boxVersion,
    isBox: isBox$1,
    isLiteBox: isLiteBox,
    isMissionBox: isMissionBox,
    boxType: boxType,
    boxBrowserType: boxBrowserType
  });
  /**
   * 广播事件处理
   * @description 目标: 为了尽可能的减少模块之间业务逻辑的耦合度, 而开发了这个eventbus, 主要用于业务逻辑的事件传递
   * 使用规范: 每个js模块尽可能通过事件去通信, 减少模块之间的直接调用和依赖(耦合)
   *
   * @author chenqi14
   */

  var _cache = {};
  var broadcast = {
    /**
     * 派发
     * @param  {String} type 事件类型
     * @param  {...*} data 回调数据，支持连续传递
     * @return {this}   this   broadcast对象
     * @example
     * Bdbox.event.broadcast.fire('some event', arg1, arg2)
     */
    fire: function fire(type, data) {
      var listeners = _cache[type];
      var len = 0;

      if (listeners) {
        // eslint-disable-next-line prefer-rest-params
        var args = [].slice.call(arguments, 0); // 后面补单测时请删除上面的 disable 注释

        args = args.length > 2 ? args.splice(2, args.length - 1) : [];
        args = [type, data].concat(args);
        len = listeners.length;

        for (var i = 0; i < len; i++) {
          var listener = listeners[i];

          if (listener && listener.callback) {
            args = args.concat(listener.args);
            listener.callback.apply(listener.scope, args);
          }
        }
      }

      return this;
    },

    /**
     * 订阅广播事件
     * @param  {String}   types     事件类型，支持`,`分隔符
     * @param  {Function} callback 回调函数
     * @param  {Object}   [scope=undefined]    回调函数上下文
     * @return {this}    this broadcast
     * @example
     * Bdbox.event.broadcast.on('some event,someevent2', function(arg1, arg2){
     *     console.log(arg1, arg2);
     * });
     */
    on: function on(types, callback, scope) {
      types = types || []; // eslint-disable-next-line prefer-rest-params

      var args = [].slice.call(arguments); // 后面补单测时请删除上面的 disable 注释

      if (typeof types === 'string') {
        types = types.split(',');
      }

      var len = types.length;

      if (len === 0) {
        return this;
      }

      args = args.length > 3 ? args.splice(3, args.length - 1) : [];

      for (var i = 0; i < len; i++) {
        var type = types[i];
        _cache[type] = _cache[type] || [];

        _cache[type].push({
          callback: callback,
          scope: scope,
          args: args
        });
      }

      return this;
    },

    /**
     * 退订
     * @param  {String}   type     退订服务的类型
     * @param  {Function} callback 假如传入则移出传入的监控事件，否则移出全部
     * @return {this} this broadcast
     * @example
     * Bdbox.event.broadcast.off('some event', callback);
     */
    off: function off(type, callback, scope) {
      var listeners = _cache[type];

      if (!listeners) {
        return this;
      }

      if (callback) {
        var len = listeners.length;
        var tmp = [];

        for (var i = 0; i < len; i++) {
          var listener = listeners[i];

          if (listener.callback !== callback || listener.scope !== scope) {
            tmp.push(listener);
          }
        }

        _cache[type] = tmp;
      } else {
        listeners.length = 0;
      }

      return this;
    },

    /**
     * 移出所有事件
     * @return {this} this broadcast对象
     */
    removeAll: function removeAll() {
      _cache = {};
      return this;
    }
  };

  function EventEmitter() {
    var handlers = {};
    return {
      on: function on(eventName, fn) {
        if (handlers.hasOwnProperty(eventName)) {
          handlers[eventName].indexOf(fn) === -1 && handlers[eventName].push(fn);
        } else {
          handlers[eventName] = [fn];
        }
      },
      off: function off(eventName, fn) {
        var handlerList = handlers[eventName] || [];
        var index = handlerList.indexOf(fn);

        if (index > -1) {
          handlers[eventName].splice(index, 1);
        }
      },
      once: function once(eventName, fn) {
        var this$1 = this;

        var only = function only() {
          var args = [],
              len = arguments.length;

          while (len--) {
            args[len] = arguments[len];
          }

          this$1.off(eventName, only);
          fn.apply.apply(fn, [this$1].concat(args));
        };

        this.on(eventName, only);
      },
      emit: function emit(eventName) {
        var args = [],
            len = arguments.length - 1;

        while (len-- > 0) {
          args[len] = arguments[len + 1];
        }

        var arr = eventName.split(':');

        if (arr.length > 1 && (arr.length !== 2 || arr[1] !== '*')) {
          var key = arr[0] + ':*'; // 执行key(arr[0]:*)事件

          handleEmitEvent.apply(void 0, [handlers, key].concat(args));
        } // 执行eventName事件


        handleEmitEvent.apply(void 0, [handlers, eventName].concat(args));
      }
    };
  }

  function handleEmitEvent(handlers, key) {
    var args = [],
        len = arguments.length - 2;

    while (len-- > 0) {
      args[len] = arguments[len + 2];
    }

    if (handlers.hasOwnProperty(key)) {
      handlers[key].forEach(function (fn) {
        fn.apply(void 0, args);
      });
    }
  }

  var event = new EventEmitter();
  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
    return module = {
      exports: {}
    }, fn(module, module.exports), module.exports;
  }

  var jsNative = createCommonjsModule(function (module, exports) {
    /**
     * @file js-native 通信管理
     * @author errorrik(errorrik@gmail.com)
     * @author houyu(785798835@qq.com)
     */
    (function (root) {
      /**
       * 对数组进行遍历
       *
       * @inner
       * @param {Array} array 要遍历的数组
       * @param {Function} fn 遍历函数
       */
      function each(array, fn) {
        var len = array && array.length || 0;

        for (var i = 0, l = len; i < l; i++) {
          if (fn(array[i], i) === false) {
            break;
          }
        }
      }
      /**
       * 返回原值的方法，调用过程的兜底处理函数
       *
       * @inner
       * @param {*} source 原值
       * @return {*}
       */


      function returnRaw(source) {
        return source;
      }
      /**
       * 对返回值进行 JSON 解码（反序列化）处理的函数
       *
       * @inner
       * @param {*} source 原值
       * @return {*}
       */


      function returnJSONDecode(source) {
        return typeof source === 'string' ? JSON.parse(source) : source;
      }
      /**
       * 参数检查，错误直接抛出异常
       *
       * @inner
       * @param {Array} args 调用参数
       * @param {Array} declarations 参数声明列表
       */


      function checkArgs(args, declarations, apiContainer) {
        each(declarations, function (declaration, i) {
          var errorMsg;
          var value = normalizeValueDeclaration(declaration.value);

          switch (checkValue(args[i], value)) {
            case 1:
              errorMsg = ' is required.';
              break;

            case 2:
              errorMsg = ' type error. must be ' + JSON.stringify(value.type || 'Array');
              break;

            case 3:
              errorMsg = ' type error, must be oneOf ' + JSON.stringify(value.oneOf);
              break;

            case 4:
              errorMsg = ' type error, must be oneOfType ' + JSON.stringify(value.oneOfType);
              break;

            case 5:
              errorMsg = ' type error, must be arrayOf ' + JSON.stringify(value.arrayOf);
              break;
          }

          if (errorMsg) {
            var title = apiContainer && apiContainer.options.errorTitle || 'jsNative';
            throw new Error('[' + title + ' Argument Error]' + declaration.name + errorMsg);
          }
        });
      }
      /**
       * 对值声明进行标准化处理
       *
       * @inner
       * @param {Object|string} declaration 值声明
       * @return {Object}
       */


      function normalizeValueDeclaration(declaration) {
        if (typeof declaration === 'string') {
          var realDeclaration = {
            isRequired: true
          };

          if (/=$/.test(declaration)) {
            realDeclaration.isRequired = false;
            declaration = declaration.slice(0, declaration.length - 1);
          }

          if (/\[\]$/.test(declaration)) {
            realDeclaration.arrayOf = declaration.slice(0, declaration.length - 2);
          } else if (declaration.indexOf('|') > 0) {
            realDeclaration.oneOfType = declaration.split('|');
          } else {
            realDeclaration.type = declaration;
          }

          return realDeclaration;
        }

        return declaration;
      }
      /**
       * 对参数值进行检查
       *
       * @inner
       * @param {*} value 值
       * @param {Object} declaration 值声明
       * @return {number}
       */


      function checkValue(value, declaration) {
        declaration = normalizeValueDeclaration(declaration);

        if (value == null) {
          return declaration.isRequired && declaration.type !== '*' ? 1 : 0;
        }

        var valid = false;

        switch (_typeof(declaration.type)) {
          case 'string':
            switch (declaration.type) {
              case 'string':
              case 'boolean':
              case 'number':
              case 'function':
              case 'object':
                valid = _typeof(value) === declaration.type;
                break;

              case 'Object':
                valid = _typeof(value) === 'object';
                break;

              case 'Array':
                valid = value instanceof Array;
                break;

              case '*':
                valid = true;
                break;
            }

            if (!valid) {
              return 2;
            }

            break;

          case 'object':
            if (value && _typeof(value) === 'object') {
              valid = true;

              for (var key in declaration.type) {
                valid = !checkValue(value[key], declaration.type[key]);

                if (!valid) {
                  break;
                }
              }
            }

            if (!valid) {
              return 2;
            }

            break;

          default:
            if (declaration.oneOf) {
              each(declaration.oneOf, function (expectValue) {
                valid = expectValue === value;
                return !valid;
              });

              if (!valid) {
                return 3;
              }
            } else if (declaration.oneOfType) {
              each(declaration.oneOfType, function (expectType) {
                valid = !checkValue(value, expectType);
                return !valid;
              });

              if (!valid) {
                return 4;
              }
            } else if (declaration.arrayOf) {
              if (value instanceof Array) {
                valid = true;
                each(value, function (item) {
                  return valid = !checkValue(item, declaration.arrayOf);
                });

                if (!valid) {
                  return 5;
                }
              } else {
                return 2;
              }
            }

        }

        return 0;
      }
      /**
       * 对调用参数中的所有回调函数，进行参数解码（反序列化）包装
       *
       * @inner
       * @param {Array} args 调用参数
       * @return {Array}
       */


      function wrapDecodeFuncArgs(args) {
        each(args, function (arg, i) {
          if (typeof arg === 'function') {
            args[i] = wrapDecodeFuncArg(arg);
          }
        });
        return args;
      }
      /**
       * 对回调函数的参数进行解码（反序列化）包装
       *
       * @inner
       * @param {Function} fn 回调函数
       * @return {Function}
       */


      function wrapDecodeFuncArg(fn) {
        return function (arg) {
          fn(typeof arg === 'string' ? JSON.parse(arg) : arg);
        };
      }
      /**
       * 对调用参数中的所有回调函数，进行序列化包装
       *
       * @inner
       * @param {Array} args 调用参数
       * @return {Array}
       */


      function wrapArgFunc(args) {
        each(args, function (arg, i) {
          if (typeof arg === 'function') {
            args[i] = wrapFunc(arg);
          }
        });
        return args;
      }
      /**
       * 用于回调函数包装命名的自增id
       *
       * @inner
       * @type {number}
       */


      var funcId = 1;
      /**
       * 用于回调函数包装命名的前缀
       *
       * @inner
       * @const
       * @type {string}
       */

      var FUNC_PREFIX = '__jsna_';
      /**
       * 对回调函数，进行序列化包装
       *
       * @inner
       * @param {Function} fn 回调函数
       * @return {string}
       */

      function wrapFunc(fn) {
        var funcName = FUNC_PREFIX + funcId++;

        root[funcName] = function (arg) {
          delete root[funcName];
          fn(arg);
        };

        return funcName;
      }
      /**
       * 对调用参数中的所有参数进行JSON序列化
       *
       * @inner
       * @param {Array} args 调用参数
       * @return {Array}
       */


      function argJSONEncode(args) {
        each(args, function (arg, i) {
          args[i] = JSON.stringify(arg);
        });
        return args;
      }
      /**
       * 将调用参数合并成对象
       *
       * @inner
       * @param {Array} args 调用参数
       * @param {Array} declarations 参数声明列表
       * @return {Object}
       */


      function argCombine(args, declarations) {
        var result = {};
        each(declarations, function (declaration, i) {
          var arg = args[i];

          if (arg != null) {
            result[declaration.name] = arg;
          }
        });
        return result;
      }
      /**
       * 通过 prompt 对话框进行 Native 调用
       *
       * @inner
       * @param {string} source 要传递的数据字符串
       * @return {string}
       */


      function callPrompt(source) {
        return root.prompt(source);
      }
      /**
       * 通过 location.href 进行 Native 调用
       *
       * @inner
       * @param {string} url 要传递的url字符串
       */


      function callLocation(url) {
        root.location.href = url;
      }
      /**
       * 通过 iframe 进行 Native 调用
       *
       * @inner
       * @param {string} url 要传递的url字符串
       */


      function callIframe(url) {
        var iframe = document.createElement('iframe');
        iframe.src = url;
        document.body.appendChild(iframe);
        document.body.removeChild(iframe);
      }
      /**
       * 映射调用对象描述中的名称
       *
       * @inner
       * @param {Object|Function} mapAPI 调用描述对象名称的映射表或映射函数
       * @param {string} name 调用描述对象中的名称
       * @return {string}
       */


      function mapAPIName(mapAPI, name) {
        if (typeof mapAPI === 'function') {
          return mapAPI(name);
        }

        return mapAPI[name];
      }
      /**
       * 调用描述对象的 invoke 属性为字符串时的快捷映射表
       *
       * @inner
       * @const
       * @type {Object}
       */


      var INVOKE_SHORTCUT = {
        'method': ['ArgCheck', 'CallMethod'],
        'method.json': ['ArgCheck', 'ArgFuncArgDecode:JSON', 'ArgFuncEncode', 'ArgEncode:JSON', 'CallMethod', 'ReturnDecode:JSON'],
        'prompt.json': ['ArgCheck', 'ArgFuncArgDecode:JSON', 'ArgFuncEncode', 'ArgAdd:name', 'ArgCombine:JSONString', 'CallPrompt', 'ReturnDecode:JSON'],
        'prompt.url': ['ArgCheck', 'ArgFuncArgDecode:JSON', 'ArgFuncEncode', 'ArgEncode:JSON', 'ArgCombine:URL', 'CallPrompt', 'ReturnDecode:JSON'],
        'location': ['ArgCheck', 'ArgFuncArgDecode:JSON', 'ArgFuncEncode', 'ArgEncode:JSON', 'ArgCombine:URL', 'CallLocation'],
        'iframe': ['ArgCheck', 'ArgFuncArgDecode:JSON', 'ArgFuncEncode', 'ArgEncode:JSON', 'ArgCombine:URL', 'CallIframe'],
        'message': ['ArgCheck', 'ArgFuncArgDecode:JSON', 'ArgFuncEncode', 'ArgAdd:name', 'ArgCombine:Object', 'CallMessage']
      };
      /**
       * 调用描述对象的 invoke 属性为 Object时，call 字段对应的映射表
       *
       * @inner
       * @const
       * @type {Object}
       */

      var INVOKE_CALL_MAP = {
        method: 'CallMethod',
        prompt: 'CallPrompt',
        location: 'CallLocation',
        iframe: 'CallIframe',
        message: 'CallMessage'
      };
      /**
       * 调用描述对象的 invoke 属性为 Object时，before 字段对应的映射表
       *
       * @inner
       * @const
       * @type {Object}
       */

      var INVOKE_BEFORE_MAP = {
        JSONStringInTurn: ['ArgFuncArgDecode:JSON', 'ArgFuncEncode', 'ArgEncode:JSON'],
        JSONString: ['ArgFuncArgDecode:JSON', 'ArgFuncEncode', 'ArgAdd:name', 'ArgCombine:JSONString'],
        JSONObject: ['ArgFuncArgDecode:JSON', 'ArgFuncEncode', 'ArgAdd:name', 'ArgCombine:Object'],
        URL: ['ArgFuncArgDecode:JSON', 'ArgFuncEncode', 'ArgEncode:JSON', 'ArgCombine:URL']
      };
      var BUILTIN_DESCRIPTION_PROPS = {
        name: 1,
        args: 1,
        invoke: 1,
        method: 1,
        scheme: 1,
        authority: 1,
        path: 1,
        handler: 1
      };

      function descriptionPropMerger(target, source) {
        for (var key in source) {
          if (source.hasOwnProperty(key) && !BUILTIN_DESCRIPTION_PROPS[key]) {
            target[key] = source[key];
          }
        }

        return target;
      }
      /**
       * 对调用描述对象进行标准化处理
       *
       * @inner
       * @param {Object} description 调用描述对象
       * @param {Function?} propMerger 属性合并方法，默认实现为for...in，APIContainer可用于提升性能
       * @return {Object}
       */


      function normalizeDescription(description, propMerger) {
        var args = [];

        if (description.args instanceof Array) {
          for (var i = 0; i < description.args.length; i++) {
            var arg = description.args[i];
            args.push({
              name: arg.name || arg.n,
              value: arg.value || arg.v
            });
          }
        }

        propMerger = propMerger || descriptionPropMerger;
        return propMerger({
          name: description.name,
          args: args,
          invoke: normalizeInvoke(description.invoke),
          method: description.method,
          scheme: description.scheme || description.schema,
          authority: description.authority,
          path: description.path,
          handler: description.handler
        }, description);
      }
      /**
       * 对 description 中的 invoke 属性进行标准化处理
       *
       * @inner
       * @param {Array|Object|string} invoke description的invoke属性
       * @return {Array?}
       */


      function normalizeInvoke(invoke) {
        if (invoke instanceof Array) {
          return invoke;
        }

        switch (_typeof(invoke)) {
          case 'string':
            return INVOKE_SHORTCUT[invoke];

          case 'object':
            var result = [];

            if (invoke.check) {
              result.push('ArgCheck');
            }

            if (invoke.before) {
              result = result.concat(INVOKE_BEFORE_MAP[invoke.before]);
            }

            result.push(INVOKE_CALL_MAP[invoke.call]);

            if (invoke.after === 'JSON') {
              result.push('ReturnDecode:JSON');
            }

            return result;
        }
      }

      function APIContainer(options) {
        /**
         * processor 创建方法集合
         *
         * @inner
         * @type {Object}
         */
        var processorCreators = {
          /**
           * 创建参数检查处理函数
           *
           * @param {Object} description 调用描述对象
           * @return {Function}
           */
          ArgCheck: function ArgCheck(description, option, apiContainer) {
            return function (args) {
              checkArgs(args, description.args, apiContainer);
              return args;
            };
          },

          /**
           * 创建解码回调函数参数包装的处理函数
           *
           * @param {Object} description 调用描述对象
           * @param {string} option 处理参数
           * @return {Function}
           */
          ArgFuncArgDecode: function ArgFuncArgDecode(description, option) {
            return option === 'JSON' ? wrapDecodeFuncArgs : returnRaw;
          },

          /**
           * 创建回调函数序列化的处理函数
           *
           * @return {Function}
           */
          ArgFuncEncode: function ArgFuncEncode() {
            return wrapArgFunc;
          },

          /**
           * 创建参数序列化的处理函数
           *
           * @param {Object} description 调用描述对象
           * @param {string} option 处理参数
           * @return {Function}
           */
          ArgEncode: function ArgEncode(description, option) {
            return option === 'JSON' ? argJSONEncode : returnRaw;
          },

          /**
           * 创建从调用描述对象中添加额外参数的处理函数
           *
           * @param {Object} description 调用描述对象
           * @param {string} option 处理参数
           * @return {Function}
           */
          ArgAdd: function ArgAdd(description, option) {
            var argLen = description.args.length;
            description.args.push({
              name: '_' + option,
              value: '*'
            });
            var value = description[option];
            return function (args) {
              args[argLen] = value;
              return args;
            };
          },

          /**
           * 创建参数合并的处理函数
           *
           * @param {Object} description 调用描述对象
           * @param {string} option 处理参数
           * @return {Function}
           */
          ArgCombine: function ArgCombine(description, option) {
            switch (option) {
              case 'URL':
                var prefix = description.scheme + '://' + description.authority + description.path;
                return function (args) {
                  var result = [];
                  each(description.args, function (declaration, i) {
                    var arg = args[i];

                    if (arg != null) {
                      result.push(declaration.name + '=' + encodeURIComponent(arg));
                    }
                  });
                  var queryStr = result.join('&');
                  return queryStr ? prefix + '?' + queryStr : prefix;
                };

              case 'Object':
                return function (args) {
                  return argCombine(args, description.args);
                };

              case 'JSONString':
                return function (args) {
                  return JSON.stringify(argCombine(args, description.args));
                };
            }

            return returnRaw;
          },

          /**
           * 创建方法调用的处理函数
           *
           * @param {Object} description 调用描述对象
           * @param {string} option 处理参数
           * @return {Function}
           */
          CallMethod: function CallMethod(description, option) {
            var methodOwner;
            var methodName;

            function findMethod() {
              if (!methodOwner) {
                var segs = description.method.split('.');
                var lastIndex = segs.length - 1;
                methodName = segs[lastIndex];
                methodOwner = root;

                for (var i = 0; i < lastIndex; i++) {
                  methodOwner = methodOwner[segs[i]];
                }
              }
            }

            return function (args) {
              findMethod();

              switch (description.args.length) {
                case 0:
                  return methodOwner[methodName]();

                case 1:
                  return methodOwner[methodName](args[0]);

                case 2:
                  return methodOwner[methodName](args[0], args[1]);

                case 3:
                  return methodOwner[methodName](args[0], args[1], args[2]);
              }

              return methodOwner[methodName].apply(methodOwner, args);
            };
          },

          /**
           * 创建 prompt 调用的处理函数
           *
           * @return {Function}
           */
          CallPrompt: function CallPrompt() {
            return callPrompt;
          },

          /**
           * 创建 iframe 调用的处理函数
           *
           * @return {Function}
           */
          CallIframe: function CallIframe() {
            return callIframe;
          },

          /**
           * 创建 location 调用的处理函数
           *
           * @return {Function}
           */
          CallLocation: function CallLocation() {
            return callLocation;
          },

          /**
           * 创建 postMessage 调用的处理函数
           *
           * @param {Object} description 调用描述对象
           * @return {Function}
           */
          CallMessage: function CallMessage(description) {
            return function (args) {
              root.webkit.messageHandlers[description.handler].postMessage(args);
            };
          },

          /**
           * 创建对返回值进行解码的处理函数
           *
           * @param {Object} description 调用描述对象
           * @param {string} option 处理参数
           * @return {Function}
           */
          ReturnDecode: function ReturnDecode(description, option) {
            return option === 'JSON' ? returnJSONDecode : returnRaw;
          }
        };
        var apiContainer = {
          options: {
            errorTitle: 'jsNative',
            namingConflict: 'error'
          },
          apis: [],
          apisLen: 0,
          apiIndex: {},

          /**
           * 配置参数，设置的参数将被合并到现有参数中
           *
           * @param {Object} options 参数对象
           * @param {string=} options.errorTitle 显示报错信息的标题
           * @param {string=} options.namingConflict 名字冲突时的处理策略
           * @return {APIContainer}
           */
          config: function config(options) {
            options = options || {}; // 再多就不能这么干了

            this.options.errorTitle = options.errorTitle || this.options.errorTitle;
            this.options.namingConflict = options.namingConflict || this.options.namingConflict;
            return this;
          },

          /**
           * 添加调用API
           *
           * @param {Object|Array} description 调用描述对象
           * @return {APIContainer}
           */
          add: function add(description) {
            if (description instanceof Array) {
              for (var i = 0; i < description.length; i++) {
                this.add(description[i]);
              }
            } else if (_typeof(description) === 'object') {
              var name = description.name;

              if (this.apiIndex[name] != null) {
                switch (this.options.namingConflict) {
                  /* jshint ignore:start */
                  case 'override':
                    this.apis[this.apiIndex[name]] = normalizeDescription(description, this.descriptionPropMerger);

                  case 'ignore':
                    break;

                  /* jshint ignore:end */

                  case 'error':
                  default:
                    throw new Error('[' + this.options.errorTitle + '] API exists: ' + name);
                }
              } else {
                var realDesc = normalizeDescription(description, this.descriptionPropMerger);
                this.apiIndex[name] = this.apisLen;
                this.apis[this.apisLen++] = realDesc;
              }
            }

            return this;
          },

          /**
           * 从一次 Native 的调用结果中添加调用API
           *
           * @param {Object} description 调用描述对象
           * @return {APIContainer}
           */
          fromNative: function fromNative(description) {
            return this.add(invokeDescription(normalizeDescription(description, this.descriptionPropMerger)));
          },

          /**
           * 通过描述对象的 name 属性进行调用
           *
           * @param {string} name 调用描述对象名
           * @param {Array=} args 调用参数
           * @return {*}
           */
          invoke: function invoke(name, args) {
            return invokeDescription(this.apis[this.apiIndex[name]], args);
          },

          /**
           * 生成一个对象，其上的方法是 API 容器对象中调用描述对象编译成的，可被直接调用的函数
           *
           * @param {Object|Function} mapAPI 调用描述对象名称的映射表或映射函数
           * @return {Object}
           */
          map: function map(mapAPI) {
            mapAPI = mapAPI || function (name) {
              return name;
            };

            var apiObject = {};

            for (var i = 0; i < this.apis.length; i++) {
              var api = this.apis[i];
              var apiName = mapAPIName(mapAPI, api.name);

              if (apiName && api.invoke) {
                if (apiName.indexOf('.') > 0) {
                  var apiNameSegs = apiName.split('.');
                  var j = 0;
                  var ns = apiObject;

                  for (; j < apiNameSegs.length - 1; j++) {
                    var seg = apiNameSegs[j];
                    ns[seg] = ns[seg] || {};
                    ns = ns[seg]; // 无聊留个精简写法
                    // ns = ns[apiNameSegs[j]] = ns[apiNameSegs[j]] || {};
                  }

                  ns[apiNameSegs[j]] = buildAPIMethod(api);
                } else {
                  apiObject[apiName] = buildAPIMethod(api);
                }
              }
            }

            return apiObject;
          },

          /**
           * 通过调用描述对象进行调用
           *
           * @param {Object} description 调用描述对象
           * @param {Array} args 调用参数
           * @return {*}
           */
          invokeAPI: function invokeAPI(description, args) {
            return invokeDescription(normalizeDescription(description, this.descriptionPropMerger), args);
          },

          /**
           * 开发者补充processorsCreators的自定义集(TIPS:不能刷掉内置的processorCreators)
           *
           * @param {string} name 注册的processorCreator名称
           * @param {Function} 需要注册的processorCreator，此函数返回值需要是一个函数
           * @return {APIContainer}
           */
          addProcessorCreator: function addProcessorCreator(name, processorCreator) {
            if (processorCreators[name]) {
              throw new Error('[' + this.options.errorTitle + '] processorCreators exists: ' + name);
            }

            processorCreators[name] = processorCreator;
            return this;
          },

          /**
           * 设置 description 额外的属性列表
           * 若设置了description 额外的属性列表，不在列表中的属性将被忽略
           * 该接口应仅用于性能优化，不应改变默认行为
           *
           * @param {Array.<string>} props description额外的属性列表
           */
          setExternalDescriptionProps: function setExternalDescriptionProps(props) {
            var code = '';

            for (var i = 0; i < props.length; i++) {
              var prop = props[i];
              code += 'target["' + prop + '"] = source["' + prop + '"];';
            }

            this.descriptionPropMerger = new Function('target', 'source', code + 'return target;');
          }
        };
        apiContainer.config(options);
        return apiContainer;
        /**
         * 生成调用过程处理函数的列表
         *
         * @inner
         * @param {Object} description 调用描述对象
         * @return {Function[]}
         */

        function getProcessors(description) {
          var processors = [];

          if (!description.invoke) {
            throw new Error('[' + apiContainer.options.errorTitle + '] invoke undefined: ' + description.name);
          }

          each(description.invoke, function (processName) {
            var dotIndex = processName.indexOf(':');
            var option;

            if (dotIndex > 0) {
              option = processName.slice(dotIndex + 1);
              processName = processName.slice(0, dotIndex);
            }

            var processor = processorCreators[processName](description, option, apiContainer);

            if (typeof processor === 'function') {
              processors.push(processor);
            }
          });
          return processors;
        }
        /**
         * 通过调用描述对象进行调用
         *
         * @inner
         * @param {Object} description 调用描述对象
         * @param {Array} args 调用参数
         * @return {*} 处理完成结果
         */


        function invokeDescription(description, args) {
          if (description) {
            args = args || [];
            each(getProcessors(description), function (processor) {
              args = processor(args);
            });
            return args;
          }
        }
        /**
         * 把调用描述对象编译成可被直接调用的函数
         *
         * @inner
         * @param {Object} description 调用描述对象
         * @return {Function}
         */


        function buildAPIMethod(description) {
          var processors = getProcessors(description);

          function process(args) {
            each(processors, function (processor) {
              args = processor(args);
            });
            return args;
          }

          return function () {
            return process(Array.prototype.slice.call(arguments, 0, description.args.length));
          };
        }
      } // export object ===========

      /**
       * 默认的 API Container 实例
       *
       * @type {APIContainer}
       */


      var jsNative = new APIContainer();
      /**
       * 版本号
       *
       * @type {string}
       */

      jsNative.version = '1.2.4';
      /**
       * 创建 API Container
       *
       * @param {Object=} options 创建的参数
       * @return {APIContainer}
       */

      jsNative.createContainer = function (options) {
        return new APIContainer(options);
      }; // export ==============


      root.jsNative = jsNative; // for Commonjs

      {
        exports.jsNative = jsNative;
      }
    })(typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : commonjsGlobal);
  });
  var jsNative_1 = jsNative.jsNative;
  /**
   * @file 创建 API 容器
   * @author zhoudan03
   * @date 2019/6/2
   */

  var apiContainer = jsNative_1.createContainer().config({
    errorTitle: 'boxx',
    namingConflict: 'override'
  });
  /**
   * @file NA 上获取 description 的接口
   * @author zhoudan03
   * @date 2019/5/27
   */

  /**
   * getAPIs 接口描述
   * @params {number=0} fragmentIndex 索引值
   * @returns {Object} res 返回值
   * @returns {String} res.totalSlices 总片段数
   * @returns {Object} res.currentIndex 当前索引
   * @returns {Object} res.descriptions 描述表数组
   */

  var naGetAPIDesc = {
    invoke: ['ArgFuncArgDecode:JSON', 'ArgFuncEncode', 'CallMethod', 'ReturnDecode:JSON'],
    name: 'na.getAPIs',
    method: '_na.getAPIs',
    args: [{
      name: 'fragmentIndex',
      value: 'number='
    }]
  };
  /**
   * @file invoke简称
   * @description 以下每个 invoke 都对应着一个函数处理栈，会依次对用户参数进行处理、然后拼接并用于对客户端的通信。所有的函数的实现逻辑均位于 processor.js 或 js-native 文件中。
   *
   * @author zhoudan03
   * @date 2019/5/28
   */

  /**
   * ArgFuncArgDecode:JSON     对调用参数中的所有回调函数，进行参数解码（反序列化）包装（因为回调是端上触发，传递参数通常是序列化后的 JSON 对象）
   * ArgFuncEncode:  对调用参数中的所有回调函数，进行序列化包装 。决定了是否把 func 拼接进去
   * ArgsEncodeToJSONExceptString  对于每个需要拼接在协议中的参数(除了string以外的类型)，进行JSON序列化
   * ArgCombine:URL  将参数拼接为协议
   * ArgCombine:JSONString 将参数拼接为一个 JSON 对象
   *  eg. [] ====ArgcCombine==> {} ====JSNOString====> "{}"
   *  eg. ['value1', 'value2'] ===> {key1:value1, key2:value2}  ===> "{"key1":"value1","key2":"value2"}"
   *
   */
  // ArgFuncArgDecode wrapDecodeFuncArg  fixme 去掉 jsnative 回调函数的反序列化包装 。因为有二级回调函数，返回值是字符串。不能被 parse

  var INVOKE_SHORTCUT = {
    // bdboxURL 特指参数合并为 JSONString 的。参数可能通过 params 传递，也可能通过 options 传递
    'iframe.bdboxURL': ['ArgCheckWithCallback', // 校验API的参数 (包括 success 和 fail)
    'RegisterCallbacks', // 注册一二级回调函数（用于执行 success 和 fail）
    'ArgFuncArgDecode:JSON', // 对API参数中的回调函数的参数值进行 JSON 解码
    'ArgFuncEncode', // 对API参数中的函数进行序列化包装（转为随机字符串并挂在全局）
    'ArgCombineWithCallback:Object', // 将参数数组合并为用于params值的对象。透传一级回调
    'ArgJSONString', // 对 params stringify；透传一级回调
    'ArgCombineWithCallback:bdboxURL', // 拼协议（在协议中，注入一级回调）
    'CallIframe' // 使用 iframe 的方式发协议
    ],
    'iframe.url': ['ArgCheckWithCallback', // 校验API的参数 (包括 success 和 fail)
    'RegisterCallbacks', // 注册一二级回调函数（用于执行 success 和 fail）
    'ArgFuncArgDecode:JSON', // 对API参数中的回调函数的参数值进行 JSON 解码
    'ArgFuncEncode', // 对API参数中的函数进行序列化包装（转为随机字符串并挂在全局）
    'ArgsEncodeToJSONExceptString', // 对于每个需要拼接在协议中的参数(除了string以外的类型)，进行转码。
    'ArgCombineWithCallback:URL', // 拼协议（在协议中，注入一级回调）
    'CallIframe' // 使用 iframe 的方式发协议
    ],
    'method.args-json+callback': ['ArgCheckWithCallback', // 校验API的参数 (包括 success 和 fail)
    'RegisterCallbacks', // 注册一二级回调函数
    'ArgCombineWithCallback:JSONString', // 8.2 之前的接口要求，JSON 类型必须通过JSON.stringify 后传入。 返回值是数组
    'CallMethodByUserArgs:callback' // 调用安卓的 JS bridge
    ],
    'method.args-json': ['ArgCheckWithCallback', // 校验API的参数 (包括 success 和 fail)
    'RegisterCallbacks', // 没有 callback，但是也把 success 和 fail 包进去 callbacks 方便执行
    'ArgCombineWithCallback:JSONString', // 8.2 之前的接口要求，JSON 类型必须通过JSON.stringify 后传入
    'CallMethodByUserArgs:noCallback' // 调用安卓的 JS bridge. 不接受 callback 作为参数，响应通过函数直接返回。
    ],
    'method.bdboxURL': ['ArgCheckWithCallback', // 校验API的参数 (包括 success 和 fail)
    'RegisterCallbacks', // 注册一二级回调函数
    'ArgFuncArgDecode:JSON', // 对API参数中的回调函数的参数值进行 JSON 解码
    'ArgFuncEncode', // 对API参数中的函数进行序列化包装（转为随机字符串并挂在全局）
    'ArgCombineWithCallback:Object', // 将参数数组合并为用于params值的对象。输入数组，输出对象（包括一级回调）
    'ArgJSONString', // 对 params stringify；透传一级回调
    'ArgCombineWithCallback:bdboxURL', // 拼协议（在协议中，注入一级回调）
    'CallMethodByUserArgs:callback' // 接受的参数为数组
    ],
    'method.url': ['ArgCheckWithCallback', // 校验API的参数 (包括 success 和 fail)
    'RegisterCallbacks', // 注册一二级回调函数（用于执行 success 和 fail）
    'ArgFuncArgDecode:JSON', // 对API参数中的回调函数的参数值进行 JSON 解码
    'ArgFuncEncode', // 对API参数中的函数进行序列化包装（转为随机字符串并挂在全局）
    'ArgsEncodeToJSONExceptString', // 对于每个需要拼接在协议中的参数(除了string以外的类型)，进行转码。
    'ArgCombineWithCallback:URL', // 拼协议（在协议中，注入一级回调）
    'CallMethodByUserArgs:callback' // 接受的参数为数组
    ],
    'method.openSwan': ['ArgCheckWithCallback', // 校验API的参数 (包括 success 和 fail)
    'RegisterCallbacks', // 注册一二级回调函数（用于执行 success 和 fail）
    'ArgsEncodeToJSONExceptString', // 对于每个需要拼接在协议中的参数(除了string以外的类型)，进行转码。
    'SwanSchemeCombine', // 小程序特有的拼接方式
    'CallMethodByUserArgs:callback' // 接受的参数为数组
    ],
    'iframe.openSwan': ['ArgCheckWithCallback', // 校验API的参数 (包括 success 和 fail)
    'RegisterCallbacks', // 注册一二级回调函数（用于执行 success 和 fail）
    'ArgsEncodeToJSONExceptString', // 对于每个需要拼接在协议中的参数(除了string以外的类型)，进行转码。
    'SwanSchemeCombine', // 小程序特有的拼接方式
    'CallIframe' // 使用 iframe 的方式发协议
    ]
  };
  /**
   * @file 合并生成一份使用的 description 数组
   * @author zhoudan03
   * @date 2019/5/27
   */

  /**
   * 根据公参信息里的 “默认字段” 给每个description 增加默认值
   *
   * @param {Array} nativeDescriptions  na描述表
   * @param {Object} defaultsFields
   * @return {Array} 描述表
   */

  function addDefaultFields(nativeDescriptions, defaultsFields) {
    // fixme 安卓在开关关闭时，仍然返回有一个元素的数组，导致判断失效。临时 hard code，11.3.5 @邵颖慧 修复后就删掉。
    if (nativeDescriptions.length === 1) {
      return [];
    }

    return nativeDescriptions.map(function (desc) {
      for (var key in defaultsFields) {
        if (defaultsFields.hasOwnProperty(key)) {
          desc[key] = desc[key] || defaultsFields[key];
        }
      }

      return desc;
    });
  }
  /**
   * 从客户端获取 API
   *
   * @param {Object} apiContainer 由jsNative创建的 APIContainer 实例
   * @return {Array} 返回 NA 的描述表数组
   */


  function getNADescriptions(apiContainer) {
    if (typeof _na === 'undefined' || _na === null || !_na.getAPIs) {
      return [];
    }

    var nativeDescriptions = [];
    var nativeSlices;
    var defaultsFields;
    var i = 0;

    do {
      var ref = apiContainer.invokeAPI(naGetAPIDesc, [i]);
      var totalSlices = ref.totalSlices;
      var descriptions = ref.descriptions;
      var defaults = ref.defaults;
      defaultsFields = defaults;
      nativeSlices = totalSlices;
      i++;
      nativeDescriptions = nativeDescriptions.concat(descriptions);
    } while (i < nativeSlices);

    nativeDescriptions = addDefaultFields(nativeDescriptions, defaultsFields); // 获取修复描述表，做merge

    if (_na && _na.getAmendAPIs) {
      var amendDescriptions = _na.getAmendAPIs();

      if (amendDescriptions && typeof amendDescriptions === 'string') {
        try {
          amendDescriptions = JSON.parse(amendDescriptions);

          if ("production" === 'development' || "production" === 'development-mock') {
            console.log('----------------修复描述表信息-------------------');
            console.log('amend descriptions:: ', amendDescriptions);
            console.log('-----------------------------------');
          }
        } catch (e) {
          console.error(e);
        }
      }

      if (amendDescriptions && amendDescriptions.length > 0) {
        var mergeMap = {};
        var mergeResult = nativeDescriptions.map(function (desc) {
          mergeMap[desc.name] = desc;
          return desc;
        });
        amendDescriptions.forEach(function (decs) {
          if (mergeMap[decs.name]) {
            mergeResult.push(decs);
          }
        });
        return mergeResult;
      }
    }

    return nativeDescriptions;
  }
  /**
   * 根据当前环境，获取具体某个描述表支持的版本号
   * @param {Object} env 环境值
   * @return {string} 版本号
   */


  function getVersionByEnv(env) {
    if (env[boxType] && env[boxType][boxBrowserType]) {
      return env[boxType][boxBrowserType];
    }

    return '0';
  }
  /**
   * 保留 没有标注版本号的，以及 标注的起始版本号 小于当前手百版本号的
   * @param {Array} descriptions 描述表
   * @return {Array} 过滤后的描述表
   */


  function filterVersion(descriptions) {
    return descriptions.filter(isCapacityExisting);
  }
  /**
   * 获取前端预置描述表（根据版本、平台等不同，输出的描述表不同）
   *
   * @return {Array} 描述表
   */


  function getDefaultDescription(defaultDecs) {
    var descriptions = isIOS$1 ? defaultDecs.ios : defaultDecs.android;
    return descriptions && descriptions.length > 0 ? filterVersion(descriptions) : [];
  }
  /**
   * 获取前端用于兼容的低版本预置描述表
   *
   * @return {Array} 描述表
   */


  function getCompatibilityDescription(defaultDecs) {
    var descriptions = isIOS$1 ? defaultDecs.iosCompatibility : defaultDecs.androidCompatibility;
    return filterVersion(descriptions || []);
  }
  /**
   * 该端能力是存在的（根据和当前手百版本号比对而得）
   * @param {Object} description 描述表
   * @return {boolean}  true 存在，false 不存在
   */


  function isCapacityExisting(description) {
    var startedVersion = getVersionByEnv(description.env);
    return versionCompare$1(boxVersion, startedVersion) >= 0;
  }
  /**
   * 对描述表的字段标准化处理：invoke 从缩写 => processor 数组
   *
   * @param {Object} description 描述表
   * @return {Object} 标准化处理后的描述表
   */


  function normalizeDescription(description) {
    description.invoke = INVOKE_SHORTCUT[description.invoke] || description.invoke;
    description.path = description.path || '';
    return description;
  }

  function getLocalDescriptions(defaultDecs) {
    var defaultDescriptions = getDefaultDescription(defaultDecs); // 兼容性的描述表，仅存在于前端。不参与和 NA 的 merge 策略，merge 完后直接拼接

    var compatibilityDescriptions = getCompatibilityDescription(defaultDecs);
    var mergedDefaultDescriptions = defaultDescriptions.concat(compatibilityDescriptions);
    mergedDefaultDescriptions.forEach(normalizeDescription);
    return mergedDefaultDescriptions;
  }
  /**
   * 获取端下发的描述表
   *
   * @param {Object} apiContainer 由jsNative创建的 APIContainer 实例
   * @return {Array} 最终描述表数组
   */


  function getDescriptions(apiContainer) {
    var nativeDescriptions = getNADescriptions(apiContainer);
    nativeDescriptions.forEach(normalizeDescription);
    return nativeDescriptions;
  }
  /**
   * @file  回调函数处理逻辑
   * @author zhoudan03 tianty05
   * @date 2019/6/12
   */

  /**
   * 安卓没有返回值，调用后直接默认成功。修复这种历史遗留 bug 不会造成兼容性问题，应该修复。todo 推动 客户端 RD 排期修复
   * @return {{status: number, message: string}}
   */


  function returnDefaultSuccess() {
    return {
      status: 0,
      message: 'success: NA 无返回信息，默认成功'
    };
  } // 不规则的端能力返回值


  var irregularResponseHandlers = {
    'feed.updateFavorInfo': returnDefaultSuccess,
    'hybrid.reliabilityLog': returnDefaultSuccess,
    'feed.showDislike': returnDefaultSuccess,
    'easyBrowser.open': returnDefaultSuccess,
    'account.login': function accountLogin(res) {
      if (res.data) {
        return {
          status: res.data.status === '1' ? 0 : 1,
          message: res.data.status === '1' ? 'login success' : 'login fail'
        };
      }

      return res;
    },
    // doc: http://cp01-invoker-3-mgt161657.epc.baidu.com:8007/invokers?id=5476cb1c319bf8d34ce2052b
    'device.getCUID': function deviceGetCUID(res) {
      // 处理ios手百lite和看多多下的情况
      if (res && res.result === 0) {
        return {
          status: 0,
          message: 'success',
          data: {
            // eslint-disable-next-line camelcase
            unique_id: res.unique_id
          }
        };
      } // 处理安卓下低版本返回 {error: 0, result: 'xxxx'}


      if (res && res.error === 0) {
        return {
          status: 0,
          message: 'success',
          data: {
            // eslint-disable-next-line camelcase
            unique_id: res.result
          }
        };
      } // 安卓的 getCUID 返回值是字符串。iOS 返回是对象。前端兼容对齐


      if (isAndroid$1 && (versionCompare$1(boxVersion, '7.4') >= 0 || !isBox$1)) {
        var hasCUID = res && res.length > 0;
        return {
          status: hasCUID ? 0 : 1,
          message: hasCUID ? 'success' : 'fail',
          data: hasCUID ? {
            // eslint-disable-next-line camelcase
            unique_id: res
          } : {}
        };
      } // 低版本的逻辑暂无法验证，取自于原 JSSDK，可与业务方确认


      if (isAndroid$1 && versionCompare$1(boxVersion, '7.4') < 0 || isIOS$1 && versionCompare$1(boxVersion, '8.4') < 0) {
        var match = isAndroid$1 ? document.cookie.match(/BAIDUCUID=(.+?);/) : UA$3.match(/baiduboxapp\/.*\/(\w+)\/\d/);
        var cuid = match ? match[1] : '';
        return {
          status: cuid ? 0 : 1,
          message: cuid ? 'success' : 'fail',
          data: cuid ? {
            // eslint-disable-next-line camelcase
            unique_id: cuid
          } : {}
        };
      }

      return res;
    },
    'device.getDeviceInfo': function deviceGetDeviceInfo(res) {
      // 此端能力的返回值很特殊，客户端难以给出枚举值。而且由于业务方只关注是 wifi 还是非 wifi，所以细节不再深究
      //
      // 安卓的 1_0 和 iOS 的 Wifi 代表 wifi
      // iOS ：不同的单词代表不同的网络。（4g： WWAN）
      // Android：不同的数字前缀代表不同的网络:
      //    （ WIFI 1， 3GNET 21， 3GWAP 22， CMNET 31， UNINET 32， CTNET 33， CMWAP 41， UNIWAP 42， CTWAP 43 ）
      if (res.data && res.data.netInfo && res.data.netInfo.network && (res.data.netInfo.network === '1_0' || res.data.netInfo.network === 'Wifi')) {
        res.data.networkType = 'wifi';
      } else {
        res.data.networkType = 'unknown';
      }

      return res;
    },
    // 9.2+ 版本参数被多封装了一层（被封装在了res.data.params中），前端在此兼容。
    'feed.getSessionClickID': function feedGetSessionClickID(res) {
      return {
        status: +res.status,
        message: res.message || '',
        data: res.data && res.data.params || res.params || {}
      };
    },
    // 安卓多了无用的 data 值（status和 message）。前端兼容对齐
    'easyBrowser.performanceFlowLog': function easyBrowserPerformanceFlowLog(res) {
      if (isAndroid$1) {
        return {
          status: +res.status,
          message: res.message || ''
        };
      }

      return res;
    },
    // request iOS 做了多余的转码，导致双端返回值不一致，但是涉及到的线上业务方过多，端上无法修复。前端兼容对齐
    'easyBrowser.request': function easyBrowserRequest(res) {
      var data;

      if (res && res.data && res.errno === '1') {
        data = isIOS$1 ? JSON.parse(decodeURIComponent(res.data)) : JSON.parse(res.data);
      } else {
        data = res.data;
      }

      return {
        status: res.errno === '1' ? 0 : res.errno === '0' ? 1 : parseInt(res.errno, 10),
        message: res.message || (res.errno === '1' ? 'success' : 'fail'),
        data: data || {}
      };
    },
    'easyBrowser.webStorage': function easyBrowserWebStorage(res) {
      // 解决返回值为空时格式不一致的问题
      if (isIOS$1 && res.result === 0) {
        return {
          status: 0,
          message: res.message || res.errmsg,
          data: res.data
        };
      }

      return res;
    },
    // iOS 的数据多了一层 coords
    'device.getCurrentLocation': function deviceGetCurrentLocation(res) {
      if (isIOS$1) {
        // todo 原逻辑 401
        return {
          status: res.result || res.status,
          message: res.message || (res.result === 0 ? 'success' : 'fail'),
          data: res.coords || res.data
        };
      } else if (isAndroid$1) {
        var status = res.st; // 安卓的 st 字段用来表示状态码，没必要暴露

        var data = res;
        delete data.st;
        return {
          status: status,
          message: res.message || (status === 0 ? 'success' : 'fail'),
          data: data
        };
      }

      return res;
    },
    // result下为最终信息，不能被过滤掉
    'feed.isWebPSupported': function feedIsWebPSupported(res) {
      if (isAndroid$1) {
        res.data = res.result;
      }

      return res;
    }
  };
  /**
   * 存储 res 中除了状态码和状态信息以外的其他属性，用作 data 的默认值。
   * @param res
   */

  function getDefaultData(res) {
    var defaultData = {};

    for (var key in res) {
      if (res.hasOwnProperty(key) && key !== 'errno' && key !== 'errmsg' && key !== 'status' && key !== 'message' && key !== 'result') {
        defaultData[key] = res[key];
      }
    }

    return defaultData;
  }
  /**
   * 格式化处理 response。用于兼容不同时期的协议之间响应信息的格式存在的差异。
   *
   * 返回信息标准
   * status: {number} 数字类型，0代表成功，非0代表失败
   * message: {string} 返回信息，NA 有则透传 NA，否则前端返回 success / fail
   * data: {*} 任意类型
   *
   * @param {*} response 响应信息
   * @param {string} handler 响应信息的处理标识，是 description 中的 resHandler 字段
   * @return {{status: number, message: (string), data: *}}
   * status 为0时，表示成功。其他值为失败
   */


  function normalizeResponse(response, handler) {
    // response 为客户端返回。返回的方式有多种，可能是直接返回相应数据(number / object / array / string)
    // 也有可能是JSON string （任何类型对应的JSON string）
    var res;

    try {
      res = typeof response === 'string' ? JSON.parse(response) : response;
    } catch (e) {
      res = response;
    }

    if (Object.keys(irregularResponseHandlers).indexOf(handler) > -1) {
      // 不直接 return 的原因是，有双端对齐的端能力，某端符合以下规则，需要再处理
      res = irregularResponseHandlers[handler](res);
    } // eslint-disable-next-line default-case


    switch (_typeof(res)) {
      case 'undefined':
        return {
          status: 1,
          message: 'fail: na 返回值为 undefined'
        };

      case 'boolean':
        return {
          status: res ? 0 : 1,
          message: res ? 'success' : 'fail'
        };

      case 'number':
        return {
          status: res,
          message: +res === 0 ? 'success' : 'fail'
        };

      case 'string':
        return {
          status: 0,
          message: 'success',
          data: res
        };

      case 'object':
        {
          if (res === null) {
            return {
              status: 1,
              message: 'fail: NA 返回信息为 null'
            };
          }

          var defaultData = getDefaultData(res); // fixme: 提取res.data作为响应数据的 data可能会有风险：老旧端能力无规范，data 只是众多响应值属性中的其中一个属性

          if (res.errno != null) {
            // errno 为 1 代表成功，为 0 代表失败。如果还有其他值的话，则直接赋给 status。
            var errno = parseInt(res.errno, 10);
            var status = errno === 1 ? 0 : errno === 0 ? 1 : errno;
            return {
              status: status,
              message: res.errmsg || errno === 1 ? 'success' : 'fail',
              data: res.data || defaultData
            };
          } else if (res.status != null) {
            return {
              status: +res.status,
              message: res.message || (+res.status === 0 ? 'success' : 'fail'),
              data: res.data || defaultData
            };
          } else if (res.result != null) {
            return {
              status: res.result,
              message: res.result === 0 ? 'success' : 'fail',
              data: res.data || defaultData
            };
          } // 直接返回的无状态码的数据
          else {
              return {
                status: 0,
                message: 'success',
                data: res
              };
            }
        }
    }

    return res;
  }
  /**
   * @file  回调函数处理逻辑
   * @author zhoudan03
   * @date 2019/6/5
   * @description
   一级回调相当于端能力调用是否成功，二级回调相当于异步处理一些事情 然后返回结果。

   对于一个端能力而言，如果只有一级回调，则在一级回调返回后 触发开发者的 success 或者 fail。如果同时有 一级回调 和二级回调，则会在一级回调调用成功后，等待二级回调执行，二级成功再触发 开发者的 success。

   对于有二级回调的情况，一级回调只是告知端能力通信是否成功，对开发者是隐藏的，不用告诉开发者。

   在手百端能力中，一级回调通常叫 callback 或者 func，或者拆分为 successcallback errorcallback  failcallback
   二级回调通常没有规范，由当时的文档或者口头约定。

   【举例】
   二级回调叫 jscallback
   baiduboxapp://v5/datachannel/register?action=com.baidu.channel.tts.statuschange&page=dataChannelDemoWeb&jscallback=__jsna_1&callback=__jsna_2

   二级回调叫 cb
   baiduboxapp://v41/device/startAccelerometer?params={"interval":"0.2","cb":"cb"}&callback=_bdbox_js_cb&upgrade=0

   二级回调叫 event_callback
   baiduboxapp://v4/comment/showbox?params={"type":1,"topic_id":"1072000001838121","placeholder":"placeholder","logid":"feed","source":"feed","page":"feed","event_callback":"cbname"}&callback=_bdbox_js_617

   小程序里二级回调 cb 为对象 的例子：
   baiduboxapp://swanAPI/backgroundAudio/open?params={"src":"http://ws.xxxq.com/M500001VfvsJ21xFqb.mp3?","slaveId":"4","title":"石家庄人民共和国","epname":"此时此刻","singer":"许巍","coverImgUrl":"http://y.xxxphoto_new/T002R300x300M000003rsKF44GyaSk.jpg?max_age=2592000","cb":{"onCanplay":"_bkAudio_onCanplay","onPlay":"_bkAudio_onPlay","onPause":"_bkAudio_onPause","onStop":"_bkAudio_onStop","onEnded":"_bkAudio_onEnded","onTimeUpdate":"_bkAudio_onTimeUpdate","onPrev":"_bkAudio_onPrev","onNext":"_bkAudio_onNext","onError":"_bkAudio_onError","onWaiting":"_bkAudio_onWaiting"}}&callback=_bdbox_js_66&upgrade=0


   目前有三类二级回调
   第一类：普通表示端能力调起成功的异步处理数据。即用即毁。
   第二类：事件监听函数，如 event.on
   事件监听函数需要长期保存。
   对于开发者传递的，分为具名函数和匿名函数。匿名可以用自增函数，具名需要保存开发者的函数名，以便 off 时指定
   第三类：点击事件，如 toast、dialog 等有按钮的，由用户触发

   * 端能力的返回值有多种返回方式：
   * 1. 通过一级回调，触发用户回调
   * 2. 通过二级回调，触发用户回调
   * 3. 通过 jsInterface 函数返回，触发用户回调
   *
   *
   * 对应于上述的多种返回方式，那么触发用户回调的时机应该是：
   * 1. 如果只有一级回调，则在一级回调返回后，触发开发者的 success 或者 fail
   * 2. 如果同时有 一级回调 和二级回调，则会在一级回调调用成功后，等待二级回调执行，二级成功再触发 开发者的 success；如果一级回调调用失败则直接 fail，无需等待二级回调
   * 3. 通过 jsInterface 函数返回后，使用 nextTick 延迟触发用户回调（success/fail）
   */

  /**
   * 用于回调函数包装命名的自增id
   *
   * @inner
   * @type {number}
   */


  var funcId = 1;
  /**
   * 用于回调函数包装命名的前缀
   *
   * @inner
   * @const
   * @type {string}
   */

  var FUNC_PREFIX = '__boxx_';
  /**
   * 全局注册函数
   * @param {string} name 函数名
   * @param {Function} fn 函数
   */

  var registerGlobally = function registerGlobally(name, fn) {
    global$1[name] = fn;
  };
  /**
   * 生成一级回调函数
   *
   * @param {string} descName   API 名称
   * @param {function} success  用户的成功回调
   * @param {function} fail     用户的失败回调
   * @param {boolean} hasNext   是否含有二级回调
   * @return {Function}
   */


  function generateCallback(descName, ref, hasNext) {
    var success = ref.success;
    var fail = ref.fail;
    return function firstCallback(res) {
      res = normalizeResponse(res, descName); // 处理返回值（如果没二级回调，则区分成功失败执行用户回调；否则什么也不做，由二级回调来出触发用户回调）

      if (!hasNext) {
        if (+res.status === 0) {
          success && success(res);
        } else {
          fail && fail(res);
        }
      }
    };
  }
  /**
   * 生成二级回调函数
   *
   * @param {string} descName API 名称
   * @param success  用户的成功回调
   * @param fail     用户的失败回调
   * @return {Function}
   */


  function generateSecondCallback(descName, ref) {
    var success = ref.success;
    var fail = ref.fail;
    return function secondCallback(res) {
      res = normalizeResponse(res, descName); // 处理返回值（客户端的返回的状态码都是字符串）

      if (+res.status === 0) {
        success && success(res);
      } else {
        fail && fail(res);
      }
    };
  }
  /**
   * 基于自增的值，获取唯一的函数变量名
   * @return {string} 函数名
   */


  function getUniqueName() {
    return FUNC_PREFIX + funcId++;
  }
  /**
   * @file  在下一个时间周期运行任务（参考 san）
   * @author zhoudan03
   * @date 2019/8/12
   */

  /**
   * 下一个周期要执行的任务列表
   *
   * @inner
   * @type {Array}
   */


  var nextTasks = [];
  /**
   * 执行下一个周期任务的函数
   *
   * @inner
   * @type {Function}
   */

  var _nextHandler;
  /**
   * 浏览器是否支持原生Promise
   * 对Promise做判断，是为了禁用一些不严谨的Promise的polyfill
   *
   * @inner
   * @type {boolean}
   */


  var isNativePromise = typeof Promise === 'function' && /native code/.test(Promise);
  /**
   * 在下一个时间周期运行任务
   *
   * @inner
   * @param {Function} fn 要运行的任务函数
   * @param {Object=} thisArg this指向对象
   */

  function nextTick(fn, thisArg) {
    if (thisArg) {
      fn = fn.bind(thisArg);
    }

    nextTasks.push(fn);

    if (_nextHandler) {
      return;
    }

    _nextHandler = function nextHandler() {
      var tasks = nextTasks.slice(0);
      nextTasks = [];
      _nextHandler = null;

      for (var i = 0, l = tasks.length; i < l; i++) {
        tasks[i]();
      }
    }; // 非标准方法，但是此方法非常吻合要求。


    if (typeof setImmediate === 'function') {
      setImmediate(_nextHandler);
    } // 用MessageChannel去做setImmediate的polyfill
    // 原理是将新的message事件加入到原有的dom events之后
    else if (typeof MessageChannel === 'function') {
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = _nextHandler;
        port.postMessage(1);
      } // for native app
      else if (isNativePromise) {
          Promise.resolve().then(_nextHandler);
        } else {
          setTimeout(_nextHandler, 0);
        }
  }
  /**
   * @file 用于注入 jsNative 的自定义 processor
   * @author zhoudan03
   * @date 2019/5/28
   */


  function isArray$1(o) {
    return Object.prototype.toString.call(o) === '[object Array]';
  }
  /**
   * 返回原值的方法，调用过程的兜底处理函数
   *
   * @inner
   * @param {*} source 原值
   * @return {*}
   */


  function returnRaw(source) {
    return source;
  }
  /**
   * 对数组进行遍历
   *
   * @inner
   * @param {Array} array 要遍历的数组
   * @param {Function} fn 遍历函数
   */


  function each(array, fn) {
    var len = array && array.length || 0;

    for (var i = 0, l = len; i < l; i++) {
      if (fn(array[i], i) === false) {
        break;
      }
    }
  }

  function getPrefix(scheme, description) {
    return scheme + description.authority + description.path;
  }
  /**
   * 获取用户参数，生成形如 key1=value1&key2=value2 的 string
   *
   * @param {Object} args 用户传参
   * @param {Object} description 调用描述对象
   * @return {string}  参数字符串
   */


  function getArgsString(args, description) {
    var argsString = '';

    if (description.args && description.args.length > 0) {
      var argResult = [];
      each(description.args, function (declaration, i) {
        var arg = args[i];

        if (arg != null) {
          argResult.push(declaration.name + '=' + encodeURIComponent(arg));
        }
      });
      argsString = argResult.length >= 0 ? argResult.join('&') : '';
    }

    return argsString;
  }
  /**
   * 获取用户参数，生成形如 params=encodeURIComponent({key1:value1,key2:value}) 的 string
   *
   * @param {string} args 用户传参，已经被前一个处理器 stringify 过
   * @param {Object} description 调用描述对象
   * @return {string} 参数字符串
   */


  function getParamsString(args, description) {
    // 移除args中query部分
    if (args && Array.isArray(description.argQueryList)) {
      var rawArgs = JSON.parse(args);
      description.argQueryList.forEach(function (query) {
        if (rawArgs[query]) {
          delete rawArgs[query];
        }
      });
      args = JSON.stringify(rawArgs);
    }

    var paramsName = description.paramsName || 'params'; // 描述的 args 有参数，才需要这么做。

    return args ? paramsName + '=' + encodeURIComponent(args) : '';
  }
  /**
   * 获取 query 字符串。形如 action=flow 之类的固定值
   *
   * @param {Object} description 调用描述对象
   * @return {string} queryString
   */


  function getQueryString(description) {
    var queryStr = '';

    if (description.query) {
      var queryStrArray = [];

      for (var key in description.query) {
        if (description.query.hasOwnProperty(key)) {
          queryStrArray.push(key + '=' + description.query[key]);
        }
      }

      queryStr = queryStrArray.join('&');
    }

    return queryStr;
  }
  /**
   * 获取参数中的query字符串
   * @param {string} args 用户传参，已经被前一个处理器 stringify 过
   * @param {Object} description 调用描述对象
   */


  function getArgQueryString(args, description) {
    var queryArray = [];

    if (description.argQueryList) {
      var rawArgs = args ? JSON.parse(args) : [];
      description.argQueryList.forEach(function (key) {
        if (rawArgs[key]) {
          var queryValue = typeof rawArgs[key] === 'string' ? rawArgs[key] : JSON.stringify(rawArgs[key]);
          queryArray.push(key + '=' + encodeURIComponent(queryValue));
        }
      });
    }

    return queryArray.join('&');
  }
  /**
   * 对参数值进行检查
   *
   * @inner
   * @param {*} value 值
   * @param {Object} declaration 值声明
   * @return {number}
   */


  function checkValue(value, declaration) {
    declaration = normalizeValueDeclaration(declaration);

    if (value == null) {
      return declaration.isRequired && declaration.type !== '*' ? 1 : 0;
    }

    var valid = false;

    switch (_typeof(declaration.type)) {
      case 'string':
        switch (declaration.type) {
          case 'string':
          case 'boolean':
          case 'number':
          case 'function':
          case 'object':
            valid = _typeof(value) === declaration.type;
            break;

          case 'Object':
            valid = _typeof(value) === 'object'; // console.log('value type:', typeof value, value, valid);

            break;

          case 'Array':
            valid = value instanceof Array;
            break;

          case '*':
            valid = true;
            break;
        }

        if (!valid) {
          return 2;
        }

        break;

      case 'object':
        if (value && _typeof(value) === 'object') {
          valid = true;

          for (var key in declaration.type) {
            valid = !checkValue(value[key], declaration.type[key]);

            if (!valid) {
              break;
            }
          }
        }

        if (!valid) {
          return 2;
        }

        break;

      default:
        if (declaration.oneOf) {
          each(declaration.oneOf, function (expectValue) {
            valid = expectValue === value;
            return !valid;
          });

          if (!valid) {
            return 3;
          }
        } else if (declaration.oneOfType) {
          each(declaration.oneOfType, function (expectType) {
            valid = !checkValue(value, expectType);
            return !valid;
          });

          if (!valid) {
            return 4;
          }
        } else if (declaration.arrayOf) {
          if (value instanceof Array) {
            valid = true;
            each(value, function (item) {
              return valid = !checkValue(item, declaration.arrayOf);
            });

            if (!valid) {
              return 5;
            }
          } else {
            return 2;
          }
        }

    }

    return 0;
  }
  /**
   * 对值声明进行标准化处理
   *
   * @inner
   * @param {Object|string} declaration 值声明
   * @return {Object}
   */


  function normalizeValueDeclaration(declaration) {
    if (typeof declaration === 'string') {
      var realDeclaration = {
        isRequired: true
      };

      if (/=$/.test(declaration)) {
        realDeclaration.isRequired = false;
        declaration = declaration.slice(0, declaration.length - 1);
      }

      if (/\[\]$/.test(declaration)) {
        realDeclaration.arrayOf = declaration.slice(0, declaration.length - 2);
      } else if (declaration.indexOf('|') > 0) {
        realDeclaration.oneOfType = declaration.split('|');
      } // 事件类的函数
      else if (declaration === 'eventFunction') {
          realDeclaration.type = 'function';
        } else {
          realDeclaration.type = declaration;
        }

      return realDeclaration;
    }

    return declaration;
  }
  /**
   * 参数检查，错误直接抛出异常
   *
   * @param {Array} args 调用参数
   * @param {Array} declarations 参数声明列表
   * @param {Object} apiContainer jsNative 容器
   */


  function checkArgs(args, declarations, apiContainer) {
    // fixme 增加了 success 和 fail 的校验       // 在统一的地方传一个修正过的描述表
    declarations = declarations.concat([{
      name: 'success',
      value: 'function='
    }, {
      name: 'fail',
      value: 'function='
    }]);
    each(declarations, function (declaration, i) {
      var errorMsg = '';
      var value = normalizeValueDeclaration(declaration.value);

      switch (checkValue(args[i], value)) {
        case 1:
          errorMsg = ' is required.';
          break;

        case 2:
          // console.log('type error 2', args[i], value, declaration);
          errorMsg = ' type error. must be ' + JSON.stringify(value.type || 'Array');
          break;

        case 3:
          errorMsg = ' type error, must be oneOf ' + JSON.stringify(value.oneOf);
          break;

        case 4:
          errorMsg = ' type error, must be oneOfType ' + JSON.stringify(value.oneOfType);
          break;

        case 5:
          errorMsg = ' type error, must be arrayOf ' + JSON.stringify(value.arrayOf);
          break;
      }

      if (errorMsg) {
        var title = apiContainer && apiContainer.options.errorTitle || 'jsNative';
        throw new Error('[' + title + ' Argument Error]' + declaration.name + errorMsg);
      }
    });
  }
  /**
   * 将调用参数合并成对象
   *
   * @inner
   * @param {Array} args 调用参数
   * @param {Array} declarations 参数声明列表
   * @return {Object}
   */


  function argCombine(args, declarations) {
    var result = {};
    each(declarations, function (declaration, i) {
      var arg = args[i];

      if (arg != null) {
        result[declaration.name] = arg;
      }
    });
    return result;
  }
  /**
   * 使用prompt调用
   *
   * @inner
   * @param {Array} description 描述表
   * @param {Array} args 调用参数
   * @return {Object}
   */


  function promptInvoker(description, args) {
    var segments = description.method.split('.');
    var newArgs = args || []; // 判断是否为只含有callback的情况

    if (!description.args || description.args.length === 0) {
      newArgs = newArgs.slice(1);
    }

    var caller = {
      obj: segments[0],
      func: segments.slice(1).join('.'),
      args: Array.isArray(newArgs) ? newArgs : [newArgs]
    }; // eslint-disable-next-line no-alert

    return window.prompt('BdboxApp:' + JSON.stringify(caller));
  }
  /**
   * 获取用户参数，生成形如 key1=value1&key2=value2 的 string
   *
   * @param {Object} args 用户传参
   * @param {Object} description 调用描述对象
   * @param {Object} userQuery 用户参数
   * @return {string}  参数字符串
   */


  function getArgsStringWithUserQuery(args, description, userQuery) {
    // 小程序的 query
    var argResult = Object.keys(userQuery).map(function (key) {
      return key + "=" + encodeURIComponent(userQuery[key]);
    }); // 协议的 query

    if (description.args && description.args.length > 0) {
      each(description.args, function (declaration, i) {
        var arg = args[i];

        if (arg != null) {
          argResult.push(declaration.name + '=' + encodeURIComponent(arg));
        }
      });
    }

    return argResult.length >= 0 ? argResult.join('&') : '';
  }

  var processors = {
    /**
     * 自定义参数校验的处理器。校验参数的时候不完全依照描述表
     * @param {Object} description 调用描述对象
     * @param {string} option 处理参数
     * @param {Object} apiContainer jsNative容器
     * @return {Function}
     */
    ArgCheckWithCallback: function ArgCheckWithCallback(description, option, apiContainer) {
      return function processorArgCheckWithCallback(args) {
        checkArgs(args, description.args, apiContainer);
        return args;
      };
    },

    /**
     * 创建参数序列化的处理函数，功能和 js-native 中的 ArgEncode 类似，都是对参数进行字符串序列化。
     * 但是，本函数区分 string 和 object，仅对 object 做 stringify，避免字符串前后增加 双引号 "" ，导致客户端无法识别。
     * 因为客户端解析 scheme 协议时，是硬编码匹配 {} 找到JSON 对象，只对其进行 JSON parse 操作。
     * 而普通字符串，则拿来就用，不会 JSON parse，所以如果字符串在前端被 stringify 而带上了多余的双引号了的话，会导致客户端无法正确识别普通字符串。
     *
     * @return {Function}  返回一个函数，该接受上一个处理器的返回值作为参数
     */
    ArgsEncodeToJSONExceptString: function ArgsEncodeToJSONExceptString() {
      return function processorArgsEncodeToJSONExceptString(args) {
        each(args, function (arg, i) {
          if (_typeof(arg) === 'object') {
            args[i] = JSON.stringify(arg);
          }
        });
        return args;
      };
    },

    /**
     * 注册一二级回调  （本质上，这个 processor 并没有对参数进行处理。但是由于需要区分 invoke 决定是否注册回调函数，因此放在 processor 中）
     * 一二级回调的管理方式：使用一个对象，以 description name 为 key 记录一级回调；以一级回调的 name 为 key 记录二级回调。从而在后续端能力返回后，找到并触发对应的回调。
     * fixme args 最后两位本来是 success 和 fail，现在变成一二级回调了，可以吗？而且 pop 是不是有点隐晦
     *
     * @param {Object} description 调用描述对象
     * @return {function(*): *}
     * @constructor
     */
    RegisterCallbacks: function RegisterCallbacks(description) {
      var descName = description.name;
      return function processorRegisterCallbacks(args) {
        var fail = args.pop();
        var success = args.pop(); // 生成二级回调（在 description 中指定了 nextCallback ，则代表有二级回调）

        if (description.nextCallback) {
          var nextCallback = generateSecondCallback(descName, {
            success: success,
            fail: fail
          });
          var nextCallbackFuncName = getUniqueName();
          registerGlobally(nextCallbackFuncName, nextCallback);
          args.push(nextCallbackFuncName);
        } // 生成一级回调


        var firstCallbackName = getUniqueName();
        var firstCallback = generateCallback(description.name, {
          success: success,
          fail: fail
        }, !!description.nextCallback);
        registerGlobally(firstCallbackName, firstCallback);
        args.push(firstCallbackName);
        return args;
      };
    },

    /**
     * 创建参数合并的处理函数
     *
     * @param {Object} description 调用描述对象
     * @param {string} option 处理参数
     * @return {Function}
     */
    ArgCombineWithCallback: function ArgCombineWithCallback(description, option) {
      var scheme = appProtoName + '://';

      switch (option) {
        case 'bdboxURL':
          return function processorArgCombineWithCallbackBdboxURL(ref) {
            var args = ref[0];
            var callbackFunctionName = ref[1];
            var prefix = getPrefix(scheme, description);
            var queryString = getQueryString(description);
            var argQueryString = getArgQueryString(args, description);
            var paramsString = getParamsString(args, description);
            var callbackString = (description.callbackName || description.callback || 'callback') + "=" + callbackFunctionName;
            var resultStr = [paramsString, queryString, argQueryString, callbackString].filter(function (item) {
              return item !== '';
            }).join('&');
            var schemeURL = prefix + '?' + resultStr;
            console.log('scheme URL::: ', schemeURL);
            return schemeURL;
          };

        case 'URL':
          return function processorArgCombineWithCallbackURL(args) {
            var prefix = getPrefix(scheme, description);
            var queryString = getQueryString(description);
            var argQueryString = getArgQueryString(args, description); // 一级回调字符串

            var callbackName = description.callbackName || description.callback || 'callback';
            var callbackString = callbackName + '=' + args.pop(); // 二级回调字符串

            var nextCallbackString = description.nextCallback ? description.nextCallback + '=' + args.pop() : ''; // 参数字符串

            var paramsString = getArgsString(args, description);
            var resultStr = [paramsString, nextCallbackString, queryString, argQueryString, callbackString].filter(function (item) {
              return item !== '';
            }).join('&');
            var schemeURL = prefix + '?' + resultStr;
            console.log('scheme URL::: ', schemeURL);
            return schemeURL;
          };

        case 'Object':
          return function processorArgCombineWithCallbackObject(args) {
            var requireArgs = description.args;
            var callbackFunctionName = args.pop();

            if (description.nextCallback) {
              requireArgs = requireArgs.concat([{
                name: description.nextCallback,
                value: 'string'
              }]);
            } // 如果API不接受参数（而且也没二级回调），就不传递空对象。
            // 因为 Android 的 Java 函数传参数量决定了函数的定义(传参和不传参是两个不同的函数)。


            if (requireArgs.length === 0) {
              return [undefined, callbackFunctionName];
            } // 使用数组的方式传递 [params, callback]
            // 有利于手百 8.2 之前的安卓 Java jsInterface 接受参数的格式 module.action(params, callback)


            return [argCombine(args, requireArgs), callbackFunctionName];
          };

        case 'JSONString':
          return function processorArgCombineWithCallbackJSONString(args) {
            var callbackFunctionName = args.pop();
            var requireArgs = description.args;

            if (description.nextCallback) {
              requireArgs = requireArgs.concat([{
                name: description.nextCallback,
                value: 'string'
              }]);
            } // 如果API不接受参数（而且也没二级回调），就不传递空对象。
            // 因为 Android 的 Java 函数传参数量决定了函数的定义(传参和不传参是两个不同的函数)。


            if (requireArgs.length === 0) {
              return [undefined, callbackFunctionName];
            } // 使用数组的方式传递 [params, callback]
            // 有利于手百 8.2 之前的安卓 Java jsInterface 接受参数的格式 module.action(params, callback)


            return [JSON.stringify(argCombine(args, requireArgs)), callbackFunctionName];
          };
      }

      return returnRaw;
    },

    /**
     *
     * @return {function(*[]): any[]}
     * @constructor
     */
    ArgJSONString: function ArgJSONString() {
      return function processorArgJSONString(ref) {
        var args = ref[0];
        var callbackFunctionName = ref[1];
        return [JSON.stringify(args), callbackFunctionName];
      };
    },

    /**
     * 创建方法调用的处理函数（根据 用户传入的args 决定调用传参，而非描述的 args长度）
     * @param {Object} description 调用描述对象
     * @param {string} option 处理参数
     * @return {Function}
     */
    CallMethodByUserArgs: function CallMethodByUserArgs(description, option) {
      var methodOwner;
      var methodName;

      function findMethod() {
        if (!methodOwner) {
          var segments = description.method.split('.');
          var lastIndex = segments.length - 1;
          methodName = segments[lastIndex];
          methodOwner = global$1;

          for (var i = 0; i < lastIndex; i++) {
            methodOwner = methodOwner[segments[i]];
          }
        }
      }

      function callMethod(args) {
        // 区分是否是数组来决定调起方式
        findMethod(); // 这里对低版本的安卓端做特殊处理
        // global.prompt替代method直接调用（因为低版本不支持js interface）

        if (isAndroid$1 && isBox$1 && !(methodOwner && methodOwner[methodName])) {
          return promptInvoker(description, args);
        } // 不是数组，则直接传递


        if (!isArray$1(args)) {
          return methodOwner[methodName](args);
        } // params 为 undefined 证明不需要传，移除此参数。
        // 因为安卓的 jsInterface 为 Java 函数，参数数量不同代表了不同的函数，传递了不该传的参数。会导致安卓报错找不到函数


        if (args[0] === undefined) {
          args.shift();
        } // 性能优化：对于高频的参数为0、1、2、3的情况，直接调用。减少 apply 带来的性能损失


        switch (args.length) {
          case 0:
            return methodOwner[methodName]();

          case 1:
            return methodOwner[methodName](args[0]);

          case 2:
            return methodOwner[methodName](args[0], args[1]);

          case 3:
            return methodOwner[methodName](args[0], args[1], args[2]);

          default:
            return methodOwner[methodName].apply(methodOwner, args);
        }
      }

      switch (option) {
        case 'callback':
          return function processorCallMethodByUserArgsWithCallback(args) {
            return callMethod(args);
          };

        case 'noCallback':
          return function processorCallMethodByUserArgsWithoutCallback(args) {
            var callback = args.pop();
            var res = callMethod(args); // 对于直接返回值的 jsInterface，需要使用 nextTick 来使得回调能异步执行

            nextTick(function () {
              global$1[callback](res);
            });
          };

        default:
          return function processorCallMethodByUserArgsDefault(args) {
            return callMethod(args);
          };
      }
    },

    /**
     * 创建 openSwan（打开小程序的）的参数合并的处理函数
     *
     * @param {Object} description 调用描述对象
     * @return {Function}
     */
    SwanSchemeCombine: function SwanSchemeCombine(description) {
      var scheme = appProtoName + '://';
      return function processorSwanSchemeCombine(args) {
        var appKey = args[0];
        var appPath = args[1] || '';
        var query = args[2] && JSON.parse(args[2]);
        args[0] = undefined;
        args[1] = undefined;
        args[2] = undefined; // 一级回调字符串

        var callbackName = description.callbackName || description.callback || 'callback';
        var callbackString = callbackName + '=' + args.pop(); // 二级回调字符串

        var nextCallbackString = description.nextCallback ? description.nextCallback + '=' + args.pop() : '';
        var prefix = scheme + description.authority + '/' + appKey + appPath;
        var queryString = getQueryString(description);
        var paramsString = getArgsStringWithUserQuery(args, description, query);
        var resultStr = [paramsString, nextCallbackString, queryString, callbackString].filter(function (item) {
          return item !== '';
        }).join('&');
        var schemeURL = prefix + '?' + resultStr;
        console.log('scheme URL::: ', schemeURL);
        return schemeURL;
      };
    }
  };
  /**
   * @file 用于注入 jsNative 的自定义 processor
   * @author zhoudan03
   * @date 2019/5/28
   */

  var initProcessor = function initProcessor(apiContainer) {
    for (var key in processors) {
      if (processors.hasOwnProperty(key)) {
        try {
          apiContainer.addProcessorCreator(key, processors[key]);
        } catch (e) {// do nothing
        }
      }
    }
  };
  /**
  * @file event.on event.off jscallback 参数重写
  *
  * 由于 event 的回调管理比较特殊，不属于即用即毁的类型，因此在此重写
  *
  * 目前端上事件通信设计的缺陷
  1. webview 刷新后，发送消息，端上仍然调用之前注册的事件，证明端上并没有在 webview 刷新后重置状态。不符合 webview 的生命周期。
  2. 目前事件通过字符串传递，导致前端和客户端需要分别管理事件，前端必须全局挂载事件供端调用，却不知道何时能移除。会导致前端内存泄露。更合理的解决办法应该是使用 jsBinding 的方式进行通信，由客户端统一 GC。
  *
  *
  * TODO 对于 callback 的长期保持需求，除了 event 以外，还有别的端能力。目前的解决方案是重写，待出现4个以上后，再进行总结及封装
  */

  /**
   * 用于回调函数包装命名的自增id
   *
   * @inner
   * @type {number}
   */


  var funcId$1 = 1;
  /**
   * 用于回调函数包装命名的前缀
   *
   * @inner
   * @const
   * @type {string}
   */

  var FUNC_PREFIX$1 = '__boxx_event_';

  function guid$1() {
    return FUNC_PREFIX$1 + funcId$1++;
  }

  function wrapFunction(fn) {
    var id = guid$1();

    global$1[id] = function (action, data) {
      fn(action, data);
    };

    return id;
  }
  /**
   * 比较用户传参的注册/反注册的事件  是否和存储的事件有同一个
   * 判断条件区分安卓和 iOS
   *
   * @param info
   * @param options
   * @return {boolean}
   */


  function isSameEvent(info, options) {
    // 安卓 需要看 page 和 action 的组合
    if (isAndroid$1) {
      if (options.jscallback) {
        return info.page === options.page && info.action === options.action && info.fn === options.jscallback;
      } else {
        return info.page === options.page && info.action === options.action;
      }
    } // ios 只看 action
    else if (options.jscallback) {
        return info.action === options.action && info.fn === options.jscallback;
      } else {
        return info.action === options.action;
      }
  }

  var fnContainer = [];

  function hasNoReference(fn) {
    return !fnContainer.some(function (item) {
      return fn === item.fn;
    });
  }
  /**
   * event.on/event.off jscallback 参数处理
   *
   * @param {String} type
   * @param {Object} options
   * @returns {Object}
   */
  // eslint-disable-next-line max-statements


  function eventParamsFilter(type, options) {
    if (type === 'event.on') {
      var fn = options.jscallback;

      if (typeof fn === 'string') {
        return options;
      }

      var fnString;
      var isUniqueEvent = true;
      var isUniqueFunction = true; // 允许重复注册。遍历找下有没有一样的。

      var eventItem;
      var len = fnContainer.length;

      while (len--) {
        eventItem = fnContainer[len]; // 完全相同：重复注册，无需 push。

        if (isSameEvent(eventItem, options)) {
          fnString = eventItem.fnString;
          isUniqueFunction = false;
          isUniqueEvent = false;
          break;
        } // 有同样的函数，则使用同名的
        else if (eventItem.fn === options.jscallback) {
            fnString = eventItem.fnString;
            isUniqueFunction = false;
            isUniqueEvent = true;
            break;
          }
      }

      if (isUniqueFunction) {
        fnString = wrapFunction(options.jscallback);
      }

      if (isUniqueEvent) {
        fnContainer.push({
          page: options.page,
          action: options.action,
          fn: options.jscallback,
          fnString: fnString
        });
      }

      var rawArgs = {
        page: options.page,
        action: options.action,
        jscallback: fnString,
        rnmsg: options.rnmsg,
        allowDuplicate: options.allowDuplicate
      };
      options.success && (rawArgs.success = options.success);
      options.fail && (rawArgs.fail = options.fail);
      return rawArgs;
    } else if (type === 'event.off') {
      var fn$1 = options.jscallback;

      if (!fn$1 || typeof fn$1 === 'string') {
        return options;
      }

      var isExistentEvent = false;
      var len$1 = fnContainer.length;

      while (len$1--) {
        var eventInfo = fnContainer[len$1];

        if (isSameEvent(eventInfo, options)) {
          fnContainer.splice(len$1, 1); // 判断下整个数组， 如果没有别的函数引用，就从 全局对象 上移除该 function

          if (hasNoReference(eventInfo.fn)) {
            delete global$1[eventInfo.fnString];
          }

          var rawArgs$1 = {
            page: options.page,
            action: options.action,
            rnmsg: options.rnmsg,
            jscallback: eventInfo.fnString
          };
          options.success && (rawArgs$1.success = options.success);
          options.fail && (rawArgs$1.fail = options.fail);
          isExistentEvent = true;
          return rawArgs$1;
        }
      }

      if (!isExistentEvent) {
        // fixme 对于不在 on 的列表内的事件，拦截了 off ，该逻辑设计可与业务方商榷
        console.error('error：尝试移除一个未被注册的事件函数');
        nextTick(function () {
          options.fail && options.fail({
            status: 1,
            message: 'removes a function that has not be registered'
          });
        });
        delete options.jscallback;
        return options;
      }
    }

    return options;
  }
  /**
   * @file  入参处理逻辑
   * @author zhoudan03 tianyu05
   * @date 2019/6/12
   * @description
   */


  var irregularParamsHandlers = {
    'search.setQuery': function searchSetQuery(params, descName) {
      var authority = apiContainer.apis[apiContainer.apiIndex[descName]].authority; // 安卓高版本由jsInterface方法修正为searchframe方式，且需要history为布尔类型

      if (isAndroid$1 && authority === 'searchframe') {
        params.history = Boolean(params.history);
        params = {
          searchType: JSON.stringify(params)
        };
      } // ios要求history为数值类型
      else if (isIOS$1) {
          params.history = Number(params.history);
        }

      return params;
    },
    // 低版本端能力，未对外暴露，转化新版端能力的参数
    'account.openLoginDialog': function accountOpenLoginDialog(params) {
      // eslint-disable-next-line camelcase
      params.third_login = params.showThirdLogin; // eslint-disable-next-line camelcase

      params.login_type = params.loginType;
      return params;
    },
    'app.feedback': function appFeedback(params) {
      // 在安卓端，该端能力默认值为2
      if (isAndroid$1) {
        params.type = params.type || '2';
      }

      return params;
    },
    'easyBrowser.request': function easyBrowserRequest(params) {
      params.header = params.header || {};
      params.data = params.data || {};

      if (isAndroid$1) {
        params.header = JSON.stringify(params.header);
        params.data = JSON.stringify(params.data);
        return params;
      }

      return params;
    },
    'commonUI.showToastOld': function commonUIShowToastOld(params) {
      params = params || {};
      params.string = params.message;
      return params;
    },
    // todo 确认这个逻辑存在的必要性。旧版本  onPerformanceFlowEvent 端能力在安卓必须传参 min_v
    'easyBrowser.onPerformanceFlowEvent': function easyBrowserOnPerformanceFlowEvent(params) {
      if (isAndroid$1) {
        // eslint-disable-next-line camelcase
        params.min_v = '16789504';
      }

      return params;
    },
    'easyBrowser.openHybrid': function easyBrowserOpenHybrid(params) {
      params = params || {};
      params.type = 'Hybrid';
      params.backup && params.backup.url && (params.backup.url = encodeURIComponent(params.backup.url));
      return params;
    },
    // todo 使用低版本手百 校验 低版本的打开 hybrid 的历史逻辑。
    'easyBrowser.openHybridOld': function easyBrowserOpenHybridOld(params) {
      params = params || {};

      if (isAndroid$1) {
        var backupURL = params.backup && params.backup.url || '';
        var toolTIDs = params.style && params.style.toolbaricons && params.style.toolbaricons.tids || '';
        var intent = ['S.backup=' + JSON.stringify({
          url: encodeURIComponent(backupURL)
        }), 'component=com.baidu.searchbox/.home.feed.FeedDetailActivity', 'S.toolbaricons=' + encodeURIComponent(JSON.stringify({
          toolids: toolTIDs
        })), 'S.menumode=' + (params.menumode || '')].join(';');
        return {
          intent: 'intent:#Intent;' + intent + ';end',
          // eslint-disable-next-line camelcase
          min_v: params.min_v || '16783629',
          mode: '0'
        };
      } // 历史逻辑
      // 1. 和 url 字段。（不删有影响吗？）
      // 2. tids 要是没值，就不传 toolbar  （传了有影响吗？）
      // 3. 如果传了轻应用appid，那默认置 isla 为1 （让用户传就好了）
      else if (isIOS$1) {
          var toolTIDs$1 = params.style && params.style.toolbaricons && params.style.toolbaricons.tids || '';
          params.toolbar = JSON.stringify({
            toolids: toolTIDs$1
          });
          params.type = 'Hybrid';
          params.openurl = encodeURIComponent(params.url);
          params.isla = params.isla;
          params.minver = '5.3.0.0';
          params.opentype = 1;
          params.append = 0;
          params.rbtnstyle = 2; // 历史逻辑:  style 字段所有元素都需要散在外面; 删除掉 style 字段。（散在外面，不会覆盖掉外层的值吗？todo 确认此举意义）

          if (params.style && _typeof(params.style) === 'object') {
            var style = params.style;

            for (var key in style) {
              if (style.hasOwnProperty(key)) {
                params[key] = style[key];
              }
            }

            delete params.style;
          }

          return params;
        }

      return params;
    },
    // 此端能力会用于 getNetworkType API 的低版本支持
    'device.getDeviceInfo': function deviceGetDeviceInfo(params) {
      params.keys = params.keys || ['netInfo', 'screenInfo'];
      return params;
    },
    'event.on': function eventOn(params) {
      params = eventParamsFilter('event.on', params);

      if (params.action === 'globalSettingChange') {
        if (window._Box_ && window._Box_.event && window._Box_.event.broadcast) {
          window._Box_.event.broadcast.on(params.action, params.jscallback ? window[params.jscallback] : function () {
            /* empty */
          });
        }
      }

      return params;
    },
    'event.off': function eventOff(params) {
      if (params.action === 'globalSettingChange' && window._Box_) {
        delete window._Box_;
      }

      params = eventParamsFilter('event.off', params);
      return params;
    }
  };
  /**
   * 格式化处理 params用于兼容不同时期的协议之间响应信息的格式存在的差异。
   *
   * @param {Object} params 入参信息
   * @param {string} handler 响应信息的处理标识（使用的是 descName 标识）
   * @return {Object} 处理后的参数
   */

  function normalizeParams(params, handler) {
    if (Object.keys(irregularParamsHandlers).indexOf(handler) > -1) {
      return irregularParamsHandlers[handler](params, handler);
    }

    return params;
  }
  /**
   * @file 初始化挂载所有 API
   * @author zhoudan03
   * @date 2019/6/1
   */

  /**
   * 从用户参数中，获取 用于传递给 jsNative 的，与 args 顺序一一对应的参数值的数组 （jsNative接受的是数组。）
   * {
   *     key1: value1,
   *     key2: value2,
   *     success(){},
   *     fail(){}
   * }
   *
   * =>  [value1, value2, success, fail]
   * =>  [undefined, value2, undefined]
   * fixme, 用户参数没有的 但描述表的时候  保证数组长度一致性 . 而不应该返回空数组
   *
   * @param {Object} userArgs 用户参数对象
   * @param {Array} descArgs 描述表中要求的参数数组
   * @return {Array} 用户参数值数组
   */


  function getParamsArray(userArgs, descArgs) {
    var params = []; // fixme success 和 fail 作为 args 传入。能否有统一的修正描述表的地方

    var requireArgs = descArgs.concat([{
      name: 'success',
      value: 'function='
    }, {
      name: 'fail',
      value: 'function='
    }]);

    if (userArgs && requireArgs.length > 0) {
      params = requireArgs.map(function (arg) {
        return userArgs[arg.name];
      });
    }

    return params;
  }
  /**
   * 调起对应端能力
   */


  function getInvoker(apiContainer, descName, userArgs, descArgs, event, needThrowError) {
    try {
      // 处理双端入参有diff情况
      var normalizedUserArgs = normalizeParams(userArgs, descName);
      var params = getParamsArray(normalizedUserArgs, descArgs);
      apiContainer.invoke(descName, params);
    } catch (error) {
      var newError = error;
      var eventName = 'unknown';
      var errorMessage = error.message || '';

      if (/^\[.+? Argument Error\]/.test(errorMessage)) {
        eventName = 'arg-invalid';
        var argName = errorMessage.split(']')[1].split(' ')[0];
        newError = {
          name: 'ArgInvalidError',
          message: errorMessage,
          stack: error.stack,
          api: descName,
          arg: argName
        };
      }

      event.emit("error:" + eventName, newError);

      if (needThrowError) {
        throw error;
      }
    }
  }
  /**
   * 获取 api 对应的处理函数
   *
   * @param {Object} apiContainer jsNative容器
   * @param {Object} desc 描述表
   * @return {Function} 开发者调用 一个具体的 API 的处理函数。
   *         Function.params {Object} userArgs  该函数接受的参数 userArgs 为用户参数
   */


  var generateCallApi = function generateCallApi(apiContainer, event) {
    return function (descName, userArgs) {
      var index = apiContainer.apiIndex[descName];

      if (index === undefined) {
        var message = '暂不支持 API: [' + descName + ']';
        var error = new Error(message); // 用户调用之前未判断canIUse，则抛出异常

        event.emit('error:api-missed', {
          name: 'APIMissedError',
          api: descName,
          message: message,
          stack: error.stack
        });
        return;
      }

      var desc = apiContainer.apis[index];
      getInvoker(apiContainer, descName, userArgs, desc.args, event, false);
    };
  }; // 根据描述表名称，生成不同的通信逻辑 ( "a.b.c" => boxx.a.b.c)


  var getSingleInvoker = function getSingleInvoker(apiContainer, desc, event) {
    return function (userArgs) {
      getInvoker(apiContainer, desc.name, userArgs, desc.args, event, true);
    };
  };
  /**
   * 根据描述表名称，生成不同的通信逻辑 ( "a.b.c" => boxx.a.b.c)
   *
   * @param {Object} boxx API容器
   * @param {Object} apiContainer jsNative容器
   * @param {string} apiName api名称
   * @param {string} desc 描述表
   */


  function generateSingleAPI(boxx, apiContainer, apiName, desc, event) {
    if (apiName.indexOf('.') > 0) {
      var apiNameSegments = apiName.split('.');
      var methodOwner = boxx;
      var i = 0;
      var len = apiNameSegments.length - 1;

      for (; i < len; i++) {
        var segment = apiNameSegments[i];
        methodOwner[segment] = methodOwner[segment] || {};
        methodOwner = methodOwner[segment];
      }

      methodOwner[apiNameSegments[i]] = getSingleInvoker(apiContainer, desc, event);
    } else {
      boxx[apiName] = getSingleInvoker(apiContainer, desc, event);
    }
  }
  /**
   * 初始化每个端能力 API
   */


  var initAPIs = function initAPIs(boxx, apiContainer, event) {
    var apis = apiContainer.apis; // 生成描述表对应的 api

    for (var i = 0, len = apis.length; i < len; i++) {
      var desc = apis[i];
      var apiName = desc.name;

      if (apiName && desc.invoke) {
        generateSingleAPI(boxx, apiContainer, desc.name, desc, event);
      }
    }
  };
  /**
   * @file  生成 canIUse API
   * @author zhoudan03
   * @date 2019/8/9
   */


  function generateCanIUse(apiContainer) {
    /**
     * canIUse 函数，用于判断 API 是否存在，允许两种写法：boxx.canIUse('ABTest.getSidList') 或 boxx.canIUse('boxx.ABTest.getSidList')
     *
     * @param {string} apiName  api名称字符串
     * @return {boolean} true 代表存在，false 不代表不存在
     */
    return function canIUse(apiName) {
      return apiContainer.apiIndex[apiName] > -1;
    };
  }
  /**
   * @file  低版本端能力兼容映射表
   * @author zhoudan03
   * @date 2019/8/9
   */
  // key 为对外输出的 API 名称，同时也是高版本存在的端能力的 name
  // value 为具有同样功能的低版本端能力，仅对内作为低版本兼容手段，不对外暴露


  var compatibleMap = {
    'account.login': 'account.openLoginDialog',
    'album.image.open': 'album.image.openOld',
    'commonUI.closeLoading': 'commonUI.closeLoadingOld',
    'commonUI.showToast': 'commonUI.showToastOld',
    'easyBrowser.openHybrid': 'easyBrowser.openHybridOld',
    'easyBrowser.performanceFlowLog': 'easyBrowser.onPerformanceFlowEvent',
    'device.getNetworkType': 'device.getDeviceInfo'
  };
  /**
   * @file 重定向 API 以在低版本手百上 映射 API 到低版本端能力 ， 同时删除低版本的暴露
   * @author zhoudan03
   * @date 2019/8/9
   */

  /**
   * 获取函数名称
   * @param {Object} boxx API容器
   * @param {string} apiName 比如 album.image.open
   * @return {Object} 返回对象的原因是避免 如 album.image.open 在js执行过程中，会被找引用关系，找不到会报错。
   * 因此传递 album.image 和 open 用于执行时再对 open 赋值
   */

  function getFunctionName(boxx, apiName) {
    if (apiName.indexOf('.') > 0) {
      var apiNameSegments = apiName.split('.');
      var methodOwner = boxx;
      var i = 0;
      var len = apiNameSegments.length - 1;

      for (; i < len; i++) {
        var segment = apiNameSegments[i];
        methodOwner[segment] = methodOwner[segment] || {};
        methodOwner = methodOwner[segment];
      }

      return {
        methodOwner: methodOwner,
        methodName: apiNameSegments[i]
      };
    } else {
      return {
        methodOwner: boxx,
        methodName: apiName
      };
    }
  }
  /**
   * 将低版本 API 函数引用挂载到高版本的 API 名称上，以在低版本上能使用旧端能力达到同样的功能支持。
   * 同时删除低版本 API 的引用，不对外暴露
   * @param {Object} boxx API容器
   */


  function beCompatibleWithLowVersion(boxx) {
    for (var key in compatibleMap) {
      if (compatibleMap.hasOwnProperty(key)) {
        // 如果不支持高版本，且支持低版本，则做个映射
        if (!boxx.canIUse(key) && boxx.canIUse(compatibleMap[key])) {
          var newAPIObj = getFunctionName(boxx, key);
          var oldAPIObj = getFunctionName(boxx, compatibleMap[key]);
          newAPIObj.methodOwner[newAPIObj.methodName] = oldAPIObj.methodOwner[oldAPIObj.methodName];
          delete oldAPIObj.methodOwner[oldAPIObj.methodName];
        } // 如果支持高版本，则直接删除低版本端能力
        else if (boxx.canIUse(key) && boxx.canIUse(compatibleMap[key])) {
            var oldAPIObj$1 = getFunctionName(boxx, compatibleMap[key]);
            delete oldAPIObj$1.methodOwner[oldAPIObj$1.methodName];
          }
      }
    }
  }
  /**
   * @file  封装 addAPI 方法，允许用户添加描述表生成描述表
   * @author zhoudan03
   * @date 2019/9/20
   */

  /**
   * 添加用户的描述表
   *
   * @param {Object} boxx api容器
   * @param {Object} apiContainer jsNative容器
   * @param {Object} description 描述表
   */


  function add(apiContainer, description) {
    if (!isCapacityExisting(description)) {
      return;
    }

    normalizeDescription(description);

    if (!description.invoke) {
      throw Error('[boxx] ' + description.name + ': must specify right invoke type in description');
    }

    apiContainer.add(description);
  }
  /**
   * 引入兜底描述表方法
   * @param {*} descriptions 兜底描述表
   */


  function setDefaultDescription(descriptions) {
    if (descriptions && Object.keys(descriptions).length > 0) {
      var descriptionsList = getLocalDescriptions(descriptions);

      for (var i = 0; i < descriptionsList.length; i++) {
        add(apiContainer, descriptionsList[i]);
      }
    } // 语义化 api 处理


    initAPIs(this, apiContainer, event); // 重定向特殊 API

    beCompatibleWithLowVersion(this);
  }
  /**
   * @file 主模块和所有子模块的入口文件，用于生成boxx单例
   * @author chenqi14
   * @data 2019/10/08
   */

  /**
   * init boxx
   *
   * @returns {object} boxx
   */


  function addApi() {
    var boxx = {}; // 挂载环境变量

    boxx.env = env;
    boxx.canIUse = generateCanIUse(apiContainer);
    boxx.call = generateCallApi(apiContainer, event);
    boxx.setDefaultDescription = setDefaultDescription.bind(boxx);
    boxx.on = event.on;
    boxx.off = event.off;
    boxx.once = event.once;
    return boxx;
  }
  /**
   * 注入兜底描述表并初始化
   *
   * @param {object} boxx
   */


  function addDefaultdDescription(boxx) {
    var defaultDescriptions = {};

    try {
      defaultDescriptions = document && document.querySelectorAll('[data-for=boxx-description]') && document.querySelectorAll('[data-for=boxx-description]')[0] && document.querySelectorAll('[data-for=boxx-description]')[0].innerHTML && JSON.parse(document.querySelectorAll('[data-for=boxx-description]')[0].innerHTML) || {};
    } catch (error) {
      defaultDescriptions = {};
      console.error(error);
    }

    boxx.setDefaultDescription(defaultDescriptions);
  }
  /**
   * create boxx
   *
   * @returns {object} boxx instance
   */


  function createBox() {
    // 判断有无_Box_对象，event端能力会用到

    /* eslint-disable no-underscore-dangle */
    if (!window._Box_) {
      window._Box_ = {};
    }

    if (!window._Box_.event) {
      window._Box_.event = {};
    }

    if (!window._Box_.event.broadcast) {
      window._Box_.event.broadcast = broadcast;
    }
    /* eslint-enable no-underscore-dangle */


    initProcessor(apiContainer); // 端描述表初始化

    var descriptionsList = getDescriptions(apiContainer);
    apiContainer.add(descriptionsList);
    var boxx = addApi();
    addDefaultdDescription(boxx);
    return boxx;
  }
  /**
   * @file boxx 手百端能力js库 入口文件
   * @author lihuanyu01
   * @date 2021/5/25
   */
  // 给 jsNative 注入兜底描述表


  var boxx = createBox();

  var android = [
  	{
  		name: "ABTest.getSidList",
  		invoke: "method.args-json+callback",
  		method: "Bdbox_android_utils.getABTestSidList",
  		env: {
  			main: {
  				search: "7.3",
  				light: "7.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "ABTest.getInfo",
  		action: "getABTestInfo",
  		authority: "",
  		invoke: "method.args-json+callback",
  		method: " Bdbox_android_utils.getABTestInfo",
  		path: "",
  		env: {
  			main: {
  				search: "8.6.0.0",
  				light: "8.6.0.0"
  			}
  		}
  	},
  	{
  		name: "account.login",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v26",
  		path: "/account/login",
  		args: [
  			{
  				name: "loginType",
  				value: "string"
  			},
  			{
  				name: "showThirdLogin",
  				value: "string"
  			},
  			{
  				name: "loginSource",
  				value: "string"
  			},
  			{
  				name: "ext",
  				value: "string="
  			},
  			{
  				name: "customCSS",
  				value: "string="
  			},
  			{
  				name: "normalizeAccount",
  				value: "string"
  			},
  			{
  				name: "normalizeTitle",
  				value: "string="
  			},
  			{
  				name: "normalizeSubTitle",
  				value: "string="
  			},
  			{
  				name: "loginSubSource",
  				value: "string="
  			}
  		],
  		nextCallback: "loginCallback",
  		env: {
  			main: {
  				light: "10.7.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "account.getZid",
  		scheme: "baiduboxapp",
  		method: "Bdbox_android_jsbridge.dispatch",
  		invoke: "method.bdboxURL",
  		authority: "v14",
  		path: "/account/getZid",
  		args: [
  			{
  				name: "v",
  				value: "number"
  			},
  			{
  				name: "jsParams",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "9.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "account.getPhoneNumArgs",
  		path: "/getPhoneNumArgs",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "account",
  		invoke: "method.url",
  		scheme: "baiduboxapp",
  		args: [
  		],
  		env: {
  			main: {
  				light: "11.24.0.0"
  			}
  		}
  	},
  	{
  		path: "/launchLoginComponent",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "account",
  		name: "account.launchLoginComponent",
  		invoke: "method.url",
  		scheme: "baiduboxapp",
  		args: [
  			{
  				comment: "是否支持游客（0：不支持；1：支持）",
  				name: "supportGuest",
  				value: "number="
  			},
  			{
  				comment: "登录按钮文案",
  				name: "buttonText",
  				value: "string="
  			},
  			{
  				comment: "登录来源",
  				name: "src",
  				value: "string"
  			},
  			{
  				comment: "弹窗业务对应的云控节点，用于控制半屏引导弹窗频次。不传代表不控制频次",
  				name: "cloudControlName",
  				value: "string="
  			},
  			{
  				comment: "弹窗实验，用于控制半屏弹窗实验。不传代表不需要实验",
  				name: "abTestName",
  				value: "string="
  			},
  			{
  				comment: "主标题",
  				name: "title",
  				value: "string="
  			},
  			{
  				comment: "登录组件类型",
  				name: "type",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "11.25.0.0"
  			}
  		}
  	},
  	{
  		name: "account.openPassPage",
  		path: "/openPassPage",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "account",
  		invoke: "method.url",
  		scheme: "baiduboxapp",
  		args: [
  			{
  				comment: "accountCancel:账号注销；accountManage:账号管理；accountAppeal:账号申诉",
  				name: "page",
  				value: "string"
  			},
  			{
  				comment: "登录来源/调起pass页面的来源;\n帮助与反馈页面：personal_accountmanage",
  				name: "source",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "11.26.0.0"
  			}
  		}
  	},
  	{
  		name: "album.image.open",
  		invoke: "method.args-json+callback",
  		method: "Bdbox_android_utils.lightImage",
  		args: [
  			{
  				name: "barHeight",
  				value: "string="
  			},
  			{
  				name: "position",
  				value: "Object="
  			},
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "img_items",
  				value: "Array="
  			},
  			{
  				name: "images",
  				value: {
  					arrayOf: {
  						url: "string",
  						origin_url: "string=",
  						origin_size: "string="
  					}
  				}
  			},
  			{
  				name: "url",
  				value: {
  					arrayOf: "string"
  				}
  			},
  			{
  				name: "index",
  				value: "*="
  			},
  			{
  				name: "source",
  				value: "string="
  			},
  			{
  				name: "from",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "7.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "app.feedback",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/utils/feedback",
  		authority: "v16",
  		args: [
  			{
  				name: "type",
  				value: "string="
  			},
  			{
  				name: "source",
  				value: "string="
  			},
  			{
  				name: "extras",
  				value: "Object="
  			},
  			{
  				name: "info",
  				value: "Object="
  			},
  			{
  				name: "to_page",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "10.0.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "app.selectTab",
  		scheme: "baiduboxapp",
  		invoke: "method.url",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v11",
  		path: "/appTab/select",
  		args: [
  			{
  				name: "item",
  				value: "string"
  			},
  			{
  				name: "params",
  				value: "Object="
  			}
  		],
  		env: {
  			main: {
  				light: "9.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "auth.init",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v16",
  		path: "/public/thirdPart/config",
  		args: [
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "ext",
  				value: "Object="
  			},
  			{
  				name: "schemeList",
  				value: "Array"
  			}
  		],
  		env: {
  			main: {
  				light: "10.0.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "comic.openReader",
  		authority: "v5",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/comic/openreader",
  		args: [
  			{
  				name: "chapter",
  				value: {
  					type: {
  						ctsrc: "string",
  						title: "string",
  						pic_sum: "string",
  						index: "string",
  						cid: "string",
  						cur_pic: "string",
  						cp_chapter_id: "string"
  					},
  					isRequired: true
  				}
  			},
  			{
  				name: "comic",
  				value: {
  					type: {
  						id: "string",
  						name: "string",
  						coverImg: "string",
  						updateChapter: "string",
  						tags: {
  							arrayOf: "string"
  						},
  						author: "string",
  						lastTime: "string",
  						save_content: "string"
  					}
  				},
  				isRequired: true
  			},
  			{
  				name: "slog",
  				value: {
  					type: {
  						type: "string",
  						page: "string",
  						from: "string",
  						ext: {
  							type: {
  								cid: "string"
  							},
  							isRequired: "true"
  						},
  						source: "string"
  					},
  					isRequired: true
  				}
  			}
  		],
  		query: {
  			upgrade: "1"
  		},
  		env: {
  			main: {
  				light: "8.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "comment.refresh",
  		invoke: "method.bdboxURL",
  		scheme: "baiduboxapp",
  		authority: "v11",
  		path: "/comment/refresh",
  		args: [
  			{
  				name: "type",
  				value: "string"
  			}
  		],
  		method: "Bdbox_android_jsbridge.dispatch",
  		env: {
  			main: {
  				light: "9.1.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "comment.getContextInfo",
  		path: "/comment/context",
  		invoke: "method.bdboxURL",
  		authority: "v12",
  		args: [
  			{
  				name: "event_callback",
  				value: "function="
  			}
  		],
  		scheme: "baiduboxapp",
  		method: "Bdbox_android_jsbridge.dispatch",
  		env: {
  			main: {
  				light: "9.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "comment.operate",
  		path: "/comment/operate",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		args: [
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "content",
  				value: "Object="
  			}
  		],
  		authority: "v11",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "9.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "comment.showBox",
  		invoke: "method.bdboxURL",
  		path: "/showbox",
  		authority: "comment",
  		method: "Bdbox_android_jsbridge.dispatch",
  		action: "showbox",
  		args: [
  			{
  				name: "event_callback",
  				value: "string=",
  				comment: "评论发布回调"
  			},
  			{
  				name: "mcExt",
  				value: "string=",
  				comment: ""
  			},
  			{
  				name: "type",
  				value: "number",
  				comment: "为0表示发表评论；\n为1表示回复评论"
  			},
  			{
  				name: "topic_id",
  				value: "string",
  				comment: "发表/回复评论所需要的主题id"
  			},
  			{
  				name: "parent_id",
  				value: "string",
  				comment: "被回复的评论id；\n回复评论时需要;\n\niOS端以parent_id是否有值，来决定是不是回复评论；"
  			},
  			{
  				name: "rename",
  				value: "string",
  				comment: "被回复的评论的发布者用户名\n回复评论时需要;\n\n仅发表评论时使用"
  			},
  			{
  				name: "placeholder",
  				value: "string",
  				comment: "默认提示文案，显示在回复框中的文案，rename存在是无效；\n主要用户发表评论；"
  			},
  			{
  				name: "logid",
  				value: "string",
  				comment: "打点上报使用;\n评论发布框只做透传；"
  			},
  			{
  				name: "source",
  				value: "string",
  				comment: "打点上报使用, 表示资源类型 ：如feednews、star等;\n评论发布框只做透传；\niOS端从 9.0版本开始支持；\n安卓端暂不支持；"
  			},
  			{
  				name: "page",
  				value: "string",
  				comment: "打点上报使用，表示当前页面类型；\n评论发布框只做透传；\niOS端从 V9.0版本开始支持；\n安卓端暂不支持；"
  			}
  		],
  		env: {
  			main: {
  				light: "8.3.0.0"
  			}
  		}
  	},
  	{
  		name: "comment.detail",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/detail",
  		authority: "comment",
  		action: "detail",
  		args: [
  			{
  				name: "anchor_reply_id",
  				value: "string=",
  				comment: "锚点id，定位到某条评论"
  			},
  			{
  				name: "is_show_soft_input",
  				value: "string=",
  				comment: "是否打开评论框"
  			},
  			{
  				name: "topic_id",
  				value: "string",
  				comment: "文章的评论id（必传）"
  			},
  			{
  				name: "reply_id",
  				value: "string",
  				comment: "评论详情id（必传）"
  			},
  			{
  				name: "topic_title",
  				value: "string",
  				comment: "文章title（必传），分享使用"
  			},
  			{
  				name: "iconurl",
  				value: "string",
  				comment: "文章icon（必传），分享使用"
  			},
  			{
  				name: "logid",
  				value: "string",
  				comment: "logid"
  			},
  			{
  				name: "nid",
  				value: "string",
  				comment: "文章id"
  			},
  			{
  				name: "source",
  				value: "string",
  				comment: "来源（（个人主页: homepage ,评论消息:push_comment,点赞消息: push_praise）"
  			}
  		],
  		env: {
  			main: {
  				light: "11.0.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.showToast",
  		invoke: "method.bdboxURL",
  		args: [
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "message",
  				value: "string"
  			},
  			{
  				name: "clickCallback",
  				value: "function="
  			},
  			{
  				name: "time",
  				value: "string="
  			},
  			{
  				name: "image",
  				value: "string="
  			},
  			{
  				name: "buttonText",
  				value: "string="
  			},
  			{
  				name: "style",
  				value: "string="
  			},
  			{
  				name: "title",
  				value: "string="
  			},
  			{
  				name: "icon",
  				value: "string="
  			},
  			{
  				name: "bottomShowAnimationType",
  				value: "string="
  			}
  		],
  		path: "/utils/showToast",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v10",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "9.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.openRedPacket",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v17",
  		path: "/redPacket/getRedPacket",
  		args: [
  			{
  				name: "portrait",
  				value: "string"
  			},
  			{
  				name: "name",
  				value: "string"
  			},
  			{
  				name: "title",
  				value: "string"
  			},
  			{
  				name: "content",
  				value: "string="
  			},
  			{
  				name: "id",
  				value: "string"
  			},
  			{
  				name: "ext",
  				value: "string"
  			},
  			{
  				name: "needUbc",
  				value: "boolean="
  			},
  			{
  				name: "from",
  				value: "string="
  			},
  			{
  				name: "jumpEnable",
  				value: "number="
  			},
  			{
  				name: "jumpUrl",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "10.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.showLoading",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v19",
  		path: "/utils/showLoading",
  		args: [
  			{
  				name: "title",
  				value: "string"
  			},
  			{
  				name: "mask",
  				value: "boolean="
  			}
  		],
  		query: {
  			upgrade: 0,
  			oauthType: "swan"
  		},
  		env: {
  			main: {
  				light: "10.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.closeLoading",
  		invoke: "method",
  		method: "Bdbox_android_net.hideLoadingView",
  		env: {
  			main: {
  				light: "8.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.download.app",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/app",
  		authority: "download",
  		action: "app",
  		args: [
  			{
  				name: "ext_info",
  				value: "string",
  				comment: "透传信息"
  			},
  			{
  				name: "business",
  				value: "string",
  				comment: "参数business,用于区分调用方业务,比如大搜,凤巢"
  			},
  			{
  				name: "uri",
  				value: "string",
  				comment: "参数uri"
  			},
  			{
  				name: "file_id",
  				value: "string",
  				comment: "app文件唯一id对应"
  			},
  			{
  				name: "url",
  				value: "string",
  				comment: "下载地址"
  			},
  			{
  				name: "type",
  				value: "string",
  				comment: "任务类型"
  			}
  		],
  		env: {
  			main: {
  				light: "9.3.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.getSuspensionBallToastStatus",
  		path: "/getSuspensionBallToastStatus",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "suspensionBall",
  		invoke: "method.bdboxURL",
  		scheme: "baiduboxapp",
  		args: [
  		],
  		env: {
  			main: {
  				light: "11.11.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.hideLoading",
  		path: "/hideLoading",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "utils",
  		invoke: "method.bdboxURL",
  		scheme: "baiduboxapp",
  		args: [
  		],
  		env: {
  			main: {
  				light: "10.3.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.openPicker",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/openPicker",
  		authority: "utils",
  		args: [
  			{
  				name: "array",
  				value: {
  					arrayOf: "string"
  				}
  			},
  			{
  				name: "current",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				search: "10.5"
  			}
  		}
  	},
  	{
  		name: "device.getCUID",
  		invoke: "method.args-json",
  		method: "Bdbox_android_utils.getcuid",
  		env: {
  			main: {
  				light: "6.5"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "device.getCurrentLocation",
  		scheme: "baiduboxapp",
  		invoke: "method.args-json+callback",
  		method: "Bdbox_android_utils.location",
  		args: [
  			{
  				name: "coor_type",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "6.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "device.getDeviceInfo",
  		scheme: "baiduboxapp",
  		invoke: "method.args-json+callback",
  		authority: "utils",
  		method: "Bdbox_android_utils.getDeviceInfo",
  		args: [
  			{
  				name: "keys",
  				value: "Array"
  			}
  		],
  		env: {
  			main: {
  				light: "7.3.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "device.getNetworkType",
  		invoke: "method.bdboxURL",
  		authority: "v19",
  		path: "/utils/getNetworkType",
  		method: "Bdbox_android_jsbridge.dispatch",
  		env: {
  			main: {
  				light: "10.3.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "device.getGlobalSettings",
  		invoke: "method.args-json+callback",
  		method: "Bdbox_android_utils.getGlobalSettings",
  		env: {
  			main: {
  				light: "8.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "device.getLocation",
  		path: "/getLocation",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "location",
  		invoke: "method.bdboxURL",
  		scheme: "baiduboxapp",
  		args: [
  		],
  		env: {
  			main: {
  				light: "10.3.6.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.webStorage",
  		invoke: "method.args-json+callback",
  		method: "Bdbox_android_utils.webStorage",
  		args: [
  			{
  				name: "action",
  				value: "string"
  			},
  			{
  				name: "key",
  				value: "string"
  			},
  			{
  				name: "data",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "7.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.openHybrid",
  		args: [
  			{
  				name: "type",
  				value: "string="
  			},
  			{
  				name: "url",
  				value: "string="
  			},
  			{
  				name: "backup",
  				value: {
  					type: {
  						url: "string",
  						version: "string"
  					}
  				}
  			},
  			{
  				name: "tpl_id",
  				value: "string="
  			},
  			{
  				name: "append",
  				value: "string="
  			},
  			{
  				name: "tplpath",
  				value: "string="
  			},
  			{
  				name: "context",
  				value: "Object"
  			},
  			{
  				name: "style",
  				value: "Object="
  			},
  			{
  				name: "newbrowser",
  				value: "string="
  			},
  			{
  				name: "forbidautorotate",
  				value: "string="
  			},
  			{
  				name: "slog",
  				value: "Object="
  			},
  			{
  				name: "videoinfo",
  				value: "string="
  			},
  			{
  				name: "jssids",
  				value: "string="
  			},
  			{
  				name: "launchlogin",
  				value: "string="
  			},
  			{
  				name: "stay",
  				value: "string="
  			},
  			{
  				name: "next",
  				value: "string="
  			},
  			{
  				name: "commentInfo",
  				value: "Object="
  			},
  			{
  				name: "pagefrom",
  				value: "string="
  			},
  			{
  				name: "isSearchVideo",
  				value: "string="
  			},
  			{
  				name: "ch_url",
  				value: "string="
  			},
  			{
  				name: "first_image",
  				value: "string="
  			}
  		],
  		path: "/easybrowse/hybrid",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v1",
  		invoke: "method.url",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "8.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.request",
  		invoke: "method.args-json+callback",
  		method: "Bdbox_android_net.request",
  		args: [
  			{
  				name: "header",
  				value: "string="
  			},
  			{
  				name: "pu",
  				value: "string"
  			},
  			{
  				name: "method",
  				value: "string"
  			},
  			{
  				name: "data",
  				value: "string="
  			},
  			{
  				name: "url",
  				value: "string"
  			},
  			{
  				name: "cache",
  				value: "string"
  			},
  			{
  				name: "refresh",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "7.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.imageCache",
  		invoke: "method.args-json+callback",
  		method: "Bdbox_android_net.request",
  		authority: "v28",
  		path: "/net/imageCache",
  		args: [
  			{
  				name: "urls",
  				value: "Array"
  			}
  		],
  		env: {
  			main: {
  				light: "10.8"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.performanceFlowLog",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v20",
  		path: "/utils/onPerformanceFlowEvent",
  		args: [
  			{
  				name: "actionId",
  				value: "string"
  			},
  			{
  				name: "operation",
  				value: "string"
  			},
  			{
  				name: "value",
  				value: "string"
  			},
  			{
  				name: "frameSource",
  				value: "string="
  			},
  			{
  				name: "businessType",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "10.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.universalOperation",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v46",
  		path: "/easybrowse/universalOperation",
  		args: [
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "data",
  				value: "Object"
  			}
  		],
  		query: {
  			oauthType: "feed"
  		},
  		env: {
  			main: {
  				light: "11.8"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.showMenu",
  		scheme: "baiduboxapp",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v9",
  		path: "/easybrowse/showmenu",
  		args: [
  			{
  				name: "menuItem",
  				value: "Object="
  			}
  		],
  		query: {
  			upgrade: 0
  		},
  		env: {
  			main: {
  				light: "9.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.injectJS",
  		invoke: "method.args-json+callback",
  		method: "Bdbox_android_feed.injectJS",
  		args: [
  		],
  		env: {
  			main: {
  				light: "9.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.open",
  		scheme: "baiduboxapp",
  		invoke: "method.url",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v1",
  		path: "/easybrowse/open",
  		query: {
  			upgrade: 0,
  			oauthType: "feed"
  		},
  		args: [
  			{
  				name: "url",
  				value: "string"
  			},
  			{
  				name: "ch_url",
  				value: "string="
  			},
  			{
  				name: "type",
  				value: "string="
  			},
  			{
  				name: "append",
  				value: "string="
  			},
  			{
  				name: "context",
  				value: "Object="
  			},
  			{
  				name: "style",
  				value: "Object="
  			},
  			{
  				name: "newbrowser",
  				value: "string="
  			},
  			{
  				name: "forbidautorotate",
  				value: "string="
  			},
  			{
  				name: "fullscreen",
  				value: "string="
  			},
  			{
  				name: "slog",
  				value: "Object="
  			},
  			{
  				name: "videoinfo",
  				value: "string="
  			},
  			{
  				name: "jssids",
  				value: "string="
  			},
  			{
  				name: "launchlogin",
  				value: "string="
  			},
  			{
  				name: "stay",
  				value: "string="
  			},
  			{
  				name: "next",
  				value: "string="
  			},
  			{
  				name: "commentInfo",
  				value: "Object="
  			},
  			{
  				name: "pagefrom",
  				value: "string="
  			},
  			{
  				name: "isSearchVideo",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "7.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.showNetworkError",
  		invoke: "method",
  		method: "Bdbox_android_net.showNetWorkErrorView",
  		env: {
  			main: {
  				light: "8.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.showDialog",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/showDialog",
  		authority: "easybrowse",
  		args: [
  			{
  				name: "title",
  				value: "string"
  			},
  			{
  				name: "subtitle",
  				value: "string"
  			},
  			{
  				name: "sourceUrl",
  				value: {
  					type: {
  						"default": "string",
  						night: "string"
  					}
  				}
  			},
  			{
  				name: "buttons",
  				value: {
  					arrayOf: "Object="
  				}
  			}
  		],
  		nextCallback: "callback",
  		env: {
  			main: {
  				light: "11.17"
  			}
  		}
  	},
  	{
  		name: "event.on",
  		invoke: "method.url",
  		scheme: "baiduboxapp",
  		authority: "v5",
  		path: "/datachannel/register",
  		method: "Bdbox_android_jsbridge.dispatch",
  		args: [
  			{
  				name: "action",
  				value: "string"
  			},
  			{
  				name: "page",
  				value: "string="
  			},
  			{
  				name: "allowDuplicate",
  				value: "string="
  			},
  			{
  				name: "jscallback",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "8.4.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "event.off",
  		invoke: "method.url",
  		scheme: "baiduboxapp",
  		authority: "v5",
  		path: "/datachannel/unregister",
  		method: "Bdbox_android_jsbridge.dispatch",
  		args: [
  			{
  				name: "action",
  				value: "string"
  			},
  			{
  				name: "page",
  				value: "string="
  			},
  			{
  				name: "jscallback",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "8.4.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "event.emit",
  		invoke: "method.url",
  		scheme: "baiduboxapp",
  		authority: "v5",
  		path: "/datachannel/sendbroadcast",
  		method: "Bdbox_android_jsbridge.dispatch",
  		args: [
  			{
  				name: "action",
  				value: "string"
  			},
  			{
  				name: "data",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "8.4.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.getContextInfo",
  		invoke: "method.args-json+callback",
  		method: "Bdbox_android_feed.getContextInfo",
  		env: {
  			main: {
  				light: "7.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.getLastBrowsingPosition",
  		invoke: "method.bdboxURL",
  		authority: "v5",
  		path: "/feed/getpos",
  		method: "Bdbox_android_jsbridge.dispatch",
  		args: [
  			{
  				name: "nid",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "8.4.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.isWebPSupported",
  		invoke: "method.bdboxURL",
  		authority: "v10",
  		path: "/feed/isWebp",
  		method: "Bdbox_android_jsbridge.dispatch",
  		env: {
  			main: {
  				light: "9.0.5.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.linkage",
  		args: [
  			{
  				name: "action",
  				value: "string"
  			},
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "nid",
  				value: "string="
  			},
  			{
  				name: "status",
  				value: "string="
  			},
  			{
  				name: "count",
  				value: "string="
  			},
  			{
  				name: "follow_type",
  				value: "string="
  			},
  			{
  				name: "third_id",
  				value: "string="
  			}
  		],
  		authority: "v5",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/feed/linkage",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "8.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.getSessionClickID",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v5",
  		path: "/feed/session_click",
  		env: {
  			main: {
  				light: "8.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.showDislike",
  		invoke: "method.args-json",
  		method: "Bdbox_android_utils.showDislike",
  		args: [
  			{
  				name: "from",
  				value: "string="
  			},
  			{
  				name: "item_id",
  				value: "string="
  			},
  			{
  				name: "dislike",
  				value: "Object="
  			},
  			{
  				name: "ext",
  				value: "Object="
  			},
  			{
  				name: "tab_id",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "8.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.updateFavorInfo",
  		invoke: "method.args-json",
  		method: "Bdbox_android_utils.updateCollectionStatus",
  		args: [
  			{
  				name: "ukey",
  				value: "*="
  			},
  			{
  				name: "title",
  				value: "*="
  			},
  			{
  				name: "originaltitle",
  				value: "*="
  			},
  			{
  				name: "tplid",
  				value: "*="
  			},
  			{
  				name: "cmd",
  				value: "*="
  			},
  			{
  				name: "url",
  				value: "*="
  			},
  			{
  				name: "img",
  				value: "*="
  			},
  			{
  				name: "nid",
  				value: "*="
  			},
  			{
  				name: "source",
  				value: "*="
  			},
  			{
  				name: "originalsource",
  				value: "*="
  			},
  			{
  				name: "duration",
  				value: "*="
  			},
  			{
  				name: "icon",
  				value: "*="
  			},
  			{
  				name: "portrait",
  				value: "*="
  			},
  			{
  				name: "username",
  				value: "*="
  			},
  			{
  				name: "userdesc",
  				value: "*="
  			},
  			{
  				name: "usercmd",
  				value: "*="
  			},
  			{
  				name: "price",
  				value: "*="
  			},
  			{
  				name: "vipicon",
  				value: "*="
  			},
  			{
  				name: "imagecount",
  				value: "*="
  			},
  			{
  				name: "extdata",
  				value: "*="
  			}
  		],
  		env: {
  			main: {
  				light: "8.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.tab.operate",
  		args: [
  			{
  				name: "action",
  				value: "string"
  			},
  			{
  				name: "tab_id",
  				value: "string"
  			},
  			{
  				name: "tabinfo",
  				value: "Object="
  			},
  			{
  				name: "tabindex",
  				value: "number="
  			},
  			{
  				name: "tabselected",
  				value: "string="
  			}
  		],
  		path: "/feed/tabopt",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v15",
  		invoke: "method.bdboxURL",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "10.5.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.prefetch",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v16",
  		path: "/feed/prefetch",
  		args: [
  			{
  				name: "action",
  				value: "string"
  			},
  			{
  				name: "data",
  				value: "Array"
  			}
  		],
  		env: {
  			main: {
  				light: "10.0.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.eventNotify",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/eventNotify",
  		authority: "feed",
  		args: [
  			{
  				name: "type",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "10.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.payment.openLandpage",
  		invoke: "method.bdboxURL",
  		path: "/payment/openLandpage",
  		authority: "feed",
  		method: "Bdbox_android_jsbridge.dispatch",
  		action: "openLandpage",
  		args: [
  			{
  				name: "openComponent",
  				value: "string",
  				comment: "打开专栏后调起对应子模块：comment_panel打开评论写的页面"
  			},
  			{
  				name: "type",
  				value: "string",
  				comment: "落地页类型，目前只有图文"
  			},
  			{
  				name: "ext",
  				value: {
  					type: {
  						sExt: "string",
  						source: "string"
  					},
  					isRequired: true
  				},
  				comment: "预留ext字段"
  			},
  			{
  				name: "resId",
  				value: "string",
  				comment: "付费专栏唯一标识"
  			}
  		],
  		env: {
  			main: {
  				light: "11.13.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.onlineLog",
  		path: "/onlineLog",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "feed",
  		invoke: "method.bdboxURL",
  		scheme: "baiduboxapp",
  		args: [
  			{
  				name: "logDescription",
  				value: "string="
  			},
  			{
  				name: "logContent",
  				value: "Object="
  			}
  		],
  		env: {
  			main: {
  				light: "12.11.0.0"
  			}
  		}
  	},
  	{
  		name: "follow.showFollowGuide",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v21",
  		path: "/follow/showFollowGuideDialog",
  		args: [
  			{
  				name: "channel",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "10.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "hybrid.reliabilityLog",
  		invoke: "method.args-json",
  		method: "Bdbox_android_utils.onReliableLog",
  		args: [
  			{
  				name: "description",
  				value: "string"
  			},
  			{
  				name: "message",
  				value: "string"
  			},
  			{
  				name: "type",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "8.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.video.collections",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/collections",
  		authority: "video",
  		action: "collections",
  		args: [
  			{
  				name: "clicked_tag",
  				value: "string=",
  				comment: "透传给服务端"
  			},
  			{
  				name: "insert_ids",
  				value: "string=",
  				comment: "多个视频vid，逗号分割"
  			},
  			{
  				name: "pd",
  				value: "string",
  				comment: "落地页来源"
  			},
  			{
  				name: "coll_id",
  				value: "string",
  				comment: "合辑id"
  			}
  		],
  		env: {
  			main: {
  				light: "11.0"
  			},
  			lite: {
  				search: "4.0.0.0",
  				light: "4.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.video.invokeDetail",
  		method: "Bdbox_android_jsbridge.dispatch",
  		action: "invokeVideoDetail",
  		invoke: "method.bdboxURL",
  		path: "/invokeVideoDetail",
  		authority: "video",
  		args: [
  			{
  				name: "suspenseDisable",
  				value: "string=",
  				comment: "取值：'0'/'1'， 标记是否触发小窗功能，注意：无此key或值，会触发小窗，取值为'1'，则不触发小窗"
  			},
  			{
  				name: "videoPlayerReuseID",
  				value: "string=",
  				comment: "播放器内核层复用id，用于不同场景下无缝播放（比如热议"
  			},
  			{
  				name: "resourceType",
  				value: "string=",
  				comment: "落地页类型，正常Feed落地页可不传，智令视频：“resourceType” ： “interact”"
  			},
  			{
  				name: "tpl",
  				value: "string",
  				comment: "落地页模板类型，目前有feed和browser两种类型，feed标识Feed短视频落地页，browser标识搜索视频落地页"
  			},
  			{
  				name: "extRequest",
  				value: {
  					type: {
  					},
  					isRequired: false
  				},
  				comment: "落地页C/S协议扩展字段"
  			},
  			{
  				name: "nid",
  				value: "string=",
  				comment: "落地页id"
  			},
  			{
  				name: "vid",
  				value: "string",
  				comment: "视频id"
  			},
  			{
  				name: "videoInfo",
  				value: {
  					type: {
  					},
  					isRequired: true
  				},
  				comment: "视频信息"
  			},
  			{
  				name: "page",
  				value: "string",
  				comment: "落地页类型"
  			},
  			{
  				name: "pd",
  				value: "string",
  				comment: "标识落地页是从哪个页面跳转到的"
  			},
  			{
  				name: "titile",
  				value: "string=",
  				comment: "视频标题"
  			},
  			{
  				name: "openNewPage",
  				value: "string=",
  				comment: "打开新落地页或刷新当前落地页,1表示刷新当前落地页，其它为打开新落地页"
  			},
  			{
  				name: "ext",
  				value: {
  					type: {
  						comment: "Object=",
  						toComment: "string=",
  						type: "string="
  					},
  					isRequired: false
  				},
  				comment: "业务扩展字段"
  			},
  			{
  				name: "extLog",
  				value: {
  					type: {
  					},
  					isRequired: false
  				},
  				comment: "日志透传字段"
  			},
  			{
  				name: "startTimestamp",
  				value: "number=",
  				comment: "调用落地页起始时间戳"
  			}
  		],
  		env: {
  			main: {
  				light: "11.12"
  			},
  			lite: {
  				search: "4.17.0.0",
  				light: "4.17.0.0"
  			}
  		}
  	},
  	{
  		name: "media.tts.showLandGuide",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v24",
  		path: "/tts/showLandGuide",
  		args: [
  			{
  				name: "id",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "10.6"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.tts.showLandEarBubble",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/showLandEarBubble",
  		authority: "tts",
  		args: [
  		],
  		env: {
  			main: {
  				light: "11.15"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.tts.play",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v18",
  		path: "/tts/play",
  		args: [
  			{
  				name: "id",
  				value: "string"
  			},
  			{
  				name: "title",
  				value: "string"
  			},
  			{
  				name: "imageUrl",
  				value: "string="
  			},
  			{
  				name: "context",
  				value: "Object="
  			},
  			{
  				name: "index",
  				value: "string="
  			},
  			{
  				name: "forbiddenDialog",
  				value: "boolean="
  			},
  			{
  				name: "pass_params",
  				value: "Object="
  			}
  		],
  		env: {
  			main: {
  				light: "10.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.tts.pause",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v18",
  		path: "/tts/pause",
  		args: [
  			{
  				name: "id",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "10.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.tts.virtualstudio",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/virtualstudio",
  		authority: "tts",
  		args: [
  			{
  				name: "title",
  				value: "string"
  			},
  			{
  				name: "from",
  				value: "string"
  			},
  			{
  				name: "id",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "11.17.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.tts.getStatus",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v18",
  		path: "/tts/status",
  		args: [
  		],
  		env: {
  			main: {
  				light: "10.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.tts.end",
  		args: [
  			{
  				name: "id",
  				value: "string="
  			}
  		],
  		path: "/tts/end",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v18",
  		invoke: "method.bdboxURL",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "10.2.0.0"
  			}
  		}
  	},
  	{
  		name: "novel.openSubPage",
  		invoke: "method.url",
  		scheme: "baiduboxapp",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "novel",
  		path: "/openSubPage",
  		args: [
  			{
  				name: "title",
  				value: "string"
  			},
  			{
  				name: "url",
  				value: "string"
  			},
  			{
  				name: "pagetype",
  				value: "number"
  			},
  			{
  				name: "toolbaricons",
  				value: "string="
  			},
  			{
  				name: "method",
  				value: "string"
  			},
  			{
  				name: "needParams",
  				value: "string="
  			},
  			{
  				name: "args",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "5.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "novel.openReader",
  		invoke: "method.args-json",
  		method: "Bdbox_android_novel.openReader",
  		args: [
  			{
  				name: "gid",
  				value: "string"
  			},
  			{
  				name: "name",
  				value: "string"
  			},
  			{
  				name: "author",
  				value: "string"
  			},
  			{
  				name: "image",
  				value: "string"
  			},
  			{
  				name: "newchapter",
  				value: "string"
  			},
  			{
  				name: "ctsrc",
  				value: "string="
  			},
  			{
  				name: "cpsrc",
  				value: "string="
  			},
  			{
  				name: "updateTime",
  				value: "string="
  			},
  			{
  				name: "islastchapter",
  				value: "string"
  			},
  			{
  				name: "downloadinfo",
  				value: "string="
  			},
  			{
  				name: "free",
  				value: "string"
  			},
  			{
  				name: "slog",
  				value: "string="
  			},
  			{
  				name: "query",
  				value: "string="
  			},
  			{
  				name: "from",
  				value: "string"
  			},
  			{
  				name: "cid",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "5.0"
  			},
  			lite: {
  				search: "2.3.0.0",
  				light: "2.3.0.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "operations.showBuoy",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/showBuoy",
  		authority: "operations",
  		args: [
  			{
  				name: "clock",
  				value: "number="
  			},
  			{
  				name: "clockWord",
  				value: "string="
  			},
  			{
  				name: "clockControl",
  				value: "number="
  			},
  			{
  				name: "ubc",
  				value: {
  					type: {
  						activeID: "string",
  						from: "string"
  					},
  					isRequired: true
  				}
  			},
  			{
  				name: "identify",
  				value: "string"
  			},
  			{
  				name: "close",
  				value: "number="
  			},
  			{
  				name: "scheme",
  				value: "string="
  			},
  			{
  				name: "position",
  				value: "number="
  			},
  			{
  				name: "topOffset",
  				value: "number="
  			},
  			{
  				name: "nightColor",
  				value: "string="
  			},
  			{
  				name: "color",
  				value: "string="
  			},
  			{
  				name: "word",
  				value: "string="
  			},
  			{
  				name: "imageUrl",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "8.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "operations.buoyAction",
  		path: "/buoyAction",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "operations",
  		invoke: "method.bdboxURL",
  		scheme: "baiduboxapp",
  		args: [
  			{
  				name: "identify",
  				value: "string"
  			},
  			{
  				name: "actionType",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "11.11.0.1"
  			}
  		}
  	},
  	{
  		name: "operations.getBuoyStatus",
  		path: "/getBuoyStatus",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "operations",
  		invoke: "method.bdboxURL",
  		scheme: "baiduboxapp",
  		args: [
  			{
  				name: "identify",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "11.13.0.0"
  			}
  		}
  	},
  	{
  		name: "praise.cancel",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v42",
  		path: "/praise/cancelPraise",
  		args: [
  			{
  				name: "source",
  				value: "string"
  			},
  			{
  				name: "id",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "11.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "praise.isAnimationAvailable",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v25",
  		path: "/praise/praiseAvailable",
  		args: [
  			{
  				name: "source",
  				value: "string"
  			},
  			{
  				name: "ubc",
  				value: {
  					type: {
  						source: "string=",
  						nid: "string="
  					}
  				}
  			}
  		],
  		env: {
  			main: {
  				light: "10.6.5.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "praise.motionEvent",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v25",
  		path: "/praise/motionEvent",
  		args: [
  			{
  				name: "source",
  				value: "string"
  			},
  			{
  				name: "id",
  				value: "string"
  			},
  			{
  				name: "intercept",
  				value: "string"
  			},
  			{
  				name: "ubc",
  				value: "Object"
  			},
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "position",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "10.6.5"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "RN.openHNPage",
  		args: [
  			{
  				name: "bundleId",
  				value: "string"
  			},
  			{
  				name: "moduleName",
  				value: "string"
  			},
  			{
  				name: "initialParams",
  				value: "Object"
  			},
  			{
  				name: "backupURL",
  				value: "string="
  			},
  			{
  				name: "minAPSVer",
  				value: "string"
  			},
  			{
  				name: "inputMode",
  				value: "number"
  			}
  		],
  		path: "/invokeHNPage",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "utils",
  		invoke: "method.bdboxURL",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "10.3.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "search.invokeSearchBarMaskView",
  		path: "/invokeSearchBarMaskView",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "searchframe",
  		invoke: "method.bdboxURL",
  		args: [
  			{
  				name: "maskAlpah",
  				value: "string="
  			},
  			{
  				name: "animateDuration",
  				value: "string="
  			},
  			{
  				name: "clickMaskCallback",
  				value: "string="
  			},
  			{
  				name: "type：add",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "11.25.0.0"
  			}
  		}
  	},
  	{
  		name: "search.showMobileNetPushVideoSettingPageToast",
  		args: [
  			{
  				name: "pageId",
  				value: "string"
  			},
  			{
  				name: "bussiness",
  				value: "string"
  			}
  		],
  		path: "/showMobileNetPushVideoSettingPageToast",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "searchframe",
  		invoke: "method.bdboxURL",
  		env: {
  			main: {
  				light: "12.3.0.0"
  			}
  		}
  	},
  	{
  		name: "search.getMobileNetVideoAutoplaySwitchType",
  		args: [
  		],
  		path: "/getMobileNetVideoAutoplaySwitchType",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "searchVideo",
  		invoke: "method.bdboxURL",
  		env: {
  			main: {
  				light: "12.3.0.0"
  			}
  		}
  	},
  	{
  		name: "search.videoPrefetch",
  		path: "/videoPrefetch",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "search",
  		invoke: "method.bdboxURL",
  		args: [
  			{
  				name: "action",
  				value: "number"
  			},
  			{
  				name: "data",
  				value: "Array"
  			}
  		],
  		config: "配置项， 定义端能力所属框架，invoke需在config中配置。",
  		env: {
  			main: {
  				light: "11.7.0.0"
  			},
  			lite: {
  				search: "4.17.0.0",
  				light: "4.17.0.0"
  			}
  		}
  	},
  	{
  		name: "search.getSummary",
  		args: [
  			{
  				name: "loadingpageurl",
  				value: "string",
  				comment: "对应的落地页url"
  			},
  			{
  				name: "type",
  				value: "number",
  				comment: "type 1：只锚点 2：只高亮 3：锚点和高亮"
  			},
  			{
  				name: "keyword",
  				value: "string",
  				comment: "高亮文本"
  			}
  		],
  		path: "/getSummary",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "searchframe",
  		invoke: "method.bdboxURL",
  		action: "getSummary",
  		env: {
  			main: {
  				light: "12.4"
  			}
  		}
  	},
  	{
  		name: "search.setQuery",
  		invoke: "method.args-json",
  		path: "/setQuery",
  		method: "Bdbox_android_common.setQuery",
  		args: [
  			{
  				name: "type",
  				value: "string",
  				comment: "类型"
  			},
  			{
  				name: "history",
  				value: "boolean",
  				comment: "入历史"
  			},
  			{
  				name: "query",
  				value: "string",
  				comment: "上框搜索词"
  			}
  		],
  		env: {
  			main: {
  				search: "5.5"
  			},
  			lite: {
  				search: "1.1"
  			}
  		},
  		query: {
  			minver: "5.5.0.0"
  		},
  		config: "配置项， 定义端能力所属框架，invoke需在config中配置。"
  	},
  	{
  		name: "search.changeNATab",
  		invoke: "method.bdboxURL",
  		path: "/jumpToTab",
  		authority: "searchframe",
  		method: "Bdbox_android_jsbridge.dispatch",
  		action: "jumpToTab",
  		args: [
  			{
  				name: "seClickID",
  				value: "string=",
  				comment: "串联打点的id"
  			},
  			{
  				name: "total",
  				value: "string=",
  				comment: "打点日志相关参数 详见（打点功能：jumpToTab端能力跳转六合tab）"
  			},
  			{
  				name: "word",
  				value: "string",
  				comment: "用户判断是否是同query 不同query切新页面 需base64解码"
  			},
  			{
  				name: "extra",
  				value: "string",
  				comment: "打开页面需要拼接的字符串参数"
  			},
  			{
  				name: "url",
  				value: "string",
  				comment: "打开页面的url"
  			},
  			{
  				name: "pd",
  				value: "string",
  				comment: "需要打开的垂搜栏目关键字"
  			}
  		],
  		env: {
  			main: {
  				search: "11.13.0.0"
  			},
  			lite: {
  				search: "4.13.0.0"
  			}
  		}
  	},
  	{
  		name: "search.invokeSearch",
  		invoke: "method.url",
  		authority: "v1",
  		method: "Bdbox_android_jsbridge.dispatch",
  		action: "search",
  		path: "/browser/search",
  		args: [
  			{
  				name: "sa",
  				value: "string=",
  				comment: "搜索来源，Android单端"
  			},
  			{
  				name: "stay",
  				value: "string=",
  				comment: "退出搜索是否停留在手百，Android单端"
  			},
  			{
  				name: "source",
  				value: "string=",
  				comment: "双端：调起方来源，iOS目前只有'spotlight'"
  			},
  			{
  				name: "from",
  				value: "string=",
  				comment: "是否是talos调起，iOS未使用"
  			},
  			{
  				name: "next",
  				value: "string=",
  				comment: "下个scheme，iOS未使用"
  			},
  			{
  				name: "config",
  				value: "string=",
  				comment: "配置参数，iOS未使用"
  			},
  			{
  				name: "fromwise",
  				value: "string=",
  				comment: "是否来自wise，iOS未使用"
  			},
  			{
  				name: "launchMode",
  				value: "string=",
  				comment: "调起模式，Android单端"
  			},
  			{
  				name: "query",
  				value: "string",
  				comment: "搜索词"
  			},
  			{
  				name: "simple",
  				value: "string=",
  				comment: "是否简版浏览框架"
  			},
  			{
  				name: "append",
  				value: "string=",
  				comment: "是否加公参"
  			},
  			{
  				name: "newwindow",
  				value: "string=",
  				comment: "新窗口"
  			}
  		],
  		env: {
  			main: {
  				light: "0.0.0.0"
  			},
  			lite: {
  				search: "2.2.0.0",
  				light: "2.2.0.0"
  			}
  		}
  	},
  	{
  		name: "search.open",
  		invoke: "method.url",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/open",
  		authority: "browser",
  		action: "open",
  		args: [
  			{
  				name: "tplId",
  				value: "string=",
  				comment: "历史模板"
  			},
  			{
  				name: "logargs",
  				value: "Object=",
  				comment: ""
  			},
  			{
  				name: "loftSearchType",
  				value: "string=",
  				comment: "负一楼业务方类型"
  			},
  			{
  				name: "loftSearchUrl",
  				value: "string=",
  				comment: "负一楼url"
  			},
  			{
  				name: "loftSearchContainerState",
  				value: "string=",
  				comment: "负一楼webview状态"
  			},
  			{
  				name: "privateTips",
  				value: "string=",
  				comment: "搜索框架隐私模式，首次进入在底bar弹出文案提示"
  			},
  			{
  				name: "stay",
  				value: "string=",
  				comment: "Android单端：退出搜索框架是否返回首页"
  			},
  			{
  				name: "noHistory",
  				value: "string=",
  				comment: "0|1,表示当前端能力打开的页面是否要进入历史记录。默认是0，表示正常记录历史，1表示不进入历史。"
  			},
  			{
  				name: "openParallelLoad",
  				value: "string=",
  				comment: "iOS单端：是否开启并行化加载"
  			},
  			{
  				name: "from",
  				value: "string=",
  				comment: "Android单端：是否是talos调起"
  			},
  			{
  				name: "sfUrl",
  				value: "string=",
  				comment: "Android单端：sf调用的Url"
  			},
  			{
  				name: "launchMode",
  				value: "string=",
  				comment: "Android单端：调起模式"
  			},
  			{
  				name: "isBee",
  				value: "string=",
  				comment: "Android单端：Feed hybird落地页内打开搜索bee框架标志 11.17添加"
  			},
  			{
  				name: "next",
  				value: "string=",
  				comment: "下个scheme"
  			},
  			{
  				name: "fromwise",
  				value: "string=",
  				comment: "是否来自wise"
  			},
  			{
  				name: "isCollect",
  				value: "number=",
  				comment: ""
  			},
  			{
  				name: "isHistory",
  				value: "number=",
  				comment: ""
  			},
  			{
  				name: "logUrl",
  				value: "string=",
  				comment: "Android单端：V11.13版本新增打点日志的url\nAndroid该参数废弃，非必填"
  			},
  			{
  				name: "url",
  				value: "string",
  				comment: "V8.2.0.0版本新增, url"
  			},
  			{
  				name: "append",
  				value: "string=",
  				comment: "V8.2.0.0版本新增, 是否加公参。'0':默认不加。"
  			},
  			{
  				name: "newwindow",
  				value: "string=",
  				comment: "V8.2.0.0版本新增, 是否从新窗口打开。 '0':默认从当前窗口打开"
  			},
  			{
  				name: "simple",
  				value: "string=",
  				comment: "V8.2.0.0版本新增, 是否简版搜索浏览框架。'0':默认打开主浏览框架。"
  			},
  			{
  				name: "origin",
  				value: "string=",
  				comment: "V10.13.0.0版本新增, url的origin信息，端走同步跳转时，用origin拼接url去跳转（可选）"
  			},
  			{
  				name: "animation",
  				value: "string=",
  				comment: "V10.13.0.0版本新增, 入场动画类型（可选）\nAndroid该参数废弃"
  			},
  			{
  				name: "extra",
  				value: "string=",
  				comment: "Android单端：V10.13.0.0版本新增, H5需要的扩展参数（可选）（用于透传）"
  			},
  			{
  				name: "isContainer",
  				value: "string=",
  				comment: "V10.13.0.0版本新增, 判断是否是新容器打开（可选）。'0' 不是，'1' 是新容器打开。"
  			},
  			{
  				name: "config",
  				value: "string=",
  				comment: "配置参数，包含参数： immersed 、hideBack、feedbackUrl、background"
  			},
  			{
  				name: "canAsync",
  				value: "string=",
  				comment: "是否可以异步。0 不可以异步，走同步加载，\n\n1 可以异步，端上按需异步加载"
  			}
  		],
  		env: {
  			main: {
  				light: "8.2.0.0"
  			},
  			lite: {
  				search: "1.3.0.0",
  				light: "1.3.0.0"
  			}
  		}
  	},
  	{
  		name: "search.getSSession",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/getSSession",
  		authority: "browser",
  		args: [
  		],
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "12.16.0.0"
  			}
  		}
  	},
  	{
  		name: "search.invokePoiLandingPage",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/invokePoiLandingPage",
  		authority: "browser",
  		args: [
  			{
  				name: "_tplExt",
  				value: "Object=",
  				comment: "11.23新增，模版扩展参数，透传到1013统计"
  			},
  			{
  				name: "prefetch",
  				value: "Object=",
  				comment: "预取"
  			},
  			{
  				name: "query",
  				value: "string",
  				comment: "检索关键词"
  			},
  			{
  				name: "nwd",
  				value: "string",
  				comment: "检索地图接口数据和请求gss"
  			},
  			{
  				name: "title",
  				value: "string",
  				comment: "POI页面的标题"
  			},
  			{
  				name: "poiType",
  				value: "string=",
  				comment: "POI类型"
  			},
  			{
  				name: "pageType",
  				value: "number",
  				comment: "1：单点，2：多点"
  			},
  			{
  				name: "url",
  				value: "string",
  				comment: "如果不进入地图NA页，从结果页进入地图h5页面的url"
  			},
  			{
  				name: "ext",
  				value: {
  					type: {
  						clickTime: "string=",
  						address: "string",
  						userCityCode: "string",
  						userLoc: "string=",
  						loc: "string=",
  						cityName: "string",
  						cityCode: "string"
  					},
  					isRequired: true
  				},
  				comment: "位置信息"
  			},
  			{
  				name: "ubs",
  				value: {
  					type: {
  						srcid: "string=",
  						qid: "string=",
  						tempName: "string=",
  						sid: "string="
  					},
  					isRequired: true
  				},
  				comment: "打点相关字段"
  			}
  		],
  		env: {
  			main: {
  				search: "11.10.0.0"
  			}
  		}
  	},
  	{
  		name: "search.onShowDialogOrToast",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/onShowDialogOrToast",
  		authority: "searchframe",
  		action: "onShowDialogOrToast",
  		args: [
  			{
  				name: "position",
  				value: "Array"
  			},
  			{
  				name: "isShow",
  				value: "number"
  			}
  		],
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "11.23.0.0"
  			}
  		}
  	},
  	{
  		name: "scheme.priorityDispatcher",
  		path: "/priorityDispatcher",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "dispatcher",
  		invoke: "method.bdboxURL",
  		scheme: "baiduboxapp",
  		args: [
  			{
  				name: "schemes",
  				value: "Object"
  			},
  			{
  				name: "meta",
  				value: "Object="
  			}
  		],
  		env: {
  			main: {
  				light: "10.12.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "scheme.command",
  		invoke: "method.args-json",
  		method: "Bdbox_android_utils.command",
  		args: [
  			{
  				name: "intent",
  				value: "string"
  			},
  			{
  				name: "class",
  				value: "string="
  			},
  			{
  				name: "min_v",
  				value: "string="
  			},
  			{
  				name: "mode",
  				value: "string"
  			},
  			{
  				name: "ubc",
  				value: "string="
  			},
  			{
  				name: "dyna_url_key",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "5.3.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "swan.open",
  		args: [
  			{
  				name: "appKey",
  				value: "string"
  			},
  			{
  				name: "path",
  				value: "string="
  			},
  			{
  				name: "query",
  				value: "Object="
  			},
  			{
  				name: "_baiduboxapp",
  				value: {
  					type: {
  						ext: "Object=",
  						srcAppPage: "string=",
  						extraData: "Object=",
  						navi: "string=",
  						ubc: "Object=",
  						notinhis: "string=",
  						backwardURL: "string=",
  						from: "string=",
  						srcAppId: "string="
  					}
  				}
  			},
  			{
  				name: "abtest",
  				value: "string="
  			},
  			{
  				name: "oauthType",
  				value: "string="
  			}
  		],
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "swan",
  		invoke: "method.openSwan",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "10.9.5"
  			},
  			lite: {
  				search: "4.4.0.0",
  				light: "4.4.0.0"
  			},
  			mission: {
  				search: "2.4.0.0",
  				light: "2.4.0.0"
  			}
  		}
  	},
  	{
  		name: "system.queryScheme",
  		invoke: "method.bdboxURL",
  		authority: "v16",
  		path: "/utils/queryScheme",
  		method: "Bdbox_android_jsbridge.dispatch",
  		args: [
  			{
  				name: "pkg",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "10.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "system.getNightMode",
  		scheme: "baiduboxapp",
  		invoke: "method.url",
  		authority: "v16",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/theme/getNightMode",
  		env: {
  			main: {
  				light: "10.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "system.getAppDuration",
  		args: [
  		],
  		path: "/getAppDuration",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "utils",
  		invoke: "method.bdboxURL",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "10.3.0.0"
  			}
  		}
  	},
  	{
  		name: "system.getClipboardData",
  		path: "/getClipboardData",
  		authority: "utils",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		action: "getClipboardData",
  		args: [
  		],
  		env: {
  			main: {
  				light: "10.3.0.0"
  			}
  		}
  	},
  	{
  		name: "system.setClipboardData",
  		args: [
  			{
  				name: "data",
  				value: "string"
  			}
  		],
  		path: "/setClipboardData",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "utils",
  		invoke: "method.bdboxURL",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "10.3.0.0"
  			}
  		}
  	},
  	{
  		name: "ubc.duration.appear",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v4",
  		path: "/ubc/duration/appear",
  		args: [
  			{
  				name: "key",
  				value: "string"
  			},
  			{
  				name: "options",
  				value: "Object="
  			}
  		],
  		env: {
  			main: {
  				light: "8.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "ubc.duration.disappear",
  		invoke: "method.bdboxURL",
  		method: "Bdbox_android_jsbridge.dispatch",
  		authority: "v4",
  		path: "/ubc/duration/disappear",
  		args: [
  			{
  				name: "key",
  				value: "string"
  			},
  			{
  				name: "options",
  				value: "object="
  			}
  		],
  		env: {
  			main: {
  				light: "8.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "userCenter.feedback",
  		invoke: "method.bdboxURL",
  		authority: "v9",
  		method: "Bdbox_android_jsbridge.dispatch",
  		path: "/ucenter/feedback",
  		env: {
  			main: {
  				light: "10.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	}
  ];
  var ios = [
  	{
  		name: "ABTest.getSidList",
  		invoke: "iframe.bdboxURL",
  		authority: "utils",
  		query: {
  			action: "getABTestSidList",
  			minver: "7.3.0"
  		},
  		callbackName: "func",
  		env: {
  			main: {
  				light: "7.3.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "ABTest.getInfo",
  		invoke: "iframe.bdboxURL",
  		authority: "utils",
  		callbackName: "func",
  		scheme: "baiduboxapp",
  		args: [
  		],
  		query: {
  			action: "getABTestInfo"
  		},
  		env: {
  			main: {
  				search: "8.6.0.0",
  				light: "8.6.0.0"
  			}
  		}
  	},
  	{
  		name: "account.login",
  		invoke: "iframe.bdboxURL",
  		authority: "v26",
  		path: "/account/login",
  		args: [
  			{
  				name: "loginType",
  				value: "string"
  			},
  			{
  				name: "showThirdLogin",
  				value: "string"
  			},
  			{
  				name: "loginSource",
  				value: "string"
  			},
  			{
  				name: "ext",
  				value: "string="
  			},
  			{
  				name: "customCSS",
  				value: "string="
  			},
  			{
  				name: "normalizeAccount",
  				value: "string"
  			},
  			{
  				name: "normalizeTitle",
  				value: "string="
  			},
  			{
  				name: "normalizeSubTitle",
  				value: "string="
  			},
  			{
  				name: "loginSubSource",
  				value: "string="
  			}
  		],
  		nextCallback: "loginCallback",
  		env: {
  			main: {
  				light: "10.7.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "account.getZid",
  		invoke: "iframe.bdboxURL",
  		scheme: "baiduboxapp",
  		authority: "v14",
  		path: "/account/getZid",
  		args: [
  			{
  				name: "v",
  				value: "number"
  			},
  			{
  				name: "jsParams",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "9.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "account.getPhoneNumArgs",
  		invoke: "iframe.bdboxURL",
  		path: "/getPhoneNumArgs",
  		args: [
  		],
  		authority: "account",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "11.24.0.0"
  			}
  		}
  	},
  	{
  		name: "account.launchLoginComponent",
  		invoke: "iframe.bdboxURL",
  		path: "/launchLoginComponent",
  		args: [
  			{
  				comment: "是否支持游客（0：不支持；1：支持）",
  				name: "supportGuest",
  				value: "number="
  			},
  			{
  				comment: "登录按钮文案",
  				name: "buttonText",
  				value: "string="
  			},
  			{
  				comment: "登录来源",
  				name: "src",
  				value: "string"
  			},
  			{
  				comment: "弹窗业务对应的云控节点，用于控制半屏引导弹窗频次。不传代表不控制频次",
  				name: "cloudControlName",
  				value: "string="
  			},
  			{
  				comment: "弹窗实验，用于控制半屏弹窗实验。不传代表不需要实验",
  				name: "abTestName",
  				value: "string="
  			},
  			{
  				comment: "主标题",
  				name: "title",
  				value: "string="
  			},
  			{
  				comment: "登录组件类型",
  				name: "type",
  				value: "string"
  			}
  		],
  		authority: "account",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "11.25.0.0"
  			}
  		}
  	},
  	{
  		name: "account.openPassPage",
  		invoke: "iframe.bdboxURL",
  		path: "/openPassPage",
  		authority: "account",
  		scheme: "baiduboxapp",
  		args: [
  			{
  				comment: "accountCancel:账号注销；accountManage:账号管理；accountAppeal:账号申诉",
  				name: "page",
  				value: "string"
  			},
  			{
  				comment: "登录来源/调起pass页面的来源;\n帮助与反馈页面：personal_accountmanage",
  				name: "source",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "11.26.0.0"
  			}
  		}
  	},
  	{
  		name: "album.image.open",
  		invoke: "iframe.bdboxURL",
  		authority: "utils",
  		query: {
  			action: "image"
  		},
  		args: [
  			{
  				name: "barHeight",
  				value: "string="
  			},
  			{
  				name: "position",
  				value: "Object="
  			},
  			{
  				name: "images",
  				value: {
  					arrayOf: {
  						url: "string",
  						origin_url: "string=",
  						origin_size: "string="
  					}
  				}
  			},
  			{
  				name: "url",
  				value: {
  					arrayOf: "string"
  				}
  			},
  			{
  				name: "index",
  				value: "*="
  			},
  			{
  				name: "source",
  				value: "string="
  			},
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "from",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "7.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "album.image.preview",
  		invoke: "iframe.bdboxURL",
  		path: "/previewImage",
  		authority: "utils",
  		args: [
  			{
  				name: "from",
  				value: "string="
  			},
  			{
  				name: "current",
  				value: "string="
  			},
  			{
  				name: "images",
  				value: {
  					arrayOf: "Object="
  				}
  			},
  			{
  				name: "urls",
  				value: {
  					arrayOf: "string"
  				}
  			},
  			{
  				name: "ext",
  				value: "string="
  			},
  			{
  				name: "slog",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "10.3"
  			}
  		}
  	},
  	{
  		name: "app.feedback",
  		invoke: "iframe.bdboxURL",
  		path: "/utils/feedback",
  		authority: "v16",
  		args: [
  			{
  				name: "type",
  				value: "string="
  			},
  			{
  				name: "info",
  				value: "Object="
  			},
  			{
  				name: "extras",
  				value: "Object="
  			},
  			{
  				name: "to_page",
  				value: "string="
  			},
  			{
  				name: "channel",
  				value: "string="
  			},
  			{
  				name: "refer",
  				value: "string="
  			},
  			{
  				name: "source",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "10.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "app.selectTab",
  		invoke: "iframe.url",
  		scheme: "baiduboxapp",
  		authority: "v11",
  		path: "/appTab/select",
  		args: [
  			{
  				name: "item",
  				value: "string"
  			},
  			{
  				name: "params",
  				value: "Object="
  			}
  		],
  		env: {
  			main: {
  				light: "9.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "auth.init",
  		authority: "16",
  		path: "/public/thirdPart/config",
  		invoke: "iframe.bdboxURL",
  		args: [
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "ext",
  				value: "Object="
  			},
  			{
  				name: "schemeList",
  				value: "Array"
  			}
  		],
  		env: {
  			main: {
  				light: "10.0.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "comic.openReader",
  		invoke: "iframe.bdboxURL",
  		authority: "v5",
  		path: "/comic/openreader",
  		args: [
  			{
  				name: "chapter",
  				value: {
  					type: {
  						ctsrc: "string",
  						title: "string",
  						pic_sum: "string",
  						index: "string",
  						cid: "string",
  						cur_pic: "string",
  						cp_chapter_id: "string"
  					},
  					isRequired: true
  				}
  			},
  			{
  				name: "comic",
  				value: {
  					type: {
  						id: "string",
  						name: "string",
  						coverImg: "string",
  						updateChapter: "string",
  						tags: {
  							arrayOf: "string"
  						},
  						author: "string",
  						lastTime: "string",
  						save_content: "string"
  					},
  					isRequired: true
  				}
  			},
  			{
  				name: "slog",
  				value: {
  					type: {
  						type: "string",
  						page: "string",
  						from: "string",
  						ext: {
  							type: {
  								cid: "string"
  							},
  							isRequired: true
  						},
  						source: "string"
  					},
  					isRequired: true
  				}
  			}
  		],
  		env: {
  			main: {
  				light: "8.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "comment.getContextInfo",
  		path: "/comment/context",
  		invoke: "iframe.bdboxURL",
  		authority: "v12",
  		args: [
  			{
  				name: "event_callback",
  				value: "function="
  			}
  		],
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "9.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "comment.operate",
  		path: "/operate",
  		invoke: "iframe.bdboxURL",
  		args: [
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "content",
  				value: "Object="
  			}
  		],
  		authority: "comment",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "9.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "comment.showBox",
  		invoke: "iframe.bdboxURL",
  		path: "/showbox",
  		authority: "comment",
  		args: [
  			{
  				name: "event_callback",
  				value: "string=",
  				comment: "评论发布回调"
  			},
  			{
  				name: "mcExt",
  				value: "string=",
  				comment: ""
  			},
  			{
  				name: "type",
  				value: "number",
  				comment: "为0表示发表评论；\n为1表示回复评论"
  			},
  			{
  				name: "topic_id",
  				value: "string",
  				comment: "发表/回复评论所需要的主题id"
  			},
  			{
  				name: "parent_id",
  				value: "string",
  				comment: "被回复的评论id；\n回复评论时需要;\n\niOS端以parent_id是否有值，来决定是不是回复评论；"
  			},
  			{
  				name: "rename",
  				value: "string",
  				comment: "被回复的评论的发布者用户名\n回复评论时需要;\n\n仅发表评论时使用"
  			},
  			{
  				name: "placeholder",
  				value: "string",
  				comment: "默认提示文案，显示在回复框中的文案，rename存在是无效；\n主要用户发表评论；"
  			},
  			{
  				name: "logid",
  				value: "string",
  				comment: "打点上报使用;\n评论发布框只做透传；"
  			},
  			{
  				name: "source",
  				value: "string",
  				comment: "打点上报使用, 表示资源类型 ：如feednews、star等;\n评论发布框只做透传；\niOS端从 9.0版本开始支持；\n安卓端暂不支持；"
  			},
  			{
  				name: "page",
  				value: "string",
  				comment: "打点上报使用，表示当前页面类型；\n评论发布框只做透传；\niOS端从 V9.0版本开始支持；\n安卓端暂不支持；"
  			}
  		],
  		env: {
  			main: {
  				light: "8.3.0.0"
  			}
  		}
  	},
  	{
  		name: "comment.detail",
  		invoke: "iframe.bdboxURL",
  		path: "/detail",
  		authority: "comment",
  		args: [
  			{
  				name: "anchor_reply_id",
  				value: "string=",
  				comment: "锚点id，定位到某条评论"
  			},
  			{
  				name: "is_show_soft_input",
  				value: "string=",
  				comment: "是否打开评论框"
  			},
  			{
  				name: "topic_id",
  				value: "string",
  				comment: "文章的评论id（必传）"
  			},
  			{
  				name: "reply_id",
  				value: "string",
  				comment: "评论详情id（必传）"
  			},
  			{
  				name: "topic_title",
  				value: "string",
  				comment: "文章title（必传），分享使用"
  			},
  			{
  				name: "iconurl",
  				value: "string",
  				comment: "文章icon（必传），分享使用"
  			},
  			{
  				name: "logid",
  				value: "string",
  				comment: "logid"
  			},
  			{
  				name: "nid",
  				value: "string",
  				comment: "文章id"
  			},
  			{
  				name: "source",
  				value: "string",
  				comment: "来源（（个人主页: homepage ,评论消息:push_comment,点赞消息: push_praise）"
  			}
  		],
  		env: {
  			main: {
  				light: "11.0.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.showToast",
  		path: "/showToast",
  		invoke: "iframe.bdboxURL",
  		args: [
  			{
  				name: "message",
  				value: "string"
  			},
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "clickCallback",
  				value: "function="
  			},
  			{
  				name: "time",
  				value: "string="
  			},
  			{
  				name: "modal",
  				value: "string="
  			},
  			{
  				name: "autoDismiss",
  				value: "string="
  			},
  			{
  				name: "tapDismiss",
  				value: "string="
  			},
  			{
  				name: "offsetX",
  				value: "string="
  			},
  			{
  				name: "offsetY",
  				value: "string="
  			},
  			{
  				name: "loading",
  				value: "string="
  			},
  			{
  				name: "closeButton",
  				value: "string="
  			},
  			{
  				name: "image",
  				value: "string="
  			},
  			{
  				name: "style",
  				value: "string="
  			},
  			{
  				name: "buttonText",
  				value: "string="
  			},
  			{
  				name: "title",
  				value: "string="
  			},
  			{
  				name: "icon",
  				value: "string="
  			},
  			{
  				name: "bottomShowAnimationType",
  				value: "string="
  			},
  			{
  				name: "bottomIconStyle",
  				value: "string="
  			}
  		],
  		authority: "utils",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "9.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.showToastOld",
  		invoke: "iframe.url",
  		authority: "utils",
  		scheme: "baiduboxapp",
  		args: [
  			{
  				name: "string",
  				value: "string="
  			}
  		],
  		query: {
  			action: "toast",
  			minver: "6.0"
  		},
  		env: {
  			main: {
  				light: "6.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.openRedPacket",
  		invoke: "iframe.bdboxURL",
  		authority: "v17",
  		path: "/redPacket/getRedPacket",
  		args: [
  			{
  				name: "portrait",
  				value: "string"
  			},
  			{
  				name: "name",
  				value: "string"
  			},
  			{
  				name: "title",
  				value: "string"
  			},
  			{
  				name: "content",
  				value: "string="
  			},
  			{
  				name: "id",
  				value: "string"
  			},
  			{
  				name: "ext",
  				value: "string"
  			},
  			{
  				name: "from",
  				value: "string="
  			},
  			{
  				name: "needUbc",
  				value: "boolean="
  			}
  		],
  		env: {
  			main: {
  				light: "10.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.closeLoading",
  		invoke: "iframe.bdboxURL",
  		authority: "speedProgressCompleted",
  		query: {
  			minver: "5.1.0.0"
  		},
  		env: {
  			main: {
  				light: "5.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.getSuspensionBallToastStatus",
  		path: "/getSuspensionBallToastStatus",
  		invoke: "iframe.bdboxURL",
  		args: [
  		],
  		authority: "suspensionBall",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "11.11.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.hideLoading",
  		path: "/hideLoading",
  		invoke: "iframe.bdboxURL",
  		authority: "utils",
  		scheme: "baiduboxapp",
  		args: [
  		],
  		env: {
  			main: {
  				light: "10.3.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.openPicker",
  		invoke: "iframe.bdboxURL",
  		path: "/openPicker",
  		authority: "utils",
  		args: [
  			{
  				name: "array",
  				value: {
  					arrayOf: "string"
  				}
  			},
  			{
  				name: "current",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				search: "10.5"
  			}
  		}
  	},
  	{
  		name: "device.getDeviceInfo",
  		scheme: "baiduboxapp",
  		invoke: "iframe.bdboxURL",
  		authority: "utils",
  		query: {
  			action: "getDeviceInfo",
  			minver: "7.3"
  		},
  		args: [
  			{
  				name: "keys",
  				value: "Array"
  			}
  		],
  		callbackName: "func",
  		env: {
  			main: {
  				light: "7.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "device.getCUID",
  		invoke: "iframe.bdboxURL",
  		authority: "utils",
  		callbackName: "func",
  		query: {
  			action: "getcuid",
  			minver: "6.1.0.0"
  		},
  		env: {
  			main: {
  				light: "6.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "device.getNetworkType",
  		invoke: "iframe.bdboxURL",
  		authority: "v19",
  		path: "/utils/getNetworkType",
  		env: {
  			main: {
  				light: "10.3.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		scheme: "baiduboxapp",
  		name: "device.getCurrentLocation",
  		invoke: "iframe.bdboxURL",
  		authority: "utils",
  		query: {
  			action: "getCurrentLocation",
  			minver: "6.0.0.0"
  		},
  		callbackName: "func",
  		env: {
  			main: {
  				light: "6.0.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "device.getIDFA",
  		invoke: "iframe.bdboxURL",
  		authority: "v11",
  		path: "/utils/getIdfa",
  		env: {
  			main: {
  				light: "9.1.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "device.getGlobalSettings",
  		scheme: "baiduboxapp",
  		invoke: "iframe.bdboxURL",
  		authority: "utils",
  		query: {
  			action: "getGlobalSettings",
  			minver: ""
  		},
  		env: {
  			main: {
  				light: "8.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		},
  		callbackName: "func"
  	},
  	{
  		name: "device.getLocation",
  		path: "/getLocation",
  		invoke: "iframe.bdboxURL",
  		authority: "location",
  		scheme: "baiduboxapp",
  		args: [
  		],
  		env: {
  			main: {
  				light: "10.3.6.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.getThirdPartyPageInfo",
  		invoke: "iframe.bdboxURL",
  		authority: "v34",
  		path: "/easybrowse/thirdPartyPageInfo",
  		args: [
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "info",
  				value: "Object"
  			}
  		],
  		env: {
  			main: {
  				light: "10.13"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.showMenu",
  		scheme: "baiduboxapp",
  		invoke: "iframe.bdboxURL",
  		authority: "v9",
  		path: "/easybrowse/showmenu",
  		args: [
  			{
  				name: "menuItem",
  				value: "Object="
  			}
  		],
  		env: {
  			main: {
  				light: "9.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.imageCache",
  		invoke: "iframe.bdboxURL",
  		path: "/imageCache",
  		authority: "net",
  		args: [
  			{
  				name: "urls",
  				value: {
  					arrayOf: "string"
  				}
  			}
  		],
  		env: {
  			main: {
  				light: "10.8"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.open",
  		invoke: "iframe.url",
  		scheme: "baiduboxapp",
  		authority: "v1",
  		path: "/easybrowse/open",
  		query: {
  			upgrade: 0,
  			oauthType: "feed"
  		},
  		args: [
  			{
  				name: "url",
  				value: "string"
  			},
  			{
  				name: "type",
  				value: "string="
  			},
  			{
  				name: "append",
  				value: "string="
  			},
  			{
  				name: "context",
  				value: "Object="
  			},
  			{
  				name: "style",
  				value: "Object="
  			},
  			{
  				name: "newbrowser",
  				value: "string="
  			},
  			{
  				name: "forbidautorotate",
  				value: "string="
  			},
  			{
  				name: "fullscreen",
  				value: "string="
  			},
  			{
  				name: "slog",
  				value: "Object="
  			},
  			{
  				name: "videoinfo",
  				value: "string="
  			},
  			{
  				name: "jssids",
  				value: "string="
  			},
  			{
  				name: "launchlogin",
  				value: "string="
  			},
  			{
  				name: "stay",
  				value: "string="
  			},
  			{
  				name: "next",
  				value: "string="
  			},
  			{
  				name: "commentInfo",
  				value: "Object="
  			},
  			{
  				name: "pagefrom",
  				value: "string="
  			},
  			{
  				name: "isSearchVideo",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "7.3",
  				imagesearch: "12.20"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.showNetworkError",
  		invoke: "iframe.bdboxURL",
  		authority: "net",
  		query: {
  			action: "showNetWorkErrorView"
  		},
  		args: [
  			{
  				name: "type",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "8.2.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		},
  		callbackName: "func"
  	},
  	{
  		name: "easyBrowser.webStorage",
  		invoke: "iframe.bdboxURL",
  		authority: "utils",
  		args: [
  			{
  				name: "key",
  				value: "string"
  			},
  			{
  				name: "data",
  				value: "string="
  			},
  			{
  				name: "action",
  				value: "string"
  			}
  		],
  		query: {
  			action: "webStorage",
  			minver: "7.3"
  		},
  		callbackName: "func",
  		env: {
  			main: {
  				light: "7.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.request",
  		invoke: "iframe.bdboxURL",
  		authority: "net",
  		args: [
  			{
  				name: "header",
  				value: "Object="
  			},
  			{
  				name: "pu",
  				value: "string"
  			},
  			{
  				name: "method",
  				value: "string"
  			},
  			{
  				name: "data",
  				value: "Object="
  			},
  			{
  				name: "url",
  				value: "string"
  			}
  		],
  		query: {
  			action: "request",
  			minver: "7.3"
  		},
  		callbackName: "func",
  		env: {
  			main: {
  				light: "7.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.universalOperation",
  		invoke: "iframe.bdboxURL",
  		authority: "v46",
  		path: "/easybrowse/universalOperation",
  		args: [
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "data",
  				value: "Object"
  			}
  		],
  		query: {
  			oauthType: "feed"
  		},
  		env: {
  			main: {
  				light: "11.8"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.injectJS",
  		invoke: "iframe.bdboxURL",
  		authority: "feed",
  		query: {
  			action: "injectJS",
  			minver: "6.3"
  		},
  		args: [
  			{
  				name: "name",
  				value: "string"
  			},
  			{
  				name: "files",
  				value: "string[]"
  			}
  		],
  		callbackName: "func",
  		env: {
  			main: {
  				light: "6.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.openHybrid",
  		invoke: "iframe.url",
  		scheme: "baiduboxapp",
  		authority: "v1",
  		path: "/easybrowse/hybrid",
  		args: [
  			{
  				name: "type",
  				value: "string="
  			},
  			{
  				name: "url",
  				value: "string="
  			},
  			{
  				name: "tpl_id",
  				value: "string="
  			},
  			{
  				name: "append",
  				value: "string="
  			},
  			{
  				name: "tplpath",
  				value: "string="
  			},
  			{
  				name: "context",
  				value: "Object"
  			},
  			{
  				name: "style",
  				value: "Object="
  			},
  			{
  				name: "newbrowser",
  				value: "string="
  			},
  			{
  				name: "forbidautorotate",
  				value: "string="
  			},
  			{
  				name: "slog",
  				value: "Object="
  			},
  			{
  				name: "videoinfo",
  				value: "string="
  			},
  			{
  				name: "jssids",
  				value: "string="
  			},
  			{
  				name: "launchlogin",
  				value: "string="
  			},
  			{
  				name: "stay",
  				value: "string="
  			},
  			{
  				name: "next",
  				value: "string="
  			},
  			{
  				name: "commentInfo",
  				value: "Object="
  			},
  			{
  				name: "pagefrom",
  				value: "string="
  			},
  			{
  				name: "isSearchVideo",
  				value: "string="
  			},
  			{
  				name: "ch_url",
  				value: "string="
  			},
  			{
  				name: "first_image",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "8.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.performanceFlowLog",
  		invoke: "iframe.bdboxURL",
  		authority: "v20",
  		path: "/utils/onPerformanceFlowEvent",
  		args: [
  			{
  				name: "actionId",
  				value: "string"
  			},
  			{
  				name: "operation",
  				value: "string"
  			},
  			{
  				name: "value",
  				value: "string"
  			},
  			{
  				name: "frameSource",
  				value: "string="
  			},
  			{
  				name: "businessType",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "10.3.6"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.showDialog",
  		invoke: "iframe.bdboxURL",
  		path: "/showDialog",
  		authority: "easybrowse",
  		args: [
  			{
  				name: "title",
  				value: "string"
  			},
  			{
  				name: "subtitle",
  				value: "string"
  			},
  			{
  				name: "sourceUrl",
  				value: {
  					type: {
  						"default": "string",
  						night: "string"
  					}
  				}
  			},
  			{
  				name: "buttons",
  				value: {
  					arrayOf: "Object="
  				}
  			}
  		],
  		nextCallback: "callback",
  		env: {
  			main: {
  				light: "11.17"
  			}
  		}
  	},
  	{
  		name: "event.on",
  		invoke: "iframe.url",
  		scheme: "baiduboxapp",
  		authority: "v5",
  		path: "/datachannel/register",
  		args: [
  			{
  				name: "action",
  				value: "string"
  			},
  			{
  				name: "rnmsg",
  				value: "string="
  			},
  			{
  				name: "jscallback",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "8.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "event.off",
  		invoke: "iframe.url",
  		scheme: "baiduboxapp",
  		authority: "v5",
  		path: "/datachannel/unregister",
  		args: [
  			{
  				name: "action",
  				value: "string"
  			},
  			{
  				name: "rnmsg",
  				value: "string="
  			},
  			{
  				name: "jscallback",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "8.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "event.emit",
  		invoke: "iframe.url",
  		scheme: "baiduboxapp",
  		authority: "v5",
  		path: "/datachannel/sendbroadcast",
  		args: [
  			{
  				name: "action",
  				value: "string"
  			},
  			{
  				name: "data",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "8.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.tab.operate",
  		args: [
  			{
  				name: "action",
  				value: "string"
  			},
  			{
  				name: "tab_id",
  				value: "string"
  			},
  			{
  				name: "tabinfo",
  				value: "Object="
  			},
  			{
  				name: "tabindex",
  				value: "number="
  			},
  			{
  				name: "tabselected",
  				value: "string="
  			}
  		],
  		authority: "v15",
  		path: "/feed/tabopt",
  		invoke: "iframe.bdboxURL",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "10.5.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.getContextInfo",
  		invoke: "iframe.bdboxURL",
  		scheme: "baiduboxapp",
  		authority: "feed",
  		query: {
  			action: "getContextInfo",
  			minver: "7.3"
  		},
  		callbackName: "func",
  		env: {
  			main: {
  				light: "7.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.getLastBrowsingPosition",
  		invoke: "iframe.bdboxURL",
  		authority: "v5",
  		path: "/feed/getpos",
  		args: [
  			{
  				name: "nid",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "8.4.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.linkage",
  		args: [
  			{
  				name: "action",
  				value: "string"
  			},
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "nid",
  				value: "string="
  			},
  			{
  				name: "status",
  				value: "string="
  			},
  			{
  				name: "count",
  				value: "string="
  			},
  			{
  				name: "follow_type",
  				value: "string="
  			},
  			{
  				name: "third_id",
  				value: "string="
  			}
  		],
  		authority: "v5",
  		invoke: "iframe.bdboxURL",
  		path: "/feed/linkage",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "8.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.getSpeedLogData",
  		scheme: "baiduboxapp",
  		invoke: "iframe.url",
  		authority: "feed",
  		query: {
  			action: "getSpeedLogData",
  			minver: "4.7.0.0"
  		},
  		env: {
  			main: {
  				light: "4.7"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		},
  		callbackName: "func"
  	},
  	{
  		name: "feed.getSessionClickID",
  		invoke: "iframe.bdboxURL",
  		authority: "v5",
  		path: "/feed/session_click",
  		env: {
  			main: {
  				light: "8.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.showDislike",
  		invoke: "iframe.bdboxURL",
  		authority: "feed",
  		args: [
  			{
  				name: "report_dic",
  				value: "Object="
  			},
  			{
  				name: "from",
  				value: "string="
  			},
  			{
  				name: "item_id",
  				value: "string"
  			},
  			{
  				name: "dislike",
  				value: "Object"
  			}
  		],
  		query: {
  			action: "showDislike"
  		},
  		callbackName: "func",
  		env: {
  			main: {
  				light: "8.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.updateFavorInfo",
  		invoke: "iframe.bdboxURL",
  		authority: "Common",
  		args: [
  			{
  				name: "ukey",
  				value: "*="
  			},
  			{
  				name: "title",
  				value: "*="
  			},
  			{
  				name: "originaltitle",
  				value: "*="
  			},
  			{
  				name: "tplid",
  				value: "*="
  			},
  			{
  				name: "cmd",
  				value: "*="
  			},
  			{
  				name: "url",
  				value: "*="
  			},
  			{
  				name: "img",
  				value: "*="
  			},
  			{
  				name: "nid",
  				value: "*="
  			},
  			{
  				name: "source",
  				value: "*="
  			},
  			{
  				name: "originalsource",
  				value: "*="
  			},
  			{
  				name: "duration",
  				value: "*="
  			},
  			{
  				name: "icon",
  				value: "*="
  			},
  			{
  				name: "portrait",
  				value: "*="
  			},
  			{
  				name: "username",
  				value: "*="
  			},
  			{
  				name: "userdesc",
  				value: "*="
  			},
  			{
  				name: "usercmd",
  				value: "*="
  			},
  			{
  				name: "price",
  				value: "*="
  			},
  			{
  				name: "vipicon",
  				value: "*="
  			},
  			{
  				name: "imagecount",
  				value: "*="
  			},
  			{
  				name: "extdata",
  				value: "*="
  			}
  		],
  		query: {
  			action: "updateFavorInfo",
  			minver: "8.1.0.0"
  		},
  		env: {
  			main: {
  				light: "8.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.report",
  		invoke: "iframe.bdboxURL",
  		authority: "feed",
  		args: [
  			{
  				name: "channel",
  				value: "number="
  			},
  			{
  				name: "nid",
  				value: "string="
  			},
  			{
  				name: "tpl",
  				value: "string="
  			},
  			{
  				name: "tab_id",
  				value: "string="
  			}
  		],
  		query: {
  			action: "report"
  		},
  		env: {
  			main: {
  				light: "8.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.prefetch",
  		invoke: "iframe.bdboxURL",
  		authority: "v16",
  		path: "/feed/prefetch",
  		args: [
  			{
  				name: "action",
  				value: "string"
  			},
  			{
  				name: "data",
  				value: "Array"
  			}
  		],
  		env: {
  			main: {
  				light: "10.0.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.eventNotify",
  		invoke: "iframe.bdboxURL",
  		path: "/eventNotify",
  		authority: "feed",
  		args: [
  			{
  				name: "type",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "10.0.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.payment.openLandpage",
  		invoke: "iframe.bdboxURL",
  		path: "/payment/openLandpage",
  		authority: "feed",
  		args: [
  			{
  				name: "openComponent",
  				value: "string",
  				comment: "打开专栏后调起对应子模块：comment_panel打开评论写的页面"
  			},
  			{
  				name: "type",
  				value: "string",
  				comment: "落地页类型，目前只有图文"
  			},
  			{
  				name: "ext",
  				value: {
  					type: {
  						sExt: "string",
  						source: "string"
  					},
  					isRequired: true
  				},
  				comment: "预留ext字段"
  			},
  			{
  				name: "resId",
  				value: "string",
  				comment: "付费专栏唯一标识"
  			}
  		],
  		env: {
  			main: {
  				light: "11.14.0.0"
  			}
  		}
  	},
  	{
  		name: "feed.onlineLog",
  		invoke: "iframe.bdboxURL",
  		path: "/onlineLog",
  		authority: "feed",
  		scheme: "baiduboxapp",
  		args: [
  			{
  				name: "logDescription",
  				value: "string="
  			},
  			{
  				name: "logContent",
  				value: "Object="
  			}
  		],
  		env: {
  			main: {
  				light: "12.11.0.0"
  			}
  		}
  	},
  	{
  		name: "follow.showFollowGuide",
  		invoke: "iframe.bdboxURL",
  		authority: "v21",
  		path: "/follow/showFollowGuideDialog",
  		args: [
  			{
  				name: "channel",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "10.4"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "hybrid.reliabilityLog",
  		invoke: "iframe.bdboxURL",
  		authority: "utils",
  		query: {
  			action: "onReliableLog",
  			minver: "8.2.0.0"
  		},
  		args: [
  			{
  				name: "description",
  				value: "string"
  			},
  			{
  				name: "message",
  				value: "string"
  			},
  			{
  				name: "type",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "8.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.video.collections",
  		invoke: "iframe.bdboxURL",
  		path: "/collections",
  		authority: "video",
  		args: [
  			{
  				name: "clicked_tag",
  				value: "string=",
  				comment: "透传给服务端"
  			},
  			{
  				name: "insert_ids",
  				value: "string=",
  				comment: "多个视频vid，逗号分割"
  			},
  			{
  				name: "pd",
  				value: "string",
  				comment: "落地页来源"
  			},
  			{
  				name: "coll_id",
  				value: "string",
  				comment: "合辑id"
  			}
  		],
  		config: "配置项， 定义端能力所属框架，invoke需在config中配置。",
  		env: {
  			main: {
  				light: "11.0"
  			},
  			lite: {
  				search: "3.7.5.0",
  				light: "3.7.5.0"
  			}
  		}
  	},
  	{
  		name: "media.video.invokeDetail",
  		invoke: "iframe.bdboxURL",
  		path: "/invokeVideoDetail",
  		authority: "video",
  		args: [
  			{
  				name: "suspenseDisable",
  				value: "string=",
  				comment: "取值：'0'/'1'， 标记是否触发小窗功能，注意：无此key或值，会触发小窗，取值为'1'，则不触发小窗"
  			},
  			{
  				name: "videoPlayerReuseID",
  				value: "string=",
  				comment: "播放器内核层复用id，用于不同场景下无缝播放（比如热议"
  			},
  			{
  				name: "resourceType",
  				value: "string=",
  				comment: "落地页类型，正常Feed落地页可不传，智令视频：“resourceType” ： “interact”"
  			},
  			{
  				name: "tpl",
  				value: "string",
  				comment: "落地页模板类型，目前有feed和browser两种类型，feed标识Feed短视频落地页，browser标识搜索视频落地页"
  			},
  			{
  				name: "extRequest",
  				value: {
  					type: {
  					},
  					isRequired: false
  				},
  				comment: "落地页C/S协议扩展字段"
  			},
  			{
  				name: "nid",
  				value: "string=",
  				comment: "落地页id"
  			},
  			{
  				name: "vid",
  				value: "string",
  				comment: "视频id"
  			},
  			{
  				name: "videoInfo",
  				value: {
  					type: {
  					},
  					isRequired: true
  				},
  				comment: "视频信息"
  			},
  			{
  				name: "page",
  				value: "string",
  				comment: "落地页类型"
  			},
  			{
  				name: "pd",
  				value: "string",
  				comment: "标识落地页是从哪个页面跳转到的"
  			},
  			{
  				name: "titile",
  				value: "string=",
  				comment: "视频标题"
  			},
  			{
  				name: "openNewPage",
  				value: "string=",
  				comment: "打开新落地页或刷新当前落地页,1表示刷新当前落地页，其它为打开新落地页"
  			},
  			{
  				name: "ext",
  				value: {
  					type: {
  						comment: "Object=",
  						toComment: "string=",
  						type: "string="
  					},
  					isRequired: false
  				},
  				comment: "业务扩展字段"
  			},
  			{
  				name: "extLog",
  				value: {
  					type: {
  					},
  					isRequired: false
  				},
  				comment: "日志透传字段"
  			},
  			{
  				name: "startTimestamp",
  				value: "number=",
  				comment: "调用落地页起始时间戳"
  			}
  		],
  		config: "配置项， 定义端能力所属框架，invoke需在config中配置。",
  		env: {
  			main: {
  				light: "11.12"
  			},
  			lite: {
  				search: "4.17.0.0",
  				light: "4.17.0.0"
  			}
  		}
  	},
  	{
  		name: "readVideoHistoryPlayerInfo",
  		invoke: "iframe.bdboxURL",
  		path: "/readVideoHistoryPlayerInfo",
  		authority: "video",
  		args: [
  			{
  				name: "title",
  				value: "string=",
  				comment: "播放器标题信息"
  			},
  			{
  				name: "pageUrl",
  				value: "string",
  				comment: "端上会优先根据pageUrl作为key进行视频进度的缓存"
  			},
  			{
  				name: "vid",
  				value: "string",
  				comment: "播放器vid信息"
  			}
  		],
  		config: "配置项， 定义端能力所属框架，invoke需在config中配置。",
  		env: {
  			main: {
  				light: "11.24"
  			}
  		}
  	},
  	{
  		name: "saveVideoHistoryPlayerInfo",
  		invoke: "iframe.bdboxURL",
  		path: "/saveVideoHistoryPlayerInfo",
  		authority: "video",
  		args: [
  			{
  				name: "totalTime",
  				value: "string=",
  				comment: "视频的总时长"
  			},
  			{
  				name: "progress",
  				value: "number",
  				comment: "播放器进度"
  			},
  			{
  				name: "title",
  				value: "string=",
  				comment: "标题信息"
  			},
  			{
  				name: "pageUrl",
  				value: "string",
  				comment: "端上会优先根据pageUrl作为key进行视频进度的缓存"
  			},
  			{
  				name: "vid",
  				value: "string",
  				comment: "视频id"
  			}
  		],
  		config: "配置项， 定义端能力所属框架，invoke需在config中配置。",
  		env: {
  			main: {
  				light: "11.24"
  			}
  		}
  	},
  	{
  		name: "seekPlayer",
  		invoke: "iframe.bdboxURL",
  		path: "/video/seekPlayer",
  		authority: "video",
  		args: [
  			{
  				name: "pageUrl",
  				value: "string",
  				comment: "跳转url"
  			},
  			{
  				name: "seek",
  				value: "number",
  				comment: "seek到的位置信息"
  			},
  			{
  				name: "vid",
  				value: "string",
  				comment: "视频的vid信息"
  			}
  		],
  		config: "配置项， 定义端能力所属框架，invoke需在config中配置。",
  		env: {
  			main: {
  				light: "11.24"
  			}
  		}
  	},
  	{
  		name: "media.tts.play",
  		invoke: "iframe.bdboxURL",
  		authority: "v18",
  		path: "/tts/play",
  		query: {
  			upgrade: 0,
  			oauthType: "feed"
  		},
  		args: [
  			{
  				name: "id",
  				value: "string"
  			},
  			{
  				name: "title",
  				value: "string"
  			},
  			{
  				name: "imageUrl",
  				value: "string="
  			},
  			{
  				name: "context",
  				value: "Object="
  			},
  			{
  				name: "index",
  				value: "string="
  			},
  			{
  				name: "forbiddenDialog",
  				value: "boolean="
  			},
  			{
  				name: "pass_params",
  				value: "Object="
  			}
  		],
  		env: {
  			main: {
  				light: "10.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.tts.showLandEarBubble",
  		invoke: "iframe.bdboxURL",
  		path: "/showLandEarBubble",
  		authority: "tts",
  		args: [
  		],
  		env: {
  			main: {
  				light: "11.15"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.tts.pause",
  		invoke: "iframe.bdboxURL",
  		authority: "v18",
  		path: "/tts/pause",
  		args: [
  			{
  				name: "id",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "10.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.tts.virtualstudio",
  		invoke: "iframe.bdboxURL",
  		path: "/virtualstudio",
  		authority: "tts",
  		args: [
  			{
  				name: "title",
  				value: "string"
  			},
  			{
  				name: "from",
  				value: "string"
  			},
  			{
  				name: "id",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "11.17.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.tts.getStatus",
  		invoke: "iframe.bdboxURL",
  		authority: "v18",
  		path: "/tts/status",
  		args: [
  		],
  		env: {
  			main: {
  				light: "10.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.tts.showLandGuide",
  		invoke: "iframe.bdboxURL",
  		authority: "v24",
  		path: "/tts/showLandGuide",
  		query: {
  			upgrade: 0,
  			oauthType: "feed"
  		},
  		args: [
  			{
  				name: "id",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "10.6"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "media.tts.end",
  		path: "/end",
  		invoke: "iframe.bdboxURL",
  		args: [
  			{
  				name: "id",
  				value: "string="
  			}
  		],
  		authority: "tts",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "10.2.0.0"
  			}
  		}
  	},
  	{
  		name: "novel.openReader",
  		scheme: "baiduboxapp",
  		invoke: "iframe.bdboxURL",
  		authority: "novel",
  		paramsName: "param",
  		args: [
  			{
  				name: "gid",
  				value: "string"
  			},
  			{
  				name: "query",
  				value: "string="
  			},
  			{
  				name: "name",
  				value: "string"
  			},
  			{
  				name: "author",
  				value: "string"
  			},
  			{
  				name: "image",
  				value: "string"
  			},
  			{
  				name: "newchapter",
  				value: "string"
  			},
  			{
  				name: "cpsrc",
  				value: "string="
  			},
  			{
  				name: "islastchapter",
  				value: "string"
  			},
  			{
  				name: "cid",
  				value: "string="
  			},
  			{
  				name: "free",
  				value: "string"
  			},
  			{
  				name: "from",
  				value: "string"
  			},
  			{
  				name: "slog",
  				value: "string"
  			}
  		],
  		query: {
  			action: "openReader",
  			minver: "5"
  		},
  		callbackName: "func",
  		env: {
  			main: {
  				light: "5.0"
  			}
  		}
  	},
  	{
  		name: "novel.openSubPage",
  		invoke: "iframe.bdboxURL",
  		authority: "novel",
  		args: [
  			{
  				name: "title",
  				value: "string"
  			},
  			{
  				name: "url",
  				value: "string"
  			},
  			{
  				name: "pagetype",
  				value: "number"
  			},
  			{
  				name: "toolbaricons",
  				value: "string="
  			},
  			{
  				name: "method",
  				value: "string"
  			},
  			{
  				name: "needParams",
  				value: "string="
  			},
  			{
  				name: "args",
  				value: "string="
  			}
  		],
  		query: {
  			action: "openSubPage",
  			minver: "5.4"
  		},
  		paramsName: "param",
  		env: {
  			main: {
  				light: "5.4"
  			},
  			lite: {
  				search: "2.3.0.0",
  				light: "2.3.0.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "operations.showBuoy",
  		invoke: "iframe.bdboxURL",
  		path: "/showBuoy",
  		authority: "operations",
  		args: [
  			{
  				name: "clock",
  				value: "number="
  			},
  			{
  				name: "clockWord",
  				value: "string="
  			},
  			{
  				name: "clockControl",
  				value: "number="
  			},
  			{
  				name: "ubc",
  				value: {
  					type: {
  						activeID: "string",
  						from: "string"
  					},
  					isRequired: true
  				}
  			},
  			{
  				name: "identify",
  				value: "string"
  			},
  			{
  				name: "close",
  				value: "number="
  			},
  			{
  				name: "scheme",
  				value: "string="
  			},
  			{
  				name: "position",
  				value: "number="
  			},
  			{
  				name: "topOffset",
  				value: "number="
  			},
  			{
  				name: "nightColor",
  				value: "string="
  			},
  			{
  				name: "color",
  				value: "string="
  			},
  			{
  				name: "word",
  				value: "string="
  			},
  			{
  				name: "imageUrl",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "8.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "operations.buoyAction",
  		path: "/buoyAction",
  		invoke: "iframe.bdboxURL",
  		authority: "operations",
  		scheme: "baiduboxapp",
  		args: [
  			{
  				name: "actionType",
  				value: "string"
  			},
  			{
  				name: "identify",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "11.11.0.1"
  			}
  		}
  	},
  	{
  		name: "operations.getBuoyStatus",
  		path: "/getBuoyStatus",
  		invoke: "iframe.bdboxURL",
  		args: [
  			{
  				name: "identify",
  				value: "string"
  			}
  		],
  		authority: "operations",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "11.13.0.0"
  			}
  		}
  	},
  	{
  		name: "praise.cancel",
  		invoke: "iframe.bdboxURL",
  		authority: "v42",
  		path: "/praise/cancelPraise",
  		args: [
  			{
  				name: "source",
  				value: "string"
  			},
  			{
  				name: "id",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "11.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "praise.isAnimationAvailable",
  		invoke: "iframe.bdboxURL",
  		authority: "v25",
  		path: "/praise/praiseAvailable",
  		args: [
  			{
  				name: "source",
  				value: "string"
  			},
  			{
  				name: "ubc",
  				value: "Object="
  			}
  		],
  		env: {
  			main: {
  				light: "10.6.5.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "praise.motionEvent",
  		invoke: "iframe.bdboxURL",
  		authority: "v25",
  		path: "/praise/motionEvent",
  		args: [
  			{
  				name: "intercept",
  				value: "string"
  			},
  			{
  				name: "type",
  				value: "string"
  			},
  			{
  				name: "position",
  				value: "string"
  			},
  			{
  				name: "source",
  				value: "string"
  			},
  			{
  				name: "ubc",
  				value: "Object"
  			},
  			{
  				name: "id",
  				value: "string"
  			},
  			{
  				name: "isUped",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "10.6.5"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "RN.openHNPage",
  		path: "/invokeHNPage",
  		invoke: "iframe.bdboxURL",
  		args: [
  			{
  				name: "bundleId",
  				value: "string"
  			},
  			{
  				name: "moduleName",
  				value: "string"
  			},
  			{
  				name: "initialParams",
  				value: "Object"
  			},
  			{
  				name: "backupURL",
  				value: "string="
  			},
  			{
  				name: "minAPSVer",
  				value: "string="
  			},
  			{
  				name: "inputMode",
  				value: "number="
  			}
  		],
  		authority: "utils",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "10.3.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "search.invokeSearchBarMaskView",
  		path: "/invokeSearchBarMaskView",
  		invoke: "iframe.bdboxURL",
  		args: [
  			{
  				name: "maskAlpah",
  				value: "string="
  			},
  			{
  				name: "animateDuration",
  				value: "string="
  			},
  			{
  				name: "clickMaskCallback",
  				value: "string="
  			},
  			{
  				name: "type：add",
  				value: "string"
  			}
  		],
  		authority: "searchframe",
  		env: {
  			main: {
  				light: "12.5.0.0"
  			}
  		}
  	},
  	{
  		name: "search.showMobileNetPushVideoSettingPageToast",
  		invoke: "iframe.bdboxURL",
  		path: "/showMobileNetPushVideoSettingPageToast",
  		authority: "searchframe",
  		args: [
  			{
  				name: "pageId",
  				value: "string",
  				comment: "页面的id，端用来判断当前页面冷启动是否显示过toast，只显示一次"
  			},
  			{
  				name: "bussiness",
  				value: "string",
  				comment: "业务线，ubc打点区分不同业务minivideo_talos（小视频tab）、aminivideo（小视频卡）、avideo（短视频卡）、aNR（自然结果）"
  			}
  		],
  		config: "配置项， 定义端能力所属框架，invoke需在config中配置。",
  		env: {
  			main: {
  				light: "12.3.0.0"
  			}
  		}
  	},
  	{
  		name: "search.getMobileNetVideoAutoplaySwitchType",
  		path: "/getMobileNetVideoAutoplaySwitchType",
  		invoke: "iframe.bdboxURL",
  		authority: "searchVideo",
  		env: {
  			main: {
  				light: "12.3.0.0"
  			}
  		}
  	},
  	{
  		name: "search.videoPrefetch",
  		invoke: "iframe.bdboxURL",
  		path: "/videoPrefetch",
  		authority: "search",
  		args: [
  			{
  				name: "action",
  				value: "number",
  				comment: "【必传】0：进入页面; 1：滑停; 2：点击;"
  			},
  			{
  				name: "data",
  				value: {
  					arrayOf: "Object"
  				},
  				comment: "【必传】视频播放器数据,和外部不重复，是视频的数据，数据信息见基本信息介绍\n'data':[\n//第一条视频信息\n{\n 'nid':'123',          /* 视频唯一标识*/\n 'prefetchType':0,   /* 预取类型-视频 */\n'businessType': 'search'  /* 业务方 */\n'prefetchInfo':\n{\n'size': 200*1024, /* 预取大小、字节 */\n'url':'http://ft.baidu.com/' /* 预取url */\n},\n}\n     //第二条视频信息\n{\n 'nid':'234',          /* 视频唯一标识*/\n 'prefetchType':0,   /* 预取类型-视频 */\n'businessType': 'search'  /* 业务方 */\n'prefetchInfo':\n{\n'size': 200*1024, /* 预取大小、字节 */\n'url':'http://ft.baidu.com/'   /* 预取url */\n}\n}"
  			}
  		],
  		config: "配置项， 定义端能力所属框架，invoke需在config中配置。",
  		env: {
  			main: {
  				light: "11.7.0.0"
  			},
  			lite: {
  				search: "4.3.0.0",
  				light: "4.3.0.0"
  			}
  		}
  	},
  	{
  		name: "search.getSummary",
  		invoke: "iframe.bdboxURL",
  		path: "/getSummary",
  		authority: "searchframe",
  		args: [
  			{
  				name: "loadingpageurl",
  				value: "string",
  				comment: "对应的落地页url"
  			},
  			{
  				name: "type",
  				value: "number",
  				comment: "type 1：只锚点 2：只高亮 3：锚点和高亮"
  			},
  			{
  				name: "keyword",
  				value: "string",
  				comment: "高亮文本"
  			}
  		],
  		env: {
  			main: {
  				light: "12.4"
  			}
  		}
  	},
  	{
  		name: "search.setQuery",
  		invoke: "iframe.bdboxURL",
  		path: "",
  		authority: "setquery",
  		args: [
  			{
  				name: "type",
  				value: "string",
  				comment: "类型"
  			},
  			{
  				name: "history",
  				value: "number",
  				comment: "入历史"
  			},
  			{
  				name: "query",
  				value: "string",
  				comment: "上框搜索词"
  			}
  		],
  		env: {
  			main: {
  				search: "5.5"
  			},
  			lite: {
  				search: "1.1"
  			}
  		},
  		query: {
  			minver: "5.5.0.0"
  		},
  		config: "配置项， 定义端能力所属框架，invoke需在config中配置。"
  	},
  	{
  		name: "search.changeNATab",
  		invoke: "iframe.bdboxURL",
  		path: "/jumpToTab",
  		authority: "searchframe",
  		args: [
  			{
  				name: "seClickID",
  				value: "string=",
  				comment: "串联打点的id"
  			},
  			{
  				name: "total",
  				value: "string=",
  				comment: "打点日志相关参数 详见（打点功能：jumpToTab端能力跳转六合tab）"
  			},
  			{
  				name: "word",
  				value: "string",
  				comment: "用户判断是否是同query 不同query切新页面 需base64解码"
  			},
  			{
  				name: "extra",
  				value: "string",
  				comment: "打开页面需要拼接的字符串参数"
  			},
  			{
  				name: "url",
  				value: "string",
  				comment: "打开页面的url"
  			},
  			{
  				name: "pd",
  				value: "string",
  				comment: "需要打开的垂搜栏目关键字"
  			}
  		],
  		env: {
  			main: {
  				search: "11.13.0.0"
  			},
  			lite: {
  				search: "4.7.0.0"
  			}
  		}
  	},
  	{
  		name: "search.invokeSearch",
  		invoke: "iframe.url",
  		authority: "v1",
  		path: "/browser/search",
  		args: [
  			{
  				name: "sa",
  				value: "string=",
  				comment: "搜索来源，Android单端"
  			},
  			{
  				name: "stay",
  				value: "string=",
  				comment: "退出搜索是否停留在手百，Android单端"
  			},
  			{
  				name: "source",
  				value: "string=",
  				comment: "双端：调起方来源，iOS目前只有'spotlight'"
  			},
  			{
  				name: "from",
  				value: "string=",
  				comment: "是否是talos调起，iOS未使用"
  			},
  			{
  				name: "next",
  				value: "string=",
  				comment: "下个scheme，iOS未使用"
  			},
  			{
  				name: "config",
  				value: "string=",
  				comment: "配置参数，iOS未使用"
  			},
  			{
  				name: "fromwise",
  				value: "string=",
  				comment: "是否来自wise，iOS未使用"
  			},
  			{
  				name: "launchMode",
  				value: "string=",
  				comment: "调起模式，Android单端"
  			},
  			{
  				name: "query",
  				value: "string",
  				comment: "搜索词"
  			},
  			{
  				name: "simple",
  				value: "string=",
  				comment: "是否简版浏览框架"
  			},
  			{
  				name: "append",
  				value: "string=",
  				comment: "是否加公参"
  			},
  			{
  				name: "newwindow",
  				value: "string=",
  				comment: "新窗口"
  			}
  		],
  		env: {
  			main: {
  				light: "0.0.0.0"
  			},
  			lite: {
  				search: "1.3.0.0",
  				light: "1.3.0.0"
  			}
  		}
  	},
  	{
  		name: "search.open",
  		invoke: "iframe.url",
  		authority: "v1",
  		path: "/browser/open",
  		args: [
  			{
  				name: "tplId",
  				value: "string=",
  				comment: "历史模板"
  			},
  			{
  				name: "logargs",
  				value: "Object=",
  				comment: ""
  			},
  			{
  				name: "loftSearchType",
  				value: "string=",
  				comment: "负一楼业务方类型"
  			},
  			{
  				name: "loftSearchUrl",
  				value: "string=",
  				comment: "负一楼url"
  			},
  			{
  				name: "loftSearchContainerState",
  				value: "string=",
  				comment: "负一楼webview状态"
  			},
  			{
  				name: "privateTips",
  				value: "string=",
  				comment: "搜索框架隐私模式，首次进入在底bar弹出文案提示"
  			},
  			{
  				name: "stay",
  				value: "string=",
  				comment: "Android单端：退出搜索框架是否返回首页"
  			},
  			{
  				name: "noHistory",
  				value: "string=",
  				comment: "0|1,表示当前端能力打开的页面是否要进入历史记录。默认是0，表示正常记录历史，1表示不进入历史。"
  			},
  			{
  				name: "openParallelLoad",
  				value: "string=",
  				comment: "iOS单端：是否开启并行化加载"
  			},
  			{
  				name: "from",
  				value: "string=",
  				comment: "Android单端：是否是talos调起"
  			},
  			{
  				name: "sfUrl",
  				value: "string=",
  				comment: "Android单端：sf调用的Url"
  			},
  			{
  				name: "launchMode",
  				value: "string=",
  				comment: "Android单端：调起模式"
  			},
  			{
  				name: "isBee",
  				value: "string=",
  				comment: "Android单端：Feed hybird落地页内打开搜索bee框架标志 11.17添加"
  			},
  			{
  				name: "next",
  				value: "string=",
  				comment: "下个scheme"
  			},
  			{
  				name: "fromwise",
  				value: "string=",
  				comment: "是否来自wise"
  			},
  			{
  				name: "isCollect",
  				value: "number=",
  				comment: ""
  			},
  			{
  				name: "isHistory",
  				value: "number=",
  				comment: ""
  			},
  			{
  				name: "logUrl",
  				value: "string=",
  				comment: "Android单端：V11.13版本新增打点日志的url\nAndroid该参数废弃，非必填"
  			},
  			{
  				name: "url",
  				value: "string",
  				comment: "V8.2.0.0版本新增, url"
  			},
  			{
  				name: "append",
  				value: "string=",
  				comment: "V8.2.0.0版本新增, 是否加公参。'0':默认不加。"
  			},
  			{
  				name: "newwindow",
  				value: "string=",
  				comment: "V8.2.0.0版本新增, 是否从新窗口打开。 '0':默认从当前窗口打开"
  			},
  			{
  				name: "simple",
  				value: "string=",
  				comment: "V8.2.0.0版本新增, 是否简版搜索浏览框架。'0':默认打开主浏览框架。"
  			},
  			{
  				name: "origin",
  				value: "string=",
  				comment: "V10.13.0.0版本新增, url的origin信息，端走同步跳转时，用origin拼接url去跳转（可选）"
  			},
  			{
  				name: "animation",
  				value: "string=",
  				comment: "V10.13.0.0版本新增, 入场动画类型（可选）\nAndroid该参数废弃"
  			},
  			{
  				name: "extra",
  				value: "string=",
  				comment: "Android单端：V10.13.0.0版本新增, H5需要的扩展参数（可选）（用于透传）"
  			},
  			{
  				name: "isContainer",
  				value: "string=",
  				comment: "V10.13.0.0版本新增, 判断是否是新容器打开（可选）。'0' 不是，'1' 是新容器打开。"
  			},
  			{
  				name: "config",
  				value: "string=",
  				comment: "配置参数，包含参数： immersed 、hideBack、feedbackUrl、background"
  			},
  			{
  				name: "canAsync",
  				value: "string=",
  				comment: "是否可以异步。0 不可以异步，走同步加载，\n\n1 可以异步，端上按需异步加载"
  			}
  		],
  		env: {
  			main: {
  				light: "8.2.0.0",
  				imagesearch: "12.20"
  			},
  			lite: {
  				search: "2.2.0.0",
  				light: "2.2.0.0"
  			}
  		}
  	},
  	{
  		name: "search.getSSession",
  		invoke: "iframe.bdboxURL",
  		path: "/getSSession",
  		authority: "browser",
  		args: [
  		],
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "12.16.0.0"
  			}
  		}
  	},
  	{
  		name: "search.invokePoiLandingPage",
  		invoke: "iframe.bdboxURL",
  		path: "/invokePoiLandingPage",
  		authority: "browser",
  		args: [
  			{
  				name: "_tplExt",
  				value: "Object=",
  				comment: "11.23新增，模版扩展参数，透传到1013统计"
  			},
  			{
  				name: "prefetch",
  				value: "Object=",
  				comment: "预取"
  			},
  			{
  				name: "query",
  				value: "string",
  				comment: "检索关键词"
  			},
  			{
  				name: "nwd",
  				value: "string",
  				comment: "检索地图接口数据和请求gss"
  			},
  			{
  				name: "title",
  				value: "string",
  				comment: "POI页面的标题"
  			},
  			{
  				name: "poiType",
  				value: "string=",
  				comment: "POI类型"
  			},
  			{
  				name: "pageType",
  				value: "number",
  				comment: "1：单点，2：多点"
  			},
  			{
  				name: "url",
  				value: "string",
  				comment: "如果不进入地图NA页，从结果页进入地图h5页面的url"
  			},
  			{
  				name: "ext",
  				value: {
  					type: {
  						clickTime: "string=",
  						address: "string=",
  						userCityCode: "string",
  						userLoc: "string=",
  						loc: "string=",
  						cityName: "string",
  						cityCode: "string"
  					},
  					isRequired: true
  				},
  				comment: "位置信息"
  			},
  			{
  				name: "ubs",
  				value: {
  					type: {
  						srcid: "string=",
  						qid: "string=",
  						tempName: "string=",
  						sid: "string="
  					},
  					isRequired: true
  				},
  				comment: "打点相关字段"
  			}
  		],
  		env: {
  			main: {
  				search: "11.10.0.0"
  			}
  		}
  	},
  	{
  		name: "scheme.priorityDispatcher",
  		invoke: "iframe.bdboxURL",
  		authority: "v33",
  		path: "/dispatcher/priorityDispatcher",
  		args: [
  			{
  				name: "schemes",
  				value: "Array"
  			},
  			{
  				name: "meta",
  				value: "Object="
  			}
  		],
  		env: {
  			main: {
  				light: "10.12.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "scheme.command",
  		invoke: "iframe.bdboxURL",
  		args: [
  			{
  				name: "intent",
  				value: "string"
  			},
  			{
  				name: "class",
  				value: "string="
  			},
  			{
  				name: "min_v",
  				value: "string="
  			},
  			{
  				name: "mode",
  				value: "string"
  			},
  			{
  				name: "ubc",
  				value: "string="
  			},
  			{
  				name: "dyna_url_key",
  				value: "string="
  			}
  		],
  		env: {
  			main: {
  				light: "5.3.0.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "swan.open",
  		invoke: "iframe.openSwan",
  		args: [
  			{
  				name: "appKey",
  				value: "string"
  			},
  			{
  				name: "path",
  				value: "string="
  			},
  			{
  				name: "query",
  				value: "Object="
  			},
  			{
  				name: "_baiduboxapp",
  				value: {
  					type: {
  						from: "string=",
  						notinhis: "string=",
  						srcAppId: "string=",
  						extraData: "Object=",
  						ext: "Object=",
  						srcAppPage: "string=",
  						ubc: "Object=",
  						navi: "string=",
  						backwardURL: "string="
  					}
  				}
  			},
  			{
  				name: "third_ext",
  				value: "string="
  			},
  			{
  				name: "abtest",
  				value: "string="
  			},
  			{
  				name: "oauthType",
  				value: "string="
  			},
  			{
  				name: "_swaninfo",
  				value: "string="
  			},
  			{
  				name: "downloadUrl",
  				value: "string="
  			},
  			{
  				name: "udid",
  				value: "string="
  			},
  			{
  				name: "host",
  				value: "string="
  			},
  			{
  				name: "cb",
  				value: "string="
  			},
  			{
  				name: "port",
  				value: "string="
  			}
  		],
  		authority: "swan",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "10.9.5"
  			},
  			lite: {
  				search: "4.4.0.0",
  				light: "4.4.0.0"
  			},
  			mission: {
  				search: "2.4.0.0",
  				light: "2.4.0.0"
  			}
  		}
  	},
  	{
  		name: "system.queryScheme",
  		invoke: "iframe.bdboxURL",
  		authority: "v16",
  		path: "/utils/queryScheme",
  		args: [
  			{
  				name: "scheme",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "10.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "system.getTheme",
  		invoke: "iframe.bdboxURL",
  		path: "/getTheme",
  		authority: "theme",
  		args: [
  		],
  		env: {
  			main: {
  				light: "10.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "system.getAppDuration",
  		path: "/getAppDuration",
  		invoke: "iframe.bdboxURL",
  		args: [
  		],
  		authority: "utils",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "10.3.0.0"
  			}
  		}
  	},
  	{
  		name: "system.getClipboardData",
  		invoke: "iframe.bdboxURL",
  		path: "/getClipboardData",
  		authority: "utils",
  		args: [
  		],
  		env: {
  			main: {
  				light: "10.3.0.0"
  			}
  		}
  	},
  	{
  		name: "system.setClipboardData",
  		path: "/setClipboardData",
  		invoke: "iframe.bdboxURL",
  		args: [
  			{
  				name: "data",
  				value: "string"
  			}
  		],
  		authority: "utils",
  		scheme: "baiduboxapp",
  		env: {
  			main: {
  				light: "10.3.0.0"
  			}
  		}
  	},
  	{
  		name: "ubc.duration.appear",
  		invoke: "iframe.bdboxURL",
  		authority: "v4",
  		path: "/ubc/duration/appear",
  		args: [
  			{
  				name: "key",
  				value: "string"
  			},
  			{
  				name: "options",
  				value: "Object="
  			}
  		],
  		env: {
  			main: {
  				light: "8.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "ubc.duration.disappear",
  		invoke: "iframe.bdboxURL",
  		authority: "v4",
  		path: "/ubc/duration/disappear",
  		args: [
  			{
  				name: "key",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "8.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "userCenter.feedback",
  		invoke: "iframe.bdboxURL",
  		authority: "ucenter",
  		path: "/feedback",
  		env: {
  			main: {
  				light: "10.1"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	}
  ];
  var androidCompatibility = [
  	{
  		name: "account.openLoginDialog",
  		invoke: "method.args-json+callback",
  		method: "Bdbox_android_account.loginDialog",
  		args: [
  			{
  				name: "tpl",
  				value: "string"
  			},
  			{
  				name: "third_login",
  				value: "string"
  			},
  			{
  				name: "login_type",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "5.5"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "album.image.openOld",
  		invoke: "method.args-json+callback",
  		method: "Bdbox_android_utils.image",
  		args: [
  			{
  				name: "img_items",
  				value: {
  					arrayOf: {
  						url: "string",
  						desc: "string="
  					}
  				}
  			},
  			{
  				name: "urls",
  				value: "string[]"
  			},
  			{
  				name: "index",
  				value: "*="
  			},
  			{
  				name: "source",
  				value: "string"
  			},
  			{
  				name: "type",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "6.1"
  			}
  		}
  	},
  	{
  		name: "commonUI.showToastOld",
  		invoke: "method",
  		args: [
  			{
  				name: "string",
  				value: "string="
  			}
  		],
  		method: "Bdbox_android_utils.toast",
  		env: {
  			main: {
  				light: "6.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "commonUI.closeLoadingOld",
  		invoke: "method",
  		method: "bd_searchbox_interface.progressCompleted",
  		env: {
  			main: {
  				light: "4.9"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.onPerformanceFlowEvent",
  		invoke: "method.args-json",
  		method: "Bdbox_android_utils.onPerformanceFlowEvent",
  		args: [
  			{
  				name: "actionId",
  				value: "string"
  			},
  			{
  				name: "operation",
  				value: "string"
  			},
  			{
  				name: "value",
  				value: "string"
  			}
  		],
  		env: {
  			main: {
  				light: "8.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.openHybridOld",
  		args: [
  			{
  				name: "intent",
  				value: "string="
  			},
  			{
  				name: "min_v",
  				value: "string="
  			},
  			{
  				name: "mode",
  				value: "string="
  			}
  		],
  		method: "Bdbox_android_utils.command",
  		authority: "easybrowse",
  		invoke: "method.args-json+callback",
  		env: {
  			main: {
  				light: "5.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	}
  ];
  var iosCompatibility = [
  	{
  		name: "account.openLoginDialog",
  		invoke: "iframe.bdboxURL",
  		authority: "account",
  		args: [
  			{
  				name: "tpl",
  				value: "string"
  			},
  			{
  				name: "third_login",
  				value: "string"
  			},
  			{
  				name: "login_type",
  				value: "string"
  			}
  		],
  		query: {
  			action: "logindialog",
  			minver: "5.5.0.0"
  		},
  		nextCallback: "func",
  		env: {
  			main: {
  				light: "5.5"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "album.image.openOld",
  		invoke: "iframe.bdboxURL",
  		authority: "utils",
  		query: {
  			action: "image"
  		},
  		args: [
  			{
  				name: "images",
  				value: {
  					arrayOf: {
  						url: "string",
  						origin_url: "string=",
  						origin_size: "string="
  					}
  				}
  			},
  			{
  				name: "url",
  				value: {
  					arrayOf: "string"
  				}
  			},
  			{
  				name: "index",
  				value: "*="
  			},
  			{
  				name: "source",
  				value: "string"
  			},
  			{
  				name: "type",
  				value: "string"
  			}
  		],
  		callbackName: "func",
  		env: {
  			main: {
  				light: "6.2"
  			}
  		}
  	},
  	{
  		name: "commonUI.showToastOld",
  		scheme: "baiduboxapp",
  		invoke: "iframe.url",
  		authority: "utils",
  		query: [
  			{
  				name: "action",
  				value: "toast"
  			}
  		],
  		env: {
  			main: {
  				light: "6.0"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.openHybridOld",
  		invoke: "iframe.bdboxURL",
  		authority: "common",
  		args: [
  			{
  				name: "menumode",
  				value: "number="
  			},
  			{
  				name: "sfrom",
  				value: "string="
  			},
  			{
  				name: "context",
  				value: "Object="
  			},
  			{
  				name: "backup",
  				value: "Object="
  			},
  			{
  				name: "newbrowser",
  				value: "string="
  			},
  			{
  				name: "toolbar",
  				value: "Object="
  			},
  			{
  				name: "openurl",
  				value: "string="
  			},
  			{
  				name: "isla",
  				value: "number="
  			},
  			{
  				name: "opentype",
  				value: "number="
  			},
  			{
  				name: "append",
  				value: "number="
  			},
  			{
  				name: "rbtnstyle",
  				value: "number="
  			},
  			{
  				name: "type",
  				value: "string="
  			}
  		],
  		query: {
  			action: "easybrowse",
  			minver: "5.3.0.0"
  		},
  		env: {
  			main: {
  				light: "5.3"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	},
  	{
  		name: "easyBrowser.onPerformanceFlowEvent",
  		invoke: "iframe.bdboxURL",
  		authority: "utils",
  		args: [
  			{
  				name: "actionId",
  				value: "string"
  			},
  			{
  				name: "operation",
  				value: "string"
  			},
  			{
  				name: "value",
  				value: "string"
  			}
  		],
  		query: {
  			action: "onPerformanceFlowEvent",
  			minver: "8.2.0.0"
  		},
  		env: {
  			main: {
  				light: "8.2"
  			},
  			lite: {
  				search: "2.2.2.0",
  				light: "2.2.2.0"
  			},
  			mission: {
  				search: "1.0.0.0",
  				light: "1.0.0.0"
  			}
  		}
  	}
  ];
  var searchDescriptions = {
  	android: android,
  	ios: ios,
  	androidCompatibility: androidCompatibility,
  	iosCompatibility: iosCompatibility
  };

  /**
   * @file 注入兜底描述表
   * @author jiaowenhua <jiaowenhua@baidu.com>
  */

  boxx.setDefaultDescription(searchDescriptions);

  var boxxConfig = {
    emit: 'event.emit',
    // 发送广播
    webStorage: 'easyBrowser.webStorage',
    // 存储
    open: 'easyBrowser.open',
    // 轻浏览打开
    showToast: 'commonUI.showToast',
    // 端toast
    loginInvoke: 'account.login' // 登录

  };

  var boxxInvoke = function boxxInvoke(search, params) {
    return new Promise(function (resolve, reject) {
      // boxx 调用处理
      var basicSearch = function basicSearch(params) {
        return boxx.call(boxxConfig["".concat(search)], params);
      };

      if (basicSearch && !isEmptyObject(basicSearch)) {
        basicSearch(_objectSpread2(_objectSpread2({}, params), {}, {
          success: function success(res) {
            resolve(res);
          },
          fail: function fail(res) {
            reject(res);
          }
        }));
      } else {
        reject("".concat(search, " not exit"));
      }
    });
  };
  /**
   * 关注数据广播 发送
   * @function sendBroadcast
   */


  var sendBroadcast = function sendBroadcast(data) {
    boxxInvoke('emit', {
      action: 'com.baidu.channel.foundation.followchanged',
      data: JSON.stringify({
        data: [data]
      })
    });
    boxxInvoke('emit', {
      action: 'com.baidu.channel.subscribe',
      data: JSON.stringify({
        sign: "".concat(data.type, "_").concat(data.third_id),
        relation: data.is_follow
      })
    });
  };
  /**
   * 存储数据
   * @function setStorage
   */

  var setStorage = function setStorage(key, data) {
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};
    boxxInvoke('webStorage', {
      key: key,
      data: JSON.stringify(data),
      action: 'set'
    }).then(function (res) {
      callback(res);
    }).catch(function (err) {
      callback(err);
    });
  };
  /**
   * 端toast
   * @function clientToast
   */

  var clientToast = function clientToast(message) {
    boxxInvoke('showToast', {
      type: '1',
      message: message
    });
  };
  /**
   * 登录
   * @function login
   */

  var login = function login() {
    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};

    if (isBox() && versionCompare(getBoxVersion(), '5.5') >= 0) {
      boxxInvoke('loginInvoke', {
        loginType: 'sms',
        showThirdLogin: '1',
        loginSource: 'webpage_card',
        loginSubSource: 'webpage_card',
        tpl: 'webpage_card',
        normalizeAccount: '0'
      }).then(function (res) {
        if (+res.status === 0) {
          location.reload(1);
        }

        callback(res);
      }).catch(function (err) {
        callback(err);
      });
    } else {
      // 5.5以下版本跳转至baidu passport web页登录
      window.location.href = 'http://wappass.baidu.com/passport/login?u=' + encodeURIComponent(window.location.href);
    }
  };
  /*
   * 框内cmd打开，框外location跳转
   * 无url则跳转我的关注，7.6以下以及框外执行location跳转
   * @function toLandingPage
   * @param url  {String}  - 跳转url
   * @param isToast {Boolean}
   */

  function openPage(url) {
    if (url) {
      var params = isIOS() ? {
        newbrowser: '1'
      } : {};
      isBox() ? boxxInvoke('open', _objectSpread2({
        url: url
      }, params)) : window.location.href = url; // isBox() ? o2o(url, params) : (window.location.href = url);

      return;
    }

    if (isBox() && versionCompare(getBoxVersion(), '7.6.0') >= 0) {
      if (isIOS()) {
        /* eslint-disable max-len */
        var urlSchame = 'baiduboxapp://apppage?action=openPage&params=%7b%22pageid%22%3a%22mysubscription%22%2c%22url%22%3a%22https%3a%2f%2fmbd.baidu.com%2fwebpage%3faction%3dicard%26type%3dsubscribe%22%2c%22titile%22%3a%22%22%7d';
        /* eslint-enable max-len */

        invoke(urlSchame); // todo 端能力js-native有了再迁移
      } else if (isAndroid()) {
        var cmd = {
          mode: '7',
          commands: [{
            'mode': '6',

            /* eslint-disable max-len */
            'intent': 'intent:#Intent;S.rn_search_box_key=6;S.rn_bundle_id=box.rnplugin.myattention;S.rn_component_name=MyAttention;end',

            /* eslint-enable max-len */
            'class': 'com.baidu.searchbox.reactnative.RNSearchBoxMainActivity',

            /* eslint-disable fecs-camelcase */
            'min_v': '25167488'
            /* eslint-enable fecs-camelcase */

          }, {
            'mode': '0',

            /* eslint-disable max-len */
            'intent': 'intent:#Intent;S.user_sub_center_load_url=/webpage?action=icard&type=subscribe;B.launch_center=true;B.user_sub_center_search_enable=false;B.create_menu_key=false;end',

            /* eslint-enable max-len */
            'class': 'com.baidu.searchbox.xsearch.UserSubscribeCenterActivity',

            /* eslint-disable fecs-camelcase */
            'dyna_url_key': 'user_sub_center_load_url',
            'http_style': true,
            'min_v': '24381184'
          }],
          min_v: '24381184'
          /* eslint-enable fecs-camelcase */

        }; // todo js-native 支持再迁移

        prompt('Bdbox_android_utils', 'command', [JSON.stringify(cmd)]);
      }

      return;
    }

    var suburl = 'https://mbd.baidu.com/webpage?action=icard&type=subscribe';
    var urlJSON = toJSON(window.location.href);

    if (urlJSON.channel && urlJSON.channel === 'wise_home') {
      suburl += '&channel=wise_home';
    }

    window.location.href = suburl;
  }

  /**
   * @file Created on Tue Nov 27 2018
   * @module browser
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  var emptyFn = function emptyFn() {};
  /**
   * 加载单个文件，支持css/img/js
   * @function loadFile
   * @param {string} path - url 地址
   * @param {function} callbackFn - callback error first
   * @param {object} args - 配置对象，包括async，timeout，maxTries，before 等
   * @param {number} numTries - 不对外参数，用于尝试重试次数
   * @example
   * loadFile('/path/to/foo.js', function(err, path) {
   *     // foo.js loaded
   * });
   * loadFile('css!/path/to/foo', function(err, path) {
   *     // foo css loaded
   * });
   * loadFile('img!/path/to/foo', function(err, path) {
   *     // foo img loaded
   * });
   */


  function loadFile(path, callbackFn, args) {
    var numTries = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var doc = document;
    var pathStripped = path.replace(/^(css|img)!/, '');
    var isCss = false;
    var elem;
    var timer;
    var _args$async = args.async,
        async = _args$async === void 0 ? true : _args$async,
        _args$maxTries = args.maxTries,
        maxTries = _args$maxTries === void 0 ? 1 : _args$maxTries,
        _args$timeout = args.timeout,
        timeout = _args$timeout === void 0 ? 2e4 : _args$timeout,
        _args$before = args.before,
        before = _args$before === void 0 ? null : _args$before;
    var beforeCallbackFn = before;

    if (typeof beforeCallbackFn !== 'function') {
      beforeCallbackFn = emptyFn;
    }

    if (/(^css!|\.css$)/.test(path)) {
      isCss = true; // css

      elem = doc.createElement('link');
      elem.rel = 'stylesheet';
      elem.href = pathStripped;
    } else if (/(^img!|\.(png|gif|jpg|svg)$)/.test(path)) {
      // image
      elem = doc.createElement('img');
      elem.src = pathStripped;
    } else {
      // javascript
      elem = doc.createElement('script');
      elem.src = path;
      elem.async = !!async;
    }

    var cb = function cb(ev) {
      clearTimeout(timer);
      var result;

      if (ev instanceof Error) {
        result = 'e';
      } else {
        result = ev.type[0];
      } // Note: The following code isolates IE using `hideFocus` and treats empty
      // stylesheets as failures to get around lack of onerror support


      if (isCss && 'hideFocus' in elem) {
        try {
          if (!elem.sheet.cssText.length) {
            result = 'e';
          }
        } catch (x) {
          // sheets objects created from load errors don't allow access to
          // `cssText`
          result = 'e';
        }
      } // handle retries in case of load failure


      if (result === 'e') {
        // increment counter
        numTries += 1; // exit function and try again

        if (numTries < maxTries) {
          return loadFile(path, callbackFn, args, numTries);
        }
      }

      elem.onload = elem.onerror = elem.onbeforeload = null;
      elem = null; // error first

      callbackFn(result === 'e' ? ev ? ev : 'error' : null, path);
    };

    elem.onload = elem.onerror = cb;

    if (beforeCallbackFn(path, elem) !== false) {
      var head = doc.head || doc.getElementsByTagName('script')[0];
      head.appendChild(elem); // timeout

      if (timeout > 0) {
        timer = setTimeout(function () {
          cb(new Error('timeout'));
        }, timeout);
      }
    }
  }

  function isFunction$1(fn) {
    return isType(fn, 'function');
  }
  /**
   * @function loadjs
   * @param {object} param - 参数
   * @example
   * loadjs({
   *  url,
   * before,
   * success,
   * error,
   * timeout,
   * async,
   * data,
   * jsonpCallback
   * })
   */


  function loadJS(_ref) {
    var url = _ref.url,
        before = _ref.before,
        success = _ref.success,
        error = _ref.error,
        _ref$timeout = _ref.timeout,
        timeout = _ref$timeout === void 0 ? 2e4 : _ref$timeout,
        async = _ref.async,
        data = _ref.data,
        jsonpCallback = _ref.jsonpCallback;

    if (_typeof(data) === 'object') {
      data = json2query(data);
    }

    if (data) {
      url += (url.indexOf('?') === -1 ? '?' : '&') + data;
    }

    url = url.replace(/[&?]{1,2}/, '?');
    var callbackName = (isFunction$1(jsonpCallback) ? jsonpCallback() : jsonpCallback) || '_boxjsonp' + guid();
    var originalCallback = window[callbackName]; // 返回的数据

    var responseData;

    var cb = function cb(e, p) {
      if (e) {
        error(e, p);
      } else {
        success(responseData && responseData[0]);
      }

      window[callbackName] = originalCallback;

      if (responseData && isFunction$1(originalCallback)) {
        originalCallback(responseData[0]);
      }

      originalCallback = responseData = undefined;
    };

    window[callbackName] = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      responseData = args;
    };

    if (/=\?/.test(url)) {
      url = url.replace(/=\?/, '=' + callbackName);
    }

    loadFile(url, cb, {
      timeout: timeout,
      async: async,
      before: before
    });
  }

  /**
   * @file 关注组件 请求封装
   * @author jiangxiaoli(jiangxiaoli01@baidu.com)
   * 接口请求封装
   */
  /**
   * loadJS 请求封装
   * @function request
   * @param {string} url - 请求的url
   * @return {Object} -返回promise对象
   */

  var request = function request(url) {
    return new Promise(function (resolve, reject) {
      loadJS({
        url: url,
        timeout: 8000,
        success: function success(res) {
          res = res || {};
          resolve(res);
        },
        error: function error(err) {
          reject(err);
        }
      });
    });
  };

  function styleInject(css, ref) {
    if (ref === void 0) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') {
      return;
    }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = ".subscribe,.subscribe-toast-tips{-webkit-box-sizing:border-box;box-sizing:border-box}.subscribe-toast-tips{position:fixed;top:50%;margin-top:-25px;height:50px;width:100%;text-align:center;z-index:200;-webkit-transition:opacity .3s;transition:opacity .3s;opacity:0}.subscribe-toast-tips.subscribe-active{opacity:1}.subscribe-tips-context{-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;width:auto;margin:0 auto;height:50px;min-width:100px;padding:0 17px;font:18px/50px Arial,Helvetica,sans-serif;color:#fff;background-color:rgba(0,0,0,.7);border-radius:2px}@media screen and (max-width:320px){.subscribe-tips-context{font:16px/50px Arial,Helvetica,sans-serif}}.subscribe-toast-click{-webkit-box-sizing:border-box;box-sizing:border-box;position:fixed;bottom:36px;margin-top:-25px;height:50px;width:100%;z-index:200;text-align:center;-webkit-transition:opacity .3s;transition:opacity .3s;opacity:0}.subscribe-toast-click.subscribe-active{opacity:1}.subscribe-click-container{-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;width:92%;margin:0 auto;height:50px;min-width:100px;padding:0 17px;background-color:rgba(0,0,0,.7);border-radius:2px;color:#fff}@media screen and (max-width:320px){.subscribe-click-container{padding:0 10px}}.subscribe-click-context{display:inline-block;vertical-align:top;float:left;-webkit-box-sizing:border-box;box-sizing:border-box;font:16px/50px Arial,Helvetica,sans-serif;width:68%;text-align:left;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}@media screen and (max-width:320px){.subscribe-click-context{font:14px/50px Arial,Helvetica,sans-serif}}.subscribe-click-button{float:right;-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;vertical-align:top;margin-top:11px;width:28%;height:28px;border-radius:2px;font:14px/28px Arial,Helvetica,sans-serif;background-color:#3c76ff;text-align:center}@media screen and (max-width:320px){.subscribe-click-button{font:12px/28px Arial,Helvetica,sans-serif}}.subscribe-click-button:active{background-color:#3970f2}";
  styleInject(css_248z);

  var lite = isBox('lite');
  var mission = isBox('mission');
  var info = isBox('info');
  var version = getBoxVersion();
  var body = document.body;
  var errMessage = {};
  var extHost;
  var isMatrix$1 = isMatrix(); // 矩阵，包括百度看看

  var boxApp = isBox() || isMatrix$1; // 主线、矩阵（包括百度看看）

  var receiveData = {};
  /**
   * 整个关注组件
   * @class SubModule
   */

  var SubModule = /*#__PURE__*/function () {
    function SubModule(options) {
      _classCallCheck(this, SubModule);

      this.id = options.id;
      this.toastBool = null;
      this.toastTransition = null;
      this.ops = options.ops || {};
      this.needUI = this.ops && this.ops.needUI || true;

      if (this.needUI) {
        this.createDom();
      }

      this.ua = getUa();
      this.isNew = boxApp && versionCompare(version, '7.7.0') >= 0;
      this.isNew90 = boxApp && versionCompare(version, '9.0.0') >= 0;
      this.ops.sfrom = this.ua;
      options.cateid && pblog$1('init', [options.cateid]);
      !this.ops.noPv && pblog$1('pv', ['__subscribeComponentsPv__', this.ops, function () {}]);

      if (location.port && !this.ops.onLine) {
        extHost = '';
      } else {
        extHost = 'https://ext.baidu.com';
      }
    }
    /**
     * dom的创建
     * @function createDom
     */


    _createClass(SubModule, [{
      key: "createDom",
      value: function createDom() {
        var that = this;
        var toastDom = {
          oneDom: function oneDom() {
            var tTips = this.createEle(); // 提示toast dom

            tTips.className = 'subscribe-toast subscribe-toast-tips';
            tTips.id = "toast-text-".concat(that.id);
            var contDiv = this.createEle();
            contDiv.className = 'subscribe-tips-context';
            contDiv.innerText = '关注失败';
            tTips.appendChild(contDiv);
            return tTips;
          },
          twoDom: function twoDom() {
            var tClick = this.createEle();
            tClick.className = 'subscribe-toast subscribe-toast-click';
            tClick.id = "toast-click-".concat(that.id);
            var sucDiv = this.createEle();
            sucDiv.className = 'subscribe-click-container';
            /* eslint-disable max-len */

            sucDiv.innerHTML = '<div class="subscribe-click-context">关注成功，请到“<span class="subscribe-click-text2">我的-关注</span>”查看</div><div class="subscribe-click-button" ontouchstart="">去查看</div>';
            /* eslint-enable max-len */

            tClick.appendChild(sucDiv);
            return tClick;
          },
          createEle: function createEle() {
            return document.createElement('div');
          }
        };
        this.toastOne = toastDom.oneDom();
        this.toastTwo = toastDom.twoDom();
      }
      /**
       * 关注查询是否是订阅接口返回回调
       * 关注接口文档 http://wiki.baidu.com/pages/viewpage.action?pageId=237806199
       * @function relateAPI
       */

    }, {
      key: "relateAPI",
      value: function relateAPI(data, callback, failCallback) {
        var relateHandle = {
          paramsTip: function paramsTip(data, callback) {
            // 参数不对抛出异常处理
            if (!data || _typeof(data) !== 'object') {
              throw new Error('params error');
            } else {
              /* eslint-disable fecs-camelcase */
              if (!data.type || !data.sfrom || !data.third_id) {
                /* eslint-enable fecs-camelcase */
                throw new Error('missing params');
              } else if (callback && typeof callback !== 'function') {
                throw new Error('callback must be a function');
              }
            }
          },
          relateReq: function relateReq(data, callback, failCallback) {
            // 请求关注查询接口处理

            /* eslint-disable fecs-camelcase */
            var third_id = data.third_id,
                type = data.type,
                sfrom = data.sfrom,
                disableLogin = data.disableLogin;
            /* eslint-enable fecs-camelcase */

            var relatedata = json2query({
              type: type,
              sfrom: sfrom,

              /* eslint-disable fecs-camelcase */
              third_id: isArray(third_id) ? third_id.join(',') : third_id,

              /* eslint-enable fecs-camelcase */
              // disableLogin 的情况下请求接口需要带上 uid_cuid 参数
              store: this.isNew || disableLogin ? 'uid_cuid' : 'uid'
            });
            var sortAPI = "".concat(extHost, "/api/subscribe/v1/relation/get?callback=?&").concat(relatedata);
            request(sortAPI).then(function (res) {
              callback && callback(res);
            }).catch(function (err) {
              failCallback && failCallback(err);
            });
          }
        };
        relateHandle.paramsTip(data, callback);
        relateHandle.relateReq(data, callback, failCallback);
      }
      /**
       * toast 处理显示
       * @function toast
       * @param config            {object}    配置参数
       * @param config.type       {string}    toast类型 click可点击，tips仅提示
       * @param config.text       {string}    配置文案
       * @param config.url        {string}    toast跳转地址 当type=click时的跳转url，默认跳 手百我的关注
       * @param config.callback   {function}  回调函数callback
       *
       * @update 11.1改动:满足toast-tips,文案定制
       */

    }, {
      key: "toast",
      value: function toast(config) {
        var that = this;
        var toastHandle = {
          init: function init(config) {
            this.paramTip(config);

            try {
              this.clear();
              this.active();
              this.toastType(config);
              return true;
            } catch (e) {
              console.warn(e);
              return e || false;
            }
          },
          paramTip: function paramTip(config) {
            // 异常提示
            if (!isPlainObject(config) || isEmptyObject(config)) {
              throw new Error('params error,config is not a json');
            }

            var type = config.type || null;

            if (!type || typeof type !== 'string') {
              throw new Error('params error');
            }
          },
          clear: function clear() {
            that.toastBool && clearTimeout(that.toastBool);
            that.toastTransition && clearTimeout(that.toastTransition);
          },
          active: function active() {
            var toastQuery = body.querySelectorAll('.subscribe-toast');
            var length = toastQuery.length;

            if (length) {
              for (var i = 0; i < length; i++) {
                toastQuery[i].parentNode.removeChild(toastQuery[i]);
                removeClass(toastQuery[i], 'subscribe-active');
              }
            }
          },
          toastType: function toastType(config) {
            // toast类型
            var type = config.type;

            switch (type) {
              case 'tips':
                {
                  that.pblogFuc('tips', {});
                  this.tipsFuc(config);
                  break;
                }

              case 'click':
                {
                  that.pblogFuc('click', {});
                  that.clickFuc(config);
                  break;
                }
            }
          },
          tipsFuc: function tipsFuc(config) {
            // tips方式
            var ctext = config.text || null;

            if (boxApp) {
              return clientToast(ctext);
            }

            body.appendChild(that.toastOne);
            var toastOne = document.querySelector("#toast-text-".concat(that.id));
            that.toastTransition = setTimeout(function () {
              if (ctext) {
                toastOne.querySelector('.subscribe-tips-context').innerText = ctext;
              }

              toastOne.className = 'subscribe-toast subscribe-toast-tips subscribe-active';
            }, 10);
            that.toastBool = setTimeout(function () {
              try {
                that.toastOne.parentNode.removeChild(that.toastOne);
              } catch (e) {
                return false;
              }
            }, 3000);
          }
        };
        return toastHandle.init(config);
      }
      /**
       * 日志打点公用方法处理
       * @function pblogFuc
       * @param pos  {string} - 类型
       * @param opt  {object} - {} || 新增
       */

    }, {
      key: "pblogFuc",
      value: function pblogFuc(pos, opt) {
        var _this$ops = this.ops,
            type = _this$ops.type,
            isaladin = _this$ops.isaladin;
        pblog$1('event', ['subComponents', 'interface', _objectSpread2(_objectSpread2({}, opt), {}, {
          isaladin: isaladin ? '1' : '0',
          ua: this.ua,
          pos: pos,
          source: type ? type : 'others'
        }), 18, function () {}]);
      }
      /**
       * click toast方式
       * @param {Object} config 配置参数
       * @param {string} config.type toast类型 click可点击，tips仅提示
       * @param {string} config.text 配置文案
       * @param {string} config.url toast跳转地址 当type=click时的跳转url，默认跳 手百我的关注
       * @function clickFuc
       */

    }, {
      key: "clickFuc",
      value: function clickFuc(config) {
        var that = this;
        var clickHandle = {
          init: function init(config) {
            if ((lite || info || mission) && !config.duanwu) {
              // click方式 lite、看多多处理
              return this.tip('关注成功，请到“我的-关注”查看');
            }

            if (that.isNew90 && !config.duanwu) {
              // click方式 9.0以上版本提示处理
              var text = config.text;
              return this.tip("".concat(text ? text : '关注成功'));
            }

            this.lowTip(config).init();
            this.lookClick(config);
          },
          tip: function tip(text) {
            that.toast({
              type: 'tips',
              text: text
            });
          },
          lowTip: function lowTip(config) {
            // 低版本toast处理
            return {
              init: function init() {
                this.lowTipDom();
                this.lowTipSet();
              },
              lowTipDom: function lowTipDom() {
                var isNew = that.isNew;
                var versionText = isNew ? '关注' : '我的关注';

                if (config.duanwu) {
                  that.toastTwo.querySelector('.subscribe-click-context').innerHTML = config.text;
                  that.toastTwo.querySelector('.subscribe-click-button').innerText = config.button;
                } else {
                  /* eslint-disable max-len */
                  that.toastTwo.querySelector('.subscribe-click-text2').innerText = boxApp ? versionText : '我的-关注';
                  /* eslint-enable max-len */
                }

                body.appendChild(that.toastTwo);
                var button = that.toastTwo.querySelector('.subscribe-click-button');

                if (!isNew && boxApp) {
                  that.toastTwo.style.bottom = '100px';
                  button.style.display = 'none';
                } else if (lite) {
                  button.style.display = 'none';
                }
              },
              lowTipSet: function lowTipSet() {
                that.toastTransition = setTimeout(function () {
                  addClass(that.toastTwo, 'subscribe-active');
                }, 10);
                that.toastBool = setTimeout(function () {
                  try {
                    that.toastTwo.parentNode.removeChild(that.toastTwo);
                  } catch (e) {
                    return false;
                  }
                }, 3000);
              }
            };
          },
          lookClick: function lookClick(config) {
            // toast click方式 点击查看处理
            var callback = config.callback || null;
            var url = config.url || null;
            var lookDom = document.querySelector("#toast-click-".concat(that.id, " .subscribe-click-button"));
            lookDom.onclick = null;
            setTimeout(function () {
              lookDom.onclick = function (e) {
                that.toastTwo.parentNode.removeChild(that.toastTwo);

                if (typeof callback === 'function') {
                  callback && callback();
                } else {
                  that.toLandingPage(url);
                }
              };
            }, 10);
          }
        };
        clickHandle.init(config);
      }
      /**
       * 框内cmd打开，框外location跳转
       * 无url则跳转我的关注，7.6以下以及框外执行location跳转
       * @param {string} url  - 跳转url
       * @param {boolean} isToast - 打点from参数
       * @function toLandingPage
       */

    }, {
      key: "toLandingPage",
      value: function toLandingPage(url, isToast) {
        this.pblogFuc('toLanding', {
          from: isToast ? 'button' : 'toast'
        });
        openPage(url);
      }
      /*
       * 调关注接口处理提供外部入口及返回回调
       * @function subscribe
       * @param {Object} data  - 初始化数据
       * @param {callback} callback - 成功回调
       * @param {callback} failCallback - 失败回调
       * @param {boolean} unlogin - 接口成功处理回调
       * 用法实例
       *  initSubmodule.subscribe({
       *      type:'media',
       *      op_type:'add',
       *      third_id:'1536773934526173',
       *      sfrom:'sbox',
       *      source:'mysub_h5'
       *  },function(){
       *       // 关注成功跳转相关页面
       *       initSubmodule.toast({
       *           type:'click',
       *           callback: () => {
       *               initSubmodule.toLandingPage('https://baidu.com');
       *           }
       *       });
       *   }, function() {}, false);
       */

    }, {
      key: "subscribe",
      value: function subscribe(data, callback, failCallback, unlogin) {
        var that = this;
        var subscribeHandle = {
          init: function init(data, callback, failCallback, unlogin) {
            this.paramTip(data, callback);
            that.pblogFuc('subscribe', {
              type: data.op_type
            });
            this.statusReq(data, callback, failCallback, unlogin);
          },
          paramTip: function paramTip(data, callback) {
            if (!data || _typeof(data) !== 'object') {
              throw new Error('params error');
            } else {
              if (!data.type || !data.op_type || !data.third_id) {
                throw new Error('missing params');
              } else if (callback && typeof callback !== 'function') {
                throw new Error('callback must be a function');
              }
            }
          },
          statusReq: function statusReq(data, callback, failCallback, unlogin) {
            var statusAPI = "".concat(extHost, "/api/subscribe/v1/relation/status?callback=?");
            request(statusAPI).then(function (res) {
              that.statusHandle().init(res, unlogin, data, callback, failCallback);
            }).catch(function (err) {
              that.failcb(err, failCallback);
            });
          }
        };
        subscribeHandle.init(data, callback, failCallback, unlogin);
      }
      /**
       * status 返回成功处理
       * @function statusHandle
       * @return {Object} - 处理调关注接口对象
       */

    }, {
      key: "statusHandle",
      value: function statusHandle() {
        var that = this;
        return {
          init: function init(res, unlogin, data, callback, failCallback) {
            var receiveAPI = this.getReceiveUrl(res, unlogin, data, callback, failCallback);
            var disableLogin = data.disableLogin;
            this.getStatus(res, unlogin, receiveAPI, callback, failCallback, disableLogin);
          },
          getReceiveUrl: function getReceiveUrl(res, unlogin, data, callback, failCallback) {
            // 返回receive url

            /* eslint-disable fecs-camelcase */
            var type = data.type,
                op_type = data.op_type,
                third_id = data.third_id,
                sfrom = data.sfrom,
                source = data.source,
                sid = data.sid,
                position = data.position,
                ext = data.ext,
                disableLogin = data.disableLogin;
            /* eslint-enable fecs-camelcase */

            receiveData = {
              type: type,

              /* eslint-disable fecs-camelcase */
              third_id: third_id,
              op_type: op_type ? op_type : 'add',

              /* eslint-enable fecs-camelcase */
              sfrom: sfrom ? sfrom : 'sbox',
              source: source ? source : 'mysub_h5',
              // disableLogin 的情况下请求接口需要带上 uid_cuid 参数
              store: that.isNew || lite || disableLogin ? 'uid_cuid' : 'uid',
              sid: sid ? sid : '',
              position: position || ''
            };
            ext && isPlainObject(ext) && (receiveData.ext = encodeURIComponent(JSON.stringify(ext)));
            return "".concat(extHost, "/api/subscribe/v1/relation/receive?callback=?&").concat(json2query(receiveData));
          },
          getStatus: function getStatus(res, unlogin, receiveAPI, callback, failCallback, disableLogin) {
            if (res.errno === 0) {
              // 走处理登录态的逻辑
              var isLogin = res.data.isLogin;

              if (!isLogin && !boxApp) {
                // wise 登录处理
                this.wiseLogin(res, unlogin, failCallback);
                return;
              } // 如果传入 disableLogin 为 true 的话，则不走端内登录的逻辑


              if (!disableLogin && !isLogin && boxApp && !that.isNew) {
                // 端内 登录处理
                this.boxLogin(res, failCallback);
                return;
              }

              this.receiveReq(receiveAPI, callback, failCallback); // receive 关注接口请求

              return;
            }

            errMessage = this.message(10020, res.errmsg); // 登录接口错误

            that.failcb(errMessage, failCallback);
          },
          wiseLogin: function wiseLogin(res, unlogin, failCallback) {
            // 端外登录
            if (unlogin) {
              unlogin();
              return;
            }

            errMessage = this.message(10000, res.errmsg);
            that.failcb(errMessage, failCallback);
            window.location.href = "http://wappass.baidu.com/passport/login?u=".concat(encodeURIComponent(window.location.href));
          },
          boxLogin: function boxLogin(res, failCallback) {
            // 端内登录
            errMessage = this.message(10010, res.errmsg);
            that.failcb(errMessage, failCallback);
            pblog$1('event', ['subComponents', 'interface', {
              isaladin: that.ops.isaladin ? '1' : '0',
              ua: that.ua,
              pos: 'toLogin',
              source: that.ops.type ? that.ops.type : 'others'
            }, 18, function () {}]);
            login();
          },
          receiveReq: function receiveReq(receiveAPI, callback, failCallback) {
            var _this = this;

            // 关注接口调用
            request(receiveAPI).then(function (res) {
              _this.receiveN(res, callback, failCallback);
            }).catch(function (err) {
              that.failcb(err, failCallback);
            });
          },
          message: function message(errno, errmsg) {
            return {
              errno: errno,
              errmsg: errmsg || ''
            };
          },
          receiveN: function receiveN(data, callback, failCallback) {
            // 调关注接口处理提供外部入口及返回回调
            var store = function store() {
              setStorage('follow_status_' + receiveData.third_id, {
                data: [{
                  /* eslint-disable fecs-camelcase */
                  is_follow: receiveData.op_type === 'add' ? '1' : '0'
                  /* eslint-enable fecs-camelcase */

                }]
              });
            };

            var sendBroad = function sendBroad() {
              sendBroadcast({
                type: receiveData.type,

                /* eslint-disable fecs-camelcase */
                third_id: encodeURIComponent(receiveData.third_id),
                is_follow: receiveData.op_type === 'add' ? '1' : '0',

                /* eslint-enable fecs-camelcase */
                position: receiveData.position
              });
            };

            if (data.errno === 0) {
              that.pblogFuc('subscribe', {
                status: 'success',
                type: receiveData.op_type
              });

              if (versionCompare(version, '10.0') >= 0) {
                store();
                sendBroad();
              }

              callback && callback(data);
              return;
            }

            that.failcb(data, failCallback); // 关注接口错误处理
          }
        };
      }
      /*
       * 失败toast提示
       * @function failcb
       */

    }, {
      key: "failcb",
      value: function failcb(errData, failCallback) {
        if (!errData.errno) {
          // 未捕获的错误类型，可能是断网，接口500
          errData = {
            errno: 500,
            errmsg: 'request failed,uncaught error'
          };
        }

        if (failCallback) {
          // 如果有 failCallback 就直接走它的逻辑
          failCallback(errData);
        } else {
          if (errData.errno === 800200) {
            // 展示后端返回文案
            this.toast({
              type: 'tips',
              text: errData.errmsg || '关注失败'
            });
          } else if (errData.errno === 10010 || errData.errno === 10020) ; else if (errData.errno !== 10000) {
            // 框外未登录不弹窗,其他情况显示默认弹窗
            this.toast({
              type: 'tips',
              text: '关注失败'
            });
          }
        }

        errMessage = {}; // 执行后清空
      }
      /*
       * 调关注接口处理提供外部入口及返回回调
       * @function receiveN
       * @param sdata  {Object}  - 成功返回的数据
       * @param receiveData {Object} - 同上
       * @param callback  {callback}
       */

    }, {
      key: "receiveN",
      value: function receiveN(sdata, receiveData, callback) {
        // MARK: 目前这个函数未被使用
        var suc = sdata.errno;

        if (suc === 0) {
          this.pblogFuc('subscribe', {
            status: 'success',
            type: receiveData.op_type
          });

          if (versionCompare(version, '10.0') >= 0) {
            setStorage('follow_status_' + receiveData.third_id, {
              data: [{
                /* eslint-disable fecs-camelcase */
                is_follow: receiveData.op_type === 'add' ? '1' : '0'
                /* eslint-enable fecs-camelcase */

              }]
            });
            sendBroadcast({
              type: receiveData.type,

              /* eslint-disable fecs-camelcase */
              third_id: encodeURIComponent(receiveData.third_id),
              is_follow: receiveData.op_type === 'add' ? '1' : '0',

              /* eslint-enable fecs-camelcase */
              position: receiveData.position
            });
          }

          callback && callback(sdata);
        } else {
          // 关注接口错误
          this.failcb(sdata);
        }
      }
      /*
       * 登录处理
       * @function toLogin
       */

    }, {
      key: "toLogin",
      value: function toLogin() {
        pblog$1('event', ['subComponents', 'interface', {
          isaladin: this.ops.isaladin ? '1' : '0',
          ua: this.ua,
          pos: 'toLogin',
          source: this.ops.type ? this.ops.type : 'others'
        }, 18, function () {}]);
        login();
      }
      /*
       * 关注封装 参数同subscribe
       * @function showDialog
       */

    }, {
      key: "showDialog",
      value: function showDialog(text, data, callback, failCallback) {
        return this.subscribe(data, callback, failCallback);
      }
    }]);

    return SubModule;
  }();
  var index$1 = (function (options) {
    return new SubModule(options);
  });

  exports.SubModule = SubModule;
  exports.default = index$1;

  Object.defineProperty(exports, '__esModule', { value: true });

});
