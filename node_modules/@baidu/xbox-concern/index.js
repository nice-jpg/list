/**
 * 关注组件迁移及优化
 * @link http://icode.baidu.com/repos/baidu/searchbox-fe/common/blob/master:static/bdbox/subscribe/isub.js
 * @file 关注组件
 * @author jiangxiaoli01
 */
import json2query from '@baidu/xbox/json2query';
import {isPlainObject, isEmptyObject, isArray} from '@baidu/xbox/is';
import getBoxVersion from '@baidu/xbox/get-box-version';
import versionCompare from '@baidu/xbox/version_compare';
import {isBox, isMatrix as matrix, getUa} from '@baidu/xbox/browser/detect';
import pblog from '@baidu/xbox/monitor/pblog';
import {addClass, removeClass} from '@baidu/xbox/browser/class';
import {sendBroadcast, login, openPage, clientToast, setStorage} from './concern/invoke';
import {request} from './concern/request';

import './style/concern.less';

const lite = isBox('lite');
const mission = isBox('mission');
const info = isBox('info');

const version = getBoxVersion();
const body = document.body;
let errMessage = {};
let host;
let extHost;
const isMatrix = matrix(); // 矩阵，包括百度看看
const boxApp = isBox() || isMatrix; // 主线、矩阵（包括百度看看）
let receiveData = {};

/**
 * 整个关注组件
 * @class SubModule
 */
export class SubModule {
    constructor(options) {
        this.id = options.id;
        this.toastBool = null;
        this.toastTransition = null;
        this.ops = options.ops || {};
        this.needUI = (this.ops && this.ops.needUI) || true;
        if (this.needUI) {
            this.createDom();
        }
        this.ua = getUa();
        this.isNew = boxApp && versionCompare(version, '7.7.0') >= 0;
        this.isNew90 = boxApp && versionCompare(version, '9.0.0') >= 0;
        this.ops.sfrom = this.ua;
        options.cateid && pblog('init', [options.cateid]);
        !this.ops.noPv && pblog('pv', ['__subscribeComponentsPv__', this.ops, () => {}]);
        if (location.port && !this.ops.onLine) {
            host = '';
            extHost = '';
        } else {
            host = 'https://mbd.baidu.com';
            extHost = 'https://ext.baidu.com';
        }
    }

    /**
     * dom的创建
     * @function createDom
     */
    createDom() {
        let that = this;
        let toastDom = {
            oneDom() {
                let tTips = this.createEle(); // 提示toast dom
                tTips.className = 'subscribe-toast subscribe-toast-tips';
                tTips.id = `toast-text-${that.id}`;
                let contDiv = this.createEle();
                contDiv.className = 'subscribe-tips-context';
                contDiv.innerText = '关注失败';
                tTips.appendChild(contDiv);
                return tTips;
            },
            twoDom() {
                let tClick = this.createEle();
                tClick.className = 'subscribe-toast subscribe-toast-click';
                tClick.id = `toast-click-${that.id}`;
                let sucDiv = this.createEle();
                sucDiv.className = 'subscribe-click-container';
                /* eslint-disable max-len */
                sucDiv.innerHTML = '<div class="subscribe-click-context">关注成功，请到“<span class="subscribe-click-text2">我的-关注</span>”查看</div><div class="subscribe-click-button" ontouchstart="">去查看</div>';
                /* eslint-enable max-len */
                tClick.appendChild(sucDiv);
                return tClick;
            },
            createEle() {
                return document.createElement('div');
            }
        };
        this.toastOne = toastDom.oneDom();
        this.toastTwo = toastDom.twoDom();
    }

    /**
     * 关注查询是否是订阅接口返回回调
     * 关注接口文档 http://wiki.baidu.com/pages/viewpage.action?pageId=237806199
     * @function relateAPI
     */
    relateAPI(data, callback, failCallback) {
        let relateHandle = {
            paramsTip(data, callback) { // 参数不对抛出异常处理
                if (!data || typeof data !== 'object') {
                    throw new Error('params error');
                } else {
                    /* eslint-disable fecs-camelcase */
                    if (!data.type || !data.sfrom || !data.third_id) {
                        /* eslint-enable fecs-camelcase */
                        throw new Error('missing params');
                    } else if (callback && typeof callback !== 'function') {
                        throw new Error('callback must be a function');
                    }
                }
            },
            relateReq(data, callback, failCallback) { // 请求关注查询接口处理
                /* eslint-disable fecs-camelcase */
                let {third_id, type, sfrom, disableLogin} = data;
                /* eslint-enable fecs-camelcase */
                let relatedata = json2query({
                    type,
                    sfrom,
                    /* eslint-disable fecs-camelcase */
                    third_id: isArray(third_id) ? third_id.join(',') : third_id,
                    /* eslint-enable fecs-camelcase */
                    // disableLogin 的情况下请求接口需要带上 uid_cuid 参数
                    store: (this.isNew || disableLogin) ? 'uid_cuid' : 'uid'
                });
                let sortAPI = `${extHost}/api/subscribe/v1/relation/get?callback=?&${relatedata}`;
                request(sortAPI).then(res => {
                    callback && callback(res);
                }).catch(err => {
                    failCallback && failCallback(err);
                });
            }
        };
        relateHandle.paramsTip(data, callback);
        relateHandle.relateReq(data, callback, failCallback);
    }

    /**
     * toast 处理显示
     * @function toast
     * @param config            {object}    配置参数
     * @param config.type       {string}    toast类型 click可点击，tips仅提示
     * @param config.text       {string}    配置文案
     * @param config.url        {string}    toast跳转地址 当type=click时的跳转url，默认跳 手百我的关注
     * @param config.callback   {function}  回调函数callback
     *
     * @update 11.1改动:满足toast-tips,文案定制
     */
    toast(config) {
        let that = this;
        let toastHandle = {
            init(config) {
                this.paramTip(config);
                try {
                    this.clear();
                    this.active();
                    this.toastType(config);
                    return true;
                } catch (e) {
                    console.warn(e);
                    return e || false;
                }
            },
            paramTip(config) { // 异常提示
                if (!isPlainObject(config) || isEmptyObject(config)) {
                    throw new Error('params error,config is not a json');
                }
                let type = config.type || null;
                if (!type || typeof type !== 'string') {
                    throw new Error('params error');
                }
            },
            clear() {
                that.toastBool && clearTimeout(that.toastBool);
                that.toastTransition && clearTimeout(that.toastTransition);
            },
            active() {
                let toastQuery = body.querySelectorAll('.subscribe-toast');
                let length = toastQuery.length;
                if (length) {
                    for (let i = 0; i < length; i++) {
                        toastQuery[i].parentNode.removeChild(toastQuery[i]);
                        removeClass(toastQuery[i], 'subscribe-active');
                    }
                }
            },
            toastType(config) { // toast类型
                let {type} = config;
                switch (type) {
                    case 'tips': {
                        that.pblogFuc('tips', {});
                        this.tipsFuc(config);
                        break;
                    }
                    case 'click': {
                        that.pblogFuc('click', {});
                        that.clickFuc(config);
                        break;
                    }
                }
            },
            tipsFuc(config) { // tips方式
                const ctext = config.text || null;
                if (boxApp) {
                    return clientToast(ctext);
                }
                body.appendChild(that.toastOne);
                const toastOne = document.querySelector(`#toast-text-${that.id}`);
                that.toastTransition = setTimeout(() => {
                    if (ctext) {
                        toastOne.querySelector('.subscribe-tips-context').innerText = ctext;
                    }
                    toastOne.className = 'subscribe-toast subscribe-toast-tips subscribe-active';
                }, 10);
                that.toastBool = setTimeout(() => {
                    try {
                        that.toastOne.parentNode.removeChild(that.toastOne);
                    } catch (e) {
                        return false;
                    }
                }, 3000);
            }
        };
        return toastHandle.init(config);
    }

    /**
     * 日志打点公用方法处理
     * @function pblogFuc
     * @param pos  {string} - 类型
     * @param opt  {object} - {} || 新增
     */
    pblogFuc(pos, opt) {
        let {type, isaladin} = this.ops;
        pblog('event', ['subComponents', 'interface', {
            ...opt,
            isaladin: isaladin ? '1' : '0',
            ua: this.ua,
            pos,
            source: type ? type : 'others'
        }, 18, () => {}]);
    }

    /**
     * click toast方式
     * @param {Object} config 配置参数
     * @param {string} config.type toast类型 click可点击，tips仅提示
     * @param {string} config.text 配置文案
     * @param {string} config.url toast跳转地址 当type=click时的跳转url，默认跳 手百我的关注
     * @function clickFuc
     */
    clickFuc(config) {
        let that = this;
        let clickHandle = {
            init(config) {
                if ((lite || info || mission) && !config.duanwu) { // click方式 lite、看多多处理
                    return this.tip('关注成功，请到“我的-关注”查看');
                }
                if (that.isNew90 && !config.duanwu) { // click方式 9.0以上版本提示处理
                    let text = config.text;
                    return this.tip(`${text ? text : '关注成功'}`);
                }
                this.lowTip(config).init();
                this.lookClick(config);
            },
            tip(text) {
                that.toast({
                    type: 'tips',
                    text
                });
            },
            lowTip(config) { // 低版本toast处理
                return {
                    init() {
                        this.lowTipDom();
                        this.lowTipSet();
                    },
                    lowTipDom() {
                        let isNew = that.isNew;
                        let versionText = isNew ? '关注' : '我的关注';
                        if (config.duanwu) {
                            that.toastTwo.querySelector('.subscribe-click-context').innerHTML = config.text;
                            that.toastTwo.querySelector('.subscribe-click-button').innerText = config.button;
                        } else {
                            /* eslint-disable max-len */
                            that.toastTwo.querySelector('.subscribe-click-text2').innerText = boxApp ? versionText : '我的-关注';
                            /* eslint-enable max-len */
                        }
                        body.appendChild(that.toastTwo);
                        let button = that.toastTwo.querySelector('.subscribe-click-button');
                        if (!isNew && boxApp) {
                            that.toastTwo.style.bottom = '100px';
                            button.style.display = 'none';
                        } else if (lite) {
                            button.style.display = 'none';
                        }
                    },
                    lowTipSet() {
                        that.toastTransition = setTimeout(() => {
                            addClass(that.toastTwo, 'subscribe-active');
                        }, 10);
                        that.toastBool = setTimeout(() => {
                            try {
                                that.toastTwo.parentNode.removeChild(that.toastTwo);
                            } catch (e) {
                                return false;
                            }
                        }, 3000);
                    }
                };
            },
            lookClick(config) { // toast click方式 点击查看处理
                const callback = config.callback || null;
                const url = config.url || null;
                let lookDom = document.querySelector(`#toast-click-${that.id} .subscribe-click-button`);
                lookDom.onclick = null;
                setTimeout(() => {
                    lookDom.onclick = e => {
                        that.toastTwo.parentNode.removeChild(that.toastTwo);
                        if (typeof callback === 'function') {
                            callback && callback();
                        } else {
                            that.toLandingPage(url);
                        }
                    };
                }, 10);
            }
        };
        clickHandle.init(config);
    }

    /**
     * 框内cmd打开，框外location跳转
     * 无url则跳转我的关注，7.6以下以及框外执行location跳转
     * @param {string} url  - 跳转url
     * @param {boolean} isToast - 打点from参数
     * @function toLandingPage
     */
    toLandingPage(url, isToast) {
        this.pblogFuc('toLanding', {
            from: isToast ? 'button' : 'toast'
        });
        openPage(url);
    }

    /*
     * 调关注接口处理提供外部入口及返回回调
     * @function subscribe
     * @param {Object} data  - 初始化数据
     * @param {callback} callback - 成功回调
     * @param {callback} failCallback - 失败回调
     * @param {boolean} unlogin - 接口成功处理回调
     * 用法实例
     *  initSubmodule.subscribe({
     *      type:'media',
     *      op_type:'add',
     *      third_id:'1536773934526173',
     *      sfrom:'sbox',
     *      source:'mysub_h5'
     *  },function(){
     *       // 关注成功跳转相关页面
     *       initSubmodule.toast({
     *           type:'click',
     *           callback: () => {
     *               initSubmodule.toLandingPage('https://baidu.com');
     *           }
     *       });
     *   }, function() {}, false);
     */
    subscribe(data, callback, failCallback, unlogin) {
        let that = this;
        let subscribeHandle = {
            init(data, callback, failCallback, unlogin) {
                this.paramTip(data, callback);
                that.pblogFuc('subscribe', {
                    type: data.op_type
                });
                this.statusReq(data, callback, failCallback, unlogin);
            },
            paramTip(data, callback) {
                if (!data || typeof data !== 'object') {
                    throw new Error('params error');
                } else {
                    if (!data.type || !data.op_type || !data.third_id) {
                        throw new Error('missing params');
                    } else if (callback && typeof callback !== 'function') {
                        throw new Error('callback must be a function');
                    }
                }
            },
            statusReq(data, callback, failCallback, unlogin) {
                let statusAPI = `${extHost}/api/subscribe/v1/relation/status?callback=?`;
                request(statusAPI).then(res => {
                    that.statusHandle().init(res, unlogin, data, callback, failCallback);
                }).catch(err => {
                    that.failcb(err, failCallback);
                });
            }
        };
        subscribeHandle.init(data, callback, failCallback, unlogin);
    }

    /**
     * status 返回成功处理
     * @function statusHandle
     * @return {Object} - 处理调关注接口对象
     */
    statusHandle() {
        let that = this;
        return {
            init(res, unlogin, data, callback, failCallback) {
                const receiveAPI = this.getReceiveUrl(res, unlogin, data, callback, failCallback);
                const {disableLogin} = data;
                this.getStatus(res, unlogin, receiveAPI, callback, failCallback, disableLogin);
            },
            getReceiveUrl(res, unlogin, data, callback, failCallback) { // 返回receive url
                /* eslint-disable fecs-camelcase */
                let {type, op_type, third_id, sfrom, source, sid, position, ext, disableLogin} = data;
                /* eslint-enable fecs-camelcase */
                receiveData = {
                    type,
                    /* eslint-disable fecs-camelcase */
                    third_id,
                    op_type: op_type ? op_type : 'add',
                    /* eslint-enable fecs-camelcase */
                    sfrom: sfrom ? sfrom : 'sbox',
                    source: source ? source : 'mysub_h5',
                    // disableLogin 的情况下请求接口需要带上 uid_cuid 参数
                    store: (that.isNew || lite || disableLogin) ? 'uid_cuid' : 'uid',
                    sid: sid ? sid : '',
                    position: position || ''
                };
                ext && isPlainObject(ext) && (receiveData.ext = encodeURIComponent(JSON.stringify(ext)));
                return `${extHost}/api/subscribe/v1/relation/receive?callback=?&${json2query(receiveData)}`;
            },
            getStatus(res, unlogin, receiveAPI, callback, failCallback, disableLogin) {
                if (res.errno === 0) {
                    // 走处理登录态的逻辑
                    let isLogin = res.data.isLogin;
                    if (!isLogin && !boxApp) { // wise 登录处理
                        this.wiseLogin(res, unlogin, failCallback);
                        return;
                    }
                    // 如果传入 disableLogin 为 true 的话，则不走端内登录的逻辑
                    if (!disableLogin && !isLogin && boxApp && !that.isNew) { // 端内 登录处理
                        this.boxLogin(res, failCallback);
                        return;
                    }
                    this.receiveReq(receiveAPI, callback, failCallback); // receive 关注接口请求
                    return;
                }
                errMessage = this.message(10020, res.errmsg); // 登录接口错误
                that.failcb(errMessage, failCallback);
            },
            wiseLogin(res, unlogin, failCallback) { // 端外登录
                if (unlogin) {
                    unlogin();
                    return;
                }
                errMessage = this.message(10000, res.errmsg);
                that.failcb(errMessage, failCallback);
                window.location.href = `http://wappass.baidu.com/passport/login?u=${encodeURIComponent(window.location.href)}`;
            },
            boxLogin(res, failCallback) { // 端内登录
                errMessage = this.message(10010, res.errmsg);
                that.failcb(errMessage, failCallback);
                pblog('event', ['subComponents', 'interface', {
                    isaladin: that.ops.isaladin ? '1' : '0',
                    ua: that.ua,
                    pos: 'toLogin',
                    source: that.ops.type ? that.ops.type : 'others'
                }, 18, () => {}]);
                login();
            },
            receiveReq(receiveAPI, callback, failCallback) { // 关注接口调用
                request(receiveAPI).then(res => {
                    this.receiveN(res, callback, failCallback);
                }).catch(err => {
                    that.failcb(err, failCallback);
                });
            },
            message(errno, errmsg) {
                return {
                    errno,
                    errmsg: errmsg || ''
                };
            },
            receiveN(data, callback, failCallback) { // 调关注接口处理提供外部入口及返回回调
                let store = () => {
                    setStorage('follow_status_' + receiveData.third_id, {
                        data: [{
                            /* eslint-disable fecs-camelcase */
                            is_follow: receiveData.op_type === 'add' ? '1' : '0'
                            /* eslint-enable fecs-camelcase */
                        }]
                    });
                };
                let sendBroad = () => {
                    sendBroadcast({
                        type: receiveData.type,
                        /* eslint-disable fecs-camelcase */
                        third_id: encodeURIComponent(receiveData.third_id),
                        is_follow: receiveData.op_type === 'add' ? '1' : '0',
                        /* eslint-enable fecs-camelcase */
                        position: receiveData.position
                    });
                };
                if (data.errno === 0) {
                    that.pblogFuc('subscribe', {
                        status: 'success',
                        type: receiveData.op_type
                    });
                    if (versionCompare(version, '10.0') >= 0) {
                        store();
                        sendBroad();
                    }
                    callback && callback(data);
                    return;
                }
                that.failcb(data, failCallback); // 关注接口错误处理
            }
        };
    }

    /*
     * 失败toast提示
     * @function failcb
     */
    failcb(errData, failCallback) {
        if (!errData.errno) {
            // 未捕获的错误类型，可能是断网，接口500
            errData = {
                errno: 500,
                errmsg: 'request failed,uncaught error'
            };
        }
        if (failCallback) {
            // 如果有 failCallback 就直接走它的逻辑
            failCallback(errData);
        } else {
            if (errData.errno === 800200) {
                // 展示后端返回文案
                this.toast({
                    type: 'tips',
                    text: errData.errmsg || '关注失败'
                });
            } else if (errData.errno === 10010 || errData.errno === 10020) {
                // lite 登录 toast 不作任何处理
            } else if (errData.errno !== 10000) {
                // 框外未登录不弹窗,其他情况显示默认弹窗
                this.toast({
                    type: 'tips',
                    text: '关注失败'
                });
            }
        }
        errMessage = {}; // 执行后清空
    }
    /*
     * 调关注接口处理提供外部入口及返回回调
     * @function receiveN
     * @param sdata  {Object}  - 成功返回的数据
     * @param receiveData {Object} - 同上
     * @param callback  {callback}
     */
    receiveN(sdata, receiveData, callback) {
        // MARK: 目前这个函数未被使用
        let suc = sdata.errno;
        if (suc === 0) {
            this.pblogFuc('subscribe', {
                status: 'success',
                type: receiveData.op_type
            });
            if (versionCompare(version, '10.0') >= 0) {
                setStorage('follow_status_' + receiveData.third_id, {
                    data: [{
                        /* eslint-disable fecs-camelcase */
                        is_follow: receiveData.op_type === 'add' ? '1' : '0'
                        /* eslint-enable fecs-camelcase */
                    }]
                });
                sendBroadcast({
                    type: receiveData.type,
                    /* eslint-disable fecs-camelcase */
                    third_id: encodeURIComponent(receiveData.third_id),
                    is_follow: receiveData.op_type === 'add' ? '1' : '0',
                    /* eslint-enable fecs-camelcase */
                    position: receiveData.position
                });
            }
            callback && callback(sdata);
        } else {
            // 关注接口错误
            this.failcb(sdata);
        }
    }
    /*
     * 登录处理
     * @function toLogin
     */
    toLogin() {
        pblog('event', ['subComponents', 'interface', {
            isaladin: this.ops.isaladin ? '1' : '0',
            ua: this.ua,
            pos: 'toLogin',
            source: this.ops.type ? this.ops.type : 'others'
        }, 18, () => {}]);
        login();
    }
    /*
     * 关注封装 参数同subscribe
     * @function showDialog
     */
    showDialog(text, data, callback, failCallback) {
        return this.subscribe(data, callback, failCallback);
    }
}

export default options => new SubModule(options);
