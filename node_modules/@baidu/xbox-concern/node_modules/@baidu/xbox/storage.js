/**
 * @file 封装 ls 和 ss 的 cache 用法
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
let storageSupport = {};
['local', 'session'].forEach(v => {
    try {
        const name = v + 'Storage';
        let t = name in window && window[name] !== null;
        const test = {
            k: '__xbox_test_',
            v: 'it\'s great'
        };
        if (t) {
            const storage = window[name];
            storage.setItem(test.k, test.v);
            t = test.v === storage.getItem(test.k);
            storage.removeItem(test.k);
        }

        storageSupport[v] = true;
    }
    catch (e) {
        storageSupport[v] = false;
    }
});

const fakeStorage = {
    __fake__: true,
    data: {},
    setItem: (k, v) => {
        fakeStorage.data[k] = v;
    },
    getItem: k => {
        return fakeStorage.data[k];
    },
    removeItem: k => {
        delete fakeStorage.data[k];
    }
};
const defaultValue = undefined;

/**
 * localstorage和sessionStorage函数封装类，如果不支持则自动封装内存对象
 * @class Storage
 * @param  {string} [prefix='_default_'] 缓存前缀
 * @param  {number} [expire=0] 缓存时间
 * @param  {string} [type='local']   类型，local或者session
 * @author wangyongqing01
 */
export class Storage {
    constructor(prefix = '_default_', expire = 0, type = 'session') {
        if (type.length > 7) {
            // 处理localstorage -> local
            // sessionstorage -> session
            type = type.slice(0, -7);
        }

        this.type = type;
        this.prefix = prefix + '_';
        this.storage = storageSupport[type] ? window[type + 'Storage'] : fakeStorage;
    }

    /**
     * 清理过期key
     * @return {Storage} 返回cache
     */
    clearExpire() {
        const keys = this.getKeys();
        const self = this;
        keys.forEach(key => {
            // 利用get清理过期storage
            self.get(key);
        });
        return this;
    }

    /**
     * 获取所有keys
     * @return {Array} 返回keys
     */
    getKeys() {
        let storage = this.storage;
        if (storage.__fake__) {
            storage = storage.data;
        }

        const reg = new RegExp('^' + this.prefix);
        const keys = Object.keys(storage);
        const result = [];
        for (let i = 0, len = keys.length; i < len; i++) {
            const key = keys[i];
            if (reg.test(key)) {
                result.push(key.replace(reg, ''));
            }

        }
        return result;
    }

    /**
     * 类似 Object.entries 返回所有数组
     * @return {array} 返回数组
     */
    getEntries() {
        let storage = this.storage;
        if (storage.__fake__) {
            storage = storage.data;
        }

        const reg = new RegExp('^' + this.prefix);

        return Object.entries(storage).filter(arr => {
            if (reg.test(arr[0])) {

                arr[1] = this._get(arr[1]);
                if (arr[1] !== defaultValue) {
                    arr[0] = arr[0].replace(reg, '');
                    return true;
                }
            }
            return false;

        });
    }

    /**
     * 获取所有值
     * @return {object} 返回对象
     */
    getAll() {
        const result = {};
        this.getEntries().forEach(([key, value]) => {
            result[key] = value;
        });
        return result;
    }
    _get(value, expireCallback = () => {}) {
        try {
            value = JSON.parse(value);
            const t = Date.now();
            if ('expire' in value && value.expire <= t) {
                // 数据过期，清空
                value = defaultValue;
                expireCallback();
            }
            else {
                value = value.data;
            }
        }
        catch (e) {
            value = defaultValue;
        }
        return value;
    }

    /**
     * 设置缓存
     * @param {string} key  -  缓存名字
     * @param {any} value  - 缓存内容，支持object
     * @param {number} [expire=0] - 缓存时间
     * @return {Storage} 返回cache
     */
    set(key, value, expire = 0) {
        expire = (expire || this.expire) | 0;
        const data = {
            data: value
        };
        if (expire !== 0) {
            data.expire = Date.now() + expire;
        }

        key = this.prefix + key;
        this.storage.setItem(key, JSON.stringify(data));
        return this;
    }

    /**
     * 获取缓存
     * @param  {string} key 缓存名称
     * @return {any}     缓存内容，过期返回null
     */
    get(key) {
        key = this.prefix + key;
        const storage = this.storage;

        return this._get(storage.getItem(key), ()=>{
            storage.removeItem(key);
        });
    }

    /**
     * 清除所有缓存
     * @return {Storage} 返回cache
     */
    clear() {
        const keys = this.getKeys();
        const self = this;
        keys.forEach(key => {
            self.remove(key);
        });
        return this;
    }

    /**
     * 删除key的缓存内容
     * @param  {string} key 要删除的key
     * @return {Storage}     返回cache
     */
    remove(key) {
        this.storage.removeItem(this.prefix + key);
        return this;
    }
}

/**
 * localstorage和sessionStorage函数封装类，如果不支持则自动封装内存对象
 * @function storage
 * @param  {string} prefix 缓存前缀
 * @param  {number} expire 缓存时间
 * @param  {string} [type='local']   类型，local或者session
 * @return {Storage}        store对象
 *
 * @example
 * var store = storage('prefix', 60e3, 'session');
 * store.set('a', {abc:1});
 * console.log(store.get('a'));
 * //缓存30s
 * store.set('b',{a:1}, 30E3);
 */
export default function storage(prefix, expire, type) {
    return new Storage(prefix, expire, type);
}
