/**
 * @file Created on Thu Nov 15 2018
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
import version_compare from '../version_compare';
import getBoxVersion from '../get-box-version';
import isBox from '../is-box';
import isMatrix from '../is-matrix';
import type from '../type';
import iosInvoke from './ios';
import androidInvoke from './android';
import json2query from '../json2query';
import {getOSName, isIOS, isAndroid} from '../os';
import getBoxName from '../get-box-name';
import getScheme from '../get-matrix-schema';
import stringify from '../stringify';
import getGlobalFunc from '../get-global-func';

const NOT_IN_BOX = {
    errCode: 902,
    errMsg: 'APP外无法调用端能力'
};

const COMMAND_NOT_EXIST = {
    errCode: 901,
    errMsg: '不存在此端能力'
};

// const COMMAND_FAIL = {
//     errCode: 903,
//     errMsg: '端能力调用失败'
// };
// const COMMAND_SUCCESS = {
//     errCode: 0,
//     errMsg: '调用成功'
// };

/**
 * 或判断是否是某个 box
 * @param {string} subnames - lite/info组合，[,]隔开
 * @param {*} ua - ua
 */
export function isMaybeBox(subnames, ua) {
    subnames = subnames.split(',');
    let len = subnames.length;
    while (len--) {
        if (isBox(subnames[len], ua) || isMatrix(subnames[len], ua)) {
            return true;
        }
    }
    return false;
}
/**
 * @file  将 json 转成 params 字符串
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
/**
 * 经常会出现 params 的 stringify 之后再encode 的情况，这里统一处理了
 * 还处理了函数问题，可以直接传入匿名函数即可自动转为全局函数
 * @function json2params
 * @param {Object} json - 参数
 * @param {boolean} encode - 是否encode
 * @return {Promise} promise - Promise
 */
export function json2params(json, encode = true) {
    if (type(json) === 'string') {
        return json;
    }

    const rs = {};
    for (let i in json) {
        let j = json[i];
        switch (type(j)) {
            case 'array':
                j = mapArray(j);
                break;
            case 'function':
                j = getGlobalFunc(j);
                break;
        }
        rs[i] = j;
    }
    return stringify(rs, encode);
}

function mapArray(args) {
    return args.map(arg => {
        switch (type(arg)) {
            case 'function':
                return getGlobalFunc(arg);
            default:
                return arg;
        }
    });
}

/**
 * 新调起能力，完全 scheme 形式，支持 ios 和安卓相同或者不同，
 * 不同时，先传 android后 ios（首字母排序）
 * 必须 baiduboxapp 开头
 * @function invoke
 * @param {string} args0 - 安卓调起 schema
 * @param {string} args1 - ios调起 schema，如果相同省略改参数
 */
export default function invoke(...args) {
    if (!isBox()) {
        return;
    }
    let as = args[0];
    // 安卓 ios 公用一个相同的 scheme
    let is = args[1] ? args[1] : args[0];
    if (isIOS() && is) {
        iosInvoke(getValidScheme(is));
    } else if (isAndroid() && as) {
        androidInvoke(getValidScheme(as));
    }
}

function getValidScheme(schema) {
    // 都是以 baidubox 开头包括，baiduboxapp,baiduboxmission
    if (type(schema) === 'string' && schema.indexOf('baidubox') !== 0) {
        return 'baiduboxapp://' + schema;
    }
    return schema;
}
/**
 * Promise 调起命令，host 和 params 分开处理，支持函数直接传入
 * @param {String} action - schema host 部分
 * @param {object} params - 参数
 * @param {string} schemaHead - schema 头，默认 baiduboxapp
 * @return {Promise}
 */
export function invokeP(action, params = {}, schemaHead) {
    schemaHead = schemaHead || getScheme();
    if (!isBox()) {
        return Promise.reject(NOT_IN_BOX);
    }
    return new Promise((resolve, reject) => {
        let tmp = params.params || {};
        // 处理 params 带有 callback 的情况
        let callback = params.callback;
        // 删除 callback，防止 json2query 被处理到 query 中
        delete params.callback;
        // 将 callback 情况进行处理
        const defaultCB = d => {
            if (callback) {
                if (typeof callback === 'function') {
                    callback(d);
                } else if (
                    /* eslint-disable operator-linebreak */
                    callback === 'string' &&
                    typeof window === 'object' &&
                    typeof window[callback] === 'function'
                ) {
                    window[callback](d);
                }
            }
        };

        if (isEmptyObject(tmp) || tmp === '%7B%7D' || tmp === '{}') {
            // 删除空的params对象
            delete params.params;
        } else if (type(tmp) === 'object') {
            params.params = json2params(tmp);
        }

        // 重新赋值 callback
        params.callback = function callback(result) {
            let data = result;
            if (type(result) === 'string') {
                try {
                    data = JSON.parse(result);
                } catch (e) {
                    console.log(e);
                }
            }
            if (+data.status === 0) {
                // 成功回调
                resolve(data.data);
                defaultCB(data.data);
                return;
            }
            // 失败回调，失败也回调 callback，给出错误码的情况
            reject(data);
            defaultCB(data);
        };
        const search = json2query(params);

        const schema = `${schemaHead}://${action}?${search}`;
        invoke(schema);
    });
}
/**
 * 新版本的注册，只用于安卓和 ios 相同的 scheme 类，返回 promise
 * @function xRegister
 * @param {Array|String} range - 版本范围
 * @param {String} action - action 部分，去掉 v 部分，例如v26/swan实际传入 swan。。。 vxx 之后的
 * @param {Object} params - 参数部分，例如 params={url}，传入{url}即可
 * @param {String} schemaHead - scheme 头
 * @return {Promise}
 * @example
 *  xRegister(
        {
            lite: {
                v: 34,
                versionRange: '3.9'
            },
            main: {
                v: 41,
                versionRange: '11.3.5'
            }
        },
        'audio/playSound',
        {url}
    );
 */
export function xRegister(range = {}, action, params = {}, schemaHead = getScheme()) {
    if (!isBox()) {
        return Promise.reject(NOT_IN_BOX);
    }
    const osname = getOSName();
    const boxname = getBoxName();
    // 优先读取 androidmission 这个，然后是 mission(ios+android全平台)，最后主板 android/ios
    const opt = range[`${osname}${boxname}`] || range[boxname] || range[osname];
    // 必须要有 v
    if (opt && opt.v) {
        const version = getBoxVersion(boxname);
        let versionRange = opt.versionRange;
        if (type(versionRange) === 'string') {
            // 支持 '3.9-7.0' 写法
            versionRange = versionRange.split('-');
        }
        const [startV, endV] = versionRange;
        if (version_compare(version, startV) >= 0 && (!endV || (endV && version_compare(version, endV) <= 0))) {
            params = opt.params ? opt.params : params;
            let others = {};
            if (params.params) {
                // 含有 params 的 params = {params: {}, upgrade:1}
                let tmp = Object.assign({}, params.params);
                params.params = null; // 删不掉？
                delete params.params;
                others = Object.assign({}, params);
                params = tmp;
            }
            let args = {};
            if (others && type(others) === 'object') {
                args = {params: json2params(params), ...others};
            } else {
                args = {params: json2params(params)};
            }
            // 兼容 action 不一样的情况，直接写在配置里面
            action = `v${opt.v}/${opt.action ? opt.action : action}`;
            return invokeP(action, args, schemaHead);
        }
    }
    return Promise.reject(COMMAND_NOT_EXIST);
}

function isEmptyObject(obj) {
    return Object.keys(obj).length === 0 && obj.constructor === Object;
}
