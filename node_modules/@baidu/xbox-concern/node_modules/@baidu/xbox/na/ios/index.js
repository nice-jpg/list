/**
 * @file ios seheme invoke
 * @module ios
 */
import stringify from '../../stringify';
import {isFunction} from '../../is';
import getFunc from '../../get-global-func';
import getScheme from '../../get-matrix-schema';
/**
 * 任意 scheme 调起，不校验baiduboxapp://
 * @function default
 * @param {string} scheme - 任意 scheme
 */
const invoke = scheme => {
    if (isSchemeValid(scheme)) {
        let $node = document.createElement('iframe');
        $node.style.display = 'none';
        $node.src = scheme;
        const body = document.body || document.getElementsByTagName('body')[0];
        body.appendChild($node);
        // 销毁 iframe
        setTimeout(() => {
            body.removeChild($node);
            $node = null;
        }, 0);
    }
};
/**
 * @function default
 * @param {string} scheme - ios schema
 */
export default invoke;

/**
 * ios.invokeApp，因为需要创建iframe，所以回调是异步的请求
 * @function invokeApp
 * @param  {String}   action   调用的action，例如downloadnovel
 * @param  {Object}   params   参数对象
 * @param  {Function} callback 回调函数
 * @example
 * invokeApp('getspeedlogdata', function(cData) {
 *     console.log(cData);
 * });
 * invokeApp('downloadnovel', {
 *     url:'xxxx',
 *     title: 'xxxxxxx'
 * }, function(cData) {
 *     if(cData.error==0){
 *         console.log('success');
 *         alert(cData.result);
 *     }else{
 *         console.log('fail');
 *     }
 * });
 */
export function invokeApp(action, params, callback, schemaHead = getScheme()) {
    const url = [];
    if (isFunction(params)) {
        callback = params;
    } else {
        for (const i in params) {
            url.push(i + '=' + params[i]);
        }
    }
    if (isFunction(callback)) {
        const funcName = getFunc(callback);
        url.push('func=' + funcName);
    } else if (callback) {
        url.push('func=' + callback);
    }

    return invoke(schemaHead + '://' + action + '?' + url.join('&'));
}

/**
 * 使用 postMsg 调起
 * BBAMNPJSBridge.postMessage
 * @function postMsgInvoke
 * @param {string} scheme - 调起命令
 */
export function postMsgInvoke(scheme) {
    if (isSchemeValid(scheme)) {
        /* eslint-disable no-undef */
        window.webkit && webkit.messageHandlers.BBAMNPJSBridge.postMessage(scheme);
    }
}
/**
 * BBAMNPJSBridgeWebViewComponent.postMsg
 * @function componentInvoke
 * @param {string} scheme - 调起命令
 */
export function componentInvoke(scheme) {
    if (isSchemeValid(scheme)) {
        window.webkit && webkit.messageHandlers.BBAMNPJSBridgeWebViewComponent.postMessage(scheme);
    }
}

export function syncInvoke(scheme) {
    if (isSchemeValid(scheme)) {
        return window.prompt(
            `BdboxApp:${stringify({
                obj: 'mnp',
                func: 'dispatch',
                args: [scheme]
            })}`
        );
    }
    return null;
}

function isSchemeValid(scheme) {
    return scheme && typeof scheme === 'string' && scheme.length > 10 && typeof window === 'object';
}

/**
 * 带回调的端能力
 * @function easyOpen
 * @param url  {String}
 * @param callback  {callback}
 */
export function invokeWithCb(url, callback) {
    if (!url) {
        typeof callback === 'function' && callback(false);
        return;
    }
    // 记录起始时间
    const last = Date.now();
    // 创建一个iframe
    const ifr = document.createElement('IFRAME');
    ifr.src = url;
    ifr.style.display = 'none';
    // 飘出屏幕外
    ifr.style.position = 'absolute';
    ifr.style.left = '-2000px';
    ifr.style.top = '-1000px';
    ifr.style.width = '1px';
    ifr.style.height = '1px';
    // 设置一个4秒的动画用于检查客户端是否被调起
    ifr.style.webkitTransition = 'all 1s';
    ifr.style.transition = 'all 1s';
    document.body.appendChild(ifr);
    setTimeout(() => {
        let end = () => {
            document.body.removeChild(ifr);
            if (Date.now() - last < 1500) {
                // 如果动画执行时间在预设范围内，就认为没有调起客户端
                callback(true);
            } else {
                // 动画执行超过预设范围，认为调起成功
                callback(false);
            }
        };

        // 监听动画完成时间
        ifr.addEventListener('webkitTransitionEnd', end, false);
        ifr.addEventListener('transitionEnd', end, false);
        // 启动动画
        ifr.style.left = '-10px';
    }, 0);
}
