"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _type = _interopRequireDefault(require("../type"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file XMLHttpRequest 简单封装(应该满足90%需求)，主要用于sdk 类对 ajax简单的应用，复杂应用使用 flyjs等
 * @module browser
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
var accepts = {
  json: 'application/json',
  xml: 'application/xml, text/xml',
  html: 'text/html',
  text: 'text/plain'
};

var empty = function empty() {};
/**
 * @function ajax
 * @param {string} url - 地址
 * @param {object} options - 参数
 * @return {Promise} promise 支持 abort 的 promise
 * ajax(
 *  url,
 * {
 * method: 'get',
 *  timeout = 0,
        dataType:'json',
        contentType: 'application/x-www-form-urlencoded',
        data,
        username,
        password,
        success,
        before,
        error,
        complete,
        context
 * }
 * );
 */


var _default = function _default(url, options) {
  var xhr = new XMLHttpRequest();

  if ((0, _type.default)(url) === 'object') {
    options = url;
    url = options.url;
  }

  if (!url) {
    // 默认使用本页 url
    url = location.toString();
  }

  var protocol = /^([\w-]+:)\/\//.test(url) ? RegExp.$1 : location.protocol;

  var _ref = (0, _type.default)(options) === 'object' ? options : {},
      _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === void 0 ? 0 : _ref$timeout,
      _ref$dataType = _ref.dataType,
      dataType = _ref$dataType === void 0 ? 'json' : _ref$dataType,
      _ref$contentType = _ref.contentType,
      contentType = _ref$contentType === void 0 ? 'application/x-www-form-urlencoded' : _ref$contentType,
      username = _ref.username,
      password = _ref.password,
      success = _ref.success,
      error = _ref.error,
      complete = _ref.complete,
      before = _ref.before,
      context = _ref.context;

  var method = (0, _type.default)(options.method) === 'string' ? options.method.toUpperCase() : 'GET';
  var isGet = method === 'GET';
  var data = options.data;
  var dataStr = '';

  for (var key in data) {
    if (data.hasOwnProperty(key)) {
      dataStr += "".concat(key, "=").concat(data[key], "&");
    }
  }

  data = dataStr.slice(0, -1);

  if (isGet && data) {
    url += '?' + data;
  } // 处理 headers


  var headers = {};

  var setHeader = function setHeader(name, value) {
    return headers[name.toLowerCase()] = [name, value];
  };

  var mime = accepts[dataType];
  setHeader('Accept', mime || '*/*');

  if (contentType || contentType !== false && data && !isGet) {
    // post 使用 application/x-www-form-urlencoded
    setHeader('Content-Type', contentType);
  } // 这个是 abortTimeout


  var abortTimeout;
  var p = new Promise(function (resolve, reject) {
    function ajaxSuccess(data) {
      var status = 'success';
      getFn(success).call(context, data, xhr, options);
      resolve(data, xhr, options);
      ajaxComplete(status);
    } // type: "timeout", "error", "abort", "parsererror"


    function ajaxError(e, type) {
      getFn(error).call(context, e, type, xhr, options);
      reject(e, type, xhr, options);
      ajaxComplete(type);
    } // status: "success", "notmodified", "error", "timeout", "abort", "parsererror"


    function ajaxComplete(status) {
      getFn(complete).call(context, status, xhr, options);
    }

    xhr.onreadystatechange = function () {
      var readyState = parseInt(xhr.readyState, 10);

      if (readyState === 4) {
        xhr.onreadystatechange = empty;
        clearTimeout(abortTimeout);
        var result;
        var _error = false;
        var status = parseInt(xhr.status, 10);

        if (status >= 200 && status < 300 || status === 304 || status === 0 && protocol === 'file:') {
          if (xhr.responseType === 'arraybuffer' || xhr.responseType === 'blob') {
            result = xhr.response;
          } else {
            result = xhr.responseText;

            try {
              if (dataType === 'xml') {
                result = xhr.responseXML;
              } else if (dataType === 'json') {
                result = /^\s*$/.test(result) ? null : JSON.parse(result);
              }
            } catch (e) {
              _error = e;
            }

            if (_error) {
              return ajaxError(_error, 'parsererror');
            }
          }

          ajaxSuccess(result);
        } else {
          ajaxError(xhr.statusText || null, status ? 'error' : 'abort');
        }
      }
    };

    var async = 'async' in options ? options.async : true;
    xhr.open(method, url, async, username, password);
    var nativeSetHeader = xhr.setRequestHeader;

    for (var name in headers) {
      nativeSetHeader.apply(xhr, headers[name]);
    }

    if (timeout > 0) {
      abortTimeout = setTimeout(function () {
        xhr.onreadystatechange = empty;
        xhr.abort();
        ajaxError(null, 'timeout');
      }, timeout);
    }

    if (getFn(before).call(context, xhr, options) === false) {
      xhr.abort();
      ajaxError(null, 'abort');
      return xhr;
    } // 避免发送空的字符串，发送 null


    xhr.send(data ? data : null);
  });

  p.abort = function () {
    xhr.abort();
  };

  return p;
};

exports.default = _default;

function getFn(fn) {
  return (0, _type.default)(fn) === 'function' ? fn : empty;
}