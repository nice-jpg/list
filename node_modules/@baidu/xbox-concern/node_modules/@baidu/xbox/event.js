/**
 * @file Created on Mon Dec 03 2018
 * @module event
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
import each from './each';
import guid from './guid';
const hover = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
};
const focusinSupported = 'onfocusin' in window;
const focus = {focus: 'focusin', blur: 'focusout'};

const handlers = {};
const returnTrue = () => true;
const returnFalse = () => false;

const ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$|webkitMovement[XY]$)/;

const eventMethods = {
    preventDefault: 'isDefaultPrevented',
    stopImmediatePropagation: 'isImmediatePropagationStopped',
    stopPropagation: 'isPropagationStopped'
};

function bid(element) {
    return element._bid || (element._bid = guid());
}

export function createProxy(event) {
    let key;
    let proxy = {
        originalEvent: event
    };
    for (key in event) {
        if (!ignoreProperties.test(key) && event[key] !== undefined) {
            proxy[key] = event[key];
        }
    }
    return compatible(proxy, event);
}

function parse(event) {
    const parts = ('' + event).split('.');
    return {
        e: parts[0],
        ns: parts
            .slice(1)
            .sort()
            .join(' ')
    };
}

function realEvent(type) {
    return hover[type] || (focusinSupported && focus[type]) || type;
}
function eventCapture(handler, captureSetting) {
    return (handler.del && (handler.e === 'focus' || handler.e === 'blur')) || !!captureSetting;
}
function eachEvent(events, fn, iterator) {
    events.split(/\s/).forEach(type => {
        iterator(type, fn);
    });
}

function findHandlers(element, event, fn, selector) {
    event = parse(event);
    let matcher;
    if (event.ns) {
        matcher = matcherFor(event.ns);
    }
    /* eslint-disable  */
    return (handlers[bid(element)] || []).filter(
        handler =>
            handler &&
            (!event.e || handler.e == event.e) &&
            (!event.ns || (event.ns && matcher.test(handler.ns))) &&
            (!fn || bid(handler.fn) === bid(fn)) &&
            (!selector || handler.sel == selector)
    );
    /* eslint-enable  */
}

function matcherFor(ns) {
    return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)');
}

function contains(parent, node) {
    return parent !== node && parent.contains(node);
}

function compatible(event, source) {
    if (source || !event.isDefaultPrevented) {
        source || (source = event);
        // eslint-disable-next-line
        each(eventMethods, function(name, predicate) {
            let sourceMethod = source[name];
            // eslint-disable-next-line
            event[name] = function() {
                this[predicate] = returnTrue;
                // eslint-disable-next-line
                return sourceMethod && sourceMethod.apply(source, arguments);
            };
            event[predicate] = returnFalse;
        });

        try {
            event.timeStamp || (event.timeStamp = Date.now());
        } catch (ignored) {} // eslint-disable-line

        if (
            source.defaultPrevented !== undefined
                ? source.defaultPrevented
                : 'returnValue' in source
                ? source.returnValue === false
                : source.getPreventDefault && source.getPreventDefault()
        ) {
            event.isDefaultPrevented = returnTrue;
        }
    }
    return event;
}
/**
 * @function add
 * @param {Element} element - 父节点
 * @param {String} events - 事件
 * @param {function} fn - 事件回调
 * @param {any} data - 数据
 * @param {string} selector - 选择器
 * @param {function} delegator - 代理器
 * @param {boolean} capture - 是否捕获
 */
export function add(element, events, fn, data, selector, delegator, capture) {
    const id = bid(element);
    const set = handlers[id] || (handlers[id] = []);
    eachEvent(events, fn, (event, fn) => {
        const handler = parse(event);
        handler.fn = fn;
        handler.sel = selector;
        // emulate mouseenter, mouseleave
        if (handler.e in hover) {
            // eslint-disable-next-line
            fn = function(e) {
                const related = e.relatedTarget;
                if (!related || (related !== this && !contains(this, related))) {
                    return handler.fn.apply(this, arguments); // eslint-disable-line
                }
            };
        }

        handler.del = delegator;
        let callback = delegator || fn;
        handler.proxy = e => {
            e = compatible(e);
            if (e.isImmediatePropagationStopped()) {
                return;
            }
            e.data = data;
            let result = callback.apply(element, e._args === undefined ? [e] : [e].concat(e._args));
            if (result === false) {
                e.preventDefault();
                e.stopPropagation();
            }
            return result;
        };
        handler.i = set.length;
        set.push(handler);
        if ('addEventListener' in element) {
            element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));
        }
    });
}
/**
 * @function remove
 * @param {Element} element - 绑定的节点
 * @param {String} events - 事件
 * @param {function} fn - 事件回调
 * @param {string} selector - 子选择器
 * @param {boolean} capture - 是否捕获
 */
export function remove(element, events, fn, selector, capture) {
    const id = bid(element);
    eachEvent(events || '', fn, (event, fn) => {
        findHandlers(element, event, fn, selector).forEach(handler => {
            delete handlers[id][handler.i];
            if ('removeEventListener' in element) {
                element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));
            }
        });
    });
}
/**
 * alias add
 * @function on
 */
export const on = add;
/**
 * alias remove
 * @function off
 */
export const off = remove;
