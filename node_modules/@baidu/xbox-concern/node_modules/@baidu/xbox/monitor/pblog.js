/**
 * @file pblog日志 新增支持打到ztbox
 * @author yanyiting <yanyiting@baidu.com>
 */

import Monitor from './monitor';
import query2json from '../query2json';
import {isPlainObject} from '../is';
import getBoxVersion, {getV} from '../get-box-version';
import isBoxApp from '../is-box';

const URL = query2json(location.search);
const UA = navigator.userAgent;
const GIF_URI = 'https://mbd.baidu.com/tcbox';
const NEW_GIF_URL = 'https://mbd.baidu.com/ztbox';

export class PBLog extends Monitor {
    constructor(action) {
        let CUSTOM_ARG = {};
        if (URL.uid && URL.osname) {
            ['osname', 'ua', 'ut', 'from', 'cfrom', 'uid', 'pkgname'].forEach(v => {
                URL[v] && (CUSTOM_ARG[v] = URL[v]);
            });
        }
        super(action ? NEW_GIF_URL : GIF_URI, {
            globalData: {
                // 添加公共参数
                ...CUSTOM_ARG,
                service: 'bdbox',
                action: action || 'pblog',
                // 表明参数协议第二个版本
                ctv: 2,
                // 表明参数加密
                cen: 'uid_ua_ut',
                data: {
                    // 更新版本标记
                    // 手百为1
                    appid: isBoxApp('lite') ? 10001 : isBoxApp('info') ? 10002 : '1',
                    // 客户端：1、JS：2、SERVER：3
                    dataid: '2',
                    // 区分主动/被动行为，主动：1、被动：0
                    actiontype: '1',
                    // 写死, actionid：2=事件统计，1=pv统计
                    actionid: '2',
                    actiondata: {
                        boxV: getV(),
                        ref: URL.ref || '',
                        gmv: URL.vmgdb || '',
                        source: URL.from || URL.ref || '',
                        boxVersion: getBoxVersion(),
                        boxPlatform: UA.match(/(iPad|iPhone|iPod)/gim) ? 'ios' : 'android'
                    }
                }
            }
        });
    }

    init([cateId, obj] = []) {
        let CUSTOM_ARG = isPlainObject(obj) ? obj : {};
        CUSTOM_ARG.data = {};
        CUSTOM_ARG.data.cateid = cateId;
        return super.setGlobalData(CUSTOM_ARG);
    }

    /**
     * pv统计
     * @param  {string} url 统计的pv url
     * @param  {string} su  来源url，可选
     * @return {this}     PBLOG
     */
    pv([url, u] = []) {
        let tmpArg = {
            // 写死, actionid：2=事件统计，1=pv统计
            actionid: '1',
            actiondata: {
                url: url || location.href
            }
        };
        if (u) {
            tmpArg.actiondata.u = u;
        }

        return super.report({data: tmpArg});
    }

    /**
     * 事件打点统计
     * @param  {string} evtName 事件名称
     * @param  {string} evtType   事件类型
     * @param  {string} evtTag    事件tag标示
     * @param  {?number} cateId    业务类型，可选用于指定打点业务类型
     * @return {object}  tc    tc函数
     */
    event([evtName, evtType = '', evtTag = '', cateId] = []) {
        if (!evtName) {
            throw 'monitor.tc.event need a evtName';
        }
        let data = {};
        if (isPlainObject(evtType) && !evtTag) {
            data = {
                evtName
            };
            for (let i in evtType) {
                data[i] = evtType[i];
            }
        } else {
            data = {
                evtName,
                evtType,
                evtTag
            };
        }

        let tmpArg = {
            // 写死, actionid：2=事件统计，1=pv统计
            actionid: '2',
            actiondata: data
        };
        if (cateId) {
            tmpArg.cateid = cateId;
        }
        return super.report({data: tmpArg});
    }

    /**
     * 事件打点统计
     * @param  {Object} data 事件上报数据
     * @param  {?number} cateId    业务类型，可选用于指定打点业务类型
     * @return {Object}  tc    tc函数
     */
    newEvent([data, cateId] = []) {
        let tmpArg = {
            // 写死, actionid：2=事件统计，1=pv统计
            actionid: '2',
            actiondata: data
        };
        if (cateId) {
            tmpArg.cateid = cateId;
        }

        return super.report({data: tmpArg});
    }
}

const pblog = new PBLog();

const isPageVisible = (document.visibilityState || document.webkitVisibilityState) === 'visible';

const delayExecute = func => {
    isPageVisible ? requestAnimationFrame(func) : setTimeout(func, 15);
};

export default (func, ...args) => {
    return pblog[func](...args);
};

/* eslint-disable-next-line space-before-function-paren */
export const lazyLog = function (func, ...args) {
    // 当对象不是pblog的情况，是手动new的自定义pblog
    // 这个时候使用 lazyLog.call(xxx, func, ...args);
    const log = !this || this === window ? pblog : this;

    // 如果onload已经执行了则延迟，否则挂到onload上面
    if (document.readyState === 'complete') {
        delayExecute(() => {
            log[func](...args);
        });
        return;
    }

    const handler = () => {
        delayExecute(() => {
            log[func](...args);
        });
        window.removeEventListener('load', handler);
    };
    window.addEventListener('load', handler);
};
