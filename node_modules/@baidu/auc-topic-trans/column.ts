import heatedDiscussionTrans from './heatedDiscussion';
import comTrans from './components';
import timelineTrans from './timeline';
import guardianTrans from './guardian';
import {bigimageTrans} from '@baidu/auc-topic-trans/components';

import AucOneImageText from '@baidu/auc-one-image-text';
import AucBigImageText from '@baidu/auc-big-image-text';
import AucThreeImageText from '@baidu/auc-three-image-text';
import AucHeatedDiscussion from '@baidu/auc-heated-discussion';
import AucTimeline from '@baidu/auc-timeline';
import AucStar from '@baidu/auc-star';
import {AucColumnData} from '@baidu/auc-column/types';
import AucTitle from '@baidu/auc-title';
import {LoaderState} from '@baidu/auc-loader';
import AucUndef from '@baidu/auc-undef';
import AucDoubleRow from '@baidu/auc-double-row';
import AucBaike from '@baidu/auc-baike';
import AucMiaodong from '@baidu/auc-miaodong';
import AucZhengMing from '@baidu/auc-zhengming';
import AucRefuteRumor from '@baidu/auc-refute-rumor';

// 组件名enum，为了避免重复拼写导致不必要的错误
enum ComponentName {
    AucOneImageText = 'auc-one-image-text',
    AucThreeImageText = 'auc-three-image-text',
    AucBigImageText = 'auc-big-image-text',
    AucHeatedDiscussion = 'auc-heated-discussion',
    AucTitle = 'auc-title',
    AucUndef = 'auc-undef',
    AucStar = 'auc-star',
    AucTimeline = 'auc-timeline',
    AucDoubleRow = 'auc-double-row',
    AucBaike = 'auc-baike',
    AucMiaodong = 'auc-miaodong',
    AucZhengMing = 'auc-zhengming',
    AucRefuteRumor = 'auc-refute-rumor'
}

// 业务字段layout到组件名的映射
export const layoutComponent = {
    image1: ComponentName.AucOneImageText,
    titleonly: ComponentName.AucTitle,
    bigimage: ComponentName.AucBigImageText,
    image3: ComponentName.AucThreeImageText,
    livevideo: ComponentName.AucBigImageText,
    star_bigimage: ComponentName.AucStar,
    star_text: ComponentName.AucStar,
    smallimage: ComponentName.AucDoubleRow,
    txtimg: ComponentName.AucBaike,
    fullimg: ComponentName.AucMiaodong,
    debate: ComponentName.AucZhengMing,
    fulltxt: ComponentName.AucRefuteRumor
};

// 一个栏目所有需要用到的组件，用于给auc-column的components字段传值
export const components = {
    [ComponentName.AucBigImageText]: AucBigImageText,
    [ComponentName.AucThreeImageText]: AucThreeImageText,
    [ComponentName.AucTitle]: AucTitle,
    [ComponentName.AucOneImageText]: AucOneImageText,
    [ComponentName.AucHeatedDiscussion]: AucHeatedDiscussion,
    [ComponentName.AucStar]: AucStar,
    [ComponentName.AucUndef]: AucUndef,
    [ComponentName.AucTimeline]: AucTimeline,
    [ComponentName.AucDoubleRow]: AucDoubleRow,
    [ComponentName.AucBaike]: AucBaike,
    [ComponentName.AucMiaodong]: AucMiaodong,
    [ComponentName.AucZhengMing]: AucZhengMing,
    [ComponentName.AucRefuteRumor]: AucRefuteRumor
};

// 区分栏目，以及使用组件
export const iteration = (item:any, columnType:number|string, columnIndex) => {
    let result:any = {};

    // 热议栏目、观点
    if (+columnType === 1) {
        Object.assign(
            result,
            heatedDiscussionTrans(item, columnType, columnIndex),
            {componentName: ComponentName.AucHeatedDiscussion}
        );
    }
    // 时间线 事件脉络
    else if (+columnType === 2 || +columnType === 5) {
        Object.assign(
            result,
            timelineTrans(item, columnType, columnIndex),
            {componentName: ComponentName.AucTimeline}
        );
    }
    // 卫报，暂时按时间轴展示
    else if (+columnType === 3 || columnType === 4) {
        Object.assign(
            result,
            guardianTrans(item, columnType, columnIndex),
            {componentName: ComponentName.AucTimeline}
        );
    }
    // 其余组件
    else {
        Object.assign(
            result,
            comTrans(item, columnType, columnIndex),
            {componentName: layoutComponent[item.layout] || ComponentName.AucUndef}
        );
    }

    return result;
};

// 将业务数据转化成columns的数据
export const transColumns = (columnNews):Array<AucColumnData> => {
    
    return columnNews.map((item):AucColumnData => {
        const isEnd = !!(+item.is_end);

        return {
            newsList: item.news_list,
            columnType: item.column_type,
            columnName: item.column_name,
            isFold: !!(+item.is_fold),
            isEnd,
            loadingState: isEnd ? LoaderState.END : LoaderState.DEFAULT,
            columnExt: {
                columnTags: item.tags || '',
                columnTagsCount: item.tags_count || '',
                tagsCount: item.tags_count || ''
            },
            columnNameType: item.column_name_type ? 1 : 0,
            columnNameImg: item.column_name_type === 1 ? item.column_name_img : '',
            columnBackColor: item.column_type === 7 && item.column_back_color ?
            (!/#/.test(item.column_back_color) ? '#' + item.column_back_color : item.column_back_color) : ''
        };
    });
};

// 获取所有动态卡锁配置的点赞icon类型
export const transPraiseIcon = (columnNews):Array<AucColumnData> => {
    let praiseIconList = [];
    let praiseIconObj = {};
    try {
        columnNews.forEach((item) => {
            let newsList = item.news_list || item.newsList;
            newsList.forEach((news) => {
                if (news && news.data && news.data.praise_style) {
                    let praiseStyle = JSON.parse(news.data.praise_style);
                    !praiseIconObj[praiseStyle.normal.icon_type] &&
                    (praiseIconObj[praiseStyle.normal.icon_type] = praiseStyle.normal);
                }
            });
        });
        for(let i in praiseIconObj) {
            praiseIconList.push(praiseIconObj[i]);
        }
    } catch(e) {}
    return praiseIconList;
};

// 获取顶部视频栏目
export const transTopColumn = (columnNews):Array<AucColumnData> => {
    let topColumn = [];
    columnNews.forEach((item) => {
        if (+item.column_type === 6 && item.news_list) {
            topColumn = topColumn.concat(item.news_list.map(i => {
                return bigimageTrans(i, item.column_type, 0);
            }))
        }
    });
    return topColumn;
};