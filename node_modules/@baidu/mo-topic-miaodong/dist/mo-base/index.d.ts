/**
 * Copyright (C) 2021 ~ present baidu.com
 */
import { Component } from 'san';
import type { MaybeScrollview } from '@baidu/mo-core';
import type { ComponentNewOptions } from 'san';
declare type DispatchMode = 'message' | 'store';
declare type GetReturnType<C> = {
    [K in keyof C]: C[K] extends (...args: any[]) => infer R ? R : never;
};
interface Store {
    dispatch: (action: string, payload?: unknown) => void;
}
export default class Base<State = {}, Props = {}, Computed = {}> extends Component<State & Props & GetReturnType<Computed> & {
    showAction: string;
}> {
    static template: string;
    static trimWhitespace: string;
    static dispatchMode: DispatchMode;
    env: import("@baidu/mo-core").Env;
    name: string;
    scrollview: MaybeScrollview;
    store?: Store;
    constructor(options?: ComponentNewOptions<Props>);
    initData?(): State;
    /**
     * 父类 Base 组件，在 attached 生命周期进行真实展现事件的派发处理
     * 需要在子类的初始数据添加 showAction 字段
     * 然后调用 super.attached() 方法
     */
    attached(): void;
    disposed(): void;
    /**
     * 使用 san 消息机制派发事件
     *
     * @param action 名称
     * @param payload 参数
     */
    dispatch<Payload>(action: string, payload?: Payload): void;
    /**
     * 使用 san-store 进行状态管理时的派发事件
     *
     * @param action 名称
     * @param payload 参数
     */
    storeDispatch<Payload>(action: string, payload?: Payload): void;
    /**
     * 根据派发模式派发事件
     *
     * @param action 名称
     * @param payload 参数
     */
    eventDispatch<Payload>(action: string, payload?: Payload): void;
}
/**
 * 注入一个 store 实例，将派发模式设置为 store
 */
export declare const setupStore: (store: Store) => void;
export {};
