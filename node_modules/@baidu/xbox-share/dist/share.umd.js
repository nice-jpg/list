/**
 * @baidu/xbox-share v1.0.8
 * global xbox.share 
 * Created at 2022-03-03 18:55:36
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory((global.xbox = global.xbox || {}, global.xbox.share = {})));
}(this, (function (exports) { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  /**
   * @file Created on Mon Nov 26 2018
   * @author wangyongqing <wangyongqing01@baidu.com>
   */

  /**
   * 返回当前浏览器 UserAgent
   */
  var UA = (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' && window.self === window ? navigator.userAgent : '';

  /**
   * @file Created on Thu Nov 15 2018
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * 是否是手百产品，支持矩阵产品
   * @function isBox
   * @param {''|lite|pro|info|mission} [subName=''] - 手百矩阵产品标识
   * @param {string} ua - 传入的 userAgent，如果不传则取 navigator.userAgent
   * @return { boolean} 是否是手百判断结果
   * @example
   * isBoxApp()
   * isBoxApp('lite')
   * isBoxApp('pro', 'fdafafdafaf pro baiduboxapp')
   */

  var isBox = (function () {
    var subName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var ua = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UA;

    if (subName === 'main') {
      subName = '';
    } // baiduboxapp: 框的常规UA
    // biduboxapp:  个别网站会触发内核的风控策略(比如域名以le.com结尾)，UA会被替换


    var reg = / (baiduboxapp|biduboxapp)\//i;

    if (reg.test(ua) === false) {
      // 框外
      return false;
    }

    var matchRes = ua.match(reg);
    var sign = matchRes[1];

    if (!~ua.indexOf("".concat(subName, " ").concat(sign))) {
      // 具体的 app ：主线 / lite / info / pro 等
      return false;
    }

    return true;
  });

  /**
   * @file 判断是不是矩阵app，符合新的规范，规范地址：
   * @link http://agroup.baidu.com/share/md/0d6d1cc6b1c7417e8071057fb436001b
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * 是否是手百矩阵产品，需要符合新的ua规范
   * @function isMatrix
   * @param {''|'youjia'} [subName=''] - 手百矩阵产品标识
   * @param {string} ua - 传入的 userAgent，如果不传则取 navigator.userAgent
   * @return { boolean} 是否是手百判断结果
   * @example
   * isMatrix()
   * isMatrix('youjia')
   * isMatrix('youjia', 'fdafafdafaf pro baiduboxapp')
   */

  var isMatrix = (function () {
    var subName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var ua = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UA;

    if (subName === 'main') {
      subName = '';
    }

    var matrixUaExp = /\bbdapp\/\d+\.\d+\s+\((\w+);\s*(\w+)\)/;
    /**
     * Android示例	Mozilla/5.0 (.83 Mobile Safari/537.36 T7/11.16 light/1.0 bdapp/1.0 (youjia; youjia) youjia/1.0.1 (Baidu; P1 8.0.0)
     *  na 网络：Dalvik/2.1.0 (Linux; U; Android 8.0.0; MHA-AL00 Build/HUAWEIMHA-AL00) okhttp/3.11.0 bdapp/1.0 (youjia; youjia) youjia/1.0.1 (Baidu; P1 8.0.0)
        iOS示例	Mozilla/5.0 (iPhone; C.1.15 (KHTML, like Gecko) Mobile/15E148 main/1.0 SP-engine/2.14.0 NABar/1.0 bdapp/1.0 (youjia; youjia) youjia/1.0.1 (Baidu; P2 13.3)
        na网络：Mozilla/5.0 (iPho5.1.15 (KHTML, like Gecko) Mobile/15E148 youjia/1.0.1 (Baidu; P2 13.3)
     */

    if (subName === '') {
      var m = /\s(lite|pro|info|mission)\sbaiduboxapp\//.exec(ua);

      if (m) {
        return true;
      } // 只判断bdapp/1.0


      if (/\bbdapp\/\d+\.\d+\s/.test(ua)) {
        return true;
      }
    } else if (subName === false) {
      // 这里判断是新的matrix格式，即youjia这类，不包含lite info这类
      var _m = ua.match(matrixUaExp);

      if (_m && _m[1]) {
        return true;
      }
    } else {
      // TODO 判断老的
      if (new RegExp(new RegExp("\\s".concat(subName, "\\sbaiduboxapp/"))).test(ua)) {
        return true;
      }

      var _m2 = ua.match(matrixUaExp);

      if (_m2 && _m2[1] && _m2[1] === subName) {
        return true;
      }
    }

    return false;
  });

  /**
   * 判断浏览器类型
   * @module browser/detect
   * @file Created on Thu Nov 22 2018
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * @function isWeixin
   * @param {string} ua - 待判断的 UA，默认当前 userAgent
   */

  var isWeixin = function isWeixin() {
    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UA;
    return /micromessenger\//i.test(ua);
  };
  /**
   * @function isQQ
   * @param {string} ua - 待判断的 UA，默认当前 userAgent
   */

  var isQQ = function isQQ() {
    var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : UA;
    return /QQ\//.test(ua);
  };

  /**
   * @file guid
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  var index = 0;
  /**
   * 获取 guid
   * @function guid
   * @param {number} [len = 8] - 获取的 guid 长度
   * @return {string} 获取的唯一guid
   */

  var guid = (function () {
    var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;
    index++; // 这里按照 now 的长度，应该在11左右
    // 所以 len 超过总长度，返回的是实际总长度
    // 即不补零

    return (Date.now().toString(16) + index).slice(-1 * len);
  });

  /**
   * @file Created on Mon Nov 26 2018
   * @author wangyongqing <wangyongqing01@baidu.com>
   */

  /**
   * @function type
   * @param {any} obj - 被判断的对象
   * @return {string} 返回类型：array/date/string/object/undefined/function/boolean/null/regexp/math 等
   */
  var getType = function getType(obj) {
    return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
  };
  /**
   * 根据传入的类型使用 Object.toString 进行判断
   * @function isType
   * @param {any} obj - 需要判断的类型
   * @param { string} type - 需要判断的类型字符串
   * @return {boolean} 返回判断结果
   * @example
   * isType('', 'String') // true
   * isType(new Date, 'Date') // true
   * isType('', 'Array') // false
   */


  function isType(obj, type) {
    return getType(obj) === type.toLowerCase();
  }

  /**
   * @file 判断方法
   * @module is
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * 判断是否为 null 或者 undefined
   * @param {any} obj - 判断的对象
   * @return {boolean} 返回判断结果
   * @example
   * isNil(null) // true
   * isNil(undefind) // true
   * isNil('') // false
   */

  function isNil(obj) {
    return obj === undefined || obj === null;
  }
  /**
   * 判断是否为普通对象
   * @param {any} obj - 需要判断的对象
   * @return {boolean} 返回判断结果
   * @example
   * isPlainObject({}) // true
   * isPlainObject(window) // false
   */

  function isPlainObject(obj) {
    if (isType(obj, 'Object')) {
      return Object.getPrototypeOf(obj) === null || Object === obj.constructor;
    }

    return false;
  }
  /**
   * 是否是function类型
   * @name isFunction
   * @function isFunction
   * @param  {any} obj 要判断的对象
   * @return {Boolean} bool  true|false
   * @example
   * isFunction(new Function()) // true
   * isFuction('') // false
   */

  function isFunction(obj) {
    return isType(obj, 'Function');
  }
  /**
   * 是否是string类型
   * @name isString
   * @function
   * @param  {any} obj 要判断的对象
   * @return {Boolean} bool true|false
   * isString([]) // false
   * isString('array') // true
   */

  function isString(obj) {
    return isType(obj, 'String');
  }
  /**
   * 是否是array类型
   * @param  {any} obj 要判断的对象
   * @return {Boolean} bool 返回true|false
   * @example
   * isArray([]) // true
   * isArray('array') // false
   */

  function isArray(obj) {
    return isType(obj, 'Array');
  }

  var gb = (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' ? window : global;
  /**
   * @function getGlobalFunc
   * @param {function} func - 全局函数
   * @return {string} funcName - 返回全局函数名
   */

  var getGlobalFunc = (function (func) {
    if (typeof func === 'function') {
      var name = "_xfunc_".concat(guid());

      gb[name] = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return func.apply(gb, args);
      };

      return name;
    }

    return func;
  });

  /**
   * @file A stricter URI encode adhering to RFC 3986
   * @author wangyongqing <wangyongqing01@baidu.com>
   * https://github.com/kevva/strict-uri-encode/blob/master/index.js
   */
  var oEncodeURIComponent = encodeURIComponent;
  var uriEncode = (function (str) {
    return oEncodeURIComponent(str).replace(/[!'()*]/g, function (x) {
      return "%".concat(x.charCodeAt(0).toString(16).toUpperCase());
    });
  });

  /**
   * @file 将对象转成url，但是没有添加对数组支持
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  /**
   * 将对象转成url，但是没有添加对数组、对象支持，直接 JSON.stringify 输出
   * @function json2query
   * @param  {object} json - 待处理的json对象
   * @param  {boolean} [encode = false] - 是否 encodeURI 对象/数组字符串
   * @return {string}  str  - 处理之后的string字符串
   * @example
   * json2query({
   *       a: 1,
   *       b: 'string'
   *  });
   * //'a=1&b=string'
   * json2query({
   *       a: 1,
   *       b: 'string',
   *       c: [1, 2, 3]
   *   });
   * //'a=1&b=string&c=[1,2,3]'
   * json2query({
   *       a: 1,
   *       b: 'string',
   *       c: [1, 2, 3]
   *   }, true);
   * //'a=1&b=string&c=%5B1%2C2%2C3%5D'
   */

  function json2query(json) {
    var encode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (isString(json)) {
      return json;
    }

    var arr = [];

    for (var i in json) {
      var j = json[i];

      if (isArray(j)) {
        j = JSON.stringify(mapArray(j));
      } else if (isNil(j)) {
        j = '';
      } else if (isPlainObject(j)) {
        // 这里不再遍历处理，对于深层的 callback 需要注意了
        j = JSON.stringify(j);
      } else if (isFunction(j)) {
        j = getGlobalFunc(j);
      } // string/number/boolean 不处理


      arr.push("".concat(i, "=").concat(encode ? uriEncode(j) : j));
    }

    return arr.join('&');
  }

  function mapArray(args) {
    return args.map(function (arg) {
      switch (getType(arg)) {
        case 'string':
          return arg;

        case 'function':
          return getGlobalFunc(arg);

        default:
          return arg;
      }
    });
  }

  /**
   * @file Created on Tue Nov 27 2018
   * @module browser
   * @author wangyongqing <wangyongqing01@baidu.com>
   */
  var emptyFn = function emptyFn() {};
  /**
   * 加载单个文件，支持css/img/js
   * @function loadFile
   * @param {string} path - url 地址
   * @param {function} callbackFn - callback error first
   * @param {object} args - 配置对象，包括async，timeout，maxTries，before 等
   * @param {number} numTries - 不对外参数，用于尝试重试次数
   * @example
   * loadFile('/path/to/foo.js', function(err, path) {
   *     // foo.js loaded
   * });
   * loadFile('css!/path/to/foo', function(err, path) {
   *     // foo css loaded
   * });
   * loadFile('img!/path/to/foo', function(err, path) {
   *     // foo img loaded
   * });
   */


  function loadFile(path, callbackFn, args) {
    var numTries = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var doc = document;
    var pathStripped = path.replace(/^(css|img)!/, '');
    var isCss = false;
    var elem;
    var timer;
    var _args$async = args.async,
        async = _args$async === void 0 ? true : _args$async,
        _args$maxTries = args.maxTries,
        maxTries = _args$maxTries === void 0 ? 1 : _args$maxTries,
        _args$timeout = args.timeout,
        timeout = _args$timeout === void 0 ? 2e4 : _args$timeout,
        _args$before = args.before,
        before = _args$before === void 0 ? null : _args$before;
    var beforeCallbackFn = before;

    if (typeof beforeCallbackFn !== 'function') {
      beforeCallbackFn = emptyFn;
    }

    if (/(^css!|\.css$)/.test(path)) {
      isCss = true; // css

      elem = doc.createElement('link');
      elem.rel = 'stylesheet';
      elem.href = pathStripped;
    } else if (/(^img!|\.(png|gif|jpg|svg)$)/.test(path)) {
      // image
      elem = doc.createElement('img');
      elem.src = pathStripped;
    } else {
      // javascript
      elem = doc.createElement('script');
      elem.src = path;
      elem.async = !!async;
    }

    var cb = function cb(ev) {
      clearTimeout(timer);
      var result;

      if (ev instanceof Error) {
        result = 'e';
      } else {
        result = ev.type[0];
      } // Note: The following code isolates IE using `hideFocus` and treats empty
      // stylesheets as failures to get around lack of onerror support


      if (isCss && 'hideFocus' in elem) {
        try {
          if (!elem.sheet.cssText.length) {
            result = 'e';
          }
        } catch (x) {
          // sheets objects created from load errors don't allow access to
          // `cssText`
          result = 'e';
        }
      } // handle retries in case of load failure


      if (result === 'e') {
        // increment counter
        numTries += 1; // exit function and try again

        if (numTries < maxTries) {
          return loadFile(path, callbackFn, args, numTries);
        }
      }

      elem.onload = elem.onerror = elem.onbeforeload = null;
      elem = null; // error first

      callbackFn(result === 'e' ? ev ? ev : 'error' : null, path);
    };

    elem.onload = elem.onerror = cb;

    if (beforeCallbackFn(path, elem) !== false) {
      var head = doc.head || doc.getElementsByTagName('script')[0];
      head.appendChild(elem); // timeout

      if (timeout > 0) {
        timer = setTimeout(function () {
          cb(new Error('timeout'));
        }, timeout);
      }
    }
  }

  function isFunction$1(fn) {
    return isType(fn, 'function');
  }
  /**
   * @function loadjs
   * @param {object} param - 参数
   * @example
   * loadjs({
   *  url,
   * before,
   * success,
   * error,
   * timeout,
   * async,
   * data,
   * jsonpCallback,
   * jsonpCallbackName // 传给server的回调函数的名字
   * })
   */


  function loadJS(_ref) {
    var url = _ref.url,
        before = _ref.before,
        success = _ref.success,
        error = _ref.error,
        _ref$timeout = _ref.timeout,
        timeout = _ref$timeout === void 0 ? 2e4 : _ref$timeout,
        async = _ref.async,
        data = _ref.data,
        jsonpCallback = _ref.jsonpCallback,
        jsonpCallbackName = _ref.jsonpCallbackName;

    if (_typeof(data) === 'object') {
      data = json2query(data);
    }

    if (data) {
      url += (url.indexOf('?') === -1 ? '?' : '&') + data;
    }

    url = url.replace(/[&?]{1,2}/, '?');
    var callbackName = (isFunction$1(jsonpCallback) ? jsonpCallback() : jsonpCallback) || '_boxjsonp' + guid();
    var originalCallback = window[callbackName]; // 返回的数据

    var responseData;

    var cb = function cb(e, p) {
      if (e) {
        error(e, p);
      } else {
        success(responseData && responseData[0]);
      }

      window[callbackName] = originalCallback;

      if (responseData && isFunction$1(originalCallback)) {
        originalCallback(responseData[0]);
      }

      originalCallback = responseData = undefined;
    };

    window[callbackName] = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      responseData = args;
    }; // 当data的某个属性的值恰好以'?'开头，比如data:{content:'?', callback:'?'}，经过json2Query后'conntent=?&callbakc=?'
    // 此时不能直接替换/=\?/，可根据传参优先处理


    if (jsonpCallbackName) {
      url += '&' + jsonpCallbackName + '=' + callbackName;
    } else if (/=\?/.test(url)) {
      url = url.replace(/=\?/, '=' + callbackName);
    }

    loadFile(url, cb, {
      timeout: timeout,
      async: async,
      before: before
    });
  }

  var doc = document;
  var protocol = location.protocol !== 'https:' ? 'http:' : 'https:';
  var weixinjs = getCustomURL('//res.wx.qq.com/open/js/jweixin-1.4.0.js');
  var qzonejs = getCustomURL('//qzonestyle.gtimg.cn/qzone/qzact/common/share/share.js');
  var poWxJsonp = getCustomURL('//po.baidu.com/api/wechat/token.jsonp');

  var emptyFn$1 = function emptyFn() {};

  var defaultLink = location.href;
  var tcReportUrl = getCustomURL('//mbd.baidu.com/tcbox');
  var defautTitle = '百度App';
  var defaultDesc = '百度App';
  var defaultIcon = 'https://b.bdstatic.com/searchbox/icms/searchbox/img/po/act/newuserredpack/box_logo.png';
  var defaultGetSignatureInterface = {
    url: poWxJsonp,
    method: 'jsonp',
    // 只支持get和jsonp
    optionObj: {},
    promiseFunc: null
  };

  function getCustomURL(url) {
    if (url.indexOf('//') === 0) {
      return "".concat(protocol).concat(url);
    }

    return url;
  }

  var encode = function encode(str) {
    return encodeURIComponent(str);
  };

  var stringify = function stringify(json, useEncode) {
    if (!isType(json, 'string')) {
      json = JSON.stringify(json);
    }

    if (useEncode) {
      json = encode(json);
    }

    return json;
  }; // 获取页面上大于 290 * 290 的图片


  function getShareImg(callback, defaultUrl) {
    // 获取页面的图片
    var imgsOfPage = doc.getElementsByTagName('img');
    var index;
    var item;
    var length = imgsOfPage.length; // 只取前10个图片，多了忽略

    length = length <= 10 ? length : 10; // 遍历

    for (index = 0; index < length; index++) {
      item = imgsOfPage[index];

      (function (src) {
        var newImg = doc.createElement('img');

        newImg.onload = function () {
          if (newImg.width > 290 && newImg.height > 290) {
            callback(src);
          }

          newImg = null;
        };

        newImg.src = src;
      })(item.src);
    } // 1s 之后还没搞定，则返回默认值


    setTimeout(function () {
      callback(defaultUrl);
    }, 1e3);
  } // ------------------------------------- 错误打点 -------------------------------------


  function sendErrorLog(evt, msg) {
    if (Math.random() <= 0.95 && defaultLink.indexOf('share_config_random=1') < 0) {
      // 抽样 0.05 概率
      return;
    }

    if (!evt || !msg) {
      return;
    }

    msg = encode(msg); // 特定的 pageid

    var pageId = '300_001'; // 往 tcbox 打点

    /* eslint-disable operator-linebreak */

    var tcboxUrl = "".concat(tcReportUrl, "?service=bdbox&action=pblog&data=") +
    /* eslint-enable operator-linebreak */
    stringify({
      appid: 1,
      dataid: 2,
      cateid: 26,
      actionid: 2,
      actiontype: '0',
      actiondata: {
        type: 0,
        timestamp: Date.now(),
        content: {
          // 增加个日志标识
          from: 'xbox',
          page_id: pageId,
          // eslint-disable-line
          logtype: 3,
          type: 'c_' + evt,
          msg: msg
        }
      }
    }, true); // 往 ispeed 打点 去掉
    // 发送打点
    // 开始打点

    var img = new Image();

    img.onload = img.onerror = img.onabort = function () {
      img = null;
    };

    img.src = tcboxUrl;
  } // 获取一个 elem 的 text


  function getElementText(elem) {
    if (isType(elem, 'string')) {
      return elem;
    }

    if (!elem || elem.nodeType !== 1) {
      return '';
    }

    return elem.innerText.replace(/\n/gim, '').replace(/^\s+/, '').replace(/\s+$/, '');
  }

  function getCallbackName() {
    var name = '_shareConfigFN_' + guid();

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var fn = args.find(function (fn) {
      if (isType(fn, 'function')) {
        window[name] = fn;
        return true;
      } else if (isType(fn, 'string') && isType(window[fn], 'function')) {
        name = fn;
      }

      return false;
    });

    if (fn) {
      return name;
    } // 都不存在，则用个空的


    name = '_shareConfigEmptyFn_';
    window[name] = emptyFn$1;
    return name;
  }

  var ShareConfig = /*#__PURE__*/function () {
    function ShareConfig() {
      var _this = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        // 是否开启 debug 模式（错误以 alert 形式弹出），默认 false
        debug: false,
        // 渠道，用于做统计，必填（请使用个性的名称，避免和其他产品的 channel 重复、导致统计错误）
        channel: '',
        // 分享标题，选填，默认为 document.title
        title: doc.title,
        // 选填。当 title 参数为空，且抓取不到页面的标题时，则使用该值作为 title
        titleDefault: doc.title || defautTitle,
        // 分享连接，选填，默认为 location.href
        linkUrl: defaultLink,
        // 分享描述，选填。第一，可直接填写描述字符串；第二，可传入一个 elem 如 document.getElementById('div1')；第三，如果不填，默认为 document.body
        content: '',
        // 选填。当 content 未传入字符串，且抓取不到页面内容时，使用该值作为 content
        contentDefault: defaultDesc,
        // 分享 icon 图片地址，选填。如果不传入值，会抓取页面第一个大于等于 300 * 300 的图片，1秒之内抓取不到则默认使用手百 logo 图
        iconUrl: '',
        // 选填。当 iconUrl 参数为空，且抓取图片失败时，用该值作为 iconUrl
        iconUrlDefault: defaultIcon,
        // 手百分享配置（如果使用手百分享，则必填）
        bdbox: {},
        // 微信分享配置（如果使用微信分享，则必填），默认百家号公共帐号，安全域 baidu.com
        wx: {
          appId: 'wxadc1a0c6b9096e89',
          jsApiList: []
        },
        // 自定义的微信sdk
        customWeixinjs: weixinjs,
        // 自定义的qq的sdk
        customQzonejs: qzonejs,
        // 自定义获取签名的接口信息
        getSignatureInterface: defaultGetSignatureInterface,
        success: emptyFn$1,
        error: emptyFn$1
      };
      var successCallback = arguments.length > 1 ? arguments[1] : undefined;
      var errorCallback = arguments.length > 2 ? arguments[2] : undefined;

      _classCallCheck(this, ShareConfig);

      this.log = getLogger(options.debug); // 微信 appid cache

      this._wxCache = {};
      this.useWeixinCache = options.useWeixinCache || true;
      var content = getElementText(options.content) || getElementText(options.contentDefault);
      options.content = content.length <= 50 ? content : content.slice(0, 50) + '...';
      options.title = options.title ? options.title : options.titleDefault;

      if (options.wx && (!options.wx.appId || options.wx.appId.length < 10)) {
        options.wx.appId = 'wxadc1a0c6b9096e89';
      }

      this.options = options;
      this.successCallback = getCallbackName(successCallback, options.success);
      this.errorCallback = getCallbackName(errorCallback, options.error); // 配置 iconUrl

      var isGetImgCalled = false;

      if (!options.iconUrl) {
        // 无图片，先试图获取图片再执行
        getShareImg(function (result) {
          // 记录状态，不重复调用
          if (isGetImgCalled) {
            return;
          }

          isGetImgCalled = true; // 设置 icon 值并执行

          _this.options.iconUrl = result;
        }, options.iconUrlDefault);
      }

      if (isWeixin()) {
        // 在微信中
        if (window.wx) {
          // 已经引入微信 jssdk
          this.weixin();
        } else {
          // 加载微信 jssdk 之后再初始化
          loadJS({
            url: this.options.customWeixinjs || weixinjs,
            success: function success() {
              _this.weixin();
            },
            error: function error() {
              sendErrorLog('load_wxsdk_err', defaultLink);
            }
          });
        }
      } else if (isQQ()) {
        // 在 QQ 中
        if (window.setShareInfo) {
          // 已经引入QQ jssdk
          this.qq();
        } else {
          // 加载 QQ jssdk 之后再初始化
          loadJS({
            url: this.options.customQzonejs || qzonejs,
            success: function success() {
              _this.qq();
            },
            error: function error() {
              sendErrorLog('load_qqsdk_err', defaultLink);
            }
          });
        }
      } else if (isBox() || isMatrix()) {
        this.box();
      }
    }

    _createClass(ShareConfig, [{
      key: "qq",
      value: function qq() {
        // 判断依赖的 sdk 是否加载完
        if (isQQ() && !window.setShareInfo) {
          this.log('QQ SDK 未加载完成');
        }

        var options = this.options;
        var _options$wx = options.wx,
            wx = _options$wx === void 0 ? {} : _options$wx,
            title = options.title,
            content = options.content,
            linkUrl = options.linkUrl,
            iconUrl = options.iconUrl;
        var appId = wx.appId; // --------------- QQ分享配置 ---------------

        this._getWeixinSignature(appId, function (data) {
          window.setShareInfo({
            title: title,
            summary: content,
            pic: iconUrl,
            url: linkUrl,
            // 微信权限验证配置信息，若不在微信传播，可忽略
            WXconfig: {
              swapTitleInWX: false,
              // 是否标题内容互换（仅朋友圈，因朋友圈内只显示标题）
              appId: appId,
              // 公众号的唯一标识
              timestamp: data.timestamp,
              // 生成签名的时间戳
              nonceStr: data.nonceStr,
              // 生成签名的随机串
              signature: data.signature // 签名

            }
          });
        });
      }
    }, {
      key: "weixin",
      value: function weixin() {
        var _this2 = this;

        if (isWeixin() && !window.wx) {
          this.log('微信 SDK 未加载完成');
        }

        var options = this.options;
        var title = options.title,
            content = options.content,
            linkUrl = options.linkUrl,
            iconUrl = options.iconUrl;
        var wechat = options.wx;
        var appId = wechat.appId,
            _wechat$jsApiList = wechat.jsApiList,
            jsApiList = _wechat$jsApiList === void 0 ? [] : _wechat$jsApiList; // 初始化微信配置参数

        jsApiList = jsApiList.concat(['checkJsApi', 'onMenuShareTimeline', 'onMenuShareAppMessage', 'onMenuShareQQ', 'onMenuShareWeibo', 'onMenuShareQZone']);
        var success = window[this.successCallback];
        var cancel = window[this.errorCallback]; // 动态获取微信签名

        this._getWeixinSignature(appId, function (data) {
          // --------------- 微信分享配置 ---------------
          // 初始化微信jssdk
          // eslint-disable-next-line
          wx.config({
            debug: !!_this2.options.debug,
            jsApiList: jsApiList,
            appId: appId,
            nonceStr: data.nonceStr,
            timestamp: data.timestamp,
            signature: data.signature
          }); // 各个分享的配置

          var configData = {
            title: title,
            desc: content,
            link: linkUrl,
            imgUrl: iconUrl,
            success: success,
            cancel: cancel
          };
          /* eslint-disable*/

          wx.ready(function () {
            // 配置微信朋友圈分享
            wx.onMenuShareTimeline(configData); // 配置微信消息分享

            wx.onMenuShareAppMessage(configData); // 配置QQ分享

            wx.onMenuShareQQ(configData); // 配置腾讯微博

            wx.onMenuShareWeibo(configData); // 配置QQ空间分享

            wx.onMenuShareQZone(configData);
          });
          /* eslint-enable*/
        });
      } // 动态获取微信签名

    }, {
      key: "_getWeixinSignature",
      value: function _getWeixinSignature(appId, callback) {
        var cache = this._wxCache[appId]; // 缓存20分钟

        if (cache && cache.signature && cache.nonceStr && Date.now() - cache._now < 20 * 60e3) {
          callback(cache);
        }

        var self = this;

        if (appId) {
          var successCb = function successCb(info) {
            var errno = info.errno,
                _info$data = info.data,
                data = _info$data === void 0 ? {} : _info$data,
                errmsg = info.errmsg;

            if (+errno !== 0 || !data.signature) {
              sendErrorLog('wx_gettoken_err', defaultLink);
              self.log('获取签名的接口错误：' + errmsg);
              return;
            }

            callback(data);
            data._now = Date.now();
            self._wxCache[appId] = data;
          };

          var _ref = self.options.getSignatureInterface || defaultGetSignatureInterface,
              url = _ref.url,
              method = _ref.method,
              _ref$optionObj = _ref.optionObj,
              optionObj = _ref$optionObj === void 0 ? {} : _ref$optionObj,
              promiseFunc = _ref.promiseFunc;

          if (promiseFunc && typeof promiseFunc === 'function') {
            // 直接传处理函数
            promiseFunc().then(function (res) {
              successCb(res);
            });
          } else if (method === 'GET') {
            // get 方式请求
            fetch(url, _objectSpread2({
              method: method
            }, optionObj)).then(function (response) {
              return response.json();
            }).then(function (res) {
              successCb(res);
            });
          } else {
            loadJS({
              url: poWxJsonp,
              data: {
                app_id: appId,
                // eslint-disable-line
                url: encode(defaultLink),
                callback: '?',
                ts: Date.now()
              },
              success: function success(_ref2) {
                var errno = _ref2.errno,
                    _ref2$data = _ref2.data,
                    data = _ref2$data === void 0 ? {} : _ref2$data,
                    errmsg = _ref2.errmsg;
                successCb({
                  errno: errno,
                  data: data,
                  errmsg: errmsg
                });
              }
            });
          }
        } else {
          self.log('appId is empty');
        }
      }
    }, {
      key: "box",
      value: function box() {
        // 处于手百环境
        var options = this.options;
        var linkUrl = options.linkUrl,
            bdbox = options.bdbox;
        var source = bdbox.source;

        if (!source) {
          sendErrorLog('no_bdbox_source', defaultLink);
          this.log('使用手百分享必须配置 source 参数');
          return;
        }

        var data = {
          type: 'url',
          mediaType: 'all',
          linkUrl: linkUrl,
          source: source
        };

        for (var i in options) {
          if (i !== 'bdbox') {
            data[i] = options[i];
          }
        }

        window.BoxShareData = {
          options: data,
          successcallback: this.successCallback,
          errorcallback: this.errorCallback
        };
      }
    }, {
      key: "update",
      value: function update() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (_typeof(options) === 'object') {
          for (var i in options) {
            this.options[i] = options[i];
          }

          if (options.success) {
            this.successCallback = getCallbackName(options.success);
          }

          if (options.error) {
            this.errorCallback = getCallbackName(options.error);
          }

          if (isWeixin()) {
            this.weixin();
          } else if (isBox() || isMatrix()) {
            this.box();
          } else if (isQQ()) {
            this.qq();
          }
        }
      }
    }]);

    return ShareConfig;
  }();

  function getLogger(debug) {
    if (debug === 'alert') {
      return alert;
    } else if (debug === false) {
      return emptyFn$1;
    } else if (isType(debug, 'function')) {
      return debug;
    } else {
      return function (msg) {
        console.log('%c[share]', 'color:red;background:yellow', msg);
      };
    }
  }
  /**
   * @link http://icode.baidu.com/repos/baidu/searchbox-fe/common/tree/master:openjs/shareConfig/
   */


  var index$1 = (function (options, success, error) {
    return new ShareConfig(options, success, error);
  });

  exports.ShareConfig = ShareConfig;
  exports.default = index$1;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
