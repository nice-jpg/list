/**
 * @file: 适应bi平台规范的事件log : http://wiki.baidu.com/pages/viewpage.action?pageId=337347739
 * 1. cateid=99
 * 2. actiondata结构不一样
 * 3. 一个页面上会有多个log实例，由actiondata.id区分
 * 与pblogExt.js功能基本一致，只是event没有回调函数
 * @author: xulinfeng@baidu.com
 */
import {PBLog} from './pblog';
import {isPlainObject} from '../is';
import getBoxVersion, {getV} from '../get-box-version';
import extend from '../extend';

const UA = navigator.userAgent;
/**
 * @class BILog
 * @param    {string}    id      统计指标唯一ID
 * @param    {obj}       obj     actiondata的content结构
 * @example
 * 初始化：      let log = pblogExt('100'); || pblogExt('100', {...}) 同时配置参数
 * 配置基本公参： log.config({cuid: 1000});
 * 统计上报：    log.event({type: 'pageclk'}); || event({...}, '11100') 上报修改初始化id
 */
export class BILog {
    constructor(id, obj) {
        this.pblog = new PBLog();
        let actionData = {
            // 统计指标唯一ID
            id,
            // 日志类型：0—事件类  1—流类型
            type: '0',
            // 事件上报的时间戳，单位：毫秒
            timestamp: '',
            // 扩展内容字段
            content: {
                boxV: getV(),
                boxVersion: getBoxVersion(),
                boxPlatform: UA.match(/(iPad|iPhone|iPod)/gim) ? 'ios' : 'android',
                hybridVersion: '',
                network: 'unknown',
                cuid: '',
                // 统一业务指标公共字段
                from: '',
                type: '',
                page: '',
                source: '',
                value: '',
                ext: {}
            }
        };
        isPlainObject(obj) && extend(actionData.content, obj);
        const data = {
            // 日志来源，12---UBC日志  99---H5前端日志 100---Server端日志
            cateid: 99,
            // 区分主动/被动，1---主动  0---被动
            actiontype: 1,
            actiondata: actionData
        };
        this.data = data;
        this.pblog.setGlobalData({data});
    }
    // 设置actiondata的content
    config(params) {
        extend(this.data.actiondata.content, params);
        this.pblog.setGlobalData({data: this.data});
        return this;
    }
    event(params, id = '') {
        const type = '0';
        const timestamp = Math.floor(Date.now() / 1000);
        const actionData = {type, timestamp, content: params};
        if (typeof id === 'string') {
            actionData.id = id;
        }
        this.pblog.newEvent([actionData]);
    }
}

export default (id, obj = {}) => new BILog(id, obj);