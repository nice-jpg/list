/**
 * @file 判断方法
 * @module is
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
import {isType} from './type';

/**
 * 判断是否为 null 或者 undefined
 * @param {any} obj - 判断的对象
 * @return {boolean} 返回判断结果
 * @example
 * isNil(null) // true
 * isNil(undefind) // true
 * isNil('') // false
 */
export function isNil(obj) {
    return obj === undefined || obj === null;
}
/**
 * 判断是否为 undefined
 * @param {any} obj - 判断的对象
 * @return {boolean} 返回判断结果
 * @example
 * isUndefined(null) // false
 * isUndefined(undefind) // true
 * isUndefined('') // false
 */
export function isUndefined(obj) {
    return obj === undefined;
}
/**
 * 判断是否是 window 对象
 * @param {any} obj - 判断的对象
 * @return {boolean} 返回判断结果
 * @example
 * isWindow( window) // true
 * isWindow(self) // true
 * isWindow('') // false
 */
export function isWindow(obj) {
    return !isNil(obj) && obj === obj.window;
}
/**
 * 判断是否为普通对象
 * @param {any} obj - 需要判断的对象
 * @return {boolean} 返回判断结果
 * @example
 * isPlainObject({}) // true
 * isPlainObject(window) // false
 */
export function isPlainObject(obj) {
    if (isType(obj, 'Object')) {
        return Object.getPrototypeOf(obj) === null || Object === obj.constructor;
    }

    return false;
}

/**
 * 是否是function类型
 * @name isFunction
 * @function isFunction
 * @param  {any} obj 要判断的对象
 * @return {Boolean} bool  true|false
 * @example
 * isFunction(new Function()) // true
 * isFuction('') // false
 */
export function isFunction(obj) {
    return isType(obj, 'Function');
}

/**
 * 是否是string类型
 * @name isString
 * @function
 * @param  {any} obj 要判断的对象
 * @return {Boolean} bool true|false
 * isString([]) // false
 * isString('array') // true
 */
export function isString(obj) {
    return isType(obj, 'String');
}

/**
 * 是否是array类型
 * @param  {any} obj 要判断的对象
 * @return {Boolean} bool 返回true|false
 * @example
 * isArray([]) // true
 * isArray('array') // false
 */
export function isArray(obj) {
    return isType(obj, 'Array');
}

/**
 * 是否是一个Number类型
 * @param  {any} obj 要判断的对象
 * @return {Boolean} bool  返回true|false
 * @example
 * isNumber(1) // true
 * isNumber('1') // false
 */
export function isNumber(obj) {
    return isType(obj, 'Number');
}

/**
 * 判断是否为布尔类型
 * @param {any} bool - 要判断的对象
 * @return {Boolean} bool  返回true|false
 * @example
 * isBoolean(false) // true
 * isBoolean(/a/) // false
 */
export function isBoolean(bool) {
    return bool === true || bool === false;
}

/**
 * 判断参数是否是空格或者由空格组成
 * @param {string} subject - 被判断的字符串
 * @return {boolean} 判断结果
 * @example
 * isEmpty(''); // => true
 * isEmpty('  '); // => false
 * isEmpty('World'); // => false
 */
export function isEmpty(subject) {
    return String(subject).length === 0;
}

/**
 * 判断参数是否是空格或者由空格组成
 * @param {string} subject - 被判断的字符串
 * @return {boolean} 判断结果
 * @example
 * isBlank('');// => true
 * isBlank('  ');// => true
 * isBlank('World');// => false
 */
export function isBlank(subject) {
    return String(subject).trim().length === 0;
}
/**
 * 判断一个对象是不是一个空对象
 * @param {object} obj - 待判断的对象
 * @return {boolean} 判断结果
 * @example
 * isEmptyObject({}) // true
 */
export function isEmptyObject(obj) {
    return Object.keys(obj).length === 0 && obj.constructor === Object;
}

const reJSON = /^\{[\s\S]*\}$|^\[[\s\S]*\]$/;

export function isJSON(value) {
    if (typeof value !== 'string') {
        return false;
    }
    if (!reJSON.test(value)) {
        return false;
    }
    try {
        JSON.parse(value);
    } catch (err) {
        return false;
    }
    return true;
}
