/**
 * @file 将对象转成url，但是没有添加对数组支持
 * @author wangyongqing <wangyongqing01@baidu.com>
 */

import {isString, isPlainObject, isArray, isNil, isFunction} from './is';
import type from './type';
import getGlobalFunc from './get-global-func';
import uriEncode from './strict-uri-encode';

/**
 * 将对象转成url，但是没有添加对数组、对象支持，直接 JSON.stringify 输出
 * @function json2query
 * @param  {object} json - 待处理的json对象
 * @param  {boolean} [encode = false] - 是否 encodeURI 对象/数组字符串
 * @return {string}  str  - 处理之后的string字符串
 * @example
 * json2query({
 *       a: 1,
 *       b: 'string'
 *  });
 * //'a=1&b=string'
 * json2query({
 *       a: 1,
 *       b: 'string',
 *       c: [1, 2, 3]
 *   });
 * //'a=1&b=string&c=[1,2,3]'
 * json2query({
 *       a: 1,
 *       b: 'string',
 *       c: [1, 2, 3]
 *   }, true);
 * //'a=1&b=string&c=%5B1%2C2%2C3%5D'
 */
export default function json2query(json, encode = false) {
    if (isString(json)) {
        return json;
    }

    const arr = [];
    for (let i in json) {
        let j = json[i];

        if (isArray(j)) {
            j = JSON.stringify(mapArray(j));
        } else if (isNil(j)) {
            j = '';
        } else if (isPlainObject(j)) {
            // 这里不再遍历处理，对于深层的 callback 需要注意了
            j = JSON.stringify(j);
        } else if (isFunction(j)) {
            j = getGlobalFunc(j);
        }

        // string/number/boolean 不处理
        arr.push(`${i}=${encode ? uriEncode(j) : j}`);
    }

    return arr.join('&');
}
function mapArray(args) {
    return args.map(arg => {
        switch (type(arg)) {
            case 'string':
                return arg;
            case 'function':
                return getGlobalFunc(arg);
            default:
                return arg;
        }
    });
}
