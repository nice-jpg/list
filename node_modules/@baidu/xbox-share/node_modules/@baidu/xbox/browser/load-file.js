/**
 * @file Created on Tue Nov 27 2018
 * @module browser
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
const emptyFn = () => {};

/**
 * 加载单个文件，支持css/img/js
 * @function loadFile
 * @param {string} path - url 地址
 * @param {function} callbackFn - callback error first
 * @param {object} args - 配置对象，包括async，timeout，maxTries，before 等
 * @param {number} numTries - 不对外参数，用于尝试重试次数
 * @example
 * loadFile('/path/to/foo.js', function(err, path) {
 *     // foo.js loaded
 * });
 * loadFile('css!/path/to/foo', function(err, path) {
 *     // foo css loaded
 * });
 * loadFile('img!/path/to/foo', function(err, path) {
 *     // foo img loaded
 * });
 */
export default function loadFile(path, callbackFn, args, numTries = 0) {
    const doc = document;
    const pathStripped = path.replace(/^(css|img)!/, '');
    let isCss = false;
    let elem;
    let timer;
    const {async = true, maxTries = 1, timeout = 2e4, before = null} = args;
    let beforeCallbackFn = before;

    if (typeof beforeCallbackFn !== 'function') {
        beforeCallbackFn = emptyFn;
    }
    if (/(^css!|\.css$)/.test(path)) {
        isCss = true;

        // css
        elem = doc.createElement('link');
        elem.rel = 'stylesheet';
        elem.href = pathStripped;
    } else if (/(^img!|\.(png|gif|jpg|svg)$)/.test(path)) {
        // image
        elem = doc.createElement('img');
        elem.src = pathStripped;
    } else {
        // javascript
        elem = doc.createElement('script');
        elem.src = path;
        elem.async = !!async;
    }
    const cb = ev => {
        clearTimeout(timer);
        let result;
        if (ev instanceof Error) {
            result = 'e';
        } else {
            result = ev.type[0];
        }

        // Note: The following code isolates IE using `hideFocus` and treats empty
        // stylesheets as failures to get around lack of onerror support
        if (isCss && 'hideFocus' in elem) {
            try {
                if (!elem.sheet.cssText.length) {
                    result = 'e';
                }
            } catch (x) {
                // sheets objects created from load errors don't allow access to
                // `cssText`
                result = 'e';
            }
        }

        // handle retries in case of load failure
        if (result === 'e') {
            // increment counter
            numTries += 1;

            // exit function and try again
            if (numTries < maxTries) {
                return loadFile(path, callbackFn, args, numTries);
            }
        }
        elem.onload = elem.onerror = elem.onbeforeload = null;
        elem = null;
        // error first
        callbackFn(result === 'e' ? (ev ? ev : 'error') : null, path);
    };
    elem.onload = elem.onerror = cb;

    if (beforeCallbackFn(path, elem) !== false) {
        const head = doc.head || doc.getElementsByTagName('script')[0];
        head.appendChild(elem);
        // timeout
        if (timeout > 0) {
            timer = setTimeout(() => {
                cb(new Error('timeout'));
            }, timeout);
        }
    }
}
