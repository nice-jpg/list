"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createProxy = createProxy;
exports.add = add;
exports.remove = remove;
exports.off = exports.on = void 0;

var _each = _interopRequireDefault(require("./each"));

var _guid = _interopRequireDefault(require("./guid"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file Created on Mon Dec 03 2018
 * @module event
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
var hover = {
  mouseenter: 'mouseover',
  mouseleave: 'mouseout'
};
var focusinSupported = ('onfocusin' in window);
var focus = {
  focus: 'focusin',
  blur: 'focusout'
};
var handlers = {};

var returnTrue = function returnTrue() {
  return true;
};

var returnFalse = function returnFalse() {
  return false;
};

var ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$|webkitMovement[XY]$)/;
var eventMethods = {
  preventDefault: 'isDefaultPrevented',
  stopImmediatePropagation: 'isImmediatePropagationStopped',
  stopPropagation: 'isPropagationStopped'
};

function bid(element) {
  return element._bid || (element._bid = (0, _guid.default)());
}

function createProxy(event) {
  var key;
  var proxy = {
    originalEvent: event
  };

  for (key in event) {
    if (!ignoreProperties.test(key) && event[key] !== undefined) {
      proxy[key] = event[key];
    }
  }

  return compatible(proxy, event);
}

function parse(event) {
  var parts = ('' + event).split('.');
  return {
    e: parts[0],
    ns: parts.slice(1).sort().join(' ')
  };
}

function realEvent(type) {
  return hover[type] || focusinSupported && focus[type] || type;
}

function eventCapture(handler, captureSetting) {
  return handler.del && (handler.e === 'focus' || handler.e === 'blur') || !!captureSetting;
}

function eachEvent(events, fn, iterator) {
  events.split(/\s/).forEach(function (type) {
    iterator(type, fn);
  });
}

function findHandlers(element, event, fn, selector) {
  event = parse(event);
  var matcher;

  if (event.ns) {
    matcher = matcherFor(event.ns);
  }
  /* eslint-disable  */


  return (handlers[bid(element)] || []).filter(function (handler) {
    return handler && (!event.e || handler.e == event.e) && (!event.ns || event.ns && matcher.test(handler.ns)) && (!fn || bid(handler.fn) === bid(fn)) && (!selector || handler.sel == selector);
  });
  /* eslint-enable  */
}

function matcherFor(ns) {
  return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)');
}

function contains(parent, node) {
  return parent !== node && parent.contains(node);
}

function compatible(event, source) {
  if (source || !event.isDefaultPrevented) {
    source || (source = event); // eslint-disable-next-line

    (0, _each.default)(eventMethods, function (name, predicate) {
      var sourceMethod = source[name]; // eslint-disable-next-line

      event[name] = function () {
        this[predicate] = returnTrue; // eslint-disable-next-line

        return sourceMethod && sourceMethod.apply(source, arguments);
      };

      event[predicate] = returnFalse;
    });

    try {
      event.timeStamp || (event.timeStamp = Date.now());
    } catch (ignored) {} // eslint-disable-line


    if (source.defaultPrevented !== undefined ? source.defaultPrevented : 'returnValue' in source ? source.returnValue === false : source.getPreventDefault && source.getPreventDefault()) {
      event.isDefaultPrevented = returnTrue;
    }
  }

  return event;
}
/**
 * @function add
 * @param {Element} element - 父节点
 * @param {String} events - 事件
 * @param {function} fn - 事件回调
 * @param {any} data - 数据
 * @param {string} selector - 选择器
 * @param {function} delegator - 代理器
 * @param {boolean} capture - 是否捕获
 */


function add(element, events, fn, data, selector, delegator, capture) {
  var id = bid(element);
  var set = handlers[id] || (handlers[id] = []);
  eachEvent(events, fn, function (event, fn) {
    var handler = parse(event);
    handler.fn = fn;
    handler.sel = selector; // emulate mouseenter, mouseleave

    if (handler.e in hover) {
      // eslint-disable-next-line
      fn = function fn(e) {
        var related = e.relatedTarget;

        if (!related || related !== this && !contains(this, related)) {
          return handler.fn.apply(this, arguments); // eslint-disable-line
        }
      };
    }

    handler.del = delegator;
    var callback = delegator || fn;

    handler.proxy = function (e) {
      e = compatible(e);

      if (e.isImmediatePropagationStopped()) {
        return;
      }

      e.data = data;
      var result = callback.apply(element, e._args === undefined ? [e] : [e].concat(e._args));

      if (result === false) {
        e.preventDefault();
        e.stopPropagation();
      }

      return result;
    };

    handler.i = set.length;
    set.push(handler);

    if ('addEventListener' in element) {
      element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));
    }
  });
}
/**
 * @function remove
 * @param {Element} element - 绑定的节点
 * @param {String} events - 事件
 * @param {function} fn - 事件回调
 * @param {string} selector - 子选择器
 * @param {boolean} capture - 是否捕获
 */


function remove(element, events, fn, selector, capture) {
  var id = bid(element);
  eachEvent(events || '', fn, function (event, fn) {
    findHandlers(element, event, fn, selector).forEach(function (handler) {
      delete handlers[id][handler.i];

      if ('removeEventListener' in element) {
        element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));
      }
    });
  });
}
/**
 * alias add
 * @function on
 */


var on = add;
/**
 * alias remove
 * @function off
 */

exports.on = on;
var off = remove;
exports.off = off;