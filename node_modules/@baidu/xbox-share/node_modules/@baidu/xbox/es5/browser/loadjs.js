"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loadJS;

var _guid = _interopRequireDefault(require("../guid"));

var _json2query = _interopRequireDefault(require("../json2query"));

var _type = require("../type");

var _loadFile = _interopRequireDefault(require("./load-file"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function isFunction(fn) {
  return (0, _type.isType)(fn, 'function');
}
/**
 * @function loadjs
 * @param {object} param - 参数
 * @example
 * loadjs({
 *  url,
 * before,
 * success,
 * error,
 * timeout,
 * async,
 * data,
 * jsonpCallback
 * })
 */


function loadJS(_ref) {
  var url = _ref.url,
      before = _ref.before,
      success = _ref.success,
      error = _ref.error,
      _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === void 0 ? 2e4 : _ref$timeout,
      async = _ref.async,
      data = _ref.data,
      jsonpCallback = _ref.jsonpCallback;

  if (_typeof(data) === 'object') {
    data = (0, _json2query.default)(data);
  }

  if (data) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + data;
  }

  url = url.replace(/[&?]{1,2}/, '?');
  var callbackName = (isFunction(jsonpCallback) ? jsonpCallback() : jsonpCallback) || '_boxjsonp' + (0, _guid.default)();
  var originalCallback = window[callbackName]; // 返回的数据

  var responseData;

  var cb = function cb(e, p) {
    if (e) {
      error(e, p);
    } else {
      success(responseData && responseData[0]);
    }

    window[callbackName] = originalCallback;

    if (responseData && isFunction(originalCallback)) {
      originalCallback(responseData[0]);
    }

    originalCallback = responseData = undefined;
  };

  window[callbackName] = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    responseData = args;
  };

  if (/=\?/.test(url)) {
    url = url.replace(/=\?/, '=' + callbackName);
  }

  (0, _loadFile.default)(url, cb, {
    timeout: timeout,
    async: async,
    before: before
  });
}