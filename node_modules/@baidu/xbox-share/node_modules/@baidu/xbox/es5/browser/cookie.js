"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Cookie = void 0;

var _is = require("../is");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var extend = Object.assign;
var inBrowser = !(0, _is.isUndefined)(document) && document.cookie;

function decode(s) {
  return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
}
/**
 * Cookie 类，支持传入 converter
 * @class Cookie
 * @param converter 转换函数对象，支持 read 和 write 两个函数
 */


var Cookie = /*#__PURE__*/function () {
  function Cookie(converter) {
    _classCallCheck(this, Cookie);

    this.converter = converter || {};
  }
  /**
   * 设置 cookie
   * @param {string} key - cookie name
   * @param {string|object} value - cookie value
   * @param {object} options - cookie 配置，expire 支持Date、天数或者秒
   */


  _createClass(Cookie, [{
    key: "set",
    value: function set(key, value, options) {
      if (!inBrowser) {
        return;
      }

      options = extend({
        path: '/'
      }, options);

      if ((0, _is.isNumber)(options.expires)) {
        // 传入的是时间；ms
        var expires = options.expires;

        if (options.expires < 500) {
          // 传入的是天
          expires = expires * 864e5;
        }

        options.expires = new Date(Date.now() + expires);
      }

      options.expires = options.expires ? options.expires.toUTCString() : '';

      try {
        var result = JSON.stringify(value); // eslint-disable-next-line

        if (/^[\{[]/.test(result)) {
          value = result;
        }
      } catch (e) {
        console.log(e);
      }

      var converter = this.converter.write;
      value = (0, _is.isFunction)(converter) ? converter(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decode);
      key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decode).replace(/[\()]/g, escape); // eslint-disable-line

      var stringifiedAttributes = '';
      Object.keys(options).forEach(function (opt) {
        if (options[opt]) {
          stringifiedAttributes += '; ' + opt;

          if (options[opt] !== true) {
            stringifiedAttributes += '=' + options[opt].split(';')[0];
          }
        }
      });
      return document.cookie = key + '=' + value + stringifiedAttributes;
    }
    /**
     * 取 Cookie
     * @param {string} key - 读取cookie的 key
     * @param {boolean} toJson - 是否尝试转换成 json 对象
     * @return {any} 获取到的 cookie
     */

  }, {
    key: "get",
    value: function get(key) {
      var toJson = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!inBrowser) {
        return;
      }

      var jar = {};
      var cookies = document.cookie.split('; ');

      for (var i = 0, len = cookies.length; i < len; i++) {
        var parts = cookies[i].split('=');
        var cookie = parts.slice(1).join('=');

        if (!toJson && cookie.charAt(0) === '"') {
          cookie = cookie.slice(1, -1);
        }

        try {
          var name = decode(parts[0]);
          var converter = this.converter.read;
          cookie = (0, _is.isFunction)(converter) ? converter(cookie) : decode(cookie);

          if (toJson) {
            try {
              cookie = JSON.parse(cookie);
            } catch (e) {
              console.log(e);
            }
          }

          jar[name] = cookie;

          if (key === name) {
            break;
          }
        } catch (e) {
          console.log(e);
        }
      }

      return key ? jar[key] : jar;
    }
    /**
     * 移除某个 cookie
     * @param {string} key - 需要移出的 cookie key
     * @param {object} options - 需要移出的参数，支持按照参数精准移除 cookie
     */

  }, {
    key: "remove",
    value: function remove(key) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.set(key, '', extend(options, {
        expires: -1
      }));
    }
  }]);

  return Cookie;
}(); // 导出默认的 cookie，如果需要增加自己解析的，使用 new Cookie 传入 Converter


exports.Cookie = Cookie;

var _default = new Cookie();

exports.default = _default;