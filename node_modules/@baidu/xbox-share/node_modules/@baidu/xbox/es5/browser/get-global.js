"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getGlobal;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * @file 获取 global 对象
 * @module browser
 * @author wangyongqing <wangyongqing01@baidu.com>
 * from https://github.com/panzerdp/voca/blob/master/src/helper/object/get_global.js
 */
var globalObject = null;
/**
 * 获取 global 对象
 * @function getGlobal
 * @return {object} global 对象
 */

function getGlobal() {
  if (globalObject !== null) {
    return globalObject;
  }
  /* istanbul ignore next */
  // It's hard to mock the global variables. This code surely works fine. I hope :)


  if ((typeof global === "undefined" ? "undefined" : _typeof(global)) === 'object' && global.Object === Object) {
    // NodeJS global object
    globalObject = global;
  } else if ((typeof self === "undefined" ? "undefined" : _typeof(self)) === 'object' && self.Object === Object) {
    // self property from Window object
    globalObject = self;
  } else {
    // Other cases. Function constructor always has the context as global object
    globalObject = new Function('return this')();
  }

  return globalObject;
}