"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _is = require("../is");

var _guid = _interopRequireDefault(require("../guid"));

var _json2query = _interopRequireDefault(require("../json2query"));

var _parseUrl = _interopRequireDefault(require("../parse-url"));

var _typeError = _interopRequireDefault(require("../type-error"));

var _extend = _interopRequireDefault(require("../extend"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Monitor 日志监控类，可以直接用，或者继承他扩展他！
 * @class Monitor
 * @param {String} url - 接受打点的 url 地址
 * @param {Object} options - 配置，包括 before处理函数 和 全局通用数据：globalData
 * @example
 * const monitor = new Monitor('http://baidu.com/gt.gif', {
 *      before:(data)=>{
 *      return data;
 * },
 * globalData:{
 *          a:1
 *      }
 * });
 * monitor.mark({b:1}).mark({cd:1}).send();
 * monitor.report({c:1});
 */
var Monitor = /*#__PURE__*/function () {
  function Monitor(url) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Monitor);

    var urlObj = (0, _parseUrl.default)(url);
    url = urlObj.url;

    if (url.indexOf('//') === 0) {
      // 通用协议，这里需要处理，解决 hybrid 使用 file 协议的情况
      var protocol = location.protocol;

      if (protocol !== 'http:') {
        protocol = 'https:';
      }

      url = protocol + url;
    }

    this.url = url;
    var globalData = options.globalData || {};
    this._default = Object.assign(urlObj.query || {}, globalData);
    this._data = {};
    this._before = options.before;
  }
  /**
   * 设置全局数据
   * @param {Object} data - 需要 set 的数据对象
   */


  _createClass(Monitor, [{
    key: "setGlobalData",
    value: function setGlobalData(data) {
      if ((0, _is.isPlainObject)(data)) {
        (0, _extend.default)(this._default, data);
      }

      return this;
    }
    /**
     * 用于多次记录数据，数据会累计，只有调用过一次 send 方法才会清空
     * **注意**：后面传入同名的字段会覆盖掉之前传入的
     * **注意**：mark 的数据只能通过手动调用 send 才发送
     * 期间 report 方法的数据是单独发送的
     * 用于数据采集打点，比如速度统计，一个时间点一个打点，最后汇总发送
     * @param {Object} data - 用于添加的数据
     * @return {Monitor}
     */

  }, {
    key: "mark",
    value: function mark() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (!(0, _is.isPlainObject)(data)) {
        throw (0, _typeError.default)('data', 'object', data);
      } // 增加


      if ((0, _is.isPlainObject)(data)) {
        Object.assign(this._mdata, data);
      } // 其他类型数据扔掉，只收 object|string


      return this;
    }
  }, {
    key: "_send",
    value: function _send(data) {
      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (!(0, _is.isPlainObject)(data)) {
        throw (0, _typeError.default)('data', 'object', data);
      }

      var img = new Image(1, 1);
      var imgName = "_xbox_mt_".concat((0, _guid.default)());
      window[imgName] = img;

      img.onload = img.onerror = img.onabort = function () {
        img.onload = img.onerror = img.onabort = null;
        window[imgName] = img = null;
      }; // 增加 默认数据


      data = (0, _extend.default)({}, this._default, data);
      var before = this._before;

      if (!force && (0, _is.isFunction)(before)) {
        var result = before(data); // 如果返回是 false 则不发送

        if (result === false) {
          return this;
        } else if ((0, _is.isUndefined)(result)) {// 如果是 undefined， 则继续使用 data
        } else if ((0, _is.isPlainObject)(result) || (0, _is.isString)(result)) {
          // 如果是对象或者字符串，则替换 data；
          data = result;
        }
      }

      var url = "".concat(this.url, "?").concat((0, _is.isString)(data) ? data : (0, _json2query.default)(data, true));
      img.src = url + '&_rnd=' + (0, _guid.default)();
      return this;
    }
    /**
     * 跟 mark 配合使用，发送 mark 记录的数据
     * @param {Boolean} force - 是否跳过 before 函数处理直接发请求
     * @return {Monitor}
     */

  }, {
    key: "send",
    value: function send(force) {
      this._send(this._data, force); // 发送过一次之后就清空


      delete this._mdata;
      this._mdata = {};
      return this;
    }
    /**
     * @param {Object} data - 发送的数据
     * @param {Boolean} force - 是否跳过 before 函数处理直接发请求
     * @return {Monitor}
     */

  }, {
    key: "report",
    value: function report() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var force = arguments.length > 1 ? arguments[1] : undefined;

      if (!(0, _is.isPlainObject)(data)) {
        throw (0, _typeError.default)('data', 'object', data);
      }

      return this._send(data, force);
    }
  }]);

  return Monitor;
}(); // eslint-disable-next-line JS630


var _default = Monitor;
exports.default = _default;