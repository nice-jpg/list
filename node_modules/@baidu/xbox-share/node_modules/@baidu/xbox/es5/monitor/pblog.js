"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lazyLog = exports.default = exports.PBLog = void 0;

var _monitor = _interopRequireDefault(require("./monitor"));

var _query2json = _interopRequireDefault(require("../query2json"));

var _is = require("../is");

var _getBoxVersion = _interopRequireWildcard(require("../get-box-version"));

var _isBox = _interopRequireDefault(require("../is-box"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var URL = (0, _query2json.default)(location.search);
var UA = navigator.userAgent;
var GIF_URI = 'https://mbd.baidu.com/tcbox';
var NEW_GIF_URL = 'https://mbd.baidu.com/ztbox';

var PBLog = /*#__PURE__*/function (_Monitor) {
  _inherits(PBLog, _Monitor);

  var _super = _createSuper(PBLog);

  function PBLog(action) {
    _classCallCheck(this, PBLog);

    var CUSTOM_ARG = {};

    if (URL.uid && URL.osname) {
      ['osname', 'ua', 'ut', 'from', 'cfrom', 'uid', 'pkgname'].forEach(function (v) {
        URL[v] && (CUSTOM_ARG[v] = URL[v]);
      });
    }

    return _super.call(this, action ? NEW_GIF_URL : GIF_URI, {
      globalData: _objectSpread(_objectSpread({}, CUSTOM_ARG), {}, {
        service: 'bdbox',
        action: action || 'pblog',
        // 表明参数协议第二个版本
        ctv: 2,
        // 表明参数加密
        cen: 'uid_ua_ut',
        data: {
          // 更新版本标记
          // 手百为1
          appid: (0, _isBox.default)('lite') ? 10001 : (0, _isBox.default)('info') ? 10002 : '1',
          // 客户端：1、JS：2、SERVER：3
          dataid: '2',
          // 区分主动/被动行为，主动：1、被动：0
          actiontype: '1',
          // 写死, actionid：2=事件统计，1=pv统计
          actionid: '2',
          actiondata: {
            boxV: (0, _getBoxVersion.getV)(),
            ref: URL.ref || '',
            gmv: URL.vmgdb || '',
            source: URL.from || URL.ref || '',
            boxVersion: (0, _getBoxVersion.default)(),
            boxPlatform: UA.match(/(iPad|iPhone|iPod)/gim) ? 'ios' : 'android'
          }
        }
      })
    });
  }

  _createClass(PBLog, [{
    key: "init",
    value: function init() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [],
          _ref2 = _slicedToArray(_ref, 2),
          cateId = _ref2[0],
          obj = _ref2[1];

      var CUSTOM_ARG = (0, _is.isPlainObject)(obj) ? obj : {};
      CUSTOM_ARG.data = {};
      CUSTOM_ARG.data.cateid = cateId;
      return _get(_getPrototypeOf(PBLog.prototype), "setGlobalData", this).call(this, CUSTOM_ARG);
    }
    /**
     * pv统计
     * @param  {string} url 统计的pv url
     * @param  {string} su  来源url，可选
     * @return {this}     PBLOG
     */

  }, {
    key: "pv",
    value: function pv() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [],
          _ref4 = _slicedToArray(_ref3, 2),
          url = _ref4[0],
          u = _ref4[1];

      var tmpArg = {
        // 写死, actionid：2=事件统计，1=pv统计
        actionid: '1',
        actiondata: {
          url: url || location.href
        }
      };

      if (u) {
        tmpArg.actiondata.u = u;
      }

      return _get(_getPrototypeOf(PBLog.prototype), "report", this).call(this, {
        data: tmpArg
      });
    }
    /**
     * 事件打点统计
     * @param  {string} evtName 事件名称
     * @param  {string} evtType   事件类型
     * @param  {string} evtTag    事件tag标示
     * @param  {?number} cateId    业务类型，可选用于指定打点业务类型
     * @return {object}  tc    tc函数
     */

  }, {
    key: "event",
    value: function event() {
      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [],
          _ref6 = _slicedToArray(_ref5, 4),
          evtName = _ref6[0],
          _ref6$ = _ref6[1],
          evtType = _ref6$ === void 0 ? '' : _ref6$,
          _ref6$2 = _ref6[2],
          evtTag = _ref6$2 === void 0 ? '' : _ref6$2,
          cateId = _ref6[3];

      if (!evtName) {
        throw 'monitor.tc.event need a evtName';
      }

      var data = {};

      if ((0, _is.isPlainObject)(evtType) && !evtTag) {
        data = {
          evtName: evtName
        };

        for (var i in evtType) {
          data[i] = evtType[i];
        }
      } else {
        data = {
          evtName: evtName,
          evtType: evtType,
          evtTag: evtTag
        };
      }

      var tmpArg = {
        // 写死, actionid：2=事件统计，1=pv统计
        actionid: '2',
        actiondata: data
      };

      if (cateId) {
        tmpArg.cateid = cateId;
      }

      return _get(_getPrototypeOf(PBLog.prototype), "report", this).call(this, {
        data: tmpArg
      });
    }
    /**
     * 事件打点统计
     * @param  {Object} data 事件上报数据
     * @param  {?number} cateId    业务类型，可选用于指定打点业务类型
     * @return {Object}  tc    tc函数
     */

  }, {
    key: "newEvent",
    value: function newEvent() {
      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [],
          _ref8 = _slicedToArray(_ref7, 2),
          data = _ref8[0],
          cateId = _ref8[1];

      var tmpArg = {
        // 写死, actionid：2=事件统计，1=pv统计
        actionid: '2',
        actiondata: data
      };

      if (cateId) {
        tmpArg.cateid = cateId;
      }

      return _get(_getPrototypeOf(PBLog.prototype), "report", this).call(this, {
        data: tmpArg
      });
    }
  }]);

  return PBLog;
}(_monitor.default);

exports.PBLog = PBLog;
var pblog = new PBLog();
var isPageVisible = (document.visibilityState || document.webkitVisibilityState) === 'visible';

var delayExecute = function delayExecute(func) {
  isPageVisible ? requestAnimationFrame(func) : setTimeout(func, 15);
};

var _default = function _default(func) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return pblog[func].apply(pblog, args);
};
/* eslint-disable-next-line space-before-function-paren */


exports.default = _default;

var lazyLog = function lazyLog(func) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  // 当对象不是pblog的情况，是手动new的自定义pblog
  // 这个时候使用 lazyLog.call(xxx, func, ...args);
  var log = !this || this === window ? pblog : this; // 如果onload已经执行了则延迟，否则挂到onload上面

  if (document.readyState === 'complete') {
    delayExecute(function () {
      log[func].apply(log, args);
    });
    return;
  }

  var handler = function handler() {
    delayExecute(function () {
      log[func].apply(log, args);
    });
    window.removeEventListener('load', handler);
  };

  window.addEventListener('load', handler);
};

exports.lazyLog = lazyLog;