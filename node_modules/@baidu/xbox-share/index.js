/**
 * 通用分享，支持二次分享，原来 shareConfig 迁移
 * @link http://icode.baidu.com/repos/baidu/searchbox-fe/common/tree/master:openjs/shareConfig/
 * @file Created on Thu Nov 22 2018
 * @author wangyongqing <wangyongqing01@baidu.com>
 */

import {isQQ, isWeixin, isBox} from '@baidu/xbox/browser/detect';
import isMatrix from '@baidu/xbox/is-matrix';
import guid from '@baidu/xbox/guid';
import loadjs from '@baidu/xbox/browser/loadjs';
import {isType} from '@baidu/xbox/type';
const doc = document;
const protocol = location.protocol !== 'https:' ? 'http:' : 'https:';

const weixinjs = getCustomURL('//res.wx.qq.com/open/js/jweixin-1.4.0.js');
const qzonejs = getCustomURL('//qzonestyle.gtimg.cn/qzone/qzact/common/share/share.js');
const poWxJsonp = getCustomURL('//po.baidu.com/api/wechat/token.jsonp');
const emptyFn = () => {};
const defaultLink = location.href;
const tcReportUrl = getCustomURL('//mbd.baidu.com/tcbox');
const defautTitle = '百度App';
const defaultDesc = '百度App';
const defaultIcon = 'https://b.bdstatic.com/searchbox/icms/searchbox/img/po/act/newuserredpack/box_logo.png';
const defaultGetSignatureInterface = {
    url: poWxJsonp,
    method: 'jsonp', // 只支持get和jsonp
    optionObj: {},
    promiseFunc: null
};

function getCustomURL(url) {
    if (url.indexOf('//') === 0) {
        return `${protocol}${url}`;
    }
    return url;
}
const encode = str => encodeURIComponent(str);
const stringify = (json, useEncode) => {
    if (!isType(json, 'string')) {
        json = JSON.stringify(json);
    }
    if (useEncode) {
        json = encode(json);
    }
    return json;
};
// 获取页面上大于 290 * 290 的图片
function getShareImg(callback, defaultUrl) {
    // 获取页面的图片
    let imgsOfPage = doc.getElementsByTagName('img');
    let index;
    let item;
    let length = imgsOfPage.length;
    // 只取前10个图片，多了忽略
    length = length <= 10 ? length : 10;
    // 遍历
    for (index = 0; index < length; index++) {
        item = imgsOfPage[index];
        (src => {
            let newImg = doc.createElement('img');
            newImg.onload = () => {
                if (newImg.width > 290 && newImg.height > 290) {
                    callback(src);
                }
                newImg = null;
            };
            newImg.src = src;
        })(item.src);
    }
    // 1s 之后还没搞定，则返回默认值
    setTimeout(() => {
        callback(defaultUrl);
    }, 1e3);
}

// ------------------------------------- 错误打点 -------------------------------------
function sendErrorLog(evt, msg) {
    if (Math.random() <= 0.95 && defaultLink.indexOf('share_config_random=1') < 0) {
        // 抽样 0.05 概率
        return;
    }
    if (!evt || !msg) {
        return;
    }
    msg = encode(msg);
    // 特定的 pageid
    const pageId = '300_001';
    // 往 tcbox 打点
    /* eslint-disable operator-linebreak */
    const tcboxUrl =
        `${tcReportUrl}?service=bdbox&action=pblog&data=` +
        /* eslint-enable operator-linebreak */
        stringify(
            {
                appid: 1,
                dataid: 2,
                cateid: 26,
                actionid: 2,
                actiontype: '0',
                actiondata: {
                    type: 0,
                    timestamp: Date.now(),
                    content: {
                        // 增加个日志标识
                        from: 'xbox',
                        page_id: pageId, // eslint-disable-line
                        logtype: 3,
                        type: 'c_' + evt,
                        msg: msg
                    }
                }
            },
            true
        );
    // 往 ispeed 打点 去掉
    // 发送打点
    // 开始打点
    let img = new Image();
    img.onload = img.onerror = img.onabort = () => {
        img = null;
    };
    img.src = tcboxUrl;
}

// 获取一个 elem 的 text
function getElementText(elem) {
    if (isType(elem, 'string')) {
        return elem;
    }
    if (!elem || elem.nodeType !== 1) {
        return '';
    }
    return elem.innerText
        .replace(/\n/gim, '')
        .replace(/^\s+/, '')
        .replace(/\s+$/, '');
}
function getCallbackName(...args) {
    let name = '_shareConfigFN_' + guid();
    let fn = args.find(fn => {
        if (isType(fn, 'function')) {
            window[name] = fn;
            return true;
        } else if (isType(fn, 'string') && isType(window[fn], 'function')) {
            name = fn;
        }
        return false;
    });
    if (fn) {
        return name;
    }
    // 都不存在，则用个空的
    name = '_shareConfigEmptyFn_';
    window[name] = emptyFn;
    return name;
}
export class ShareConfig {
    constructor(
        options = {
            // 是否开启 debug 模式（错误以 alert 形式弹出），默认 false
            debug: false,
            // 渠道，用于做统计，必填（请使用个性的名称，避免和其他产品的 channel 重复、导致统计错误）
            channel: '',
            // 分享标题，选填，默认为 document.title
            title: doc.title,
            // 选填。当 title 参数为空，且抓取不到页面的标题时，则使用该值作为 title
            titleDefault: doc.title || defautTitle,
            // 分享连接，选填，默认为 location.href
            linkUrl: defaultLink,
            // 分享描述，选填。第一，可直接填写描述字符串；第二，可传入一个 elem 如 document.getElementById('div1')；第三，如果不填，默认为 document.body
            content: '',
            // 选填。当 content 未传入字符串，且抓取不到页面内容时，使用该值作为 content
            contentDefault: defaultDesc,
            // 分享 icon 图片地址，选填。如果不传入值，会抓取页面第一个大于等于 300 * 300 的图片，1秒之内抓取不到则默认使用手百 logo 图
            iconUrl: '',
            // 选填。当 iconUrl 参数为空，且抓取图片失败时，用该值作为 iconUrl
            iconUrlDefault: defaultIcon,
            // 手百分享配置（如果使用手百分享，则必填）
            bdbox: {},
            // 微信分享配置（如果使用微信分享，则必填），默认百家号公共帐号，安全域 baidu.com
            wx: {
                appId: 'wxadc1a0c6b9096e89',
                jsApiList: []
            },
            // 自定义的微信sdk
            customWeixinjs: weixinjs,
            // 自定义的qq的sdk
            customQzonejs: qzonejs,
            // 自定义获取签名的接口信息
            getSignatureInterface: defaultGetSignatureInterface,
            success: emptyFn,
            error: emptyFn
        },
        successCallback,
        errorCallback
    ) {
        this.log = getLogger(options.debug);
        // 微信 appid cache
        this._wxCache = {};
        this.useWeixinCache = options.useWeixinCache || true;

        let content = getElementText(options.content) || getElementText(options.contentDefault);
        options.content = content.length <= 50 ? content : content.slice(0, 50) + '...';
        options.title = options.title ? options.title : options.titleDefault;
        if (options.wx && (!options.wx.appId || options.wx.appId.length < 10)) {
            options.wx.appId = 'wxadc1a0c6b9096e89';
        }
        this.options = options;

        this.successCallback = getCallbackName(successCallback, options.success);
        this.errorCallback = getCallbackName(errorCallback, options.error);

        // 配置 iconUrl
        let isGetImgCalled = false;
        if (!options.iconUrl) {
            // 无图片，先试图获取图片再执行
            getShareImg(result => {
                // 记录状态，不重复调用
                if (isGetImgCalled) {
                    return;
                }
                isGetImgCalled = true;
                // 设置 icon 值并执行
                this.options.iconUrl = result;
            }, options.iconUrlDefault);
        }
        if (isWeixin()) {
            // 在微信中
            if (window.wx) {
                // 已经引入微信 jssdk
                this.weixin();
            } else {
                // 加载微信 jssdk 之后再初始化
                loadjs({
                    url: this.options.customWeixinjs || weixinjs,
                    success: () => {
                        this.weixin();
                    },
                    error: () => {
                        sendErrorLog('load_wxsdk_err', defaultLink);
                    }
                });
            }
        } else if (isQQ()) {
            // 在 QQ 中
            if (window.setShareInfo) {
                // 已经引入QQ jssdk
                this.qq();
            } else {
                // 加载 QQ jssdk 之后再初始化
                loadjs({
                    url: this.options.customQzonejs || qzonejs,
                    success: () => {
                        this.qq();
                    },
                    error: () => {
                        sendErrorLog('load_qqsdk_err', defaultLink);
                    }
                });
            }
        } else if (isBox() || isMatrix()) {
            this.box();
        } else {
            // this.other();
        }
    }

    qq() {
        // 判断依赖的 sdk 是否加载完
        if (isQQ() && !window.setShareInfo) {
            this.log('QQ SDK 未加载完成');
        }
        const options = this.options;
        const {wx = {}, title, content, linkUrl, iconUrl} = options;

        let appId = wx.appId;

        // --------------- QQ分享配置 ---------------
        this._getWeixinSignature(appId, data => {
            window.setShareInfo({
                title,
                summary: content,
                pic: iconUrl,
                url: linkUrl,
                // 微信权限验证配置信息，若不在微信传播，可忽略
                WXconfig: {
                    swapTitleInWX: false, // 是否标题内容互换（仅朋友圈，因朋友圈内只显示标题）
                    appId, // 公众号的唯一标识
                    timestamp: data.timestamp, // 生成签名的时间戳
                    nonceStr: data.nonceStr, // 生成签名的随机串
                    signature: data.signature // 签名
                }
            });
        });
    }
    weixin() {
        if (isWeixin() && !window.wx) {
            this.log('微信 SDK 未加载完成');
        }
        const options = this.options;
        const {title, content, linkUrl, iconUrl} = options;
        let wechat = options.wx;
        let {appId, jsApiList = []} = wechat;
        // 初始化微信配置参数
        jsApiList = jsApiList.concat([
            'checkJsApi',
            'onMenuShareTimeline',
            'onMenuShareAppMessage',
            'onMenuShareQQ',
            'onMenuShareWeibo',
            'onMenuShareQZone'
        ]);
        const success = window[this.successCallback];
        const cancel = window[this.errorCallback];

        // 动态获取微信签名
        this._getWeixinSignature(appId, data => {
            // --------------- 微信分享配置 ---------------
            // 初始化微信jssdk
            // eslint-disable-next-line
            wx.config({
                debug: !!this.options.debug,
                jsApiList,
                appId,
                nonceStr: data.nonceStr,
                timestamp: data.timestamp,
                signature: data.signature
            });
            // 各个分享的配置
            const configData = {
                title,
                desc: content,
                link: linkUrl,
                imgUrl: iconUrl,
                success,
                cancel
            };
            /* eslint-disable*/
            wx.ready(() => {
                // 配置微信朋友圈分享
                wx.onMenuShareTimeline(configData);
                // 配置微信消息分享
                wx.onMenuShareAppMessage(configData);
                // 配置QQ分享
                wx.onMenuShareQQ(configData);
                // 配置腾讯微博
                wx.onMenuShareWeibo(configData);
                // 配置QQ空间分享
                wx.onMenuShareQZone(configData);
            });
            /* eslint-enable*/
        });
    }
    // 动态获取微信签名
    _getWeixinSignature(appId, callback) {
        const cache = this._wxCache[appId];

        // 缓存20分钟
        if (cache && cache.signature && cache.nonceStr && Date.now() - cache._now < 20 * 60e3) {
            callback(cache);
        }
        const self = this;
        if (appId) {
            let {
                url,
                method,
                optionObj = {},
                promiseFunc
            } = self.options.getSignatureInterface || defaultGetSignatureInterface;
            if (promiseFunc && typeof promiseFunc === 'function') {
                // 直接传处理函数
                promiseFunc().then(res => {
                    successCb(res);
                });
            } else if (method === 'GET') {
                // get 方式请求
                fetch(url, {
                    method,
                    ...optionObj
                }).then(response => response.json())
                .then(res => {
                    successCb(res);
                });
            } else {
                loadjs({
                    url: poWxJsonp,
                    data: {
                        app_id: appId, // eslint-disable-line
                        url: encode(defaultLink),
                        callback: '?',
                        ts: Date.now()
                    },
                    success: ({errno, data = {}, errmsg}) => {
                        successCb({errno, data, errmsg});
                    }
                });
            }
            function successCb(info) {
                let {errno, data = {}, errmsg} = info;
                if (+errno !== 0 || !data.signature) {
                    sendErrorLog('wx_gettoken_err', defaultLink);
                    self.log('获取签名的接口错误：' + errmsg);
                    return;
                }
                callback(data);
                data._now = Date.now();
                self._wxCache[appId] = data;
            }
        } else {
            self.log('appId is empty');
        }
    }
    box() {
        // 处于手百环境
        const options = this.options;
        let {linkUrl, bdbox} = options;
        let {source} = bdbox;
        if (!source) {
            sendErrorLog('no_bdbox_source', defaultLink);
            this.log('使用手百分享必须配置 source 参数');
            return;
        }
        const data = {
            type: 'url',
            mediaType: 'all',
            linkUrl,
            source
        };
        for (let i in options) {
            if (i !== 'bdbox') {
                data[i] = options[i];
            }
        }

        window.BoxShareData = {
            options: data,
            successcallback: this.successCallback,
            errorcallback: this.errorCallback
        };
    }
    update(options = {}) {
        if (typeof options === 'object') {
            for (let i in options) {
                this.options[i] = options[i];
            }
            if (options.success) {
                this.successCallback = getCallbackName(options.success);
            }
            if (options.error) {
                this.errorCallback = getCallbackName(options.error);
            }

            if (isWeixin()) {
                this.weixin();
            } else if (isBox() || isMatrix()) {
                this.box();
            } else if (isQQ()) {
                this.qq();
            }
        }
    }
}

function getLogger(debug) {
    if (debug === 'alert') {
        return alert;
    } else if (debug === false) {
        return emptyFn;
    } else if (isType(debug, 'function')) {
        return debug;
    } else {
        return msg => {
            console.log('%c[share]', 'color:red;background:yellow', msg);
        };
    }
}
/**
 * @link http://icode.baidu.com/repos/baidu/searchbox-fe/common/tree/master:openjs/shareConfig/
 */
export default (options, success, error) => new ShareConfig(options, success, error);
