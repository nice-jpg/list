/**
 * @file index.ts
 * @author gaohong01
 */

import AucComponent from '@baidu/auc-base/AucComponent';
import styles from './style.module.less';
import {AucVedioPlayerData} from './types';
import XPlayer from '@baidu/xbox-player-mini/index';
import {WujiImage, WujiIcon} from '@baidu/wuji-san';
import {env} from '@baidu/auc-base/env';
import {pr2rem, hex2rgb} from '@baidu/auc-base/utils';
import {getBoxVideoInfo} from '@baidu/auc-base/setAndGetBoxVideoInfo';
import throttle from 'lodash.throttle';
import {topicVideoThunderLog} from '@baidu/auc-base/topicVideoThunderLog';

export class AucVedioPlayer extends AucComponent {
    static template:string = /* html */ `
    <div
        class="{{vedioClass}}"
        on-click="click"
    >
        <div
            id="{{'video_' + nid}}"
            class="{{styles.videoBox}} videoBox"
            s-ref="{{vid}}"
        >
        </div>
        <wuji-image
            s-show="!vedioStatus"
            src="{{poster}}"
            ratio="{{posterRatio}}"
            class="{{styles.poster}}"
            radius="J_X22"
            borderRadius="{{imageRadius}}"
        ></wuji-image>
        <div class="{{styles.control}}">
            <div class="{{styles.mark}}"></div>
            <wuji-icon s-if="vedioStatus === 0 || vedioStatus === 2" class="{{styles.playIcon}}}" type="x-d20-videoplay"></wuji-icon>
            <div s-if="(vedioStatus === 0 || vedioStatus === 2) && !hideTitle" class="{{styles.title}}">{{title}}</div>
            <div s-if="vedioStatus === 1" class="{{styles.process}}">
                <div class="{{styles.processInner}}" style="width: {{process}}%"></div>
            </div>
            <div class="{{styles.after}}" style="{{afterStyle}}"></div>
            <div s-if="vedioStatus === 1" class="{{voiceClass}}" on-click="mutedChange"></div>
        </div>
    </div>
    `;

    static components:object = {
        'wuji-image': WujiImage,
        'wuji-icon': WujiIcon
    };

    initData(): AucVedioPlayerData {
        return {
            styles,
            // vedioData
            nid:'',
            vid: '',
            src: '',
            pageUrl: '',
            title: '',
            poster: '',
            duration: '',
            // vedioConfig
            loop: true,
            isIgnoreVolumeChange: false,
            ignore4gToast: false,
            isIgnoreDeviceOrientation: true,
            isPlayerCanEnterEndPage: 0,
            posterRatio: '16:9',
            customizedVideo: false,
            // vedioControlConfig
            playerControlType: 0,
            // vedio
            vedioStatus: 0,// 0 初始状态 1 播放中 2 暂停 
            playTime: 0,
            ticking: false,
            player: null,
            hideTitle: false,
            videoType: '',
            elementVisible: false,
            timeouter: null,
            currentTime: 0,
            isInit: true,
            clicked: false
        };
    }
    static computed = {
        vedioClass() {
            return [
                styles.aucVedioPlayerWrapper,
                this.data.get('isBigEvent') ? styles.aucVedioPlayerBigEvent : '',
                this.data.get('isOrdinary') ? styles.isOrdinary : '',
            ]
        },
        voiceClass() {
            const muted = env.isBoxSeries ? this.data.get('muted') : true
            return [
                styles.voice,
               !muted ? styles.sound : ''
            ];
        },
        process() {
            const data = this.data;
            return (+(data.get('playTime') / data.get('duration')).toFixed(2) * 100);
        },
        imageRadius() {
            return pr2rem(36) + 'rem';
        },
        afterStyle() {
            let navColor = this.data.get('navColor');
            navColor = /rgb/.test(navColor) ? navColor.replace('rgb', 'rgba').replace(')', ', 0.72)'):
            /#/.test(navColor) ? hex2rgb(navColor, 1, 0.6).rgb0 : navColor;
            return navColor ? 'border-color:' + navColor : '';
        }
    };
    inited() {
    }

    attached() {
        const videoBox= document.getElementById('video_' + this.data.get('nid'));
        if (this.isElementVisible && this.isElementVisible(videoBox)) {
            this.initVideo();
        } 
        this.elementVisibleWacth();
        (env.isBoxSeries || env.isMatrix) && env.isIOS && this.pageShowLister();
    }
    async initVideo() {
        if (env.isSSR) {
            return;
        }
        const config = this.data.get();
        // 第一次初始化，打展现点
        if (config.isInit) {
            this.data.set('isInit', false);
        }
        // 初始化
        let params = {
            id: 'video_' + config.nid,
            nid: config.nid,
            vid: config.vid,
            src: config.src,
            title: config.title,
            poster: config.poster,
            duration: config.duration,
            loop: true,
            needReadLocalProgress: true, //强制必须是true
            isIgnoreVolumeChange: config.isIgnoreVolumeChange,
            ignore4gToast: config.ignore4gToast,
            isIgnoreDeviceOrientation: config.isIgnoreDeviceOrientation,
            prepareInvokePlayerTime: +(new Date()),
            isPlayerCanEnterEndPage: config.isPlayerCanEnterEndPage,
            customizedVideo: config.customizedVideo,
            playerControlType: config.playerControlType,
            muted: env.isBoxSeries ? config.muted : true,
            pageUrl: config.pageUrl,
            from: 'bdbox_topic',
            page: 'topic_landing',
            passThrough: ['pageUrl']
        };
        // 安卓需设置音量，防止最大音量播放问题
        if (env.isAndroid && env.isBoxSeries) {
            params.volume = +config.globalVedioVolume;
        }
        this.player = new XPlayer(params);
        this.dispatch('MESSAGE:add-video', {
            player: this.player,
            nid: this.data.get('nid')
        });
        this.player.on('ready', (data) => {
            this.fire('onready');
            this.data.set('videoType', `创建的是${data.mode}播放器`);
        }); 
        this.player.on('canplay', (event)=> {
            this.data.set('playTime', this.player.currentTime);
            this.dispatch('MESSAGE:videoPlay', '1');
        });
        this.player.on('timeupdate', ()=> {
            this.data.set('playTime', this.player.currentTime);
        });
        this.player.on('pause', ()=> {
            this.data.set('vedioStatus', 2);
        });
        this.player.on('play', ()=> {
            this.data.set('vedioStatus', 1);
            this.player.muted = this.data.get('muted');
            env.isAndroid && (this.player.volume = +this.data.get('globalVedioVolume'));
        });
        this.player.on('error', ()=> {
            console.log('error')
        });
        this.player.on('volumechange', data => {
            this.dispatch('MESSAGE:change-mute', !data);
            this.dispatch('MESSAGE:change-volume', +data);
        })
        setTimeout(() => {
            if (this.player) {
                this.player.create(400); // na尝试次数
                this.dispatch('MESSAGE:videoPlay', '1'); // 播放
            }
        }, 600);
    }

    canotAtuoplay () {
        // 兼容weixin自动播放
        document.addEventListener(
            'WeixinJSBridgeReady',
            e => this.player.play(),
            false
        );
        // 选择静音后再播放
        this.player.play();
        // 在用户交互后调用.play()
        const tempFn = () => {
            this.player.play()
            window.removeEventListener('touchstart', tempFn);
        }
        window.addEventListener('touchstart',tempFn);
    }

    mutedChange(event) {
        event.stopPropagation();
        event.preventDefault();
        const muted = !this.data.get('muted');
        this.dispatch('MESSAGE:change-mute', muted);
        this.player && (this.player.muted = muted);
    }

    click(event) {
        this.data.set('clicked', true);
        event.stopPropagation();
        event.preventDefault();
        (env.isBoxSeries || env.isMatrix) && env.isIOS && this.player && this.player.pause();
        this.fire('click');
        // thunder打点
        topicVideoThunderLog('show', {
            rid: this.data.get('nid'),
            resourceType: this.data.get('resourceType')
        });
    }
    isElementVisible = el => {
        if (!el) {
            return;
        }
        const {top, height} = el.getBoundingClientRect();
        const statusBarHeight = this.data.get('statusBarHeight');
        const titleBarHeight = this.data.get('titleBarHeight');
        const navHeight = document.getElementById('navs') ? document.getElementById('navs').getBoundingClientRect().height : 0;
        const result = top < window.innerHeight && top * (-1) < height -
        titleBarHeight - statusBarHeight - navHeight;
        return result;
    }
    isChaoGuoYiBan = el => {
        if (!el) {
            return;
        }
        const {top, height} = el.getBoundingClientRect();
        const statusBarHeight = this.data.get('statusBarHeight');
        const titleBarHeight = this.data.get('titleBarHeight');
        const navHeight = document.getElementById('navs') ? document.getElementById('navs').getBoundingClientRect().height : 0;
        const result = top < window.innerHeight && top * (-1) < (height / 2) -
        titleBarHeight - statusBarHeight - navHeight;
        return result;
    }

    elementVisibleWacth() {
        const videoBox= document.getElementById('video_' + this.data.get('nid'));
        let isCreated = false;
        window.addEventListener('scroll', throttle(()=> {
            window.requestAnimationFrame(() => {
                if (this.isElementVisible(videoBox)) {
                    !this.player && !isCreated && this.initVideo();
                    isCreated = true;
                } else {
                    if (this.player) {
                        this.player.pause();
                        this.player.destroy();
                        this.player = null;
                        this.dispatch('MESSAGE:add-video', {
                            player: '',
                            nid: this.data.get('nid')
                        });
                    }
                    isCreated = false;
                    this.data.set('vedioStatus', 0);
                }
            });
        }, 100))
    }

    pageShowLister() {
        let visibilityChange = '';
        let state = '';
        const pageUrl = this.data.get('pageUrl');
        const vid = this.data.get('vid');
        if (typeof document.visibilityState !== 'undefined') {
            state = 'visibilityState';
            visibilityChange = 'visibilitychange';
        }
        else if (typeof document.webkitVisibilityState !== 'undefined') {
            state = 'webkitVisibilityState';
            visibilityChange = 'webkitvisibilitychange';
        }
        if (!visibilityChange) {
            window.addEventListener(visibilityChange, () => {
                if (document[state] === 'visible') {
                    // 获取端上播放进度设置播放进度, 有延时
                    this.getVideoInfoFN(pageUrl, vid);
                }
            });
        } else {
            window.addEventListener('baiduboxapppageshow', () => {
                this.getVideoInfoFN(pageUrl, vid);
            });
        }
    }

    async getVideoInfoFN(pageUrl, vid) {
        const videoBox= document.getElementById('video_' + this.data.get('nid'));
        if (!this.data.get('clicked') || !this.isChaoGuoYiBan(videoBox)) {
            return;
        }
        this.timeouter = null;
        const currentTime = await getBoxVideoInfo(vid, pageUrl);
        if (currentTime !== 'fail') {
            this.player.currentTime = currentTime;
            this.dispatch('MESSAGE:videoPlay', '1');
            this.data.set('clicked', false);
        } else {
            this.getVideoInfo(pageUrl, vid);
            this.timeouter = setTimeout(() => {
                // this.dispatch('MESSAGE:videoPlay', '1');
            }, 100);
        }
    }
}

export default AucVedioPlayer;
