/**
 * Copyright (C) 2021 ~ present baidu.com
 *
 * @author fangbinbin02 <fangbinbin02@baidu.com>
 */
import Base from '@baidu/mo-base';
import DanmakuItem from '@baidu/mo-danmaku-item';
import { byteLen } from '@baidu/xbox';
import styles from './style.module.less';
export * from './interface';
// @san/component
export default class DanmakuH extends Base {
    static template = /* html */ `
        <div class="{{styles.danmakuH}}">
            <div class="{{styles.danmakuHContent}} {{scrollClass}} {{isGray ? styles.grayContent : ''}}">
                <div
                    s-ref="panel"
                    class="{{styles.panel}}"
                    style="{{{width: panelWidthWithBuff + 'px'}}}"
                >
                    <div
                        s-for="channel in panelData"
                        class="{{styles.channel}}"
                    >
                        <div
                            s-for="item in channel trackBy item.replyId"
                            class="{{styles.danmaItemWrapper}}"
                        >
                            <danmaku-item
                                data="{{item}}"
                                index="{{index}}"
                            />
                        </div>
                    </div>
                </div>
                <div
                    s-ref="panel"
                    class="{{styles.panel}}"
                    style="{{{width: panelWidthWithBuff + 'px'}}}"
                >
                    <div
                        s-for="channel in panelData"
                        class="{{styles.channel}}"
                    >
                        <div
                            s-for="item in channel trackBy item.replyId"
                            class="{{styles.danmaItemWrapper}}"
                        >
                            <danmaku-item
                                data="{{item}}"
                                index="{{index}}"
                            />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    static components = {
        'danmaku-item': DanmakuItem,
    };
    initData() {
        return {
            styles,
            list: [],
            channel: 0,
            panelData: [
                [],
                [],
            ],
            scrollClass: '',
            speed: 75,
        };
    }
    inited() {
        const panelData = this.initPanelData(this.data.get('list'));
        this.data.set('panelData', panelData);
    }
    attached() {
        this.initAnimation();
    }
    detached() {
        this.clearScrollStyle();
    }
    initAnimation() {
        const panelRef = this.ref('panel');
        const panelWidth = panelRef.getBoundingClientRect().width;
        // 点赞由“赞”变为数字时可能宽度不一致 导致循环滚动出现问题 添加buff宽度
        const buffWidth = 20;
        const panelWidthWithBuff = panelWidth + buffWidth;
        this.data.set('panelWidthWithBuff', panelWidthWithBuff);
        const scrollClass = this.setScrollStyle(panelWidthWithBuff, this.data.get('speed'));
        this.data.set('scrollClass', scrollClass);
    }
    /**
     * 设置滚动动效
     * @param {Number} channelWidth 频道宽度
     * @param {Number} speed 滚动速度
     * @return {String} 动效class
     */
    setScrollStyle(channelWidth, speed) {
        const uid = Math.random().toString(36).substring(2);
        const style = document.createElement('style');
        const initialX = 0;
        this.data.set('uid', uid);
        style.id = uid;
        /* bca-disable */
        style.innerHTML = `
        @-webkit-keyframes rowup${uid} {
            0% {
                -webkit-transform: translate3d(${initialX}px, 0, 0);
                transform: translate3d(${initialX}px, 0, 0);
            }
            100% {
                -webkit-transform: translate3d(-${channelWidth + initialX}px, 0, 0);
                transform: translate3d(-${channelWidth + initialX}px, 0, 0);
            }
        }
        @keyframes rowup${uid} {
            0% {
                -webkit-transform: translate3d(${initialX}px, 0, 0);
                transform: translate3d(${initialX}px, 0, 0);
            }
            100% {
                -webkit-transform: translate3d(-${channelWidth + initialX}px, 0, 0);
                transform: translate3d(-${channelWidth + initialX}px, 0, 0);
            }
        }
        .rowup-${uid}{
            -webkit-animation: ${(channelWidth * 1000) / speed}ms rowup${uid} linear infinite normal;
            animation: ${(channelWidth * 1000) / speed}ms rowup${uid} linear infinite normal;
        }`;
        /* bca-enable */
        document.getElementsByTagName('head')[0].appendChild(style);
        return `rowup-${uid}`;
    }
    clearScrollStyle() {
        const styleEl = document.getElementById(this.data.get('uid'));
        /* eslint-disable no-unused-expressions */
        styleEl?.parentElement?.removeChild(styleEl);
        /* eslint-enable no-unused-expressions */
    }
    /**
     * 初始弹幕列表的数据处理方法
     * 拆分轨道，目前仅支持两条轨道
     */
    initPanelData(list) {
        const c1 = [];
        const c2 = [];
        let len1 = 0;
        let len2 = 0;
        list.forEach((item) => {
            // 计算字符排列出的总长度，考虑到不同类型的字符宽度不一样，这里需要做一些替换算法
            // 1、中文以及全角字符的长度记为2
            // 2、表情文本的长度记为2
            // 3、最多取前14个
            const len = byteLen(item.content.substring(0, 14).replace(/\[([^\[\]]){1,7}\]/g, '**'));
            if (len1 < len2) {
                c1.push(item);
                len1 += len;
            }
            else {
                c2.push(item);
                len2 += len;
            }
        });
        return [
            c1,
            c2,
        ];
    }
    /**
     * 插入弹幕
     */
    insertItem(item) {
        item.isSelf = true;
        // 一行、二行轮流切换 插入到第二个 同时动画重新开始
        const channel = this.data.get('channel');
        this.data.set('channel', channel === 0 ? 1 : 0);
        this.data.splice(`panelData[${channel}]`, [
            1,
            0,
            item,
        ]);
        this.data.set('panelWidthWithBuff', 'auto');
        this.nextTick(() => this.initAnimation());
    }
}
