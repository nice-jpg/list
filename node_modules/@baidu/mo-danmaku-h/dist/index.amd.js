define(['exports', '@baidu/mo-base', '@baidu/mo-danmaku-item', '@baidu/xbox', './style.module.less'], (function (exports, Base, DanmakuItem, xbox, styles) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var Base__default = /*#__PURE__*/_interopDefaultLegacy(Base);
    var DanmakuItem__default = /*#__PURE__*/_interopDefaultLegacy(DanmakuItem);
    var styles__default = /*#__PURE__*/_interopDefaultLegacy(styles);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * Copyright (C) 2021 ~ present baidu.com
     *
     * @author fangbinbin02 <fangbinbin02@baidu.com>
     */
    // @san/component
    var DanmakuH = /** @class */ (function (_super) {
        __extends(DanmakuH, _super);
        function DanmakuH() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DanmakuH.prototype.initData = function () {
            return {
                styles: styles__default["default"],
                list: [],
                channel: 0,
                panelData: [
                    [],
                    [],
                ],
                scrollClass: '',
                speed: 75,
            };
        };
        DanmakuH.prototype.inited = function () {
            var panelData = this.initPanelData(this.data.get('list'));
            this.data.set('panelData', panelData);
        };
        DanmakuH.prototype.attached = function () {
            this.initAnimation();
        };
        DanmakuH.prototype.detached = function () {
            this.clearScrollStyle();
        };
        DanmakuH.prototype.initAnimation = function () {
            var panelRef = this.ref('panel');
            var panelWidth = panelRef.getBoundingClientRect().width;
            // 点赞由“赞”变为数字时可能宽度不一致 导致循环滚动出现问题 添加buff宽度
            var buffWidth = 20;
            var panelWidthWithBuff = panelWidth + buffWidth;
            this.data.set('panelWidthWithBuff', panelWidthWithBuff);
            var scrollClass = this.setScrollStyle(panelWidthWithBuff, this.data.get('speed'));
            this.data.set('scrollClass', scrollClass);
        };
        /**
         * 设置滚动动效
         * @param {Number} channelWidth 频道宽度
         * @param {Number} speed 滚动速度
         * @return {String} 动效class
         */
        DanmakuH.prototype.setScrollStyle = function (channelWidth, speed) {
            var uid = Math.random().toString(36).substring(2);
            var style = document.createElement('style');
            var initialX = 0;
            this.data.set('uid', uid);
            style.id = uid;
            /* bca-disable */
            style.innerHTML = "\n        @-webkit-keyframes rowup".concat(uid, " {\n            0% {\n                -webkit-transform: translate3d(").concat(initialX, "px, 0, 0);\n                transform: translate3d(").concat(initialX, "px, 0, 0);\n            }\n            100% {\n                -webkit-transform: translate3d(-").concat(channelWidth + initialX, "px, 0, 0);\n                transform: translate3d(-").concat(channelWidth + initialX, "px, 0, 0);\n            }\n        }\n        @keyframes rowup").concat(uid, " {\n            0% {\n                -webkit-transform: translate3d(").concat(initialX, "px, 0, 0);\n                transform: translate3d(").concat(initialX, "px, 0, 0);\n            }\n            100% {\n                -webkit-transform: translate3d(-").concat(channelWidth + initialX, "px, 0, 0);\n                transform: translate3d(-").concat(channelWidth + initialX, "px, 0, 0);\n            }\n        }\n        .rowup-").concat(uid, "{\n            -webkit-animation: ").concat((channelWidth * 1000) / speed, "ms rowup").concat(uid, " linear infinite normal;\n            animation: ").concat((channelWidth * 1000) / speed, "ms rowup").concat(uid, " linear infinite normal;\n        }");
            /* bca-enable */
            document.getElementsByTagName('head')[0].appendChild(style);
            return "rowup-".concat(uid);
        };
        DanmakuH.prototype.clearScrollStyle = function () {
            var _a;
            var styleEl = document.getElementById(this.data.get('uid'));
            /* eslint-disable no-unused-expressions */
            (_a = styleEl === null || styleEl === void 0 ? void 0 : styleEl.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(styleEl);
            /* eslint-enable no-unused-expressions */
        };
        /**
         * 初始弹幕列表的数据处理方法
         * 拆分轨道，目前仅支持两条轨道
         */
        DanmakuH.prototype.initPanelData = function (list) {
            var c1 = [];
            var c2 = [];
            var len1 = 0;
            var len2 = 0;
            list.forEach(function (item) {
                // 计算字符排列出的总长度，考虑到不同类型的字符宽度不一样，这里需要做一些替换算法
                // 1、中文以及全角字符的长度记为2
                // 2、表情文本的长度记为2
                // 3、最多取前14个
                var len = xbox.byteLen(item.content.substring(0, 14).replace(/\[([^\[\]]){1,7}\]/g, '**'));
                if (len1 < len2) {
                    c1.push(item);
                    len1 += len;
                }
                else {
                    c2.push(item);
                    len2 += len;
                }
            });
            return [
                c1,
                c2,
            ];
        };
        /**
         * 插入弹幕
         */
        DanmakuH.prototype.insertItem = function (item) {
            var _this = this;
            item.isSelf = true;
            // 一行、二行轮流切换 插入到第二个 同时动画重新开始
            var channel = this.data.get('channel');
            this.data.set('channel', channel === 0 ? 1 : 0);
            this.data.splice("panelData[".concat(channel, "]"), [
                1,
                0,
                item,
            ]);
            this.data.set('panelWidthWithBuff', 'auto');
            this.nextTick(function () { return _this.initAnimation(); });
        };
        DanmakuH.template = "\n        <div class=\"{{styles.danmakuH}}\">\n            <div class=\"{{styles.danmakuHContent}} {{scrollClass}} {{isGray ? styles.grayContent : ''}}\">\n                <div\n                    s-ref=\"panel\"\n                    class=\"{{styles.panel}}\"\n                    style=\"{{{width: panelWidthWithBuff + 'px'}}}\"\n                >\n                    <div\n                        s-for=\"channel in panelData\"\n                        class=\"{{styles.channel}}\"\n                    >\n                        <div\n                            s-for=\"item in channel trackBy item.replyId\"\n                            class=\"{{styles.danmaItemWrapper}}\"\n                        >\n                            <danmaku-item\n                                data=\"{{item}}\"\n                                index=\"{{index}}\"\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div\n                    s-ref=\"panel\"\n                    class=\"{{styles.panel}}\"\n                    style=\"{{{width: panelWidthWithBuff + 'px'}}}\"\n                >\n                    <div\n                        s-for=\"channel in panelData\"\n                        class=\"{{styles.channel}}\"\n                    >\n                        <div\n                            s-for=\"item in channel trackBy item.replyId\"\n                            class=\"{{styles.danmaItemWrapper}}\"\n                        >\n                            <danmaku-item\n                                data=\"{{item}}\"\n                                index=\"{{index}}\"\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ";
        DanmakuH.components = {
            'danmaku-item': DanmakuItem__default["default"],
        };
        return DanmakuH;
    }(Base__default["default"]));

    exports["default"] = DanmakuH;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
