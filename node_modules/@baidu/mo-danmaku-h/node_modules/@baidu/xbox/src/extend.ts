/**
 * @file 对象深度merge方法
 * @author yanyiting <yanyiting@baidu.com>
 */

import {isPlainObject, isArray, isUndefined, isBoolean} from './is';
import type {KeyValue} from './is';

function merge(target: KeyValue, source: KeyValue) {
    for (let key in source) {
        if (isPlainObject(source[key]) || isArray(source[key])) {
            if (isPlainObject(source[key]) && !isPlainObject(target[key])) {
                target[key] = {};
            }
            if (isArray(source[key]) && !isArray(target[key])) {
                target[key] = [];
            }
            merge(target[key] as KeyValue, source[key] as KeyValue);
        }
        else if (!isUndefined(source[key])) {
            target[key] = source[key];
        }
    }
}

/**
 * 对象深度 merge，改变目标对象
 *
 * @param target 目标对象
 * @param sources 来源对象
 * @returns 处理后的目标对象
 */
export function extend(target: boolean | KeyValue, ...sources: KeyValue[]) {
    if (isBoolean(target)) {
        target = sources.shift() || {};
    }
    sources.forEach(source => {
        merge(target as KeyValue, source);
    });
    return target as KeyValue;
}
