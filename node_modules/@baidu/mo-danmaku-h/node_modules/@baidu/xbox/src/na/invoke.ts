/**
 * @file Created on Thu Nov 15 2018
 * @author wangyongqing <wangyongqing01@baidu.com>
 */

import {isArray, isEmptyObject, isFunction, isString} from '../is';
import {isBox} from '../is-box';
import {isMatrix} from '../is-matrix';
import {getBoxName} from '../get-box-name';
import {getBoxVersion} from '../get-box-version';
import {getGlobalFunc} from '../get-global-func';
import {globalObject} from '../get-global-object';
import {getSchemaHead} from '../get-schema-head';
import {json2query, mapArray} from '../json2query';
import {getOSName, isIOS, isAndroid} from '../os';
import {stringify} from '../stringify';
import {getType} from '../type';
import {versionCompare} from '../version-compare';

import {NOT_IN_BOX, COMMAND_NOT_EXIST} from './const';
import {iosInvoke} from './ios/invoke';
import {androidInvoke} from './android/invoke';

import type {KeyValue} from '../is';
import type {InvokeCallback} from './ios/invoke';

/**
 * 将 json 转成 params 字符串
 * 经常会出现 params 的 stringify 之后再encode 的情况，这里统一处理了
 * 还处理了函数问题，可以直接传入匿名函数即可自动转为全局函数
 *
 * @param json 参数
 * @param [encode=true] 是否encode
 * @return 处理结果
 */
export function json2params(json: string | KeyValue, encode = true) {
    if (isString(json)) {
        return json as string;
    }

    const res = json as KeyValue;
    const keys = Object.keys(json);

    keys.forEach(key => {
        let val = res[key];
        if (isArray(val)) {
            res[key] = mapArray(val as unknown[]);
        }
        else if (isFunction(val)) {
            res[key] = getGlobalFunc(val);
        }
    });

    return stringify(res, encode);
}

type InvokeArguments = [as: string, is?: string];

function getValidScheme(schema: string) {
    // 都是以 baidubox 开头包括，baiduboxapp,baiduboxmission
    if (!schema.startsWith('baidubox')) {
        return 'baiduboxapp://' + schema;
    }

    return schema;
}

/**
 * 新调起能力，完全 scheme 形式，支持 ios 和安卓相同或者不同，
 * 不同时，先传 android 后 ios（首字母排序）
 * 必须 baiduboxapp 开头
 *
 * @param as 安卓调起 schema
 * @param is ios调起 schema，如果相同省略改参数
 */
export function invoke(...args: InvokeArguments) {
    const as = args[0];

    if (!as || (!isBox() && !isMatrix())) {
        return;
    }

    // 安卓 ios 公用一个相同的 scheme
    const is = args[1] ? args[1] : as;
    if (isIOS() && is) {
        iosInvoke(getValidScheme(is));
    }
    else if (isAndroid()) {
        androidInvoke(getValidScheme(as));
    }
}

/**
 * Promise 调起命令，host 和 params 分开处理，支持函数直接传入
 *
 * @param action schema host 部分
 * @param params 调起参数
 * @param schemaHead schema 头，默认 baiduboxapp
 * @return Promise 对象
 */
export function invokeP(action: string, params: KeyValue = {}, schemaHead = getSchemaHead()): Promise<any> {
    if (!isBox() && !isMatrix()) {
        return Promise.reject(NOT_IN_BOX);
    }

    return new Promise((resolve, reject) => {
        let tmp = params.params || {};
        // 处理 params 带有 callback 的情况
        let callback = params.callback as string | InvokeCallback;
        // 删除 callback，防止 json2query 被处理到 query 中
        delete params.callback;
        // 将 callback 情况进行处理
        const defaultCallback = (data: any) => {
            if (callback) {
                if (typeof callback === 'function') {
                    callback(data);
                }
                else if (typeof callback === 'string' && typeof globalObject[callback] === 'function') {
                    globalObject[callback](data);
                }
            }
        };

        if (isEmptyObject(tmp as KeyValue) || tmp === '%7B%7D' || tmp === '{}') {
            // 删除空的params对象
            delete params.params;
        }
        else if (getType(tmp) === 'object') {
            params.params = json2params(tmp as KeyValue);
        }

        // 重新赋值 callback
        params.callback = function (result: string | KeyValue) {
            let data = result;
            if (isString(result)) {
                try {
                    data = JSON.parse(result as string);
                }
                catch (e) {
                    console.info(e);
                }
            }

            const {status, data: successData} = data as KeyValue;
            if (+(status as string | number) === 0) {
                // 成功回调
                resolve(successData);
                defaultCallback(successData);
                return;
            }

            // 失败回调，失败也回调 callback，给出错误码的情况
            reject(data);
            defaultCallback(data);
        };
        const queryObject = json2query(params);
        const schema = `${schemaHead}://${action}?${queryObject}`;
        invoke(schema);
    });
}

interface VersionRange {
    [target: string]: {
        v: number;
        versionRange: string | [string, string];
    };
}

/**
 * 新版本的注册，只用于安卓和 ios 相同的 scheme 类，返回 promise
 * @function xRegister
 * @param {Array|String} range - 版本范围
 * @param action action 部分，去掉 vxx 部分，例如 v26/swan 实际传入 swan
 * @param params 参数部分，例如 params={url}，传入{url}即可
 * @param schemaHead scheme协议头
 * @return Promise 对象
 * @example
 *  xRegister(
        {
            lite: {
                v: 34,
                versionRange: '3.9'
            },
            main: {
                v: 41,
                versionRange: '11.3.5'
            }
        },
        'audio/playSound',
        {url}
    );
 */
export function xRegister(
    range: VersionRange = {},
    action: string,
    params: KeyValue = {},
    schemaHead = getSchemaHead()
) {
    if (!isBox() && !isMatrix()) {
        return Promise.reject(NOT_IN_BOX);
    }

    const osName = getOSName();
    const boxName = getBoxName() || 'unknown';
    // 优先读取 androidmission 这个，然后是 mission(ios+android全平台)，最后主板 android/ios
    const opt = (range[`${osName}${boxName}`] || range[boxName] || range[osName] || {}) as KeyValue;

    // 必须要有 v
    if (opt.v) {
        const version = getBoxVersion(boxName);
        let versionRange = opt.versionRange;
        if (versionRange && isString(versionRange)) {
            // 支持 '3.9-7.0' 写法
            versionRange = (versionRange as string).split('-');
        }
        const [startV, endV] = versionRange as [string, string];
        if (versionCompare(version, startV) >= 0 && (!endV || (endV && versionCompare(version, endV) <= 0))) {
            params = opt.params ? (opt.params as KeyValue) : params;
            let others = {};
            if (params.params) {
                // 含有 params 的 params = {params: {}, upgrade:1}
                let tmp = Object.assign({}, params.params);
                params.params = null; // 删不掉？
                delete params.params;
                others = Object.assign({}, params);
                params = tmp;
            }
            let args = {};
            if (others && getType(others) === 'object') {
                args = {params: json2params(params), ...others};
            }
            else {
                args = {params: json2params(params)};
            }
            // 兼容 action 不一样的情况，直接写在配置里面
            action = `v${opt.v}/${opt.action ? opt.action : action}`;
            return invokeP(action, args, schemaHead);
        }
    }

    return Promise.reject(COMMAND_NOT_EXIST);
}
