"use strict";
/**
 * @file 判断方法
 * @module is
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isJSON = exports.isEmptyObject = exports.isBlank = exports.isEmpty = exports.isBoolean = exports.isNumber = exports.isArray = exports.isString = exports.isFunction = exports.isPlainObject = exports.isWindow = exports.isUndefined = exports.isNil = void 0;
var type_1 = require("./type");
/**
 * 判断是否为 null 或者 undefined
 *
 * @param obj 判断的对象
 * @return 返回判断结果
 * @example
 * isNil(null) // true
 * isNil(undefined) // true
 * isNil('') // false
 */
function isNil(obj) {
    return obj === undefined || obj === null;
}
exports.isNil = isNil;
/**
 * 判断是否为 undefined
 *
 * @param obj 判断的对象
 * @return 返回判断结果
 * @example
 * isUndefined(null) // false
 * isUndefined(undefined) // true
 * isUndefined('') // false
 */
function isUndefined(obj) {
    return obj === undefined;
}
exports.isUndefined = isUndefined;
/**
 * 判断是否是 window 对象
 *
 * @param obj 判断的对象
 * @return 返回判断结果
 * @example
 * isWindow(window) // true
 * isWindow(self) // true
 * isWindow('') // false
 */
function isWindow(obj) {
    return !isNil(obj) && obj === obj.window;
}
exports.isWindow = isWindow;
/**
 * 判断是否为普通对象
 *
 * @param obj 需要判断的对象
 * @return 返回判断结果
 * @example
 * isPlainObject({}) // true
 * isPlainObject(window) // false
 */
function isPlainObject(obj) {
    if ((0, type_1.isType)(obj, 'Object')) {
        return Object.getPrototypeOf(obj) === null || Object === obj.constructor;
    }
    return false;
}
exports.isPlainObject = isPlainObject;
/**
 * 是否是 function 类型
 *
 * @param obj 要判断的对象
 * @return 返回判断结果
 * @example
 * isFunction(new Function()) // true
 * isFunction('') // false
 */
function isFunction(obj) {
    return (0, type_1.isType)(obj, 'Function');
}
exports.isFunction = isFunction;
/**
 * 是否是 string 类型
 *
 * @param obj 要判断的对象
 * @return 返回判断结果
 * @example
 * isString([]) // false
 * isString('array') // true
 */
function isString(obj) {
    return (0, type_1.isType)(obj, 'String');
}
exports.isString = isString;
/**
 * 是否是 array 类型
 *
 * @param obj 要判断的对象
 * @return 返回判断结果
 * @example
 * isArray([]) // true
 * isArray('array') // false
 */
function isArray(obj) {
    return (0, type_1.isType)(obj, 'Array');
}
exports.isArray = isArray;
/**
 * 是否是一个 Number 类型
 *
 * @param obj 要判断的对象
 * @return 返回判断结果
 * @example
 * isNumber(1) // true
 * isNumber('1') // false
 */
function isNumber(obj) {
    return (0, type_1.isType)(obj, 'Number');
}
exports.isNumber = isNumber;
/**
 * 判断是否为布尔类型
 *
 * @param bool 要判断的对象
 * @return 返回判断结果
 * @example
 * isBoolean(false) // true
 * isBoolean(/a/) // false
 */
function isBoolean(bool) {
    return bool === true || bool === false;
}
exports.isBoolean = isBoolean;
/**
 * 判断参数是否是空字符串
 *
 * @param subject 被判断的字符串
 * @return 返回判断结果
 * @example
 * isEmpty(''); // => true
 * isEmpty('  '); // => false
 * isEmpty('World'); // => false
 */
function isEmpty(subject) {
    return String(subject).length === 0;
}
exports.isEmpty = isEmpty;
/**
 * 判断参数是否是空格或者由空格组成
 *
 * @param subject 被判断的字符串
 * @return 判断结果
 * @example
 * isBlank('');// => true
 * isBlank('  ');// => true
 * isBlank('World');// => false
 */
function isBlank(subject) {
    return String(subject).trim().length === 0;
}
exports.isBlank = isBlank;
/**
 * 判断一个对象是不是一个空对象
 *
 * @param obj 待判断的对象
 * @return 判断结果
 * @example
 * isEmptyObject({}) // true
 */
function isEmptyObject(obj) {
    return Object.keys(obj).length === 0 && obj.constructor === Object;
}
exports.isEmptyObject = isEmptyObject;
var regJSON = /^\{[\s\S]*\}$|^\[[\s\S]*\]$/;
/**
 * 判断一个对象是不是 JSONString
 *
 * @param obj 待判断的对象
 * @return 判断结果
 * @example
 * isJSON({}) // true
 */
function isJSON(value) {
    if (typeof value !== 'string') {
        return false;
    }
    if (!regJSON.test(value)) {
        return false;
    }
    try {
        JSON.parse(value);
    }
    catch (err) {
        return false;
    }
    return true;
}
exports.isJSON = isJSON;
