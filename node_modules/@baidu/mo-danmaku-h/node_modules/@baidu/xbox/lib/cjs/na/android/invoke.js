"use strict";
/**
 * @file android invoke
 * @module android
 * @author wangyongqing <wangyongqing01@baidu.com>
 *
 * 移出xbox native相关库之后，还可能用到底层调用方法来打补丁，所以这里迁移过来
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.androidSyncInvoke = exports.command = exports.prompt = exports.androidInvoke = void 0;
var is_1 = require("../../is");
var get_global_object_1 = require("../../get-global-object");
var stringify_1 = require("../../stringify");
/**
 * androidInvoke传入schema打开框架
 *
 * @param schema 协议
 * @return 发起schema请求
 */
function androidInvoke(schema) {
    if (!(0, is_1.isWindow)(get_global_object_1.globalObject)) {
        return;
    }
    var androidJsBridge = get_global_object_1.globalObject === null || get_global_object_1.globalObject === void 0 ? void 0 : get_global_object_1.globalObject.Bdbox_android_jsbridge;
    if (androidJsBridge) {
        return androidJsBridge === null || androidJsBridge === void 0 ? void 0 : androidJsBridge.dispatch(schema);
    }
    return get_global_object_1.globalObject === null || get_global_object_1.globalObject === void 0 ? void 0 : get_global_object_1.globalObject.prompt('Bdbox_android_jsbridge', 'dispatch', schema);
}
exports.androidInvoke = androidInvoke;
/**
 * 老版本的调起，prompt实现
 * @param obj 类似 Bdbox_android_utils
 * @param func 类似 command
 * @param args 参数数组
 */
function prompt(obj, func, args) {
    if (!(0, is_1.isWindow)(get_global_object_1.globalObject)) {
        return;
    }
    if ({}.toString.call(args).slice(-6, -1) !== 'Array') {
        args = [args];
    }
    var data = (0, stringify_1.stringify)({
        obj: obj,
        func: func,
        args: args,
    });
    return get_global_object_1.globalObject === null || get_global_object_1.globalObject === void 0 ? void 0 : get_global_object_1.globalObject.prompt("BdboxApp:" + data);
}
exports.prompt = prompt;
/**
 * 安卓command调起，使用 Bdbox_android_utils.command
 *
 * @param intent 包含发送给客户端的参数
 * @param [mode=0] 0代表调起框界面；1代表调起第三方界面
 * @param [commandClass=''] 调起客户端具体activity，缺省
 * @param [minV=''] 调起的最小版本，可缺省
 * @return 返回对象格式的json
 */
function command(intent, mode, commandClass, minVersion) {
    if (mode === void 0) { mode = '0'; }
    if (commandClass === void 0) { commandClass = ''; }
    if (minVersion === void 0) { minVersion = ''; }
    var commandParams = {
        mode: mode,
        intent: intent,
    };
    commandClass
        && (0, is_1.isString)(commandClass)
        && Object.assign(commandParams, {
            class: commandClass,
        });
    minVersion
        && (0, is_1.isString)(minVersion)
        && Object.assign(commandParams, {
            min_v: minVersion,
        });
    return prompt('Bdbox_android_utils', 'command', (0, stringify_1.stringify)(commandParams));
}
exports.command = command;
/**
 * 同步invoke， Bdbox_aiapps_jsbridge
 *
 * @param schema 调起协议
 */
function androidSyncInvoke(schema) {
    if (!(0, is_1.isWindow)(get_global_object_1.globalObject)) {
        return null;
    }
    var androidJsBridge = get_global_object_1.globalObject === null || get_global_object_1.globalObject === void 0 ? void 0 : get_global_object_1.globalObject.Bdbox_aiapps_jsbridge;
    if (androidJsBridge) {
        return androidJsBridge === null || androidJsBridge === void 0 ? void 0 : androidJsBridge.dispatch(schema);
    }
    return null;
}
exports.androidSyncInvoke = androidSyncInvoke;
