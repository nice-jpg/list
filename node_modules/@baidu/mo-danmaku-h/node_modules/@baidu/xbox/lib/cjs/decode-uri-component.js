"use strict";
/**
 * @file decode uri 处理特殊字符
 * @author wangyongqing <wangyongqing01@baidu.com>
 * from https://github.com/SamVerschueren/decode-uri-component/blob/master/index.js
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeUriComponent = void 0;
var type_error_1 = require("./type-error");
var oDecodeURIComponent = decodeURIComponent;
var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp(token, 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');
function decodeComponents(components, split) {
    if (split === void 0) { split = 1; }
    try {
        // Try to decode the entire string first
        return [oDecodeURIComponent(components.join(''))];
    }
    catch (err) {
        // Do nothing
    }
    if (components.length === 1) {
        return components;
    }
    // Split the array in 2 parts
    var left = components.slice(0, split);
    var right = components.slice(split);
    return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}
function decode(input) {
    try {
        return oDecodeURIComponent(input);
    }
    catch (err) {
        var tokens = input.match(singleMatcher) || [];
        // 这个循环有点迷
        for (var i = 1; i < tokens.length; i++) {
            input = decodeComponents(tokens, i).join('');
            tokens = input.match(singleMatcher) || [];
        }
        return input;
    }
}
function customDecodeURIComponent(input) {
    // Keep track of all the replacements and prefill the map with the `BOM`
    var replaceMap = {
        '%FE%FF': '\uFFFD\uFFFD',
        '%FF%FE': '\uFFFD\uFFFD',
    };
    var match = multiMatcher.exec(input);
    while (match) {
        try {
            // Decode as big chunks as possible
            replaceMap[match[0]] = oDecodeURIComponent(match[0]);
        }
        catch (err) {
            var result = decode(match[0]);
            if (result !== match[0]) {
                replaceMap[match[0]] = result;
            }
        }
        match = multiMatcher.exec(input);
    }
    // Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
    replaceMap['%C2'] = '\uFFFD';
    var entries = Object.keys(replaceMap);
    // Replace all decoded components
    entries.forEach(function (key) {
        input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
    });
    return input;
}
/**
 * 对编码后的 URI 进行解码
 * @param encodedURI
 * @return 解码之后的结果
 */
function decodeUriComponent(encodedURI) {
    if (typeof encodedURI !== 'string') {
        throw (0, type_error_1.typeError)('encodedURI', 'string', encodedURI);
    }
    try {
        encodedURI = encodedURI.replace(/\+/g, ' ');
        // Try the built in decoder first
        return oDecodeURIComponent(encodedURI);
    }
    catch (err) {
        // Fallback to a more advanced decoder
        return customDecodeURIComponent(encodedURI);
    }
}
exports.decodeUriComponent = decodeUriComponent;
