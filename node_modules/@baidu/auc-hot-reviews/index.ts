/**
 * @file index.ts
 * @author gaohong01
 */

import AucComponent from "@baidu/auc-base/AucComponent";
import styles from './style.module.less';
import {AucHotReviewsData} from './types';
import {jump} from '@baidu/auc-base/jump';
import ubc from '@baidu/ubc-report-sdk';
import { fuzzyReplace } from '@baidu/xbox-emoticon';
import {openImage} from '@baidu/auc-base/openImage';

const temp = `
<div
    s-ref="commentList"
    class="{{styles.commentUl}}"
>
    <div s-for="item,index in list">
        <div 
            class="{{styles.commentLi}}"
            on-click="handleClick(index, $event)"
        >
            <div class="{{styles.avatar}}" style="background-image: url({{item.avatar ? item.avatar : 'https://b.bdstatic.com/searchbox/image/gcp/20221118/1419480321.jpeg'}})"></div>
            <div class="{{styles.content}}">
                <!--bca-disable-->
                <!--评论表情替换-->
                {{analysisContent(item) | raw}}
                <!--bca-disable-->
            </div>
        </div>
    </div>
</div>`;

const noClickTemplate = `
<div class="{{styles.titleWrapper}}">
    <div class="{{styles.left}}">
        <div class="{{styles.icon}}"></div>
        <div class="{{styles.title}}">神评热议</div>
    </div>
    <div class="{{styles.right}}">说出你的观点态度</div>
</div>
<div class="{{styles.commentList}}">
    <div class="{{styles.commentListInner}} {{scrollClass}}">
        ${temp + temp}
    </div>
</div>
`;

const clickedTemplate = `
<div class="{{styles.left}}">
    <div class="{{styles.icon}}"></div>
    <div class="{{styles.title}}">神评热议</div>
</div>
<div class="{{styles.commentList}}">
    <div class="{{styles.commentListInner}} {{scrollClass}}">
        ${temp + temp}
    </div>
</div>
`;

export class AucHotReviews extends AucComponent {
    static template:string = /* html */ `
    <div class="{{styles.aucHotReviewsWrapper}}">
        <div s-if="!clicked" class="{{styles.noClick}}">
            ${noClickTemplate}
        </div>
        <div s-if="clicked" class="{{styles.noClick}} {{styles.clicked}}">
            ${clickedTemplate}
        </div>
        <div class="{{styles.boxShadow}} {{clicked ? styles.boxShadowClicked : ''}}"></div>
    </div>
    `;
    static components:object = {
    };

    initData(): AucHotReviewsData {
        return {
            styles,
            scrollClass: '',
            speed: 15,
            sourceType: 'zhuanti',
            first: true,
        };
    }

    analysisContent(comment) {
        let text = comment.content;

        // 互动文本中会添加([图片]暂不支持查看图片)，标识有图片资源，需删除
        text = text.replaceAll('([图片]暂不支持查看图片)', '');

        // 解析文字消息中的表情内容
        text = fuzzyReplace(text, {
            styletext: ' ',
            classname: styles.emotion
        });

        // 如果有图片,替换成文字链
        if (comment.image_list) {
            text += `<span class="${styles.contentImage} imageLint"><span class="${styles.contentIcon}"></span>查看图片</span>`
        }
        return text;
    }

    attached(): void {
        this.registerScrollInView().then(_ => {
            if (this.data.get('first')) {
                this.data.get('list').length && this.initAnimation();
                this.log();
                this.data.set('first', false);
            }
        });
        
    }

    detached() {
        this.clearScrollStyle();
    }

    initAnimation() {
        const commentListRef = this.ref('commentList');
        const height = commentListRef.getBoundingClientRect().height;
        const scrollClass = this.setScrollStyle(height, this.data.get('speed'));
        this.data.set('scrollClass', scrollClass);
    }

    clearScrollStyle() {
        const styleEl = document.getElementById(this.data.get('uid'));
        /* eslint-disable no-unused-expressions */
        styleEl?.parentElement?.removeChild(styleEl);
        /* eslint-enable no-unused-expressions */
    }

    /**
     * 设置滚动动效
     * @param {Number} channelWidth 频道宽度
     * @param {Number} speed 滚动速度
     * @return {String} 动效class
     */
    setScrollStyle(channelHeight, speed) {
        const commentList = this.data.get('list');
        const uid = Math.random().toString(36).substring(2);
        const style = document.createElement('style');
        const initialX = 0;
        this.data.set('uid', uid);
        style.id = uid;
        let animationString = ``;
        let animationspacing = +(100 / commentList.length).toFixed(2);
        const spacing =  +(channelHeight / commentList.length).toFixed(2)
        const pre = 1.5;
        commentList.forEach((item, index) => {
            if (index === 0) {
                animationString += `0% {
                    -webkit-transform: translate3d(0, ${initialX}px, 0);
                    transform: translate3d(0, ${initialX}px, 0);
                }`
            }
            animationString += `
                ${animationspacing * index - pre}% {
                    -webkit-transform: translate3d(0, -${initialX + spacing * (index - 1)}px, 0);
                    transform: translate3d(0, -${initialX + spacing * (index - 1)}px, 0);
                }
                ${animationspacing * index}% {
                    -webkit-transform: translate3d(0, -${initialX + spacing * index}px, 0);
                    transform: translate3d(0, -${initialX + spacing * index}px, 0);
                }
            `;
        });
        animationString += `
            ${100- pre}% {
                -webkit-transform: translate3d(0, -${initialX + spacing * (commentList.length - 1)}px, 0);
                transform: translate3d(0, -${initialX + spacing * (commentList.length - 1)}px, 0);
            }
            ${100}% {
                -webkit-transform: translate3d(0, -${initialX + spacing * commentList.length}px, 0);
                transform: translate3d(0, -${initialX + spacing * commentList.length}px, 0);
            }
        `;
        /* bca-disable */
        
        style.innerHTML = `
        @-webkit-keyframes rowup${uid} {
            ${animationString}
        }
        @keyframes rowup${uid} {
            ${animationString}
        }
        .rowup-${uid}{
            -webkit-animation: ${(channelHeight * 1000) / speed}ms rowup${uid} linear infinite normal;
            animation: ${(channelHeight * 1000) / speed}ms rowup${uid} linear infinite normal;
        }`;
        /* bca-enable */
        document.getElementsByTagName('head')[0].appendChild(style);
        return `rowup-${uid}`;
    }

    handleClick(index, e) {
        e.preventDefault();
        e.stopPropagation();
        const comment = this.data.get('list')[index];

        // // 文字链处理
        // if (e.target.classList.contains('imageLint')) {
        //     openImage({
        //         nid: this.data.get('id'),
        //         imageList: [comment.image_list.large.url],
        //         index: 0
        //     });
        //     return;
        // }
        // 打开端评论面板
        this.openBoxCommentDialog(comment);
    }

    openBoxCommentDialog(comment) {
        const {topicTitle, id, sourceType} = this.data.get();
        jump({
            cmd: `baiduboxapp://comment/halfList?params=${encodeURIComponent(JSON.stringify({
                'anchor_comment_id': comment.reply_id,
                'title': topicTitle,
                'key': id,
                'source_type': sourceType,
                'source': 'topicPage_hotcomment_highquality',
                'view_template': '3',
                'add_mask': true,
                'nid': id,
            }))}`
        });
        this.log(comment, 'click');
        this.storeDispatch('hotReview:clickStatusChange', true);
    }
    
    log (comment = {}, type = 'show') {
        const isShow = type === 'show';
        const ubcId = isShow ? 499 : 502;
        let option = {
            type,
            value: '',
            ext: {
                NID: this.data.get('id'),
                topicID: this.data.get('id'),
                'comment_num': this.data.get('list').length
            }
        };
        !isShow && (option.type = 'comment_area_clk');
        !isShow && (option.value = '1st_comment');
        !isShow && (option.ext.NID = comment.resource ? comment.resource.nid : '');
        !isShow && (option.ext['comment_id'] = comment.reply_id);
        !isShow && (delete option.ext['comment_num']);
        // 展现&&第一次点击的时候，打点需要inted下
        (!this.data.get('clicked') || isShow) && ubc(`${type}.init`, ubcId, {
            version: '2.0',
            from: 'comment',
            source: 'resource_hotcomment_highquality',
            page: 'hot_comment'
        });
        ubc(`${type}.event`, option);
    }
}

export default AucHotReviews;
