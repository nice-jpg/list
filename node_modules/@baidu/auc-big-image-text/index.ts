/**
 * @file index.ts
 * @author leizhihao
 */

import AucComponent from '@baidu/auc-base/AucComponent';
import styles from './style.module.less';
import {AucBigImageTextData} from './types';
import {WujiTitle, WujiWidget, WujiImage, WujiIcon} from '@baidu/wuji-san';
import '@baidu/wuji-icons/svg/live-newreview-f-30.svg';
import '@baidu/wuji-icons/svg/live-newtrailer-f-30.svg';
import {componentLog} from '@baidu/auc-log';
import AucVedioPlayer from '@baidu/auc-vedio-player';
import {topicVideoThunderLog} from '@baidu/auc-base/topicVideoThunderLog';

export class AucBigImageText extends AucComponent {
    static template:string = /* html */ `
    <div 
        class="{{styles.bigImageWrapper}} {{isActive ? styles.commonActive : ''}} {{isBigEvent ? styles.bigEvent : ''}}" 
        on-click="handleClick"
        on-touchstart="setActive($event)"
        on-touchmove="deleteActive($event)"
        on-touchend="deleteActive($event)"
    >
        <div class="{{styles.bigImage}}">
            <div class="{{styles.title}}">
                <wuji-title
                    text="{{title}}"
                    spacing="{{false}}"
                    label-props="{{labelProp}}"
                    visited="{{visited}}"
                ></wuji-title>
            </div>
            <div class="{{styles.imageWrapper}}">
                <template s-if="type === 'video' && !videoData.isMiniVideo && videoSrc">
                    <auc-vedio-player
                        vid="{{videoData.vid}}"
                        src="{{videoSrc}}"
                        pageUrl="{{videoData.pageUrl}}"
                        title="{{title}}"
                        poster="{{videoData.poster}}"
                        duration="{{videoData.vedioDuration}}"
                        nid="{{videoData.nid}}"
                        autoplay="{{globalVedioAutoplay}}"
                        muted="{{globalVedioMute}}"
                        globalVedioVolume="{{globalVedioVolume}}"
                        class="{{styles.vedioPlayer}}"
                        hideTitle="true"
                        statusBarHeight="{{statusBarHeight}}"
                        titleBarHeight="{{titleBarHeight}}"
                        isOrdinary="{{true}}"
                        on-click="handleClick"
                    >
                    </auc-vedio-player>
                </template>
                <template s-else>
                    <div class="{{styles.liveIconWrapper}} {{styles.playBack}}" s-if="isPlayBack"><wuji-icon class="{{styles.liveIcon}}" type="live-newreview-f-30" size="30"></wuji-icon>直播回放</div>
                    <div class="{{styles.liveIconWrapper}} {{styles.preload}}" s-if="isPreload"><wuji-icon class="{{styles.liveIcon}}" type="live-newtrailer-f-30" size="30"></wuji-icon>直播预告</div>
                    <div class="{{styles.liveIconWrapper}} {{styles.living}}" s-if="isLive"><div class="{{styles.dotWrapper}}"><i class="{{styles.dot}} {{styles.dot1}}"></i><i class="{{styles.dot}} {{styles.dot2}}"></i><i class="{{styles.dot}} {{styles.dot3}}"></i></div>直播中</div>
                    <wuji-image
                        s-bind="{{imageProps}}"
                    ></wuji-image>
                </template>
            </div>
            <div class="{{styles.widget}}">
                <wuji-widget
                    has-margin-top="{{false}}"
                    has-margin-bottom="{{false}}"
                    items="{{widgetItems}}"
                ></wuji-widget>
            </div>
        </div>
    </div>`;
    static components:object = {
        'wuji-title': WujiTitle,
        'wuji-widget': WujiWidget,
        'wuji-image': WujiImage,
        'wuji-icon': WujiIcon,
        'auc-vedio-player': AucVedioPlayer,
    };

    initData(): AucBigImageTextData {
        return {
            styles,
            title: '',
            labelProp: {},
            widgetItems: [],
            imageProps: {},
            isPlayBack: false,
            isPreload: false,
            isLive: false,
            visited: false,
            jumpProps: {},
            logBaseType: 'big_image_',
            logExtraParams: {
            },
            isActive: false,
            videoSrc: ''
        };
    }
    inited() {
        const data = this.data;
        if (data.get('type') === 'video') {
            const networtType = this.data.get('networtType');
            const clarityUrl = this.data.get('videoData.clarityUrl');
            const srcType = networtType === 'wifi' ? 'sc' : 'hd';// wifi-超清-sc 4g-高清-hd
            let src = clarityUrl[srcType] ? clarityUrl[srcType].url : (clarityUrl.sd ? clarityUrl.sd.url : '');// 没有兜底取标清
            this.data.set('videoSrc', src);
        }
    }
    attached(): void {
        // if (this.data.get('type') === 'video' && (env.isMatrix || env.isBoxSeries)) {
        //     netWorkToast(this.data.get('networtType'));
        // }
        this.registerScrollInView().then(() => {
            componentLog(this.data.get('logBaseType'), 'show', this.data.get('logExtraParams'));
            this.data.get('type') === 'video' && this.videoThunderLog('show');
        });
    }

    handleClick(): void {
        this.fire('jump', this.data.get('jumpProps'));
        this.data.set('visited', true);
        this.data.get('type') === 'video' && this.videoThunderLog('click');
        componentLog(this.data.get('logBaseType'), 'click', this.data.get('logExtraParams'));
    }

    mutedChange(val) {
        this.dispatch('UI:change-mute', val);
    }

    setActive(event) {
        if (/voice/.test(event.target.className)) {
            return;
        }
        this.data.set('isActive', true);
    }
    deleteActive(event) {
        this.data.set('isActive', false);
    }
    videoThunderLog(type) {
        // 视频切换短小融合需单独打点
        const videoThunderLog = this.data.get('videoThunderLog');
        if (videoThunderLog.resourceType) {
            topicVideoThunderLog(type === 'show' ? 'show' : 'click', {
                rid: this.data.get('rid'),
                ...videoThunderLog,
                topic_id: this.data.get('topicId')
            });
        }
    }
}


export default AucBigImageText;
