{
  "name": "@baidu/hd-actions",
  "version": "1.0.0",
  "description": "组件派发事件及参数类型定义 (Contributed by Feed FE)",
  "main": "dist/index.cjs.js",
  "publishConfig": {
    "access": "public",
    "main": "dist/index.cjs.js",
    "module": "dist/index.js",
    "types": "dist/index.d.ts",
    "tag": "alpha"
  },
  "files": [
    "*"
  ],
  "license": "UNLICENSED",
  "scripts": {
    "build": "tsc -p tsconfig.build.json"
  },
  "module": "dist/index.js",
  "types": "dist/index.d.ts",
  "readme": "# 组件派发事件规范\n\n## 事件的定义\n\n新增 `@baidu/mo-actions`，用于将组件派发事件名称统一声明为常量定义在这个包中\\\n同时定义清楚所传参数的类型定义。\n\n每个 action 需要注释写明含义，变量名称和取值都要保证唯一不重复，命名和取值风格尽量一致\\\n每个 payload 的命名应在 action 变量名称后添加 `_PAYLOAD`，方便开发者使用。\n\n推荐取值：`动:宾:副`\n\n示例用法：\n\n```ts\n// 1. 在 mo-actions/index.ts 文件中定义 action 和 payload\n\n/**\n * action: 发布器发表按钮点击事件\n */\nexport const CLICK_PUBLISHER_PUBLISH = 'click:publisher:publish';\n\n/**\n * payload: 发布器发表按钮点击事件参数\n */\nexport interface CLICK_PUBLISHER_PUBLISH_PAYLOAD {\n    /**\n     * 发布器文本框输入内容\n     */\n    content: string;\n}\n\n// 2. 在某个组件中使用 some-component.ts\nimport {CLICK_PUBLISHER_PUBLISH} from '@baidu/hd-actions';\nimport type {CLICK_PUBLISHER_PUBLISH_PAYLOAD} from '@baidu/hd-actions';\n\n...\n    someMethod() {\n        this.eventDispatch<CLICK_PUBLISHER_PUBLISH_PAYLOAD>(CLICK_PUBLISHER_PUBLISH, 'payload');\n    }\n...\n\n// 在某个 action 定义中使用 some-action.ts\nimport {CLICK_PUBLISHER_PUBLISH} from '@baidu/hd-actions';\nimport type {CLICK_PUBLISHER_PUBLISH_PAYLOAD} from '@baidu/hd-actions';\n\nconst actionList = {\n    [CLICK_PUBLISHER_PUBLISH](payload: CLICK_PUBLISHER_PUBLISH_PAYLOAD, {dispatch, getState}) {\n        // your action code\n    }\n};\n\n// then store add this action\n```\n\n> 说明：每个组件都可能依赖 `@baidu/hd-actions` 这个包，但是我们不必为每个组件都声明依赖，作为隐式的依赖即可，只需要在框架代码中安装所需版本即可，\n> 这样可以实现依赖版本一致的目的，并且不会因为频繁的更新或升级这个包带来麻烦。\n"
}