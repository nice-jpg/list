"use strict";
/**
 * @file 获取 global 对象
 *
 * @author wangyongqing <wangyongqing01@baidu.com>
 * from https://github.com/panzerdp/voca/blob/master/src/helper/object/get_global.js
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGlobalObject = exports.globalObject = void 0;
exports.globalObject = null;
/**
 * 获取 global 对象
 *
 * @return global 对象
 */
function getGlobalObject() {
    if (exports.globalObject !== null) {
        return exports.globalObject;
    }
    // It's hard to mock the global variables. This code surely works fine. I hope :)
    if (typeof global === 'object' && global.Object === Object) {
        // NodeJS global object
        exports.globalObject = global;
    }
    else if (typeof self === 'object' && self.Object === Object) {
        // self property from Window object
        exports.globalObject = self;
    }
    else {
        // Other cases. Function constructor always has the context as global object
        exports.globalObject = new Function('return this')();
    }
    return exports.globalObject;
}
exports.getGlobalObject = getGlobalObject;
getGlobalObject();
