/**
 * @file 指令类
 * @author wangbing11(wangbing11@baidu.com)
 * // command命令的调用方法：ubc(command, [...fields], [fieldsObject])
 */
// command 标识符的正则解析 [trackerName.][pluginName:]methodName
const commandRegex = /^(?:(\w+)\.)?(?:(\w+)\.)?(\w+)$/;
/**
 * 初始化一个命令
 *
 * @class Command
 * @param {Array} args 用户输入的或者内部生成的不正规的指令参数
 *
 */

/* eslint-disable */

function Command(args) {
  /* eslint-enable */
  let r = commandRegex.exec(args[0]);

  if (r != null && r.length === 4) {
    // Tracker名字默认为t0
    this.trackerName = r[1] || 't0'; // pluginName

    this.pluginName = r[2] || ''; // methodName

    this.methodName = r[3];
    this.fields = [].slice.call(args, 1);
    this.isCreateCommand = 'init' === this.methodName;
    this.isConfigCommand = 'config' === this.methodName;
    this.isEventCommand = 'event' === this.methodName || 'pv' === this.methodName;
    this.isTimingCommand = 'timing' === this.methodName; // 必须要有一个方法名

    if (!this.methodName) {
      throw 'UBC SDK methodName can not be empty!';
    } // 如果要创建一个新的跟踪器，必须要要有一个ID，ID为数字或者数字组成的字符


    if (this.isCreateCommand) {
      if (!this.fields[0]) {
        throw 'UBC SDK serverId can not be empty!';
      }
    }
  } else {
    throw 'UBC SDK error inputs';
  }
}

/**
 * @file 工具方法
 * @author wangbing11(wangbing11@baidu.com)
 */
const ua = window.navigator.userAgent;
const IS_LITE_BOX = / (lite|info) baiduboxapp\//i.test(ua);
const IS_KANDUODUO_BOX = / mission baiduboxapp\//i.test(ua); // IS_BOX 标识是否手百基础版内，不能是Lite、不是看多多

const IS_BOX = / baiduboxapp\//i.test(ua) && !IS_LITE_BOX && !IS_KANDUODUO_BOX; // 判断当前页面的网络协议是否为 https

const isHTTPS = function () {
  return 'https:' === document.location.protocol;
}; // 这个函数用于将其他函数的输入转换成一个对象，这个规则适用于UBC所有对外的接口API
// transformInput(['a', 'b', 'c'], [1, 2, 3]);
// ==> {a: 1, b: 2, c: 3}
// transformInput(['a', 'b', 'c'], [1, 2, {c: 3, d: 4}]);
// ==> {a: 1, b: 2, c: { c: 3, d: 4}}

const transformInput = function (paramNames, args) {
  if (!Array.isArray(paramNames) || !Array.isArray(args)) {
    return {};
  }

  let c = {};
  let d = Math.min(paramNames.length + 1, args.length);

  for (let i = 0; i < d; i++) {
    if ('object' === typeof args[i]) {
      c[paramNames[i]] = {};

      for (let g in args[i]) {
        if (args[i].hasOwnProperty(g)) {
          c[paramNames[i]][g] = args[i][g];
        }
      }
    } else {
      i < paramNames.length && (c[paramNames[i]] = args[i]);
    }
  }

  return c;
};
/**
 * 获取url中制定参数的值
 *
 * @param  {string} name 参数名
 * @param  {string} url url地址
 * @return {Object}      值
 */

function getQueryParams(name, url = window.location.href) {
  let reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');

  if (url.split('?')[1]) {
    let r = url.split('?')[1].match(reg);
    return r != null ? decodeURIComponent(r[2]) : null;
  } else {
    return null;
  }
}
/**
 * 字符串化query
 *
 * [注]：
 * 默认：如果`value`是数组，其`toString`会自动转为逗号分隔的字符串
 * 这里：如果 是 Array 和 Object 参数 都进行 JSON.stringify + encodeURIComponent 了
 *
 * @param {Object} query 查询条件
 * @return {string}
 */

function stringify(query = {}) {
  if (!query) {
    return '';
  }

  let search = '';

  for (let key in query) {
    if (query.hasOwnProperty(key)) {
      let value = query[key];

      if (value == null) {
        value = '';
      } else if (typeof value === 'object') {
        value = JSON.stringify(value);
      }

      search += '&' + encodeURIComponent(key) + '=' + encodeURIComponent(value);
    }
  }

  return search.slice(1);
}
/**
 * 在url上加指定参数
 *
 * @param  {string} url  url
 * @param {Object} query 参数对象
 * @example
 * {
 *    a: 1
 * }
 * @return {string}    添加参数后的url
 */

function renderUrl(url = '', query = {}) {
  return url + (~url.indexOf('?') ? '&' : '?') + stringify(query);
}
/**
 * isObject
 *
 * @param {*} value value
 * @return {boolean} 如果是对象则返回 true, 否则 false
 */

function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  let type = typeof value;
  return type === 'function' || !!value && type === 'object';
}
/**
 * isBoolean
 *
 * @param {*} value value
 * @return {boolean} 如果是布尔类型则返回 true, 否则 false
 */

function isBoolean(value) {
  return value === true || value === false;
}
/**
 * isFunction
 *
 * @param {*} value value
 * @return {boolean}
 */

function isFunction(value) {
  return typeof value === 'function';
}
function loadScript(src) {
  if (src) {
    let script = document.createElement('script');
    script.type = 'text/javascript';
    script.async = true;
    script.src = src;
    let lastScr = document.getElementsByTagName('script')[0];
    lastScr.parentNode.insertBefore(script, lastScr);
  }
}
function noop() {}

/**
 * @file MethodQueue 任务管理队列
 * @author wangbing11(wangbing11@baidu.com)
 */
let MethodQueue = {
  cmdQueue: []
}; // 初始化 cmdQueue 为空队列

MethodQueue.init = function () {
  MethodQueue.cmdQueue = [];
}; // 执行队列中的所有命令


MethodQueue.run = function (inputsList) {
  let cmds = inputsList.map(function (inputs) {
    return MethodQueue.toCommands.apply(MethodQueue, [inputs]);
  });
  let tmpCmds = MethodQueue.cmdQueue.concat(cmds); // 每次将 MethodQueue.cmdQueue 合并到 tmpCmds 中后，就清空MethodQueue.cmdQueue。

  MethodQueue.cmdQueue = [];

  while (tmpCmds.length > 0) {
    if (MethodQueue.runCommand.apply(this, [tmpCmds[0]])) {
      // 如果没有执行，则再次存起来
      MethodQueue.cmdQueue.push(tmpCmds[0]);
    }

    tmpCmds.shift();
  }
};
/**
 *  根据参数进行处理，转换成规范的指令，
 *
 *  @param {Array} inputs 用户输入的指令参数
 *  @return {Object} 返回一个规范的指令 Command 实例
 *
 */


MethodQueue.toCommands = function (inputs) {
  let cmd = new Command(inputs);
  return cmd;
}; // 执行单个命令


MethodQueue.runCommand = function (cmd) {
  // 如果是创建 Tracker 的命令
  if (cmd.isCreateCommand) {
    // 创建一个跟踪器
    this.create(cmd.trackerName, ...cmd.fields);
  } // 如果是配置 Tracker 的命令
  else if (cmd.isConfigCommand) {
      let tracker = this.getByName(cmd.trackerName);
      let configs = cmd.fields[0];

      for (let i in configs) {
        if (configs.hasOwnProperty(i)) {
          if (isObject(configs[i])) {
            tracker.set(i, Object.assign({}, tracker.get(i), configs[i]));
          } else {
            tracker.set(i, configs[i]);
          }
        }
      }
    } // 如果是事件上报的命令
    else if (cmd.isEventCommand) {
        let tracker = this.getByName(cmd.trackerName);
        tracker.send.call(tracker, {
          type: 'event',
          fields: cmd.fields
        });
      } // 如果是时长上报的命令
      else if (cmd.isTimingCommand) {
          let tracker = this.getByName(cmd.trackerName);
          let type = cmd.fields[0];
          let fields = [].slice.call(cmd.fields, 1);

          if (type === 'start') {
            tracker.regestTimingReportor(fields);
          } else if (type === 'end') {
            tracker.endTimingReportor(fields);
          }
        }
};

MethodQueue.init();

/**
 * @file config SDK 全局配置文件
 * @author wangbing11(wangbing11@baidu.com)
 */

const serverUrls = {
  http: 'http://m.baidu.com/tcbox?action=pblog',
  https: 'https://mbd.baidu.com/tcbox?action=pblog'
}; // v1线上的请求发送地址

const pblogUrlProtocol = serverUrls[isHTTPS() ? 'https' : 'http']; // v1线下校验的请求发送地址

const testPblogUrlProtocol = 'http://bjyz-mco-searchbox201609-m12xi3-044.bjyz.baidu.com:8080/tcbox?action=pblog'; // v2线上请求的发送地址

const ztboxUrlProtocol = 'https://mbd.baidu.com/ztbox?action=zpblog'; // v2线下请求的发送地址

const testZtboxUrlProtocol = 'http://bjyz-mco-searchbox201609-m12xi3-044.bjyz.baidu.com:8080/ztbox?action=zpblog'; // export const testZtboxUrlProtocol = 'http://cp01-dqx.epc.baidu.com:8062/ztbox?action=zpblog';
// 百度统计的SDK地址, 百度统计不支持 http, 如果设置http会自动重定向到https

const baiduTongJiSDKUrl = 'https://hm.baidu.com/hm.js';

/**
 * @file send 方法
 * @author wangbing11(wangbing11@baidu.com)
 */

const createImg = function (src) {
  let img = document.createElement('img');
  img.width = 1;
  img.height = 1;
  img.src = src;
  return img;
}; // 回调函数等待时间


const callbackWaitingTime = 100;
/**
 * 使用图片来发请求
 *
 * @param {string} url 上报服务地址
 * @param {Object} param 上报的数据
 * @param {Function} callback 回调函数
 * @param {Tracker} tracker 跟踪器实例
 */

function imgPing(url, param, callback, tracker) {
  // 生成URL
  url = renderUrl(url, {
    data: param
  });
  let img = createImg(url);
  let isCallbacked = false; // 等待 100 ms， 100ms后如果回调函数还没有执行，就立即执行回调

  setTimeout(function () {
    if (callback && !isCallbacked) {
      callback(tracker);
      isCallbacked = true;
    }
  }, callbackWaitingTime);

  img.onload = img.onerror = function () {
    img = null; // 上报成功后，如果回调函数还没有执行，就执行回调函数

    if (callback && !isCallbacked) {
      callback(tracker);
      isCallbacked = true;
    }
  };
}
/**
 * 使用Navigator.sendBeacon来发请求
 *
 * @param {string} url 上报服务地址
 * @param {Object} param 上报的数据
 * @param {Function} callback 回调函数
 * @param {Tracker} tracker 跟踪器实例
 */


function beaconSend(url, param, callback, tracker) {
  // 生成URL
  url = renderUrl(url, {
    data: param
  });
  window.navigator.sendBeacon(url);
  callback(tracker);
}

function smartSend(url, param, callback = noop, useSendBeacon = 0, tracker) {
  // 与数据RD沟通，待数据组升级后可启用-在好看和全民端sendBeacon无效
  // useSendBeacon为0，使用全局配置，useSendBeacon为1启用SendBeacon，useSendBeacon为2关闭SendBeacon
  if (typeof window.navigator.sendBeacon === 'function' && (tracker.model.useSendBeacon && useSendBeacon === 0 || useSendBeacon === 1)) {
    return beaconSend(url, param, callback, tracker);
  }

  return imgPing(url, param, callback, tracker);
}

/**
 * @file Tracker 跟踪类，目前是单实例，以后可能会是多实例
 * @author wangbing11(wangbing11@baidu.com)
 */

const defaultVersion = '1.0'; // 默认的产品线-手百

const defaultAppid = '1'; // 默认的服务类型-web 端

const defaultCateid = '99'; // 默认的触发类型-默认

const defaultActiontype = '0'; // 默认的业务来源-运营活动

const defaultFrom = 'act'; // 默认的时长统计请求发送间隔

const DefaultDuration = 3; // event 输入的数组格式

const eventArgsInputPattern = ['type', 'value', 'ext'];
/**
 * 跟踪器类
 *
 * @class 跟踪器类
 * @param {Objec} opt 跟踪器的配置
 */

/* eslint-disable */

function Tracker(opt) {
  /* eslint-enable */
  // 这里这样处理，tracker.model 仍然会暴露出来。
  this.model = {}; // 设计基本配置

  setBasicConfig(this.model, opt); // 如果设置了百度统计，则需要加载百度统计代码

  if (this.get('isBaiduTongJi')) {
    // 在全局上声明百度统计的临时接口
    window._hmt = window._hmt || [];
    let src = baiduTongJiSDKUrl + '?' + this.get('baiduTongJiId');
    loadScript(src);
  } // 如果设置默认上报页面PV统计


  if (this.get('autoPvTrack')) {
    // 进行页面PV上报
    this.send({
      type: 'event',
      fields: ['pageAutoPv']
    });
  } // 如果设置默认上报页面时长统计


  if (this.get('autoTimingTrack')) {
    // 注册页面时长统计
    this.regestTimingReportor(['pageAutoTiming']);
  }
}

Tracker.prototype.set = function (fieldName, fieldValue) {
  this.model[fieldName] = fieldValue;
};

Tracker.prototype.get = function (fieldName) {
  return this.model[fieldName];
};
/**
 * 跟踪器发送数据的方法。
 *
 * @param {Object} opt 输入的参数
 * @param {string} opt.type event | timing
 * @param {string} opt.fields 去掉第一个参数后剩余的传入的参数组成的数组
 *
 */


Tracker.prototype.send = function ({
  type,
  fields
}) {
  // 生成要发送的数据
  let callback;
  let sendData;
  let opt;
  let useSendBeacon = 0;

  if (type === 'event') {
    // 如果传入参数为 ['event', {}, function() {}] 的形式
    if (fields && isObject(fields[0])) {
      opt = fields[0];

      if (isFunction(fields[1])) {
        callback = fields[1];
      }
    } // 如果传入参数为 ['event', 'type']
    else {
        opt = transformInput(eventArgsInputPattern, fields);
      } // 发送的数据


    sendData = generateEventData(this.model, opt); // useSendBeacon

    if (opt.useSendBeacon) {
      useSendBeacon = opt.useSendBeacon;
    } // 如果集成了百度统计, https://tongji.baidu.com/web/help/article?id=236&type=0


    if (this.get('isBaiduTongJi')) {
      let {
        page,
        type,
        value
      } = sendData.actiondata.content || {};

      window._hmt.push(['_trackEvent', page, type, value]);
    }
  } else if (type === 'timing') {
    sendData = generateDurationData(this.model, fields);
  }

  let url = this.get('testMode') ? testPblogUrlProtocol : pblogUrlProtocol; // v2需要添加顶级参数【appname】【from】【cfrom】【smfw】

  if (this.model.version === '2.0') {
    url = this.get('testMode') ? testZtboxUrlProtocol : ztboxUrlProtocol;
    url = this.model.testUrl || url;
    url = renderUrl(url, this.model.queryParams);
  } // 发送请求


  smartSend.apply(this, [url, sendData, callback, useSendBeacon, this]);
};
/**
 * 注册一个时长上报器
 *
 * @param {Array} fields 去掉一个后剩余的传入的参数
 */


Tracker.prototype.regestTimingReportor = function (fields = []) {
  // 如果没有 timing ID 就跑出异常
  if (!this.get('timingId')) {
    throw 'timing ID is required!';
  }

  let timingTasks = this.get('timingTasks');
  let duration = this.get('duration');
  fields = transformInput(eventArgsInputPattern, fields);
  let isExist = timingTasks.find(task => task.eventName === fields.type); // 注册时长点时，加入starttime

  fields.starttime = Date.now(); // 如果不存在就先注册

  if (!isExist) {
    // // 发送第一次时长上报信息
    this.send({
      type: 'timing',
      fields
    });
    let timingIntevalId = setInterval(() => {
      this.send({
        type: 'timing',
        fields
      });
    }, duration * 1000); // 是市场

    timingTasks.push({
      timingIntevalId,
      isReporting: true,
      eventName: fields.type,
      fields
    });
  }
};
/**
 * 终止所有时长上报器
 */


Tracker.prototype.stopAllTimingReportor = function () {
  let timingTasks = this.get('timingTasks');
  timingTasks.forEach(function (timingTask) {
    timingTask.isReporting = false;
    clearInterval(timingTask.timingIntevalId);
  });
};
/**
 * 重启所有时长上报器
 */


Tracker.prototype.startAllTimingReportor = function () {
  let timingTasks = this.get('timingTasks');
  let duration = this.get('duration');
  timingTasks.forEach(timingTask => {
    timingTask.isReporting = true; // 重启时更新starttime

    timingTask.fields.starttime = Date.now();
    this.send({
      type: 'timing',
      fields: timingTask.fields
    });
    timingTask.timingIntevalId = setInterval(() => {
      this.send({
        type: 'timing',
        fields: timingTask.fields
      });
    }, duration * 1000);
  });
};
/**
 * 结束一个时长上报器
 *
 * @param {Array} fields 去掉一个后剩余的传入的参数
 */


Tracker.prototype.endTimingReportor = function (fields) {
  fields = transformInput(eventArgsInputPattern, fields);
  let timingTasks = this.get('timingTasks');
  let newTimingTasks = [];
  timingTasks.forEach(timingTask => {
    let {
      timingIntevalId,
      eventName
    } = timingTask;

    if (eventName === fields.type) {
      clearInterval(timingIntevalId);
    } else {
      newTimingTasks.push(timingTask);
    }

    this.set('timingTasks', newTimingTasks);
  });
}; // 删除所有时长上报器


Tracker.prototype.removeAllTimingReportor = function () {
  let timingTasks = this.get('timingTasks');
  timingTasks.forEach(timingTask => {
    clearInterval(timingTask.timingIntevalId);
  });
  timingTasks = [];
};
/**
 * 点击数据的上报参数生成器
 *
 * @param {Object} model tracker.model 存放 tracker 的公共信息
 * @param {Object} opt 事件上报传入的自定义参数
 * @param {string} opt.type 事件名称
 * @param {string} opt.value 事件场景
 * @param {Object} opt.ext 事件扩展字段
 * @return {Object} 要上报的事件数据对象
 */


function generateEventData(model, opt) {
  let data = {
    cateid: model.cateid,
    actiondata: {
      // 项目事件唯一标识，server_id
      id: model.trackerId,
      // 非流类型
      type: '0',
      timestamp: Date.now(),
      content: {
        // 页面标识, page 字段，可以被 opt 覆盖
        page: opt.page || model.page,
        // 资源来源
        source: model.source,
        // 业务来源
        from: model.from,
        // 外部传入-事件名称
        type: opt.type,
        // 外部传入-场景信息
        value: opt.value,
        // 外部传入-扩展字段
        ext: opt.ext
      }
    }
  }; // v1 有，v2没有的参数

  if (model.version === '1.0') {
    // ab分组信息
    data.actiondata.abtest = model.abtest; // 是否手百端内

    data.actiondata.inBox = model.inBox; // 网络状态

    data.actiondata.network = model.network;
    data.appid = model.appid;
    data.actiontype = model.actiontype;
  }

  return data;
}
/**
 * 时长数据的上报参数生成器
 *
 * @param {Object} model tracker.model 存放 tracker 的公共信息
 * @param {Object} opt 时长上报传入的自定义参数
 * @param {string} opt.type 事件名称
 * @param {string} opt.value 事件场景
 * @param {string} opt.ext 额外参数
 * @param {string} opt.starttime 时长上报开始时间
 * @return {Object} 要上报的时长数据对象
 */


function generateDurationData(model, opt) {
  let data = {
    cateid: model.cateid,
    actiondata: {
      // 项目时长唯一标识，server_id
      id: model.timingId,
      // 流类型
      type: '1',
      timestamp: Date.now(),
      // 心跳点开始时间
      starttime: opt.starttime,
      content: {
        duration: model.duration,
        option: {
          // 页面标识
          page: model.page,
          // 资源来源
          source: model.source,
          // 业务来源
          from: model.from,
          // 外部传入-事件名称
          type: opt.type,
          // 外部传入-场景信息
          value: opt.value,
          // 外部传入-扩展字段
          ext: opt.ext
        }
      }
    }
  }; // v1 有，v2没有的参数

  if (model.version === '1.0') {
    // ab分组信息
    data.actiondata.abtest = model.abtest; // 是否手百端内

    data.actiondata.inBox = model.inBox; // 网络状态

    data.actiondata.network = model.network;
    data.appid = model.appid;
    data.actiontype = model.actiontype;
  }

  return data;
}
/**
 * 初始化配置 Tracker
 *
 * @param {Object} model tracker.model 存放 tracker的公共信息
 * @param {Object} opt 初始化跟踪器的基本参数
 * @param {string} opt.trackerName 跟踪器的名称
 * @param {string} opt.trackerId 跟踪器的ID
 * @param {string} opt.timingId 跟踪器的名称
 */


function setBasicConfig(model, opt) {
  // 跟踪器名称
  model.trackerName = opt.trackerName; // 跟踪器ID

  model.trackerId = opt.trackerId || ''; // 跟踪器时长ID

  model.timingId = opt.config && opt.config.timingId || ''; // 是否可以使用 sendBeanAPI

  model.useSendBeacon = opt.config && opt.config.useSendBeacon || false; // 默认的sdk版本-v2

  model.version = opt.config && opt.config.version || defaultVersion; // 是否是测试模式

  if (opt.config && isBoolean(opt.config.testMode)) {
    model.testMode = opt.config.testMode;
  } else {
    model.testMode = false;
  } // 测试发送地址-v2


  model.testUrl = opt.config && opt.config.testUrl || ''; // 是否默认上报PV

  if (opt.config && isBoolean(opt.config.autoPvTrack)) {
    model.autoPvTrack = opt.config.autoPvTrack;
  } else {
    model.autoPvTrack = false;
  } // 是否默认上报页面时长


  if (opt.config && isBoolean(opt.config.autoTimingTrack)) {
    model.autoTimingTrack = opt.config.autoTimingTrack;
  } else {
    model.autoTimingTrack = false;
  } // 默认的产品线名-v2


  model.queryParams = opt.config && opt.config.queryParams || {}; // 如果 version = 2.0，则增加参数 v

  if (model.version) {
    model.queryParams.v = model.version;
  } // 默认的产品线ID-手百


  model.appid = opt.config && opt.config.appid || defaultAppid; // 默认的服务类型-web 端

  model.cateid = opt.config && opt.config.cateid || defaultCateid; // 默认的触发类型-默认

  model.actiontype = opt.config && opt.config.actiontype || defaultActiontype; // 默认的业务来源-运营活动

  model.from = opt.config && opt.config.from || defaultFrom; // 默认的时长统计请求发送间隔

  model.duration = opt.config && opt.config.duration || DefaultDuration; // 默认的渠道信息

  model.source = opt.config && opt.config.source || getQueryParams('idfrom') || ''; // 是否手百端内,后续扩展到多端可能会对该字段含义进行变更，目前任然标识是否手百端内。

  model.inBox = IS_BOX ? '1' : '0';
  model.abtest = opt.config && opt.config.abtest || ''; // 网络信息

  model.network = opt.config && opt.config.network || ''; // 页面标示，默认 window.location.hostname + window.location.pathname

  model.page = opt.config && opt.config.page || window.location.hostname + window.location.pathname; // 是否集成了百度统计

  model.baiduTongJiId = opt.config && opt.config.baiduTongJiId;
  model.isBaiduTongJi = !!(opt.config && opt.config.baiduTongJiId); // 时长任务管理器

  model.timingTasks = [];
}

/**
 * @file send 方法
 * @author wangbing11(wangbing11@baidu.com)
 */
// Set the name of the hidden property and the change event for visibility
let hidden, visibilityChange;

if (typeof document.hidden !== 'undefined') {
  // Opera 12.10 and Firefox 18 and later support
  hidden = 'hidden';
  visibilityChange = 'visibilitychange';
} else if (typeof document.msHidden !== 'undefined') {
  hidden = 'msHidden';
  visibilityChange = 'msvisibilitychange';
} else if (typeof document.webkitHidden !== 'undefined') {
  hidden = 'webkitHidden';
  visibilityChange = 'webkitvisibilitychange';
} else if (typeof document.baiduboxappvisibilitychange !== 'undefined') {
  hidden = 'webkitHidden';
  visibilityChange = 'webkitvisibilitychange';
}

function regestPageVisibilityEvent(UBC) {
  let handleVisibilityChange = function () {
    let trackers = UBC.getAll();
    trackers.forEach(tracker => {
      let timingTasks = tracker.get('timingTasks');

      if (!Array.isArray(timingTasks)) {
        return;
      }

      if (document[hidden]) {
        tracker.stopAllTimingReportor();
      } else {
        tracker.startAllTimingReportor();
      }
    });
  };

  if (typeof document.addEventListener === 'undefined' || hidden === undefined) {
    return;
  } // Handle page visibility change


  document.addEventListener(visibilityChange, handleVisibilityChange, false);
}

/**
 * @file 主文件
 * @author wangbing11(wangbing11@baidu.com)
 */
let UBCReportObject = 'ubc';
let UBCtrackers = [];
let UBCtrackerMap = {}; //

let trackerCreateMapFields = ['trackerName', 'trackerId', 'config'];
/**
 * ubc 上报主类, 暴露给外部的接口
 *
 * @param {...any}  args 用户输入的 ubc 命令。如 ubc('event', 'loginBtnClick', 'head')
 * @class
 *
 */

/* eslint-disable */

function UBC(...args) {
  /* eslint-enable */
  MethodQueue.run.call(window[UBCReportObject], [args]);
}
/**
 * 创建一个跟踪器
 *
 * @param  {...any} args [trackerName, trackerId, config], config可以为空
 * @return {Tracker} 返回一个跟踪器
 */


UBC.create = function (...args) {
  let opts = transformInput(trackerCreateMapFields, [].slice.call(args));
  let trackerName = opts.trackerName; // 防止重复创建

  if (UBCtrackerMap[trackerName]) {
    return UBCtrackerMap[trackerName];
  } // 如果跟踪器的ID相同，就抛出异常


  let sameTracker = UBCtrackers.find(tracker => {
    return tracker.get('trackerId') === opts.trackerId;
  });

  if (sameTracker) {
    throw 'multi tracker serverId can not be same';
  }

  let tracker = new Tracker(opts);
  UBCtrackerMap[trackerName] = tracker;
  UBCtrackers.push(tracker);
  return tracker;
}; // 删除一个跟踪器


UBC.remove = function (trackerName) {
  let length = UBCtrackers.length;

  for (let i = 0; i < length; i++) {
    if (UBCtrackers[i][trackerName] === trackerName) {
      UBCtrackers.splice(i, 1);
      UBCtrackerMap[trackerName] = null;
      break;
    }
  }
}; // 主入口，如果是通过 SDK 接入的，要对 SDK 下载完毕之前就注入的命令进行处理


UBC.main = function () {
  // 页面初始化时，push到 ubc 队列里面的命令
  let tmpUBC = window[UBCReportObject];
  let tmpUBCQueue = tmpUBC && tmpUBC.q; // 如果window.ubc为UBC，则直接使用window.ubc

  if (tmpUBC && typeof tmpUBC.getAll === 'function') {
    UBC = window[UBCReportObject];
  } // 如果有 UBC 初始化之前存放的命令


  if (Array.isArray(tmpUBCQueue)) {
    MethodQueue.run.apply(UBC, [tmpUBCQueue]);
    tmpUBC.q = [];
  }

  UBC.startTime = tmpUBC && tmpUBC.l || 1 * new Date();
  UBC.loaded = true;
  window[UBCReportObject] = UBC;
};
/**
 * 通过名称获取跟踪器
 *
 * @param {string} trackerName  跟踪器名称
 * @return {Tracker} 返回一个跟踪器
 */


UBC.getByName = function (trackerName) {
  return UBCtrackerMap[trackerName];
};
/**
 * 获取所有的跟踪器
 *
 * @return {Array}} 返回跟踪器列表
 */


UBC.getAll = function () {
  return UBCtrackers.slice();
};

UBC.main();
regestPageVisibilityEvent(UBC);
let ubc = UBC;

export default ubc;
