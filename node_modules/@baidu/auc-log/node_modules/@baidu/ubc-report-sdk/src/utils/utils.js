/**
 * @file 工具方法
 * @author wangbing11(wangbing11@baidu.com)
 */

const ua = window.navigator.userAgent;
const IS_LITE_BOX = / (lite|info) baiduboxapp\//i.test(ua);
const IS_KANDUODUO_BOX = / mission baiduboxapp\//i.test(ua);
// IS_BOX 标识是否手百基础版内，不能是Lite、不是看多多
export const IS_BOX = / baiduboxapp\//i.test(ua) && !IS_LITE_BOX && !IS_KANDUODUO_BOX;


// 判断当前页面的网络协议是否为 https
export const isHTTPS = function () {
    return 'https:' === document.location.protocol;
};

// 这个函数用于将其他函数的输入转换成一个对象，这个规则适用于UBC所有对外的接口API
// transformInput(['a', 'b', 'c'], [1, 2, 3]);
// ==> {a: 1, b: 2, c: 3}
// transformInput(['a', 'b', 'c'], [1, 2, {c: 3, d: 4}]);
// ==> {a: 1, b: 2, c: { c: 3, d: 4}}
export const transformInput = function (paramNames, args) {
    if (!Array.isArray(paramNames) || !Array.isArray(args)) {
        return {};
    }
    let c = {};
    let d = Math.min(paramNames.length + 1, args.length);
    for (let i = 0; i < d; i++) {
        if ('object' === typeof args[i]) {
            c[paramNames[i]] = {};
            for (let g in args[i]) {
                if (args[i].hasOwnProperty(g)) {
                    c[paramNames[i]][g] = args[i][g];
                }
            }
        }
        else {
            i < paramNames.length && (c[paramNames[i]] = args[i]);
        }
    }
    return c;
};

/**
 * 获取url中制定参数的值
 *
 * @param  {string} name 参数名
 * @param  {string} url url地址
 * @return {Object}      值
 */
export function getQueryParams(name, url = window.location.href) {
    let reg = new RegExp(
        '(^|&)' + name + '=([^&]*)(&|$)',
        'i'
    );
    if (url.split('?')[1]) {
        let r = url.split('?')[1].match(reg);
        return r != null ? decodeURIComponent(r[2]) : null;
    }
    else {
        return null;
    }
}


/**
 * 字符串化query
 *
 * [注]：
 * 默认：如果`value`是数组，其`toString`会自动转为逗号分隔的字符串
 * 这里：如果 是 Array 和 Object 参数 都进行 JSON.stringify + encodeURIComponent 了
 *
 * @param {Object} query 查询条件
 * @return {string}
 */
export function stringify(query = {}) {
    if (!query) {
        return '';
    }

    let search = '';
    for (let key in query) {
        if (query.hasOwnProperty(key)) {
            let value = query[key];
            if (value == null) {
                value = '';
            }
            else if (typeof value === 'object') {
                value = JSON.stringify(value);
            }
            search += '&' + encodeURIComponent(key) + '=' + encodeURIComponent(value);
        }
    }

    return search.slice(1);
}


/**
 * 在url上加指定参数
 *
 * @param  {string} url  url
 * @param {Object} query 参数对象
 * @example
 * {
 *    a: 1
 * }
 * @return {string}    添加参数后的url
 */
export function renderUrl(url = '', query = {}) {
    return url + (~url.indexOf('?') ? '&' : '?') + stringify(query);
}

/**
 * isObject
 *
 * @param {*} value value
 * @return {boolean} 如果是对象则返回 true, 否则 false
 */
export function isObject(value) {
    // Avoid a V8 JIT bug in Chrome 19-20.
    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
    let type = typeof value;
    return type === 'function' || (!!value && type === 'object');
}

/**
 * isBoolean
 *
 * @param {*} value value
 * @return {boolean} 如果是布尔类型则返回 true, 否则 false
 */
export function isBoolean(value) {
    return value === true || value === false;
}

/**
 * isFunction
 *
 * @param {*} value value
 * @return {boolean}
 */
export function isFunction(value) {
    return typeof value === 'function';
}

export function loadScript(src) {
    if (src) {
        let script = document.createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.src = src;
        let lastScr = document.getElementsByTagName('script')[0];
        lastScr.parentNode.insertBefore(script, lastScr);
    }
}

export function noop() {}
