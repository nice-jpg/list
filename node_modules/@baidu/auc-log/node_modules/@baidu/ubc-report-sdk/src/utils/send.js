/**
 * @file send 方法
 * @author wangbing11(wangbing11@baidu.com)
 */

import {renderUrl, noop} from './utils';
const createImg = function (src) {
    let img = document.createElement('img');
    img.width = 1;
    img.height = 1;
    img.src = src;
    return img;
};

// 回调函数等待时间
const callbackWaitingTime = 100;

/**
 * 使用图片来发请求
 *
 * @param {string} url 上报服务地址
 * @param {Object} param 上报的数据
 * @param {Function} callback 回调函数
 * @param {Tracker} tracker 跟踪器实例
 */
function imgPing(url, param, callback, tracker) {
    // 生成URL
    url = renderUrl(url, {
        data: param
    });
    let img = createImg(url);
    let isCallbacked = false;

    // 等待 100 ms， 100ms后如果回调函数还没有执行，就立即执行回调
    setTimeout(function () {
        if (callback && !isCallbacked) {
            callback(tracker);
            isCallbacked = true;
        }
    }, callbackWaitingTime);

    img.onload = img.onerror = function () {
        img = null;
        // 上报成功后，如果回调函数还没有执行，就执行回调函数
        if (callback && !isCallbacked) {
            callback(tracker);
            isCallbacked = true;
        }
    };
}

/**
 * 使用Navigator.sendBeacon来发请求
 *
 * @param {string} url 上报服务地址
 * @param {Object} param 上报的数据
 * @param {Function} callback 回调函数
 * @param {Tracker} tracker 跟踪器实例
 */
function beaconSend(url, param, callback, tracker) {
    // 生成URL
    url = renderUrl(url, {
        data: param
    });
    window.navigator.sendBeacon(url);
    callback(tracker);
}

export function smartSend(url, param, callback = noop, useSendBeacon = 0, tracker) {
    // 与数据RD沟通，待数据组升级后可启用-在好看和全民端sendBeacon无效
    // useSendBeacon为0，使用全局配置，useSendBeacon为1启用SendBeacon，useSendBeacon为2关闭SendBeacon
    if (typeof window.navigator.sendBeacon === 'function'
        && ((tracker.model.useSendBeacon && useSendBeacon === 0) || useSendBeacon === 1)) {
        return beaconSend(url, param, callback, tracker);
    }
    return imgPing(url, param, callback, tracker);
}
