/**
 * @file Tracker 跟踪类，目前是单实例，以后可能会是多实例
 * @author wangbing11(wangbing11@baidu.com)
 */

import {
    getQueryParams,
    transformInput,
    isObject,
    isFunction,
    isBoolean,
    loadScript,
    IS_BOX,
    renderUrl
} from './utils/utils';

import {
    pblogUrlProtocol,
    testPblogUrlProtocol,
    testZtboxUrlProtocol,
    ztboxUrlProtocol,
    baiduTongJiSDKUrl
} from './config';
import {smartSend} from './utils/send';

// 默认的sdk版本
const defaultVersion = '1.0';

// 默认的产品线-手百
const defaultAppid = '1';

// 默认的服务类型-web 端
const defaultCateid = '99';

// 默认的触发类型-默认
const defaultActiontype = '0';

// 默认的业务来源-运营活动
const defaultFrom = 'act';

// 默认的时长统计请求发送间隔
const DefaultDuration = 3;

// event 输入的数组格式
const eventArgsInputPattern = ['type', 'value', 'ext'];

/**
 * 跟踪器类
 *
 * @class 跟踪器类
 * @param {Objec} opt 跟踪器的配置
 */
/* eslint-disable */
export default function Tracker(opt) {
/* eslint-enable */
    // 这里这样处理，tracker.model 仍然会暴露出来。
    this.model = {};

    // 设计基本配置
    setBasicConfig(this.model, opt);

    // 如果设置了百度统计，则需要加载百度统计代码
    if (this.get('isBaiduTongJi')) {
        // 在全局上声明百度统计的临时接口
        window._hmt = window._hmt || [];
        let src = baiduTongJiSDKUrl + '?' + this.get('baiduTongJiId');
        loadScript(src);
    }
    // 如果设置默认上报页面PV统计
    if (this.get('autoPvTrack')) {
        // 进行页面PV上报
        this.send({
            type: 'event',
            fields: ['pageAutoPv']
        });
    }

    // 如果设置默认上报页面时长统计
    if (this.get('autoTimingTrack')) {
        // 注册页面时长统计
        this.regestTimingReportor(
            ['pageAutoTiming']
        );
    }
}

Tracker.prototype.set = function (fieldName, fieldValue) {
    this.model[fieldName] = fieldValue;
};

Tracker.prototype.get = function (fieldName) {
    return this.model[fieldName];
};

/**
 * 跟踪器发送数据的方法。
 *
 * @param {Object} opt 输入的参数
 * @param {string} opt.type event | timing
 * @param {string} opt.fields 去掉第一个参数后剩余的传入的参数组成的数组
 *
 */
Tracker.prototype.send = function ({type, fields}) {
    // 生成要发送的数据
    let callback;
    let sendData;
    let opt;
    let useSendBeacon = 0;
    if (type === 'event') {
        // 如果传入参数为 ['event', {}, function() {}] 的形式
        if (fields && isObject(fields[0])) {
            opt = fields[0];
            if (isFunction(fields[1])) {
                callback = fields[1];
            }
        }
        // 如果传入参数为 ['event', 'type']
        else {
            opt = transformInput(eventArgsInputPattern, fields);
        }
        // 发送的数据
        sendData = generateEventData(this.model, opt);
        // useSendBeacon
        if (opt.useSendBeacon) {
            useSendBeacon = opt.useSendBeacon;
        }
        // 如果集成了百度统计, https://tongji.baidu.com/web/help/article?id=236&type=0
        if (this.get('isBaiduTongJi')) {
            let {page, type, value} = sendData.actiondata.content || {};
            window._hmt.push([
                '_trackEvent',
                page,
                type,
                value
            ]);
        }
    }
    else if (type === 'timing') {
        sendData = generateDurationData(this.model, fields);
    }

    let url = this.get('testMode') ? testPblogUrlProtocol : pblogUrlProtocol;
    // v2需要添加顶级参数【appname】【from】【cfrom】【smfw】
    if (this.model.version === '2.0') {
        url = this.get('testMode') ? testZtboxUrlProtocol : ztboxUrlProtocol;
        url = this.model.testUrl || url;
        url = renderUrl(url, this.model.queryParams);
    }

    // 发送请求
    smartSend.apply(this, [url, sendData, callback, useSendBeacon, this]);
};

/**
 * 注册一个时长上报器
 *
 * @param {Array} fields 去掉一个后剩余的传入的参数
 */
Tracker.prototype.regestTimingReportor = function (fields = []) {
    // 如果没有 timing ID 就跑出异常
    if (!this.get('timingId')) {
        throw 'timing ID is required!';
    }
    let timingTasks = this.get('timingTasks');
    let duration = this.get('duration');

    fields = transformInput(eventArgsInputPattern, fields);
    let isExist = timingTasks.find(task => task.eventName === fields.type);
    // 注册时长点时，加入starttime
    fields.starttime = Date.now();
    // 如果不存在就先注册
    if (!isExist) {
        // // 发送第一次时长上报信息
        this.send({
            type: 'timing',
            fields
        });
        let timingIntevalId = setInterval(() => {
            this.send({
                type: 'timing',
                fields
            });
        }, duration * 1000);
        // 是市场
        timingTasks.push({
            timingIntevalId,
            isReporting: true,
            eventName: fields.type,
            fields
        });
    }
};

/**
 * 终止所有时长上报器
 */
Tracker.prototype.stopAllTimingReportor = function () {
    let timingTasks = this.get('timingTasks');
    timingTasks.forEach(function (timingTask) {
        timingTask.isReporting = false;
        clearInterval(timingTask.timingIntevalId);
    });
};

/**
 * 重启所有时长上报器
 */
Tracker.prototype.startAllTimingReportor = function () {
    let timingTasks = this.get('timingTasks');
    let duration = this.get('duration');
    timingTasks.forEach(timingTask => {
        timingTask.isReporting = true;
        // 重启时更新starttime
        timingTask.fields.starttime = Date.now();

        this.send({
            type: 'timing',
            fields: timingTask.fields
        });

        timingTask.timingIntevalId = setInterval(() => {
            this.send({
                type: 'timing',
                fields: timingTask.fields
            });
        }, duration * 1000);
    });
};

/**
 * 结束一个时长上报器
 *
 * @param {Array} fields 去掉一个后剩余的传入的参数
 */
Tracker.prototype.endTimingReportor = function (fields) {
    fields = transformInput(eventArgsInputPattern, fields);
    let timingTasks = this.get('timingTasks');
    let newTimingTasks = [];
    timingTasks.forEach(timingTask => {
        let {timingIntevalId, eventName} = timingTask;
        if (eventName === fields.type) {
            clearInterval(timingIntevalId);
        }
        else {
            newTimingTasks.push(timingTask);
        }
        this.set('timingTasks', newTimingTasks);
    });
};

// 删除所有时长上报器
Tracker.prototype.removeAllTimingReportor = function () {
    let timingTasks = this.get('timingTasks');
    timingTasks.forEach(timingTask => {
        clearInterval(timingTask.timingIntevalId);
    });
    timingTasks = [];
};



/**
 * 点击数据的上报参数生成器
 *
 * @param {Object} model tracker.model 存放 tracker 的公共信息
 * @param {Object} opt 事件上报传入的自定义参数
 * @param {string} opt.type 事件名称
 * @param {string} opt.value 事件场景
 * @param {Object} opt.ext 事件扩展字段
 * @return {Object} 要上报的事件数据对象
 */
function generateEventData(model, opt) {
    let data = {
        cateid: model.cateid,
        actiondata: {
            // 项目事件唯一标识，server_id
            id: model.trackerId,
            // 非流类型
            type: '0',
            timestamp: Date.now(),
            content: {
                // 页面标识, page 字段，可以被 opt 覆盖
                page: opt.page || model.page,
                // 资源来源
                source: model.source,
                // 业务来源
                from: model.from,
                // 外部传入-事件名称
                type: opt.type,
                // 外部传入-场景信息
                value: opt.value,
                // 外部传入-扩展字段
                ext: opt.ext
            }
        }
    };
    // v1 有，v2没有的参数
    if (model.version === '1.0') {
        // ab分组信息
        data.actiondata.abtest = model.abtest;
        // 是否手百端内
        data.actiondata.inBox = model.inBox;
        // 网络状态
        data.actiondata.network = model.network;
        data.appid = model.appid;
        data.actiontype = model.actiontype;
    }
    return data;
}

/**
 * 时长数据的上报参数生成器
 *
 * @param {Object} model tracker.model 存放 tracker 的公共信息
 * @param {Object} opt 时长上报传入的自定义参数
 * @param {string} opt.type 事件名称
 * @param {string} opt.value 事件场景
 * @param {string} opt.ext 额外参数
 * @param {string} opt.starttime 时长上报开始时间
 * @return {Object} 要上报的时长数据对象
 */
function generateDurationData(model, opt) {
    let data = {
        cateid: model.cateid,
        actiondata: {
            // 项目时长唯一标识，server_id
            id: model.timingId,
            // 流类型
            type: '1',
            timestamp: Date.now(),
            // 心跳点开始时间
            starttime: opt.starttime,
            content: {
                duration: model.duration,
                option: {
                    // 页面标识
                    page: model.page,
                    // 资源来源
                    source: model.source,
                    // 业务来源
                    from: model.from,
                    // 外部传入-事件名称
                    type: opt.type,
                    // 外部传入-场景信息
                    value: opt.value,
                    // 外部传入-扩展字段
                    ext: opt.ext
                }
            }
        }
    };
    // v1 有，v2没有的参数
    if (model.version === '1.0') {
        // ab分组信息
        data.actiondata.abtest = model.abtest;
        // 是否手百端内
        data.actiondata.inBox = model.inBox;
        // 网络状态
        data.actiondata.network = model.network;
        data.appid = model.appid;
        data.actiontype = model.actiontype;
    }
    return data;
}


/**
 * 初始化配置 Tracker
 *
 * @param {Object} model tracker.model 存放 tracker的公共信息
 * @param {Object} opt 初始化跟踪器的基本参数
 * @param {string} opt.trackerName 跟踪器的名称
 * @param {string} opt.trackerId 跟踪器的ID
 * @param {string} opt.timingId 跟踪器的名称
 */
function setBasicConfig(model, opt) {
    // 跟踪器名称
    model.trackerName = opt.trackerName;

    // 跟踪器ID
    model.trackerId = opt.trackerId || '';

    // 跟踪器时长ID
    model.timingId = opt.config && opt.config.timingId || '';

    // 是否可以使用 sendBeanAPI
    model.useSendBeacon = opt.config && opt.config.useSendBeacon || false;

    // 默认的sdk版本-v2
    model.version = opt.config && opt.config.version || defaultVersion;

    // 是否是测试模式
    if (opt.config && isBoolean(opt.config.testMode)) {
        model.testMode = opt.config.testMode;
    }
    else {
        model.testMode = false;
    }

    // 测试发送地址-v2
    model.testUrl = opt.config && opt.config.testUrl || '';

    // 是否默认上报PV
    if (opt.config && isBoolean(opt.config.autoPvTrack)) {
        model.autoPvTrack = opt.config.autoPvTrack;
    }
    else {
        model.autoPvTrack = false;
    }

    // 是否默认上报页面时长
    if (opt.config && isBoolean(opt.config.autoTimingTrack)) {
        model.autoTimingTrack = opt.config.autoTimingTrack;
    }
    else {
        model.autoTimingTrack = false;
    }

    // 默认的产品线名-v2
    model.queryParams = opt.config && opt.config.queryParams || {};

    // 如果 version = 2.0，则增加参数 v
    if (model.version) {
        model.queryParams.v = model.version;
    }

    // 默认的产品线ID-手百
    model.appid = opt.config && opt.config.appid || defaultAppid;

    // 默认的服务类型-web 端
    model.cateid = opt.config && opt.config.cateid || defaultCateid;

    // 默认的触发类型-默认
    model.actiontype = opt.config && opt.config.actiontype || defaultActiontype;

    // 默认的业务来源-运营活动
    model.from = opt.config && opt.config.from || defaultFrom;

    // 默认的时长统计请求发送间隔
    model.duration = opt.config && opt.config.duration || DefaultDuration;

    // 默认的渠道信息
    model.source = opt.config && opt.config.source || getQueryParams('idfrom') || '';

    // 是否手百端内,后续扩展到多端可能会对该字段含义进行变更，目前任然标识是否手百端内。
    model.inBox = IS_BOX ? '1' : '0';

    model.abtest = opt.config && opt.config.abtest || '';
    // 网络信息
    model.network = opt.config && opt.config.network || '';

    // 页面标示，默认 window.location.hostname + window.location.pathname
    model.page = opt.config && opt.config.page || window.location.hostname + window.location.pathname;

    // 是否集成了百度统计
    model.baiduTongJiId = opt.config && opt.config.baiduTongJiId;
    model.isBaiduTongJi = !!(opt.config && opt.config.baiduTongJiId);

    // 时长任务管理器
    model.timingTasks = [];
}
