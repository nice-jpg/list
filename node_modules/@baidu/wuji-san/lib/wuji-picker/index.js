"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _san = require("san");

var _pickerItem = _interopRequireDefault(require("./pickerItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 'w-picker';

var WujiPicker = /*#__PURE__*/function (_Component) {
  _inherits(WujiPicker, _Component);

  var _super = _createSuper(WujiPicker);

  function WujiPicker() {
    _classCallCheck(this, WujiPicker);

    return _super.apply(this, arguments);
  }

  _createClass(WujiPicker, [{
    key: "initData",
    value: function initData() {
      return {
        children: [],
        rColumns: [],
        itemHeight: 57,
        baseOffset: 0,
        currentIndex: 0,
        visibleItemCount: 5
      };
    }
  }, {
    key: "attached",
    value: function attached() {
      var _this = this;

      this.formatColumn();
      this.nextTick(function () {
        var item = _this.el.querySelector(".".concat(prefixCls, "-column-item"));

        if (item) {
          _this.data.set('itemHeight', item.clientHeight);
        }
      });
    }
  }, {
    key: "formatColumn",
    value: function formatColumn() {
      var _this$data$get = this.data.get(),
          columns = _this$data$get.columns,
          dataType = _this$data$get.dataType,
          defaultIndex = _this$data$get.defaultIndex;

      var rColumns = [];

      if (dataType === 'text') {
        rColumns = [{
          values: columns,
          defaultIndex: defaultIndex
        }];
      } else if (dataType === 'cascade') {
        rColumns = this.formatCascade();
      } else {
        rColumns = columns;
      }

      this.data.set('rColumns', rColumns);
    }
  }, {
    key: "formatCascade",
    value: function formatCascade() {
      var _this$data$get2 = this.data.get(),
          columns = _this$data$get2.columns,
          defaultIndex = _this$data$get2.defaultIndex,
          valueKey = _this$data$get2.valueKey;

      var formatted = [];
      var cursor = {
        children: columns
      };

      while (cursor && cursor.children) {
        var dIndex = cursor.defaultIndex || +defaultIndex;
        formatted.push({
          values: cursor.children.map(function (item) {
            return item[valueKey];
          }),
          className: cursor.className,
          defaultIndex: dIndex
        });
        cursor = cursor.children[dIndex];
      }

      return formatted;
    }
  }, {
    key: "onCascadeChange",
    value: function onCascadeChange(columnIndex) {
      var _this$data$get3 = this.data.get(),
          columns = _this$data$get3.columns,
          valueKey = _this$data$get3.valueKey;

      var cursor = {
        children: columns
      };
      var indexes = this.getIndexes(); // 获取当前选中列是否还有children

      for (var i = 0; i <= columnIndex; i++) {
        cursor = cursor.children[indexes[i]];
      }

      while (cursor.children) {
        columnIndex++;
        this.setColumnValues(columnIndex, cursor.children.map(function (item) {
          return item[valueKey];
        }));
        cursor = cursor.children[cursor.defaultIndex || 0];
      }
    } // 每列目前选中的index

  }, {
    key: "getIndexes",
    value: function getIndexes() {
      var children = this.data.get('children');
      return children.map(function (child) {
        return child.data.get('currentIndex');
      });
    }
  }, {
    key: "setColumnValues",
    value: function setColumnValues(index, options) {
      var children = this.data.get('children');
      var column = children[index];

      if (column) {
        column.setOptions(options);
      }
    }
  }, {
    key: "change",
    value: function change(columnIndex) {
      var _this$data$get4 = this.data.get(),
          dataType = _this$data$get4.dataType;

      if (dataType === 'cascade') {
        this.onCascadeChange(columnIndex);
      }

      if (dataType === 'text') {
        this.fire('change', {
          picker: this,
          value: this.getColumnValue(0),
          columnIndex: this.getColumnIndex(0)
        });
      } else {
        this.fire('change', {
          picker: this,
          value: this.getValues(),
          columnIndex: columnIndex
        });
      }
    }
  }, {
    key: "getColumnValue",
    value: function getColumnValue(index) {
      var children = this.data.get('children');
      var column = children[index];
      return column && column.getValue();
    }
  }, {
    key: "getColumnIndex",
    value: function getColumnIndex(columnIndex) {
      var children = this.data.get('children');
      var column = children[columnIndex] || {};
      return column.data.get('currentIndex');
    }
  }, {
    key: "getValues",
    value: function getValues() {
      var children = this.data.get('children');
      return children.map(function (child) {
        return child.getValue();
      });
    }
  }]);

  return WujiPicker;
}(_san.Component);

exports["default"] = WujiPicker;

_defineProperty(WujiPicker, "template",
/* html */
"\n        <div\n            class=\"".concat(prefixCls, "-wrap\"\n            style=\"height: {{itemHeight * visibleItemCount}}px\"\n        >\n            <wuji-picker-item\n                s-ref=\"pickerItem\"\n                s-for=\"column, index in rColumns\"\n                options=\"{{column.values}}\"\n                current-index=\"{{column.defaultIndex}}\"\n                base-offset=\"{{baseOffset}}\"\n                item-height=\"{{itemHeight}}\"\n                on-change=\"change(index, childIndex)\"\n            />\n            <div\n                class=\"").concat(prefixCls, "-column-mask\"\n                style=\"background-size: 100% {{baseOffset}}px\"\n            />\n            <div\n                class=\"").concat(prefixCls, "-column-picker\"\n                style=\"height: {{itemHeight}}px\"\n            />\n        </div>\n    "));

_defineProperty(WujiPicker, "components", {
  'wuji-picker-item': _pickerItem["default"]
});

_defineProperty(WujiPicker, "dataTypes", {});

_defineProperty(WujiPicker, "messages", {
  changeChildren: function changeChildren(_ref) {
    var value = _ref.value;
    var children = this.data.get('children');

    switch (value.type) {
      case 'push':
        children.push(value.child);
        break;

      case 'splice':
        children.splice(children.indexOf(value.child), 1);
        break;
    }

    this.data.set('children', children);
  }
});

_defineProperty(WujiPicker, "computed", {
  baseOffset: function baseOffset() {
    var visibleItemCount = this.data.get('visibleItemCount');
    var itemHeight = this.data.get('itemHeight');
    return itemHeight * ((visibleItemCount - 1) / 2);
  },
  dataType: function dataType() {
    var columns = this.data.get('columns');
    var firstColumn = columns[0] || {};

    if (firstColumn.children) {
      return 'cascade';
    }

    if (firstColumn.values) {
      return 'object';
    }

    return 'text';
  }
});