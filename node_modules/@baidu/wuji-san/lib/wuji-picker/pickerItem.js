"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _san = require("san");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 'w-picker-column';

var WujiPickerItem = /*#__PURE__*/function (_Component) {
  _inherits(WujiPickerItem, _Component);

  var _super = _createSuper(WujiPickerItem);

  function WujiPickerItem() {
    _classCallCheck(this, WujiPickerItem);

    return _super.apply(this, arguments);
  }

  _createClass(WujiPickerItem, [{
    key: "initData",
    value: function initData() {
      return {
        count: 5,
        // 单列元素长度
        direction: '',
        offset: 0,
        deltaX: 0,
        deltaY: 0,
        offsetX: 0,
        offsetY: 0,
        startX: 0,
        startY: 0,
        duration: 0,
        startOffset: 0,
        currentIndex: 0,
        swipeDuration: 1000,
        moving: false,
        moveStatus: null,
        visibleItemCount: 5,
        MOMENTUM_LIMIT_TIME: 300,
        DEFAULT_DURATION: 200,
        MOMENTUM_LIMIT_DISTANCE: 15
      };
    }
  }, {
    key: "created",
    value: function created() {
      this.dispatch('changeChildren', {
        child: this,
        type: 'push'
      });
    }
  }, {
    key: "attached",
    value: function attached() {
      var _this = this;

      this.watch('itemHeight', function (value) {
        _this.setIndex(_this.data.get('currentIndex'));
      });
    }
  }, {
    key: "destroyed",
    value: function destroyed() {
      this.dispatch('changeChildren', {
        child: this,
        type: 'splice'
      });
    }
  }, {
    key: "onTouchStart",
    value: function onTouchStart(e) {
      this.touchStart(e);

      var _this$data$get = this.data.get(),
          moving = _this$data$get.moving,
          baseOffset = _this$data$get.baseOffset,
          offset = _this$data$get.offset;

      var startOffset = offset;

      if (moving) {
        var cOffset = this.getOffset();
        startOffset = Math.min(0, cOffset - baseOffset);
      }

      this.data.set('duration', 0);
      this.data.set('transitionEndTrigger', null);
      this.data.set('touchStartTime', Date.now());
      this.data.set('startOffset', startOffset);
      this.data.set('momentumOffset', startOffset);
    }
  }, {
    key: "onTouchMove",
    value: function onTouchMove(e) {
      e.preventDefault();
      e.stopPropagation();
      this.touchMove(e);

      var _this$data$get2 = this.data.get(),
          MOMENTUM_LIMIT_TIME = _this$data$get2.MOMENTUM_LIMIT_TIME,
          direction = _this$data$get2.direction,
          startOffset = _this$data$get2.startOffset;

      if ('vertical' === direction) {
        this.data.set('moving', true);
      }

      var _this$data$get3 = this.data.get(),
          deltaY = _this$data$get3.deltaY,
          count = _this$data$get3.count,
          itemHeight = _this$data$get3.itemHeight,
          touchStartTime = _this$data$get3.touchStartTime;

      var offset = this.range(startOffset + deltaY, -(count * itemHeight), itemHeight);
      this.data.set('offset', offset);
      var time = Date.now();

      if (time - touchStartTime > MOMENTUM_LIMIT_TIME) {
        this.data.set('touchStartTime', time);
        this.data.set('momentumOffset', offset);
      }
    }
  }, {
    key: "onTouchEnd",
    value: function onTouchEnd() {
      var that = this;

      var _this$data$get4 = this.data.get(),
          DEFAULT_DURATION = _this$data$get4.DEFAULT_DURATION,
          MOMENTUM_LIMIT_DISTANCE = _this$data$get4.MOMENTUM_LIMIT_DISTANCE,
          MOMENTUM_LIMIT_TIME = _this$data$get4.MOMENTUM_LIMIT_TIME;

      var _this$data$get5 = this.data.get(),
          offset = _this$data$get5.offset,
          momentumOffset = _this$data$get5.momentumOffset,
          touchStartTime = _this$data$get5.touchStartTime;

      var distance = offset - momentumOffset;
      var duration = Date.now() - touchStartTime;
      var allowMomentum = duration < MOMENTUM_LIMIT_TIME && Math.abs(distance) > MOMENTUM_LIMIT_DISTANCE;

      if (allowMomentum) {
        this.momentum(distance, duration);
        return;
      }

      var index = this.getIndexByOffset(offset);
      this.data.set('duration', DEFAULT_DURATION);
      this.setIndex(index, true); // compatible with desktop scenario

      setTimeout(function () {
        that.data.set('touchStartTime', null);
        that.data.set('moving', false);
      }, 0);
    }
  }, {
    key: "touchStart",
    value: function touchStart(_ref) {
      var touches = _ref.touches;
      this.resetTouchStatus();
      this.data.set('startX', touches[0].clientX);
      this.data.set('startY', touches[0].clientY);
    }
  }, {
    key: "touchMove",
    value: function touchMove(_ref2) {
      var touches = _ref2.touches;

      var _this$data$get6 = this.data.get(),
          startX = _this$data$get6.startX,
          startY = _this$data$get6.startY;

      var deltaX = touches[0].clientX - startX;
      var deltaY = touches[0].clientY - startY;
      var offsetX = Math.abs(deltaX);
      var offsetY = Math.abs(deltaY);
      var dc = offsetX > offsetY && offsetX > 10 ? 'horizontal' : offsetY > offsetX && offsetY > 10 ? 'vertical' : '';
      this.data.set('direction', this.data.get('direction') || dc);
      this.data.set('deltaX', deltaX);
      this.data.set('deltaY', deltaY);
      this.data.set('offsetX', offsetX);
      this.data.set('offsetY', offsetY);
    }
  }, {
    key: "resetTouchStatus",
    value: function resetTouchStatus() {
      this.data.set('direction', '');
      this.data.set('deltaX', 0);
      this.data.set('deltaY', 0);
      this.data.set('offsetX', 0);
      this.data.set('offsetY', 0);
    }
  }, {
    key: "getOffset",
    value: function getOffset() {
      // const e = this.ref('wrapper');
      var t = window.getComputedStyle(this.ref('wrapper'));
      var transform = t.transform || t.webkitTransform;
      return Number(transform.slice(7, transform.length - 1).split(', ')[5]);
    }
  }, {
    key: "range",
    value: function range(num, min, max) {
      return Math.min(Math.max(num, min), max);
    }
  }, {
    key: "momentum",
    value: function momentum(distance, duration) {
      var _this$data$get7 = this.data.get(),
          offset = _this$data$get7.offset,
          swipeDuration = _this$data$get7.swipeDuration;

      var speed = Math.abs(distance / duration);
      distance = offset + speed / 0.002 * (distance < 0 ? -1 : 1);
      var index = this.getIndexByOffset(distance);
      this.data.set('duration', +swipeDuration);
      this.setIndex(index, true);
    }
  }, {
    key: "getIndexByOffset",
    value: function getIndexByOffset(offset) {
      var _this$data$get8 = this.data.get(),
          itemHeight = _this$data$get8.itemHeight,
          count = _this$data$get8.count;

      return this.range(Math.round(-offset / itemHeight), 0, count - 1);
    }
  }, {
    key: "setIndex",
    value: function setIndex(index, emitChange) {
      var that = this;

      var _this$data$get9 = this.data.get(),
          itemHeight = _this$data$get9.itemHeight,
          currentIndex = _this$data$get9.currentIndex,
          moving = _this$data$get9.moving,
          offset = _this$data$get9.offset;

      index = this.adjustIndex(index) || 0;
      var coffset = -index * itemHeight;

      var trigger = function trigger() {
        if (index !== currentIndex) {
          that.data.set('currentIndex', index);

          if (emitChange) {
            that.fire('change', index);
          }
        }
      }; // trigger the change event after transitionend when moving


      if (moving && coffset !== offset) {
        this.data.set('transitionEndTrigger', trigger);
      } else {
        trigger();
      }

      this.data.set('offset', coffset);
    }
  }, {
    key: "adjustIndex",
    value: function adjustIndex(index) {
      var _this$data$get10 = this.data.get(),
          count = _this$data$get10.count,
          options = _this$data$get10.options;

      index = this.range(index, 0, count);

      for (var i = index; i < count; i++) {
        if (!this.isOptionDisabled(options[i])) {
          return i;
        }
      }

      for (var j = index - 1; j >= 0; j--) {
        if (!this.isOptionDisabled(options[j])) {
          return j;
        }
      }
    }
  }, {
    key: "isOptionDisabled",
    value: function isOptionDisabled(option) {
      return _typeof(option) === 'object' && option.disabled;
    }
  }, {
    key: "onTransitionend",
    value: function onTransitionend() {
      this.data.set('moving', false);
      this.data.set('duration', 0);
      var transitionEndTrigger = this.data.get('transitionEndTrigger');

      if (transitionEndTrigger) {
        transitionEndTrigger();
        this.data.set('transitionEndTrigger', null);
      }
    }
  }, {
    key: "setOptions",
    value: function setOptions(newOptions) {
      var _this$data$get11 = this.data.get(),
          options = _this$data$get11.options,
          defaultIndex = _this$data$get11.defaultIndex;

      if (JSON.stringify(newOptions) !== JSON.stringify(options)) {
        this.data.set('options', newOptions);
        this.setIndex(defaultIndex);
      }
    } // 获取当前选中项的文本

  }, {
    key: "getValue",
    value: function getValue() {
      var _this$data$get12 = this.data.get(),
          options = _this$data$get12.options,
          currentIndex = _this$data$get12.currentIndex;

      return options[currentIndex];
    }
  }]);

  return WujiPickerItem;
}(_san.Component);

exports["default"] = WujiPickerItem;

_defineProperty(WujiPickerItem, "template",
/* html */
"\n        <div class=\"".concat(prefixCls, "\"\n            on-touchstart=\"onTouchStart\"\n            on-touchmove=\"onTouchMove\"\n            on-touchend=\"onTouchEnd\"\n            on-touchcancel=\"onTouchEnd\"\n        >\n            <ul class=\"").concat(prefixCls, "-wrap\"\n                style=\"{{wrapperStyle}}\"\n                on-transitionend=\"onTransitionend\"\n            >\n                <li\n                    class=\"").concat(prefixCls, "-item {{currentIndex === index ? '").concat(prefixCls, "-selected': '' }}\"\n                    s-for=\"item, index in options\"\n                >{{item}}</li>\n            </ul>\n        </div>\n    "));

_defineProperty(WujiPickerItem, "computed", {
  count: function count() {
    return this.data.get('options').length;
  },
  wrapperStyle: function wrapperStyle() {
    var baseOffset = this.data.get('baseOffset');
    var offset = this.data.get('offset');
    var duration = this.data.get('duration');
    var v1 = "translate3d(0, ".concat(offset + baseOffset, "px, 0)");
    var v2 = "".concat(duration, "ms");
    var v3 = duration ? 'all' : 'none';
    return {
      '-webkit-transform': v1,
      'transform': v1,
      '-webkit-transition-duration': v2,
      'transition-duration': v2,
      '-webkit-transition-property': v3,
      'transition-property': v3
    };
  }
});