"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _san = require("san");

var _wujiIcon = _interopRequireDefault(require("../wuji-icon"));

var _isNumeric = _interopRequireDefault(require("../utils/is-numeric"));

var _pr2rem = _interopRequireDefault(require("../utils/pr2rem"));

var _symbol2svg = _interopRequireDefault(require("../utils/symbol2svg"));

var _wsSelected = _interopRequireDefault(require("./ws-selected.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 'w-button';
var validColor = ['blue', 'orange', 'red', 'white', 'black', 'light-gray', 'dark-gray' // 'light-gray', 'light-gray2', 'light-gray3', 'light-gray4',
// 'dark-gray', 'dark-gray2'
];
var validTheme = ['filled', 'outline', 'none', 'twotone', 'outline-filled'];

var WujiButton = /*#__PURE__*/function (_Component) {
  _inherits(WujiButton, _Component);

  var _super = _createSuper(WujiButton);

  function WujiButton() {
    _classCallCheck(this, WujiButton);

    return _super.apply(this, arguments);
  }

  _createClass(WujiButton, [{
    key: "initData",
    value: function initData() {
      return {
        color: 'blue',
        theme: 'filled',
        text: '按钮',
        radius: 'J_X06',
        iconPosition: 'left',
        iconProps: {},
        canBubble: false
      };
    }
  }, {
    key: "handleClick",
    value: function handleClick(event, canBubble) {
      !canBubble && event.stopPropagation();
      var context = this.data.get();
      var disabled = context.disabled,
          loading = context.loading;

      if (!disabled && !loading) {
        this.fire('click', {
          event: event,
          data: context
        });
      }
    }
  }, {
    key: "handleTouch",
    value: function handleTouch(event, eventType, canBubble) {
      !canBubble && event.stopPropagation();
      this.fire(eventType, {
        event: event,
        data: this.data.get()
      });
    }
  }]);

  return WujiButton;
}(_san.Component);

exports["default"] = WujiButton;

_defineProperty(WujiButton, "template",
/* html */
"\n        <div\n            class=\"{{wrapClass}}\"\n            style=\"{{wrapStyle}}\"\n            on-click=\"handleClick($event, canBubble)\"\n            on-touchstart=\"handleTouch($event, 'touchstart', canBubble)\"\n            on-touchmove=\"handleTouch($event, 'touchmove', canBubble)\"\n            on-touchend=\"handleTouch($event, 'touchend', canBubble)\"\n        >\n            <wuji-icon\n                s-if=\"iconProps.name || icon\"\n                s-ref=\"icon\"\n                s-bind=\"iconProps\"\n                class=\"".concat(prefixCls, "-icon\"\n                color=\"{{iconColor}}\"\n                size=\"{{iconSize}}\"\n                type=\"{{icon}}\"\n            />\n            <div s-else class=\"").concat(prefixCls, "-spinner\"/>\n            <div class=\"").concat(prefixCls, "-text\">{{text}}</div>\n            <div s-if=\"showSelected\" class=\"").concat(prefixCls, "-checkmark\">\n                ").concat((0, _symbol2svg["default"])(_wsSelected["default"]), "\n            </div>\n        </div>\n    "));

_defineProperty(WujiButton, "components", {
  'wuji-icon': _wujiIcon["default"]
});

_defineProperty(WujiButton, "dataTypes", {
  canBubble: _san.DataTypes.bool,
  active: _san.DataTypes.bool,
  disabled: _san.DataTypes.bool,
  selected: _san.DataTypes.bool,
  weak: _san.DataTypes.bool,
  color: _san.DataTypes.oneOf(validColor),
  icon: _san.DataTypes.string,
  iconPosition: _san.DataTypes.oneOf(['left', 'right']),
  iconProps: _san.DataTypes.object,
  loading: _san.DataTypes.bool,
  round: _san.DataTypes.bool,
  text: _san.DataTypes.string,
  width: _san.DataTypes.oneOfType([_san.DataTypes.number, _san.DataTypes.string]),
  height: _san.DataTypes.oneOfType([_san.DataTypes.number, _san.DataTypes.string]),
  type: _san.DataTypes.oneOf(validTheme),
  theme: _san.DataTypes.oneOf(validTheme),
  radius: _san.DataTypes.oneOf(['J_X03', 'J_X06', 'J_X08', 'J_X15', 'J_X16', 'J_X23']),
  borderRadius: _san.DataTypes.oneOfType([_san.DataTypes.string, _san.DataTypes.shape({
    tl: _san.DataTypes.bool,
    tr: _san.DataTypes.bool,
    bl: _san.DataTypes.bool,
    br: _san.DataTypes.bool
  })])
});

_defineProperty(WujiButton, "computed", {
  wrapClass: function wrapClass() {
    var data = this.data;
    var active = data.get('active');
    var disabled = data.get('disabled');
    var loading = data.get('loading');
    var weak = data.get('weak');
    var color = data.get('color');
    var height = data.get('height');
    var radius = data.get('radius');
    var round = radius === 'J_X06' || data.get('round');
    var iconProps = data.get('iconProps');
    var icon = iconProps.name || data.get('icon');
    var iconPosition = iconProps.position || data.get('iconPosition');
    var showSelected = data.get('showSelected');
    var theme = data.get('type') || data.get('theme');

    if (weak && theme !== 'none') {
      theme = 'outline';
    } else if (theme === 'outline-filled') {
      theme = 'twotone';
    }

    return [prefixCls, active && "".concat(prefixCls, "-active"), disabled && "".concat(prefixCls, "-disabled"), loading && "".concat(prefixCls, "-loading"), round && "".concat(prefixCls, "-round"), weak && "".concat(prefixCls, "-weak"), radius === 'J_X03' && "".concat(prefixCls, "-jx03"), radius === 'J_X08' && "".concat(prefixCls, "-jx08"), radius === 'J_X15' && "".concat(prefixCls, "-jx15"), radius === 'J_X16' && "".concat(prefixCls, "-jx16"), radius === 'J_X23' && "".concat(prefixCls, "-jx23"), color && "".concat(prefixCls, "-").concat(color), theme && "".concat(prefixCls, "-").concat(theme), height && "".concat(prefixCls, "-h").concat(height), icon && iconPosition && "".concat(prefixCls, "-icon-").concat(iconPosition), showSelected && "".concat(prefixCls, "-selected")].filter(function (c) {
      return c;
    });
  },
  wrapStyle: function wrapStyle() {
    var style = {};
    var data = this.data;
    var width = data.get('width');
    var height = data.get('height');
    var borderRadius = data.get('borderRadius');

    if ((0, _isNumeric["default"])(width)) {
      style.width = "".concat((0, _pr2rem["default"])(width), "rem");
    }

    if ((0, _isNumeric["default"])(height)) {
      style.height = "".concat((0, _pr2rem["default"])(height), "rem");
    }

    if (borderRadius && typeof borderRadius === 'string') {
      style['border-radius'] = borderRadius;
    } else if (borderRadius) {
      if (borderRadius.tl === false) {
        style['border-top-left-radius'] = 0;
      }

      if (borderRadius.tr === false) {
        style['border-top-right-radius'] = 0;
      }

      if (borderRadius.bl === false) {
        style['border-bottom-left-radius'] = 0;
      }

      if (borderRadius.br === false) {
        style['border-bottom-right-radius'] = 0;
      }
    } // 要不要支持颜色编码? 必须是可枚举值


    style.color = data.get('textColor') || '';
    style['background-color'] = data.get('backgroundColor') || ''; // style['border-color'] = data.get('borderColor') || ''; // 伪元素怎么添加颜色?

    return style;
  },
  showSelected: function showSelected() {
    var data = this.data;
    var round = data.get('radius') === 'J_X06' || data.get('round');
    var selected = data.get('selected');
    var theme = data.get('type') || data.get('theme');
    return selected && !round && theme !== 'filled' && theme !== 'none';
  }
});