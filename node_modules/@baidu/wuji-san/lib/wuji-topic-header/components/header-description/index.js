"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

require("./index.less");

var _san = require("san");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 'w-topic-desc-wrapper';

var HeaderDesc = /*#__PURE__*/function (_Component) {
  _inherits(HeaderDesc, _Component);

  var _super = _createSuper(HeaderDesc);

  function HeaderDesc() {
    _classCallCheck(this, HeaderDesc);

    return _super.apply(this, arguments);
  }

  _createClass(HeaderDesc, [{
    key: "initData",
    value: // 这是个可收起展开的简介
    // 是通过不停的减少字符并计算行数来实现的
    function initData() {
      return {
        desc: '',
        fullDesc: '',
        showingDesc: '',
        computedDesc: '',
        shortDesc: '',
        needExpand: false,
        computedEnd: false,
        isExpand: false
      };
    }
  }, {
    key: "updateRow",
    value: function updateRow() {
      var _this = this;

      var interval = setInterval(function () {
        try {
          var descEle = _this.ref('desc');

          var computedStyle = getComputedStyle(descEle);
          var lineHeight = computedStyle.lineHeight,
              height = computedStyle.height;
          lineHeight = lineHeight.replace('px', '');
          height = height.replace('px', '');
          var row = Math.round(+height / +lineHeight);

          var desc = _this.data.get('computedDesc');

          if (row < 3) {
            clearInterval(interval);

            _this.data.set('shortDesc', desc);

            _this.data.set('computedEnd', true);

            _this.data.set('showingDesc', desc);
          } else {
            _this.data.set('needExpand', true);

            _this.data.set('computedDesc', desc.slice(0, desc.length - 1) + '');
          }
        } catch (e) {
          console.log(e);
          clearInterval(interval);
        }
      }, 0);
    }
  }, {
    key: "inited",
    value: function inited() {
      this.data.set('showingDesc', this.data.get('desc'));
    }
  }, {
    key: "attached",
    value: function attached() {
      this.data.set('fullDesc', this.data.get('desc'));
      this.data.set('showingDesc', this.data.get('desc'));
      this.data.set('computedDesc', this.data.get('desc'));
      this.updateRow();
    }
  }, {
    key: "expand",
    value: function expand() {
      var isExpand = this.data.get('isExpand');

      if (isExpand) {
        this.data.set('showingDesc', this.data.get('shortDesc'));
      } else {
        this.data.set('showingDesc', this.data.get('fullDesc'));
      }

      this.data.set('isExpand', !isExpand);
    }
  }]);

  return HeaderDesc;
}(_san.Component);

exports["default"] = HeaderDesc;

_defineProperty(HeaderDesc, "template",
/* html */
"\n        <div class=\"".concat(prefixCls, "\">\n            <div s-if=\"desc\" class=\"header-desc {{finalNeedExpand ? '' : 'ellipse'}}\">\n                <span>{{showingDesc}}</span>\n                <span\n                    s-if=\"finalNeedExpand\"\n                    on-click=\"expand\">\n                    <span s-if=\"!isExpand\">...</span>\n                    <span class=\"{{expandCls}}\">{{expandText}}</span>\n                </span>\n            </div>\n            <div class=\"computed-desc\" s-ref=\"desc\">\n                <span>{{computedDesc}}</span>\n                <span s-if=\"needExpand\">\n                    <span>...</span>\n                    <span>\u5C55\u5F00</span>\n                </span>\n            </div>\n        </div>\n    "));

_defineProperty(HeaderDesc, "trimWhitespace", 'all');

_defineProperty(HeaderDesc, "computed", {
  finalNeedExpand: function finalNeedExpand() {
    return this.data.get('needExpand') && this.data.get('computedEnd');
  },
  expandText: function expandText() {
    return this.data.get('isExpand') ? '收起' : '展开';
  },
  expandCls: function expandCls() {
    var isExpand = this.data.get('isExpand');

    if (isExpand) {
      return 'expand-text space';
    }

    return 'expand-text';
  }
});