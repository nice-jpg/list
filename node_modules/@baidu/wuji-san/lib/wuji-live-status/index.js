"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _san = require("san");

var _wujiIcon = _interopRequireDefault(require("../wuji-icon"));

require("@baidu/wuji-icons/svg/d20-search-o-66.svg");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 'w-live-status';
var validColor = ['red', 'blue', 'gray'];
var tenThousand = 10000;
var hundredMillon = 100000000;

var WujiLiveStatus = /*#__PURE__*/function (_Component) {
  _inherits(WujiLiveStatus, _Component);

  var _super = _createSuper(WujiLiveStatus);

  function WujiLiveStatus() {
    _classCallCheck(this, WujiLiveStatus);

    return _super.apply(this, arguments);
  }

  _createClass(WujiLiveStatus, [{
    key: "initData",
    value: function initData() {
      return {
        isLiving: true,
        statusText: '直播中',
        color: 'red',
        number: 12345,
        numberText: '观看'
      };
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      this.fire('click', {
        event: event
      });
    }
  }]);

  return WujiLiveStatus;
}(_san.Component);

exports["default"] = WujiLiveStatus;

_defineProperty(WujiLiveStatus, "template",
/* html */
"\n        <div class=\"".concat(prefixCls, "-wrap\" on-click=\"handleClick\">\n            <div class=\"{{statusClass}}\">\n                <svg s-if=\"isLiving\" viewBox=\"0 0 33 33\" class=\"").concat(prefixCls, "-live-icon ").concat(prefixCls, "-icon\">\n                    <rect class=\"").concat(prefixCls, "-line ").concat(prefixCls, "-line1\" x=\"0\" y=\"0\" width=\"5\" height=\"14\" rx=\"3\"/>\n                    <rect class=\"").concat(prefixCls, "-line ").concat(prefixCls, "-line2\" x=\"10\" y=\"0\" width=\"5\" height=\"14\" rx=\"3\"/>\n                    <rect class=\"").concat(prefixCls, "-line ").concat(prefixCls, "-line3\" x=\"20\" y=\"0\" width=\"5\" height=\"14\" rx=\"3\"/>\n                </svg>\n                <wuji-icon s-else type=\"{{icon}}\" size=\"33\" class=\"").concat(prefixCls, "-icon\" />\n                <span>{{statusText}}</span>\n            </div>\n            <div s-if=\"num || numberText\" class=\"").concat(prefixCls, "-number\">\n                <span>{{num}}{{numberText}}</span>\n            </div>\n        </div>\n    "));

_defineProperty(WujiLiveStatus, "validColor", validColor);

_defineProperty(WujiLiveStatus, "components", {
  'wuji-icon': _wujiIcon["default"]
});

_defineProperty(WujiLiveStatus, "dataTypes", {
  isLiving: _san.DataTypes.bool,
  statusText: _san.DataTypes.string,
  number: _san.DataTypes.oneOfType([_san.DataTypes.number, _san.DataTypes.string]),
  numberText: _san.DataTypes.string,
  icon: _san.DataTypes.string,
  color: _san.DataTypes.oneOf(validColor)
});

_defineProperty(WujiLiveStatus, "computed", {
  statusClass: function statusClass() {
    var color = this.data.get('color');
    return "".concat(prefixCls, " ").concat(prefixCls, "-").concat(color);
  },
  num: function num() {
    var number = this.data.get('number');
    var text = this.data.get('numberText');

    if (!number) {
      return '';
    }

    if (number < tenThousand) {
      return number + '' + text;
    } // 保留 1 位小数


    var decimalFactor = 10;

    if (number >= tenThousand && number < hundredMillon) {
      var newVal = number / tenThousand;
      return Math.round(newVal * decimalFactor) / decimalFactor + '万';
    }

    if (number >= hundredMillon) {
      var _newVal = number / hundredMillon;

      return Math.round(_newVal * decimalFactor) / decimalFactor + '亿';
    }
  }
});