"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _san = require("san");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 'w-table-covid';

var WujiTableCovid = /*#__PURE__*/function (_Component) {
  _inherits(WujiTableCovid, _Component);

  var _super = _createSuper(WujiTableCovid);

  function WujiTableCovid() {
    _classCallCheck(this, WujiTableCovid);

    return _super.apply(this, arguments);
  }

  _createClass(WujiTableCovid, [{
    key: "initData",
    value: function initData() {
      return {
        data: [],
        type: '1'
      };
    }
  }, {
    key: "getTextClass",
    value: function getTextClass(code) {
      if (!code) {
        return 'x123';
      }

      return code.replace('Txt_', '').toLowerCase();
    }
  }, {
    key: "showColName",
    value: function showColName(item, type, index) {
      if (!item.colName || type === '3') {
        return false;
      }

      if (type === '2' && index > 0) {
        return false;
      }

      return true;
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      this.fire('click', {
        event: event,
        data: this.data.get()
      });
    }
  }]);

  return WujiTableCovid;
}(_san.Component);

exports["default"] = WujiTableCovid;

_defineProperty(WujiTableCovid, "template",
/* html */
"\n        <div class=\"".concat(prefixCls, " table-type-{{type}}\" on-click=\"handleClick\">\n            <div s-if=\"table.showTitle\" class=\"").concat(prefixCls, "-titles\">\n                <div s-for=\"title in table.titles\" class=\"").concat(prefixCls, "-title\">{{title}}</div>\n            </div>\n            <div class=\"").concat(prefixCls, "-lists\">\n                <div s-for=\"list in table.lists\" class=\"").concat(prefixCls, "-list\">\n                    <div s-for=\"item, index in list\" class=\"").concat(prefixCls, "-item\">\n                        <span s-if=\"showColName(item, type, index)\" class=\"name\">{{item.colName}}</span>\n                        <span class=\"text text-{{getTextClass(item.wujiText)}}\">{{item.colText}}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    "));

_defineProperty(WujiTableCovid, "dataTypes", {
  data: _san.DataTypes.array,
  type: _san.DataTypes.oneOf(['1', '2', '3'])
});

_defineProperty(WujiTableCovid, "computed", {
  table: function table() {
    var data = this.data.get('data');
    var table = {
      titles: [],
      lists: [],
      showTitle: true
    };
    data.forEach(function (side) {
      table.titles.push(side.rowName);
      side.colData.forEach(function (item, index) {
        if (table.lists[index]) {
          table.lists[index].push(item);
        } else {
          table.lists.push([item]);
        }
      });
    });

    if (!table.titles.filter(function (c) {
      return c;
    }).length) {
      table.showTitle = false;
    }

    return table;
  }
});