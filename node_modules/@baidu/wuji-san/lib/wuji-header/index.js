"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _san = require("san");

var _wujiIcon = _interopRequireDefault(require("../wuji-icon"));

require("@baidu/wuji-icons/svg/arrow-o-42.svg");

require("@baidu/wuji-icons/svg/dislike-o-36.svg");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 'w-header';

var WujiHeader = /*#__PURE__*/function (_Component) {
  _inherits(WujiHeader, _Component);

  var _super = _createSuper(WujiHeader);

  function WujiHeader() {
    _classCallCheck(this, WujiHeader);

    return _super.apply(this, arguments);
  }

  _createClass(WujiHeader, [{
    key: "initData",
    value: function initData() {
      return {
        arrow: false,
        dislike: false,
        hairline: false,
        helper: '',
        icon: '',
        iconColor: 'red',
        title: '标题',
        subtitle: '',
        iconProps: {}
      };
    }
  }, {
    key: "helperClickHandler",
    value: function helperClickHandler(event) {
      this.fire('helper-click', {
        event: event
      });
    }
  }]);

  return WujiHeader;
}(_san.Component);

exports["default"] = WujiHeader;

_defineProperty(WujiHeader, "template",
/* html */
"\n        <div class=\"".concat(prefixCls, "\">\n            <slot name=\"icon\">\n                <s-icon\n                    s-if=\"icon\"\n                    s-bind=\"{{iconProps}}\"\n                    class=\"").concat(prefixCls, "-icon\"\n                    type=\"{{icon}}\"\n                    color=\"{{iconColor}}\"\n                />\n            </slot>\n            <div class=\"").concat(prefixCls, "-title\">\n                <div class=\"").concat(prefixCls, "-text\"><span>{{title}}</span></div>\n                <div s-if=\"title && subtitle\" class=\"").concat(prefixCls, "-text ").concat(prefixCls, "-subtitle\">\n                    <div class=\"").concat(prefixCls, "-subtitle-line\"/>\n                    <span>{{subtitle}}</span>\n                </div>\n            </div>\n            <slot name=\"helper\">\n                <div class=\"").concat(prefixCls, "-helper\" on-click=\"helperClickHandler\">\n                    <span s-if=\"!dislike && helper\">{{helper}}</span>\n                    <s-icon\n                        s-if=\"helperIcon\"\n                        class=\"").concat(prefixCls, "-helper-icon\"\n                        color=\"{{helperIcon.color}}\"\n                        size=\"{{helperIcon.size}}\"\n                        type=\"{{helperIcon.type}}\"\n                    />\n                </div>\n            </slot>\n            <div s-if=\"hairline\" class=\"").concat(prefixCls, "-hairline\"/>\n        </div>\n    "));

_defineProperty(WujiHeader, "trimWhitespace", 'all');

_defineProperty(WujiHeader, "components", {
  's-icon': _wujiIcon["default"]
});

_defineProperty(WujiHeader, "dataTypes", {
  arrow: _san.DataTypes.bool,
  dislike: _san.DataTypes.bool,
  hairline: _san.DataTypes.bool,
  helper: _san.DataTypes.string,
  icon: _san.DataTypes.string,
  iconColor: _san.DataTypes.string,
  title: _san.DataTypes.string,
  subtitle: _san.DataTypes.string,
  iconProps: _san.DataTypes.object
});

_defineProperty(WujiHeader, "computed", {
  helperIcon: function helperIcon() {
    if (this.data.get('dislike')) {
      return {
        size: 36,
        type: 'dislike-o-36'
      };
    }

    if (this.data.get('arrow')) {
      return {
        type: 'arrow-o-42'
      };
    }
  }
});