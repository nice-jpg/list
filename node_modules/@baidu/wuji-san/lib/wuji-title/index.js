"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _san = require("san");

var _wujiLabel = _interopRequireDefault(require("../wuji-label"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 'w-title';

var WujiTitle = /*#__PURE__*/function (_Component) {
  _inherits(WujiTitle, _Component);

  var _super = _createSuper(WujiTitle);

  function WujiTitle() {
    _classCallCheck(this, WujiTitle);

    return _super.apply(this, arguments);
  }

  _createClass(WujiTitle, [{
    key: "initData",
    value:
    /* bca-disable */
    function initData() {
      return {
        reading: false,
        spacing: true,
        visited: false,
        labelProps: {},
        lineClamp: 2,
        size: 't1',
        text: ''
      };
    }
  }, {
    key: "attached",
    value: function attached() {
      var _this$data$get = this.data.get(),
          lineClamp = _this$data$get.lineClamp,
          label = _this$data$get.label,
          labelProps = _this$data$get.labelProps,
          text = _this$data$get.text;

      var labelText = labelProps.text || label;

      if (lineClamp > 0 && labelText && labelProps.position === 'right') {
        var $text = this.ref('text');
        this.truncate(this.el, $text, text);
      }
    } // 截断最大行数

  }, {
    key: "truncate",
    value: function truncate($wrap, $node, text) {
      if (!$wrap || !$node) {
        return;
      }

      var newText = text;
      var tarHeight = $wrap.offsetHeight;
      this.el.style.webkitLineClamp = 'unset'; // 实际高度大于目标高度+5px容差时，减少字符数

      while ($wrap.offsetHeight > tarHeight + 5) {
        newText = newText.substr(0, newText.length - 2) + '…';
        $node.innerHTML = newText;
      }
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      this.fire('click', {
        event: event,
        data: this.data.get()
      });
    }
  }]);

  return WujiTitle;
}(_san.Component);

exports["default"] = WujiTitle;

_defineProperty(WujiTitle, "template",
/* html */
"\n        <!--bca-disable-->\n        <div class=\"{{wrapClass}}\" style=\"{{wrapStyle}}\" on-click=\"handleClick\">\n            <span\n                s-if=\"labelProps.position === 'right'\"\n                s-ref=\"text\"\n                class=\"".concat(prefixCls, "-text\"\n                s-html=\"{{text}}\"\n            >{{text | raw}}</span>\n            <slot name=\"label\">\n                <wuji-label\n                    s-if=\"labelProps.text || label\"\n                    s-bind=\"labelProps\"\n                    class=\"").concat(prefixCls, "-label\"\n                    text=\"{{labelProps.text || label}}\"\n                    theme=\"{{labelProps.theme || 'filled'}}\"\n                />\n            </slot>\n            <span\n                s-if=\"labelProps.position !== 'right'\"\n                s-ref=\"text\"\n                class=\"").concat(prefixCls, "-text\"\n                s-html=\"{{text}}\"\n            >{{text | raw}}</span>\n        </div>\n        <!--bca-enable-->\n    "));

_defineProperty(WujiTitle, "trimWhitespace", 'all');

_defineProperty(WujiTitle, "components", {
  'wuji-label': _wujiLabel["default"]
});

_defineProperty(WujiTitle, "dataTypes", {
  reading: _san.DataTypes.bool,
  visited: _san.DataTypes.bool,
  label: _san.DataTypes.string,
  labelProps: _san.DataTypes.shape(_wujiLabel["default"].dataTypes),
  lineClamp: _san.DataTypes.oneOf([0, 1, 2, 3]),
  size: _san.DataTypes.oneOf(['t1', 't2', 't3', 't4', 't5', 't6', 't7', 't8']),
  spacing: _san.DataTypes.bool,
  text: _san.DataTypes.string
});

_defineProperty(WujiTitle, "computed", {
  wrapClass: function wrapClass() {
    var data = this.data;
    var reading = data.get('reading');
    var visited = data.get('visited');
    var size = data.get('size');
    var spacing = data.get('spacing');
    return [prefixCls, "".concat(prefixCls, "-font-").concat(size), reading && "".concat(prefixCls, "-reading"), spacing && "".concat(prefixCls, "-spacing"), visited && !reading && "".concat(prefixCls, "-visited")].filter(function (c) {
      return c;
    });
  },
  wrapStyle: function wrapStyle() {
    var lineClamp = parseInt(this.data.get('lineClamp'), 10);
    var value = lineClamp > 0 ? lineClamp : 'unset';
    return "-webkit-line-clamp: ".concat(value, ";");
  }
});