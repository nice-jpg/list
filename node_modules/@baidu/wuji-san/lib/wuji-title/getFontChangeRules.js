"use strict";

/**
 * @file 字号四档方法
 * @author changjialu <changjialu@baidu.com>
 * 1.lheight => 根据不同位置不同的line-height，默认是0 非正文之外的字号 21， 1 正文中line-height 33
 * 2.字号调整规则：ios/andriod两套比例
 *  ios比例 = [0.84, 1, 1.1, 1.21, 1.26];
 *  安卓比例 = [0.82, 1, 1.12, 1.24, 1.41];
 */

/* eslint-disable */
module.exports = {
  // fontStatus 由之前的fontStatus = fSize / 行间距   改为 fontStatus = (fSize+行间距)/fSize;
  install: function install(less, pluginManager, functions) {
    functions.add('applyFont', function () {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          size = _ref.value;

      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          type = _ref2.value;

      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          lineHeightType = _ref3.value;

      var _ref4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
          fontStatus = _ref4.value;

      var _ref5 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {},
          andrioPercent = _ref5.value;

      var _ref6 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {},
          iosPercent = _ref6.value;

      var ratesIos = iosPercent || [0.84, 1, 1.1, 1.21, 1.26];
      var ratesAnd = andrioPercent || [0.82, 1, 1.12, 1.24, 1.41];
      var ruleFontSize;
      var ruleLineHeight;
      var lheight = !lineHeightType ? 21 : 33;
      var fSize;
      var margintTop = '';

      if (type === 'iphone') {
        fSize = size * ratesIos[fontStatus];
        lheight = lineHeightType > 1 ? fSize * lineHeightType : lheight;

        if (fSize >= 69) {
          // 当字号大于69  行高统一设置为固定值;
          var lineheight = lineHeightType > 1 ? 69 * (lineHeightType - 1) : lheight;
          lheight = lineheight + fSize;
        }

        ruleFontSize = less.declaration('font-size', "".concat(fSize, "pr"));
        ruleLineHeight = less.declaration('line-height', "".concat(lheight, "pr"));
        margintTop = less.declaration('margin-top', "-".concat((lheight - fSize) / 2, "pr"));
      } else {
        fSize = size * ratesAnd[fontStatus];
        lheight = lineHeightType > 1 ? fSize * lineHeightType : lheight;

        if (fSize >= 69) {
          // 当字号大于69  行高统一设置为固定值;
          var _lineheight = lineHeightType > 1 ? 69 * (lineHeightType - 1) : lheight;

          lheight = _lineheight + fSize;
        }

        ruleFontSize = less.declaration('font-size', "".concat(fSize, "pr"));
        ruleLineHeight = less.declaration('line-height', "".concat(lheight, "pr"));
        margintTop = less.declaration('margin-top', "-".concat((lheight - fSize) / 2, "pr"));
      }

      return less.detachedruleset(less.ruleset('', [ruleFontSize, ruleLineHeight, margintTop]));
    });
  }
};