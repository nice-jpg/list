"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _san = require("san");

var _isNumeric = _interopRequireDefault(require("../utils/is-numeric"));

var _pr2rem = _interopRequireDefault(require("../utils/pr2rem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 'w-icon';

var WujiIcon = /*#__PURE__*/function (_Component) {
  _inherits(WujiIcon, _Component);

  var _super = _createSuper(WujiIcon);

  function WujiIcon() {
    _classCallCheck(this, WujiIcon);

    return _super.apply(this, arguments);
  }

  _createClass(WujiIcon, [{
    key: "handleClick",
    value: function handleClick(event) {
      this.fire('click', {
        event: event
      });
    }
  }]);

  return WujiIcon;
}(_san.Component);

exports["default"] = WujiIcon;

_defineProperty(WujiIcon, "template",
/* html */
"\n        <svg class=\"{{iconClass}}\" style=\"{{iconStyle}}\" on-click=\"handleClick\">\n            {{use | raw}}\n        </svg>\n    ");

_defineProperty(WujiIcon, "dataTypes", {
  color: _san.DataTypes.string,
  type: _san.DataTypes.string,
  name: _san.DataTypes.string,
  size: _san.DataTypes.oneOfType([_san.DataTypes.number, _san.DataTypes.string, _san.DataTypes.oneOf(['auto', 'half'])])
});

_defineProperty(WujiIcon, "computed", {
  iconClass: function iconClass() {
    var size = this.data.get('size');
    return [prefixCls, size === 'auto' && "".concat(prefixCls, "-auto"), size === 'half' && "".concat(prefixCls, "-half")].filter(function (c) {
      return c;
    });
  },
  iconStyle: function iconStyle() {
    var style = {};
    var color = this.data.get('color');
    var size = this.data.get('size');

    if (color) {
      style.fill = color;
    }

    if ((0, _isNumeric["default"])(size)) {
      var width = "".concat((0, _pr2rem["default"])(size), "rem");
      style.width = style.height = width;
    }

    return style;
  },
  use: function use() {
    var type = this.data.get('type') || this.data.get('name');
    return "<use xlink:href=\"#".concat(type, "\"/>");
  }
});