"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _san = require("san");

var _pr2rem = _interopRequireDefault(require("../utils/pr2rem"));

var _isNumeric = _interopRequireDefault(require("../utils/is-numeric"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 'wuji-progress';

var WujiProgress = /*#__PURE__*/function (_Component) {
  _inherits(WujiProgress, _Component);

  var _super = _createSuper(WujiProgress);

  function WujiProgress() {
    _classCallCheck(this, WujiProgress);

    return _super.apply(this, arguments);
  }

  _createClass(WujiProgress, [{
    key: "getProgressStyle",
    value: function getProgressStyle(width) {
      if ((0, _isNumeric["default"])(width)) {
        return {
          width: "".concat((0, _pr2rem["default"])(width), "rem")
        };
      }
    }
  }, {
    key: "getTrackStyle",
    value: function getTrackStyle(color) {
      if (color) {
        return {
          color: color,
          opacity: 1
        };
      }
    }
  }, {
    key: "format",
    value: function format(percentage) {
      var num = (percentage + '').replace('%', '');

      if (!isNaN(num) && num >= 0 && num <= 100) {
        return {
          width: "".concat(num, "%")
        };
      }
    }
  }, {
    key: "initData",
    value: function initData() {
      return {
        // 进度条宽度
        width: 120,
        // 进度条背景色颜色
        trackColor: '#eeeeee',
        // 进度条颜色和字体颜色
        color: 'red',
        // 进度
        percentage: '50%',
        // 进度条右侧文字
        text: ''
      };
    }
  }]);

  return WujiProgress;
}(_san.Component);

exports["default"] = WujiProgress;

_defineProperty(WujiProgress, "template",
/* html */
"\n        <div class=\"".concat(prefixCls, "-wrap {{color}}\">\n            <div class=\"progress\" style=\"{{getProgressStyle(width)}}\">\n                <svg class=\"track\" style=\"{{getTrackStyle(trackColor)}}\">\n                    <rect width=\"100%\" height=\"100%\"/>\n                </svg>\n                <svg class=\"line\" style=\"{{format(percentage)}}\">\n                    <rect width=\"100%\" height=\"100%\"/>\n                </svg>\n            </div>\n            <div s-if=\"text\" class=\"text\">{{text}}</div>\n        </div>\n    "));

_defineProperty(WujiProgress, "computed", {
  color: function color() {
    var percentage = this.data.get('percentage');
    var num = (percentage + '').replace('%', '');

    if (num <= 20) {
      return 'green';
    } else if (num <= 40) {
      return 'yellow';
    } else if (num <= 60) {
      return 'orange';
    }

    return 'red';
  }
});

_defineProperty(WujiProgress, "dataTypes", {
  foo: _san.DataTypes.any
});