"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _throttle = _interopRequireDefault(require("lodash/throttle"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var instance = null;
/**
 * @class LazyWatch
 * @description 一个监听器，用于监听元素是否显示在视图中，且支持在视图外监听(offset控制)
 * @example
 * LazyWatch.add({ele: document.getElementById('image'), offset: 200})
 */

var LazyWatch = /*#__PURE__*/function () {
  function LazyWatch(props) {
    _classCallCheck(this, LazyWatch);

    this.elements = [];
  }
  /**
   * add
   * @description 添加监听元素，若元素已在视图中会直接触发promise.resolve
   * @param ele {HTMLElement} 被监听元素
   * @param offset {String|Number} 视图外触发偏移量
   * @return {Promise<never>|Promise<any>}
   */


  _createClass(LazyWatch, [{
    key: "add",
    value: function add(_ref) {
      var _this = this;

      var ele = _ref.ele,
          _ref$offset = _ref.offset,
          offset = _ref$offset === void 0 ? 0 : _ref$offset;

      // 检查非空
      if (!ele) {
        return Promise.reject();
      }

      return new Promise(function (resolve, reject) {
        // 若元素已经在监听数组中，不再添加
        if (_this.elements.some(function (element) {
          return element.ele === ele;
        })) {
          console.warn('LazyWatch: ele is watching !', ele);
          reject();
          return;
        } // 若元素已在视图中，直接resolve


        if (_this.checkInView(ele, offset)) {
          resolve();
          return;
        }

        _this.elements.push({
          ele: ele,
          offset: offset,
          resolve: resolve
        });
      });
    }
  }, {
    key: "remove",
    value: function remove(ele) {
      var index = this.elements.indexOf(ele);

      if (index > 0) {
        this.elements.splice(index, 1);
        return true;
      }

      return false;
    }
    /**
     * getViewHeight
     * @description 得到视图高度
     * @return {number}
     */

  }, {
    key: "getViewHeight",
    value: function getViewHeight() {
      return window.innerHeight || document.documentElement.clientHeight || 0;
    }
    /**
     * checkInView
     * @description 检查元素是否在视图中
     * @param element {HTMLElement} 被监听元素
     * @param offset {String|Number} 视图外触发偏移量
     * @return {boolean}
     */

  }, {
    key: "checkInView",
    value: function checkInView(element, offset) {
      // 检查非空
      if (!element) {
        return false;
      }

      var _element$getBoundingC = element.getBoundingClientRect(),
          top = _element$getBoundingC.top,
          bottom = _element$getBoundingC.bottom;

      var viewHeight = this.getViewHeight();
      return top - offset < viewHeight && bottom + offset > 0;
    }
    /**
     * watch
     * @description 遍历查看监听元素是否在视图中，若是存在则触发resolve且从监听数组中去掉这个元素
     */

  }, {
    key: "watch",
    value: function watch() {
      // 从后往前遍历好删数据
      for (var i = this.elements.length - 1; i >= 0; i--) {
        var _this$elements$i = this.elements[i],
            ele = _this$elements$i.ele,
            offset = _this$elements$i.offset,
            resolve = _this$elements$i.resolve;

        if (this.checkInView(ele, offset)) {
          this.elements.splice(i, 1);
          resolve();
        }
      }
    }
    /**
     * initWatch
     * @description 初始化监听列表
     */

  }, {
    key: "initWatch",
    value: function initWatch() {
      window.addEventListener('scroll', (0, _throttle["default"])(this.watch.bind(this), 150));
    }
  }]);

  return LazyWatch;
}(); // 返回一个单例


var _default = function () {
  // 若是没有window对象，则判断不在浏览器环境中直接退出
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) !== 'object') {
    return {};
  }

  if (!instance) {
    instance = new LazyWatch();
    instance.initWatch();
  }

  return instance;
}();

exports["default"] = _default;