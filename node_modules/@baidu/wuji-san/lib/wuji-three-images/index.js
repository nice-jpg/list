"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _san = require("san");

var _wujiGrid = _interopRequireDefault(require("../wuji-grid"));

var _wujiImage = _interopRequireDefault(require("../wuji-image"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 'w-three-images';

var WujiThreeImages = /*#__PURE__*/function (_Component) {
  _inherits(WujiThreeImages, _Component);

  var _super = _createSuper(WujiThreeImages);

  function WujiThreeImages() {
    _classCallCheck(this, WujiThreeImages);

    return _super.apply(this, arguments);
  }

  _createClass(WujiThreeImages, [{
    key: "initData",
    value: function initData() {
      return {
        gutter: 9,
        // M_W_X001
        margin: 51,
        // M_W_X010
        spacing: true,
        imgList: []
      };
    }
  }, {
    key: "inited",
    value: function inited() {
      var data = this.data;
      var labelIcon = data.get('labelIcon');
      var labelText = data.get('labelText');
      var imgList = data.get('imgList');

      if (imgList.length > 3) {
        imgList = imgList.slice(0, 3);
      } else if (imgList.length < 3) {
        var _imgList;

        var more = Array(3 - imgList.length).fill({});

        (_imgList = imgList).splice.apply(_imgList, [imgList.length - 3, 0].concat(_toConsumableArray(more)));
      }

      imgList[0].borderRadius = {
        tr: false,
        br: false
      };
      imgList[1].borderRadius = {
        tl: false,
        tr: false,
        bl: false,
        br: false
      };
      imgList[2].borderRadius = {
        tl: false,
        bl: false
      };

      if (labelIcon || labelText) {
        imgList[2].labelIcon = labelIcon;
        imgList[2].labelText = labelText;
      }

      this.data.set('imgList', imgList);
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      this.fire('click', {
        event: event,
        data: this.data.get()
      });
    }
  }]);

  return WujiThreeImages;
}(_san.Component);

exports["default"] = WujiThreeImages;

_defineProperty(WujiThreeImages, "template",
/* html */
"\n        <div class=\"".concat(prefixCls, "\" on-click=\"handleClick\">\n            <wuji-row gutter=\"{{gutter}}\" margin=\"{{spacing ? margin : 0}}\">\n                <wuji-col\n                    s-for=\"img in imgList\"\n                >\n                    <wuji-img\n                        src=\"{{img.src}}\"\n                        border-radius=\"{{img.borderRadius}}\"\n                        radius=\"{{img.radius}}\"\n                        ratio=\"{{imgRatio}}\"\n                        label-icon=\"{{img.labelIcon}}\"\n                        label-text=\"{{img.labelText}}\"\n                    />\n                </wuji-col>\n            </wuji-row>\n        </div>\n    "));

_defineProperty(WujiThreeImages, "components", {
  'wuji-img': _wujiImage["default"],
  'wuji-col': _wujiGrid["default"].Col,
  'wuji-row': _wujiGrid["default"].Row
});

_defineProperty(WujiThreeImages, "dataTypes", {
  gutter: _san.DataTypes.number,
  margin: _san.DataTypes.number,
  spacing: _san.DataTypes.bool,
  imgList: _san.DataTypes.array,
  imgRatio: _san.DataTypes.oneOf(['1:1', '3:2']),
  labelIcon: _san.DataTypes.string,
  labelText: _san.DataTypes.string
});