"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _san = require("san");

var _pr2rem = _interopRequireDefault(require("../utils/pr2rem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 'w-col';

var Col = /*#__PURE__*/function (_Component) {
  _inherits(Col, _Component);

  var _super = _createSuper(Col);

  function Col() {
    _classCallCheck(this, Col);

    return _super.apply(this, arguments);
  }

  _createClass(Col, [{
    key: "inited",
    value: function inited() {
      var $parent = this.parentComponent;

      if ($parent && $parent.isGridRow) {
        var _$parent$data$get = $parent.data.get(),
            column = _$parent$data$get.column,
            gutter = _$parent$data$get.gutter;

        this.data.set('column', column);
        this.data.set('gutter', gutter);
      }
    }
  }]);

  return Col;
}(_san.Component);

exports["default"] = Col;

_defineProperty(Col, "template",
/* html */
"\n        <div class=\"".concat(prefixCls, "\" style=\"{{colStyle}}\">\n            <slot/>\n        </div>\n    "));

_defineProperty(Col, "dataTypes", {
  span: _san.DataTypes.oneOfType([_san.DataTypes.string, _san.DataTypes.number]),
  offset: _san.DataTypes.oneOfType([_san.DataTypes.string, _san.DataTypes.number])
});

_defineProperty(Col, "computed", {
  colStyle: function colStyle() {
    var style = {};
    var data = this.data;
    var gutter = data.get('gutter');
    var span = data.get('span');
    var offset = data.get('offset');
    var column = data.get('column');

    if (gutter > 0) {
      var padding = "".concat((0, _pr2rem["default"])(gutter / 2), "rem");
      Object.assign(style, {
        'padding-left': padding,
        'padding-right': padding
      });
    }

    if (!span) {
      Object.assign(style, {
        '-webkit-box-flex': 1,
        '-webkit-flex-grow': 1,
        'flex-grow': 1
      });
    } else {
      var width = span / column * 100 + '%';
      Object.assign(style, {
        '-webkit-box-flex': 0,
        '-webkit-flex-grow': 0,
        'flex-grow': 0,
        '-webkit-flex-basis': width,
        'flex-basis': width,
        'max-width': width
      });
    }

    if (offset > 0 && offset < +column) {
      var left = offset / +column * 100 + '%';
      Object.assign(style, {
        'margin-left': left
      });
    }

    return style;
  }
});