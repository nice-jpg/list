/**
 * @file 组件 WujiTitle 无极-标题
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import Label from '../wuji-label';

const prefixCls = 'w-title';

export default class WujiTitle extends Component {
    /* bca-disable */
    static template = /* html */ `
        <!--bca-disable-->
        <div class="{{wrapClass}}" style="{{wrapStyle}}" on-click="handleClick">
            <span
                s-if="labelProps.position === 'right'"
                s-ref="text"
                class="${prefixCls}-text"
                s-html="{{text}}"
            >{{text | raw}}</span>
            <slot name="label">
                <wuji-label
                    s-if="labelProps.text || label"
                    s-bind="labelProps"
                    class="${prefixCls}-label"
                    text="{{labelProps.text || label}}"
                    theme="{{labelProps.theme || 'filled'}}"
                />
            </slot>
            <span
                s-if="labelProps.position !== 'right'"
                s-ref="text"
                class="${prefixCls}-text"
                s-html="{{text}}"
            >{{text | raw}}</span>
        </div>
        <!--bca-enable-->
    `;

    static trimWhitespace = 'all';

    static components = {
        'wuji-label': Label,
    };

    static dataTypes = {
        reading: DataTypes.bool,
        visited: DataTypes.bool,
        label: DataTypes.string,
        labelProps: DataTypes.shape(Label.dataTypes),
        lineClamp: DataTypes.oneOf([
            0,
            1,
            2,
            3,
        ]),
        size: DataTypes.oneOf([
            't1',
            't2',
            't3',
            't4',
            't5',
            't6',
            't7',
            't8',
        ]),
        spacing: DataTypes.bool,
        text: DataTypes.string,
    };

    static computed = {
        wrapClass() {
            const data = this.data;
            const reading = data.get('reading');
            const visited = data.get('visited');
            const size = data.get('size');
            const spacing = data.get('spacing');

            return [
                prefixCls,
                `${prefixCls}-font-${size}`,
                reading && `${prefixCls}-reading`,
                spacing && `${prefixCls}-spacing`,
                visited && !reading && `${prefixCls}-visited`,
            ].filter(c => c);
        },
        wrapStyle() {
            const lineClamp = parseInt(this.data.get('lineClamp'), 10);
            const value = lineClamp > 0 ? lineClamp : 'unset';
            return `-webkit-line-clamp: ${value};`;
        },
    };

    initData() {
        return {
            reading: false,
            spacing: true,
            visited: false,
            labelProps: {},
            lineClamp: 2,
            size: 't1',
            text: '',
        };
    }

    attached() {
        const {lineClamp, label, labelProps, text} = this.data.get();
        const labelText = labelProps.text || label;
        if (lineClamp > 0 && labelText && labelProps.position === 'right') {
            const $text = this.ref('text');
            this.truncate(this.el, $text, text);
        }
    }

    // 截断最大行数
    truncate($wrap, $node, text) {
        if (!$wrap || !$node) {
            return;
        }
        let newText = text;
        let tarHeight = $wrap.offsetHeight;
        this.el.style.webkitLineClamp = 'unset';
        // 实际高度大于目标高度+5px容差时，减少字符数
        while ($wrap.offsetHeight > tarHeight + 5) {
            newText = newText.substr(0, newText.length - 2) + '…';
            $node.innerHTML = newText;
        }
    }

    handleClick(event) {
        this.fire('click', {event, data: this.data.get()});
    }
}
