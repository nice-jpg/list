/**
 * @file 字号四档方法
 * @author changjialu <changjialu@baidu.com>
 * 1.lheight => 根据不同位置不同的line-height，默认是0 非正文之外的字号 21， 1 正文中line-height 33
 * 2.字号调整规则：ios/andriod两套比例
 *  ios比例 = [0.84, 1, 1.1, 1.21, 1.26];
 *  安卓比例 = [0.82, 1, 1.12, 1.24, 1.41];
 */

/* eslint-disable */

module.exports = {
    // fontStatus 由之前的fontStatus = fSize / 行间距   改为 fontStatus = (fSize+行间距)/fSize;
    install: function (less, pluginManager, functions) {
        functions.add('applyFont', function (
            {value: size} = {},
            {value: type} = {},
            {value: lineHeightType} = {},
            {value: fontStatus} = {},
            {value: andrioPercent} = {},
            {value: iosPercent} = {},
        ) {
            let ratesIos = iosPercent || [0.84, 1, 1.1, 1.21, 1.26];
            let ratesAnd = andrioPercent || [0.82, 1, 1.12, 1.24, 1.41];
            let ruleFontSize;
            let ruleLineHeight;
            let lheight = !lineHeightType ? 21 : 33;
            let fSize;
            let margintTop = '';
            if (type === 'iphone') {
                fSize = size * ratesIos[fontStatus];
                lheight = lineHeightType > 1 ? (fSize * lineHeightType) : lheight;
                if (fSize >= 69) {// 当字号大于69  行高统一设置为固定值;
                    let lineheight = lineHeightType > 1 ? 69 * (lineHeightType - 1) : lheight;
                    lheight = lineheight + fSize;
                }
                ruleFontSize = less.declaration('font-size', `${fSize}pr`);
                ruleLineHeight = less.declaration('line-height', `${lheight}pr`);
                margintTop = less.declaration('margin-top', `-${(lheight - fSize) / 2}pr`);
            } else {
                fSize = size * ratesAnd[fontStatus];
                lheight = lineHeightType > 1 ? fSize * lineHeightType : lheight;
                if (fSize >= 69) { // 当字号大于69  行高统一设置为固定值;
                    let lineheight = lineHeightType > 1 ? 69 * (lineHeightType - 1) : lheight;
                    lheight = lineheight + fSize;
                }
                ruleFontSize = less.declaration('font-size', `${fSize}pr`);
                ruleLineHeight = less.declaration('line-height', `${lheight}pr`);
                margintTop = less.declaration('margin-top', `-${(lheight - fSize) / 2}pr`);
            }
            return less.detachedruleset(less.ruleset('', [ruleFontSize, ruleLineHeight, margintTop]));
        });
    }
};
