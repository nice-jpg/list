/**
 * @file 组件 WujiButton 无极-按钮
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import Icon from '../wuji-icon';
import isNumeric from '../utils/is-numeric';
import pr2rem from '../utils/pr2rem';
import symbol2svg from '../utils/symbol2svg';
import SymbolSelected from './ws-selected.svg';

const prefixCls = 'w-button';
const validColor = [
    'blue',
    'orange',
    'red',
    'white',
    'black',
    'light-gray',
    'dark-gray',
    // 'light-gray', 'light-gray2', 'light-gray3', 'light-gray4',
    // 'dark-gray', 'dark-gray2'
];
const validTheme = [
    'filled',
    'outline',
    'none',
    'twotone',
    'outline-filled',
];

export default class WujiButton extends Component {
    static template = /* html */ `
        <div
            class="{{wrapClass}}"
            style="{{wrapStyle}}"
            on-click="handleClick($event, canBubble)"
            on-touchstart="handleTouch($event, 'touchstart', canBubble)"
            on-touchmove="handleTouch($event, 'touchmove', canBubble)"
            on-touchend="handleTouch($event, 'touchend', canBubble)"
        >
            <wuji-icon
                s-if="iconProps.name || icon"
                s-ref="icon"
                s-bind="iconProps"
                class="${prefixCls}-icon"
                color="{{iconColor}}"
                size="{{iconSize}}"
                type="{{icon}}"
            />
            <div s-else class="${prefixCls}-spinner"/>
            <div class="${prefixCls}-text">{{text}}</div>
            <div s-if="showSelected" class="${prefixCls}-checkmark">
                ${symbol2svg(SymbolSelected)}
            </div>
        </div>
    `;

    static components = {
        'wuji-icon': Icon,
    };

    static dataTypes = {
        canBubble: DataTypes.bool,
        active: DataTypes.bool,
        disabled: DataTypes.bool,
        selected: DataTypes.bool,
        weak: DataTypes.bool,
        color: DataTypes.oneOf(validColor),
        icon: DataTypes.string,
        iconPosition: DataTypes.oneOf([
            'left',
            'right',
        ]),
        iconProps: DataTypes.object,
        loading: DataTypes.bool,
        round: DataTypes.bool,
        text: DataTypes.string,
        width: DataTypes.oneOfType([
            DataTypes.number,
            DataTypes.string,
        ]),
        height: DataTypes.oneOfType([
            DataTypes.number,
            DataTypes.string,
        ]),
        type: DataTypes.oneOf(validTheme),
        theme: DataTypes.oneOf(validTheme),
        radius: DataTypes.oneOf([
            'J_X03',
            'J_X06',
            'J_X08',
            'J_X15',
            'J_X16',
            'J_X23',
        ]),
        borderRadius: DataTypes.oneOfType([
            DataTypes.string,
            DataTypes.shape({
                tl: DataTypes.bool,
                tr: DataTypes.bool,
                bl: DataTypes.bool,
                br: DataTypes.bool,
            }),
        ]),
    };

    static computed = {
        wrapClass() {
            const data = this.data;
            const active = data.get('active');
            const disabled = data.get('disabled');
            const loading = data.get('loading');
            const weak = data.get('weak');
            const color = data.get('color');
            const height = data.get('height');
            const radius = data.get('radius');
            const round = radius === 'J_X06' || data.get('round');
            const iconProps = data.get('iconProps');
            const icon = iconProps.name || data.get('icon');
            const iconPosition = iconProps.position || data.get('iconPosition');
            const showSelected = data.get('showSelected');
            let theme = data.get('type') || data.get('theme');
            if (weak && theme !== 'none') {
                theme = 'outline';
            }
            else if (theme === 'outline-filled') {
                theme = 'twotone';
            }

            return [
                prefixCls,
                active && `${prefixCls}-active`,
                disabled && `${prefixCls}-disabled`,
                loading && `${prefixCls}-loading`,
                round && `${prefixCls}-round`,
                weak && `${prefixCls}-weak`,
                radius === 'J_X03' && `${prefixCls}-jx03`,
                radius === 'J_X08' && `${prefixCls}-jx08`,
                radius === 'J_X15' && `${prefixCls}-jx15`,
                radius === 'J_X16' && `${prefixCls}-jx16`,
                radius === 'J_X23' && `${prefixCls}-jx23`,
                color && `${prefixCls}-${color}`,
                theme && `${prefixCls}-${theme}`,
                height && `${prefixCls}-h${height}`,
                icon && iconPosition && `${prefixCls}-icon-${iconPosition}`,
                showSelected && `${prefixCls}-selected`,
            ].filter(c => c);
        },

        wrapStyle() {
            let style = {};
            const data = this.data;
            const width = data.get('width');
            const height = data.get('height');
            const borderRadius = data.get('borderRadius');

            if (isNumeric(width)) {
                style.width = `${pr2rem(width)}rem`;
            }

            if (isNumeric(height)) {
                style.height = `${pr2rem(height)}rem`;
            }

            if (borderRadius && typeof borderRadius === 'string') {
                style['border-radius'] = borderRadius;
            }
            else if (borderRadius) {
                if (borderRadius.tl === false) {
                    style['border-top-left-radius'] = 0;
                }
                if (borderRadius.tr === false) {
                    style['border-top-right-radius'] = 0;
                }
                if (borderRadius.bl === false) {
                    style['border-bottom-left-radius'] = 0;
                }
                if (borderRadius.br === false) {
                    style['border-bottom-right-radius'] = 0;
                }
            }

            // 要不要支持颜色编码? 必须是可枚举值
            style.color = data.get('textColor') || '';
            style['background-color'] = data.get('backgroundColor') || '';
            // style['border-color'] = data.get('borderColor') || ''; // 伪元素怎么添加颜色?

            return style;
        },

        showSelected() {
            const data = this.data;
            const round = data.get('radius') === 'J_X06' || data.get('round');
            const selected = data.get('selected');
            const theme = data.get('type') || data.get('theme');
            return selected && !round && theme !== 'filled' && theme !== 'none';
        },
    };

    initData() {
        return {
            color: 'blue',
            theme: 'filled',
            text: '按钮',
            radius: 'J_X06',
            iconPosition: 'left',
            iconProps: {},
            canBubble: false,
        };
    }

    handleClick(event, canBubble) {
        !canBubble && event.stopPropagation();
        const context = this.data.get();
        const {disabled, loading} = context;

        if (!disabled && !loading) {
            this.fire('click', {event, data: context});
        }
    }

    handleTouch(event, eventType, canBubble) {
        !canBubble && event.stopPropagation();
        this.fire(eventType, {event, data: this.data.get()});
    }
}
