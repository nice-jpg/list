/**
 * @file 组件 WujiLabel 无极-标签
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import Icon from '../wuji-icon';

const prefixCls = 'w-label';
const validColor = [
    'red',
    'yellow',
    'orange',
    'blue',
    'green',
    'black',
    'gray',
    'light-gray',
    'purple',
    'white',
    'pink',
];
const validH = [
    42,
    48,
    51,
    54,
    57,
    60,
];
const validW = [
    'K1',
    'K2',
    'K3',
    'K4',
    'K5',
    'K6',
    'K7',
    'K8',
    'K9',
    'K10',
    'K11',
    'K14',
    'K17',
    'K18',
];
const validTheme = [
    'filled',
    'outline',
    'outline-filled',
    'twotone',
    'ext1',
    'ext2',
];

export default class WujiLabel extends Component {
    static template = /* html */ `
        <div class="{{wrapClass}}" on-click="handleClick">
            <div s-if="iconProps.name || icon" class="${prefixCls}-icon">
                <slot name="icon">
                    <wuji-icon s-bind="iconProps" type="{{icon}}" size="auto"/>
                </slot>
            </div>
            <div s-if="text && text2" class="${prefixCls}-text-wrap">
                <div class="${prefixCls}-text text1">
                    <span>{{text}}</span>
                </div>
                <div class="${prefixCls}-line"/>
                <div class="${prefixCls}-text text2">
                    <span>{{text2}}</span>
                </div>
            </div>
            <div s-elif="text" class="${prefixCls}-text">
                <span s-if="prefixText" class="prefix-text">{{prefixText}}</span>
                <span>{{text}}</span>
            </div>
        </div>
    `;

    static validColor = validColor;

    static validH = validH;

    static validW = validW;

    static components = {
        'wuji-icon': Icon,
    };

    static dataTypes = {
        color: DataTypes.oneOf(validColor),
        icon: DataTypes.string,
        h: DataTypes.oneOfType([
            DataTypes.number,
            DataTypes.string,
        ]),
        w: DataTypes.oneOf(validW),
        radius: DataTypes.oneOf([
            'J_X06',
            'J_X11',
            'J_X16',
            'J_X25',
        ]),
        round: DataTypes.bool,
        text: DataTypes.string,
        type: DataTypes.oneOf(validTheme),
        theme: DataTypes.oneOf(validTheme),
        inherit: DataTypes.bool,
    };

    static computed = {
        wrapClass() {
            const data = this.data;
            const color = data.get('color');
            const radius = data.get('radius');
            const round = radius === 'J_X06' || data.get('round');
            const theme = data.get('type') || data.get('theme');
            const h = data.get('h');
            const w = data.get('w').toLowerCase();
            const inherit = data.get('inherit');

            return [
                prefixCls,
                color && `${prefixCls}-${color}`,
                round && `${prefixCls}-round`,
                inherit && `${prefixCls}-inherit`,
                radius === 'J_X11' && `${prefixCls}-jx11`,
                radius === 'J_X16' && `${prefixCls}-jx16`,
                radius === 'J_X25' && `${prefixCls}-jx25`,
                h && `${prefixCls}-h${h}`,
                w && `${prefixCls}-${w}`,
                `${prefixCls}-${theme}`,
            ].filter(c => c);
        },
    };

    initData() {
        return {
            color: 'red',
            icon: '',
            iconProps: {},
            h: 57,
            w: 'K4',
            round: true,
            text: '标签',
            text2: '',
            theme: 'outline',
        };
    }

    handleClick(event) {
        this.fire('click', {event});
    }
}
