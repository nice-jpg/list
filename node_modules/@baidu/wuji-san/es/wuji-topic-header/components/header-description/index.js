/**
 * @file 组件描述信息
 * @author xiewenbo01 <xiewenbo01@baidu.com>
 */
import './index.less';
import {Component} from 'san';
const prefixCls = 'w-topic-desc-wrapper';
export default class HeaderDesc extends Component {
    // 这是个可收起展开的简介
    // 是通过不停的减少字符并计算行数来实现的
    static template = /* html */ `
        <div class="${prefixCls}">
            <div s-if="desc" class="header-desc {{finalNeedExpand ? '' : 'ellipse'}}">
                <span>{{showingDesc}}</span>
                <span
                    s-if="finalNeedExpand"
                    on-click="expand">
                    <span s-if="!isExpand">...</span>
                    <span class="{{expandCls}}">{{expandText}}</span>
                </span>
            </div>
            <div class="computed-desc" s-ref="desc">
                <span>{{computedDesc}}</span>
                <span s-if="needExpand">
                    <span>...</span>
                    <span>展开</span>
                </span>
            </div>
        </div>
    `;

    static trimWhitespace = 'all';

    static computed = {
        finalNeedExpand() {
            return this.data.get('needExpand') && this.data.get('computedEnd');
        },
        expandText() {
            return this.data.get('isExpand') ? '收起' : '展开';
        },
        expandCls() {
            const isExpand = this.data.get('isExpand');

            if (isExpand) {
                return 'expand-text space';
            }

            return 'expand-text';
        },
    };

    initData() {
        return {
            desc: '',
            fullDesc: '',
            showingDesc: '',
            computedDesc: '',
            shortDesc: '',
            needExpand: false,
            computedEnd: false,
            isExpand: false,
        };
    }

    updateRow() {
        let interval = setInterval(() => {
            try {
                const descEle = this.ref('desc');
                const computedStyle = getComputedStyle(descEle);
                let {lineHeight, height} = computedStyle;
                lineHeight = lineHeight.replace('px', '');
                height = height.replace('px', '');
                const row = Math.round(+height / +lineHeight);
                const desc = this.data.get('computedDesc');

                if (row < 3) {
                    clearInterval(interval);
                    this.data.set('shortDesc', desc);
                    this.data.set('computedEnd', true);
                    this.data.set('showingDesc', desc);
                }
                else {
                    this.data.set('needExpand', true);
                    this.data.set('computedDesc', desc.slice(0, desc.length - 1) + '');
                }
            }
            catch (e) {
                console.log(e);
                clearInterval(interval);
            }
        }, 0);
    }

    inited() {
        this.data.set('showingDesc', this.data.get('desc'));
    }

    attached() {
        this.data.set('fullDesc', this.data.get('desc'));
        this.data.set('showingDesc', this.data.get('desc'));
        this.data.set('computedDesc', this.data.get('desc'));
        this.updateRow();
    }

    expand() {
        let isExpand = this.data.get('isExpand');

        if (isExpand) {
            this.data.set('showingDesc', this.data.get('shortDesc'));
        }
        else {
            this.data.set('showingDesc', this.data.get('fullDesc'));
        }
        this.data.set('isExpand', !isExpand);
    }
}
