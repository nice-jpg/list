/**
 * @file 组件 WujiImage 无极-图片
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import Icon from '../wuji-icon';
import Label from '../wuji-label';
import LiveStatus from '../wuji-live-status';
import isNumeric from '../utils/is-numeric';
import pr2rem from '../utils/pr2rem';
import '@baidu/wuji-icons/svg/defaultpic-logo-87.svg';
import LazyWatch from '../utils/lazy-watch';

const prefixCls = 'w-image';

export default class WujiImage extends Component {
    static template = /* html */ `
        <div
            class="{{wrapClass}}"
            style="{{wrapStyle}}"
            on-click="handleClick"
            on-touchstart="handleTouch($event, 'touchstart')"
            on-touchmove="handleTouch($event, 'touchmove')"
            on-touchend="handleTouch($event, 'touchend')"
        >
            <div s-if="showDefault" class="${prefixCls}-default">
                <wuji-icon
                    s-if="defaultIcon !== false && defaultIconSize !== 0"
                    class="${prefixCls}-default-icon"
                    type="{{defaultIcon || 'defaultpic-logo-87'}}"
                    size="{{defaultIconSize}}"
                />
            </div>
            <div class="${prefixCls}" style="{{imgStyle}}">
                <img s-if="userSelect && src" src="{{imgSrc}}" class="${prefixCls}-raw"/>
            </div>
            <div class="${prefixCls}-mask" on-click="handleMaskClick">
                <slot name="mask">
                    <wuji-icon
                        s-if="maskIcon"
                        class="${prefixCls}-mask-icon"
                        type="{{maskIcon}}"
                        size="{{maskIconSize}}"
                    />
                </slot>
            </div>
            <div s-if="liveStatusProps" class="${prefixCls}-live-status">
                <wuji-live-status s-bind="liveStatusProps" />
            </div>
            <div class="${prefixCls}-label" on-click="handleLabelClick">
                <wuji-label
                    s-if="labelText"
                    icon="{{labelIcon}}"
                    prefix-text="{{prefixText}}"
                    text="{{labelText}}"
                    color="gray"
                    theme="filled"
                    h="54"
                    w="{{labelIcon ? 'K17' : 'K18'}}"
                />
            </div>
        </div>
    `;

    static components = {
        'wuji-icon': Icon,
        'wuji-label': Label,
        'wuji-live-status': LiveStatus,
    };

    static dataTypes = {
        backgroundSize: DataTypes.oneOf([
            'cover',
            'contain',
            'fill',
        ]),
        banner: DataTypes.bool,
        defaultIcon: DataTypes.string,
        defaultIconSize: DataTypes.oneOf([
            0,
            66,
            87,
            'half',
        ]),
        labelIcon: DataTypes.string,
        prefixText: DataTypes.string,
        labelText: DataTypes.string,
        maskIcon: DataTypes.string,
        maskIconSize: DataTypes.oneOf([
            84,
            144,
            156,
        ]),
        round: DataTypes.bool,
        src: DataTypes.string,
        ratio: DataTypes.oneOf([
            '1:1',
            '3:1',
            '3:2',
            '3:4',
            '4:3',
            '5:1',
            '5:2',
            '9:16',
            '16:9',
            'auto',
        ]),
        ratioValue: DataTypes.oneOfType([
            DataTypes.number,
            DataTypes.string,
        ]),
        radius: DataTypes.oneOf([
            'J_X02',
            'J_X03',
            'J_X06',
            'J_X07',
            'J_X10',
            'J_X15',
            'J_X17',
            'J_X18',
            'J_X19',
            'J_X21',
            'J_X22',
        ]),
        width: DataTypes.number,
        height: DataTypes.number,
        borderRadius: DataTypes.oneOfType([
            DataTypes.string,
            DataTypes.shape({
                tl: DataTypes.bool,
                tr: DataTypes.bool,
                bl: DataTypes.bool,
                br: DataTypes.bool,
            }),
        ]),
        lazy: DataTypes.bool,
        lazyOffset: DataTypes.number,
        userSelect: DataTypes.bool,
        showDefault: DataTypes.bool,
        liveStatusProps: DataTypes.object,
    };

    static computed = {
        wrapClass() {
            const data = this.data;
            const radius = data.get('radius');
            const banner = radius === 'J_X07' || data.get('banner');
            const round = radius === 'J_X06' || data.get('round');

            return [
                `${prefixCls}-wrap`,
                banner && `${prefixCls}-banner`,
                !banner && round && `${prefixCls}-round`,
                radius === 'J_X03' && `${prefixCls}-jx03`,
                radius === 'J_X10' && `${prefixCls}-jx10`,
                radius === 'J_X15' && `${prefixCls}-jx15`,
                radius === 'J_X17' && `${prefixCls}-jx17`,
                radius === 'J_X18' && `${prefixCls}-jx18`,
                radius === 'J_X19' && `${prefixCls}-jx19`,
                radius === 'J_X21' && `${prefixCls}-jx21`,
                radius === 'J_X22' && `${prefixCls}-jx22`,
            ].filter(c => c);
        },
        wrapStyle() {
            let style = {};
            const data = this.data;
            const borderRadius = data.get('borderRadius');
            const ratio = data.get('ratio');
            const ratioValue = data.get('ratioValue');
            const width = data.get('width');
            const height = data.get('height');

            if (isNumeric(width) && width > 0) {
                style.width = `${pr2rem(width)}rem`;
            }

            if (isNumeric(height) && height > 0) {
                style.height = `${pr2rem(height)}rem`;
            }
            else if (ratioValue === undefined && ratio === 'auto') {
                style.height = '100%';
            }

            if (borderRadius && typeof borderRadius === 'string') {
                style['border-radius'] = borderRadius;
            }
            else if (borderRadius) {
                if (borderRadius.tl === false) {
                    style['border-top-left-radius'] = 0;
                }
                if (borderRadius.tr === false) {
                    style['border-top-right-radius'] = 0;
                }
                if (borderRadius.bl === false) {
                    style['border-bottom-left-radius'] = 0;
                }
                if (borderRadius.br === false) {
                    style['border-bottom-right-radius'] = 0;
                }
            }

            return style;
        },
        imgStyle() {
            let style = {};
            const data = this.data;
            const height = data.get('height');
            const ratio = data.get('ratio');
            const ratioValue = data.get('ratioValue');
            const lazy = data.get('lazy');
            const imgSrc = lazy ? data.get('imgSrc') : data.get('src');
            const backgroundSize = data.get('backgroundSize');

            if ((isNumeric(height) && height > 0) || !ratio || ratio === 'auto') {
                style.height = '100%';
                style['padding-top'] = 0;
            }
            else if (isNumeric(ratioValue) && ratioValue > 0) {
                style['padding-top'] = `${(100 / ratioValue).toFixed(2)}%`;
            }
            else {
                const v = ratio.split(':');
                style['padding-top'] = `${(v[1] / v[0]) * 100}%`;
            }

            if (imgSrc) {
                style['background-image'] = `url(${imgSrc})`;
            }

            if (backgroundSize) {
                style['background-size'] = backgroundSize === 'fill' ? '100% 100%' : backgroundSize;
            }

            return style;
        },
    };

    initData() {
        return {
            banner: false,
            defaultIconSize: 87,
            labelIcon: '',
            prefixText: '',
            labelText: '',
            maskIcon: '',
            ratio: '3:2',
            round: false,
            src: '',
            userSelect: false,
            showDefault: true,
            imgSrc: '',
            lazy: false,
            lazyOffset: 0,
        };
    }

    attached() {
        let oldSrc = this.data.get('src');
        this.initLazyWatch();
        this.loadImage(oldSrc);
        this.watch('src', newSrc => {
            if (oldSrc !== newSrc) {
                this.initLazyWatch();
                this.loadImage(newSrc);
            }
        });
    }

    loadImage(src) {
        if (!src) {
            return;
        }
        const img = new Image();
        img.src = src;
        img.onerror = error =>
            this.fire('error', {
                event: error,
                data: this.data.get(),
            });
    }

    initLazyWatch() {
        const wrapper = this.el;
        const lazy = this.data.get('lazy');
        const src = this.data.get('src');
        if (!src) {
            return;
        }
        if (lazy) {
            wrapper
                && LazyWatch.add({
                    ele: wrapper,
                    offset: this.data.get('lazyOffset'),
                }).then(_ => {
                    this.data.set('imgSrc', this.data.get('src'));
                });
        }
        else {
            this.data.set('imgSrc', this.data.get('src'));
        }
    }

    handleClick(event) {
        this.fire('click', {event});
    }

    handleMaskClick(event) {
        this.fire('mask-click', {event});
    }

    handleLabelClick(event) {
        this.fire('label-click', {event});
    }

    handleTouch(event, eventType) {
        event.stopPropagation();
        this.fire(eventType, {event, data: this.data.get()});
    }

    detached() {
        // 在detach时去掉元素的监听
        LazyWatch.remove(this.el);
    }
}
