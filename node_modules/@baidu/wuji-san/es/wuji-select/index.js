/**
 * @file 组件 WujiSelect 无极-下拉框
 * @author yangmei03 <yangmei03@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import Icon from '../wuji-icon';
import Popup from '../wuji-popup';

import '@baidu/wuji-icons/svg/arrow-unfold-o-48.svg';
import '@baidu/wuji-icons/svg/arrow-fold-o-48.svg';

const prefixCls = 'w-select';

export default class WujiSelect extends Component {
    static template = /* html */ `
        <div class="${prefixCls}-wrap">
            <div class="${prefixCls}-box" on-click="handleClick">
                <span s-if="label" class="${prefixCls}-text">{{label}}</span>
                <div class="${prefixCls}-content">
                    <span
                        s-if="!value && showPlaceholder"
                        class="${prefixCls}-placeholder"
                    >{{placeholder}}</span>
                    <span
                        s-if="value"
                        class="${prefixCls}-select"
                    >{{getText}}</span>
                </div>
                <span class="${prefixCls}-icon">
                    <wuji-icon type="{{icon}}"/>
                </span>
            </div>
        </div>
    `;

    static components = {
        'wuji-icon': Icon,
        'wuji-popup': Popup,
    };

    static dataTypes = {
        value: DataTypes.string,
        showMenu: DataTypes.bool,
        showPlaceholder: DataTypes.bool,
    };

    static computed = {
        icon() {
            return this.data.get('showMenu') ? 'arrow-fold-o-48' : 'arrow-unfold-o-48';
        },
        getText() {
            const options = this.data.get('options') || [];
            if (options.length) {
                const selected = options.findIndex(item => {
                    return item.value === this.data.get('value');
                });
                return options[selected].text;
            }
            return this.data.get('value');
        },
    };

    initData() {
        return {
            selectText: '',
            showMenu: false,
            showPlaceholder: true,
            isOpen: false,
        };
    }

    handleClick(event) {
        this.data.set('showMenu', !this.data.get('showMenu'));
        this.fire('click', {event});
    }
}
