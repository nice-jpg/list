/**
 * @file lazy-watch
 * @author leizhihao <leizhihao@baidu.com>
 */
import throttle from 'lodash/throttle';

let instance = null;

/**
 * @class LazyWatch
 * @description 一个监听器，用于监听元素是否显示在视图中，且支持在视图外监听(offset控制)
 * @example
 * LazyWatch.add({ele: document.getElementById('image'), offset: 200})
 */
class LazyWatch {
    constructor(props) {
        this.elements = [];
    }

    /**
     * add
     * @description 添加监听元素，若元素已在视图中会直接触发promise.resolve
     * @param ele {HTMLElement} 被监听元素
     * @param offset {String|Number} 视图外触发偏移量
     * @return {Promise<never>|Promise<any>}
     */
    add({ele, offset = 0}) {
        // 检查非空
        if (!ele) {
            return Promise.reject();
        }
        return new Promise((resolve, reject) => {
            // 若元素已经在监听数组中，不再添加
            if (this.elements.some(element => element.ele === ele)) {
                console.warn('LazyWatch: ele is watching !', ele);
                reject();
                return;
            }
            // 若元素已在视图中，直接resolve
            if (this.checkInView(ele, offset)) {
                resolve();
                return;
            }
            this.elements.push({
                ele,
                offset,
                resolve,
            });
        });
    }

    remove(ele) {
        const index = this.elements.indexOf(ele);
        if (index > 0) {
            this.elements.splice(index, 1);
            return true;
        }
        return false;
    }

    /**
     * getViewHeight
     * @description 得到视图高度
     * @return {number}
     */
    getViewHeight() {
        return window.innerHeight || document.documentElement.clientHeight || 0;
    }

    /**
     * checkInView
     * @description 检查元素是否在视图中
     * @param element {HTMLElement} 被监听元素
     * @param offset {String|Number} 视图外触发偏移量
     * @return {boolean}
     */
    checkInView(element, offset) {
        // 检查非空
        if (!element) {
            return false;
        }
        const {top, bottom} = element.getBoundingClientRect();
        const viewHeight = this.getViewHeight();
        return top - offset < viewHeight && bottom + offset > 0;
    }

    /**
     * watch
     * @description 遍历查看监听元素是否在视图中，若是存在则触发resolve且从监听数组中去掉这个元素
     */
    watch() {
        // 从后往前遍历好删数据
        for (let i = this.elements.length - 1; i >= 0; i--) {
            let {ele, offset, resolve} = this.elements[i];
            if (this.checkInView(ele, offset)) {
                this.elements.splice(i, 1);
                resolve();
            }
        }
    }

    /**
     * initWatch
     * @description 初始化监听列表
     */
    initWatch() {
        window.addEventListener('scroll', throttle(this.watch.bind(this), 150));
    }
}

// 返回一个单例
export default (() => {
    // 若是没有window对象，则判断不在浏览器环境中直接退出
    if (typeof window !== 'object') {
        return {};
    }
    if (!instance) {
        instance = new LazyWatch();
        instance.initWatch();
    }
    return instance;
})();
