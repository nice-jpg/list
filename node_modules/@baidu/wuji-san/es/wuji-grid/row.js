/**
 * @file 组件 WujiGrid/row 栅格/行
 * @author baozhixin <baozhixin@baidu.com>
 *
 * 栅格规范:
 * 大栅格12N, 栅格间距: 9 或 24
 * 小栅格24n, 栅格间距: 6
 */

import {Component, DataTypes} from 'san';
import pr2rem from '../utils/pr2rem';

const prefixCls = 'w-row';

export default class Row extends Component {
    static template = /* html */ `
        <div
            class="{{mayRoot ? '${prefixCls}-root' : rowClass}}"
            style="{{!mayRoot && rowStyle}}"
            on-scroll="handleScroll"
        >
            <div s-if="mayRoot" class="{{rowClass}}" style="{{rowStyle}}" on-scroll="handleScroll">
                <slot/>
            </div>
            <slot s-else/>
        </div>
    `;

    static dataTypes = {
        column: DataTypes.oneOf([
            12,
            24,
            '12',
            '24',
        ]),
        margin: DataTypes.oneOfType([
            DataTypes.string,
            DataTypes.number,
        ]),
        padding: DataTypes.oneOfType([
            DataTypes.string,
            DataTypes.number,
        ]),
        gutter: DataTypes.oneOfType([
            DataTypes.string,
            DataTypes.number,
        ]),
        align: DataTypes.oneOf([
            'baseline',
            'center',
            'flex-start',
            'flex-end',
            'stretch',
        ]),
        justify: DataTypes.oneOf([
            'center',
            'flex-start',
            'flex-end',
            'space-between',
            'space-around',
            'space-evenly',
        ]),
        wrap: DataTypes.bool,
        scrollable: DataTypes.bool,
    };

    static computed = {
        rowClass() {
            const data = this.data;
            const align = data.get('align').replace(/(flex|space)-/, '');
            const justify = data.get('justify').replace(/(flex|space)-/, '');
            const column = +data.get('column');
            const wrap = data.get('wrap');
            const scrollable = data.get('scrollable');

            return [
                prefixCls,
                align && `${prefixCls}-align-${align}`,
                justify && `${prefixCls}-justify-${justify}`,
                scrollable && `${prefixCls}-scrollable`,
                !scrollable && wrap && `${prefixCls}-wrap`,
                column === 24 && `${prefixCls}-24n`,
            ].filter(c => c);
        },

        rowStyle() {
            let style = {};
            const data = this.data;
            const scrollable = data.get('scrollable');
            const baseMargin = scrollable ? 0 : data.get('margin');
            const basePadding = scrollable ? 51 : data.get('padding');
            const gutter = data.get('gutter');
            const margin = pr2rem(baseMargin - gutter / 2);
            const padding = pr2rem(basePadding);

            if (margin !== 0) {
                style.margin = `0 ${margin}rem`;
            }

            if (padding > 0) {
                style.padding = `0 ${padding}rem`;
            }

            return style;
        },

        mayRoot() {
            const data = this.data;
            const margin = data.get('margin');
            const gutter = data.get('gutter');
            const scrollable = data.get('scrollable');
            return scrollable || (gutter && margin < gutter / 2);
        },
    };

    inited() {
        this.isGridRow = true;
    }

    initData() {
        return {
            column: 12,
            gutter: 24,
            margin: 51,
            padding: 0,
            align: 'stretch',
            justify: 'flex-start',
            wrap: false,
        };
    }

    handleScroll(event) {
        this.fire('scroll', {event});
    }
}
