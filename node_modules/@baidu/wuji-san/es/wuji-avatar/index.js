/**
 * @file 组件 WujiAvatar 无极-头像
 * @author baozhixin <baozhixin@baidu.com>
 *
 * Mark: vip加入图标库/飘红点/挂件
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import Icon from '../wuji-icon';
import isNumeric from '../utils/is-numeric';
import pr2rem from '../utils/pr2rem';
import '@baidu/wuji-icons/svg/defaultpic-logo-87.svg';

const prefixCls = 'w-avatar';

export default class Avatar extends Component {
    static template = /* html */ `
        <div class="{{wrapClass}}" style="{{wrapStyle}}">
            <div class="${prefixCls}-default">
                <wuji-icon
                    type="{{defaultIcon || 'defaultpic-logo-87'}}"
                    size="{{defaultIconSize}}"
                />
            </div>
            <img s-if="src" class="${prefixCls}-img" src="{{src}}" alt="{{alt}}" on-error="handleError"/>
            <div s-if="showVip" class="{{vipClass}}"/>
        </div>
    `;

    static components = {
        'wuji-icon': Icon,
    };

    static dataTypes = {
        defaultIcon: DataTypes.string,
        hairline: DataTypes.bool,
        size: DataTypes.oneOfType([
            DataTypes.number,
            DataTypes.string,
        ]),
        src: DataTypes.string,
        vip: DataTypes.oneOf([
            '0',
            '1',
            '2',
            '3',
            '10',
            'swan',
        ]),
        motion: DataTypes.bool,
        borderWidth: DataTypes.oneOf([
            1,
            3,
        ]),
        borderColor: DataTypes.oneOf([
            'FC18',
            'FC107',
        ]),
    };

    static computed = {
        wrapClass() {
            const hairline = this.data.get('hairline');
            const borderWidth = this.data.get('borderWidth');
            const borderColor = this.data.get('borderColor').toLocaleLowerCase();
            // 自定义描边的权重大于hairline
            if (borderWidth) {
                return [
                    prefixCls,
                    `${prefixCls}-hairline-${borderWidth}-${borderColor}`,
                ];
            }

            return [
                prefixCls,
                hairline && `${prefixCls}-hairline`,
            ].filter(c => c);
        },

        wrapStyle() {
            let ret = {};
            const size = this.data.get('size');
            if (isNumeric(size)) {
                const width = `${pr2rem(size)}rem`;
                ret = {
                    width,
                    height: width,
                };
            }
            return ret;
        },

        showVip() {
            const size = this.data.get('size');
            const vip = this.data.get('vip');
            if (vip && vip !== '0' && size >= 66) {
                return true;
            }
        },

        vipClass() {
            const size = this.data.get('size');
            const vip = this.data.get('vip');
            const motion = this.data.get('motion');
            let vipSize;
            switch (true) {
                case size > 170:
                    vipSize = 'lg';
                    break;
                case size > 156:
                    vipSize = 'md';
                    break;
                case size > 84:
                    vipSize = 'sm';
                    break;
                default:
                    vipSize = 'xs';
                    break;
            }
            return [
                `${prefixCls}-vip`,
                `vip-${vip}`,
                motion && 'motion',
                vipSize && `vip-${vipSize}`,
            ].filter(c => c);
        },

        defaultIconSize() {
            let defaultIconSize = 'half';
            const size = this.data.get('size');
            if (size > 129) {
                defaultIconSize = 87;
            }
            else if (size === 129) {
                defaultIconSize = 66;
            }
            return defaultIconSize;
        },
    };

    initData() {
        return {
            hairline: true,
            size: 129,
            src: '',
            vip: '0',
            motion: false,
            borderColor: 'FC18',
        };
    }

    handleError(error) {
        error.target.style.visibility = 'hidden';
        this.fire('error', {error});
    }
}
