/**
 * @file index.ts
 * @author gaohong01
 */

import {Component} from 'san';
import styles from './style.module.less';
import {AucDanmakuData} from './types';
import FsDanmakuHMo,
    {PULISHER_DANMAKU_H_MO_AROUSE, 
    PUBLISH_DANMAKU_H_MO_ERROR,
    PUBLISH_DANMAKU_H_MO_SUCCESS,
    CLICK_DANMAKU_H_ITEM_MO,
} from '@baidu/fs-danmaku-h-mo';
import MoMeme from '@baidu/fs-meme';
import {jsonToHump} from '@baidu/auc-base/jsonToHump';
import {jump} from '@baidu/auc-base/jump';
import boxx from '@baidu/auc-base/boxx';
import {componentLog, danmakuLog} from '@baidu/auc-log';
import {env} from '@baidu/auc-base/env';
import {machiningColor} from '@baidu/auc-base/utils';

// 日志参数
const logExt = {
    from: 'express',
    source: 'zhuanti'
};
export class AucDanmaku extends Component {
    static template:string = /* html */ `
    <div
        class="{{wrapperClass}}"
        style="{{danmakuOut}}">
        <div
            class="{{styles.wrapperInner}}"
            style="{{danmakuIn}}"
        >
            <fs-meme
                s-if="attitude_display"
                class="{{styles.meme}} {{!comment_display ? styles.memenomb : ''}}"
                attitude_id="{{attitude_id}}"
                sData="{{sData}}"
                moreUrl="{{moreUrl}}"
                title="{{title}}"
                desc="{{desc}}"
                hasDesc="{{true}}"
                color="{{titleColor}}"
                descColor="{{descColor}}"
                titleImage="{{titlePic}}"
                attitude_conf="{{memeList}}"
                attitude_status="{{attitudeStatus}}"
                attitude_total="{{attitudeTotal}}"
                gifAnimation="{{gifAnimation}}"
            >
            </fs-meme>
            <fs-meme
                s-if="!attitude_display && comment_display"
                class="{{styles.meme}} {{styles.memenomb}}"
                title="{{title}}"
            >
            </fs-meme>
            <fs-danmaku
                s-if="comment_display"
                list="{{comment_list}}"
                class="{{styles.danmaku}}"
                sourceData="{{{
                    source: source,
                    appid: appid,
                    threadid: thread_id
                }}}"
                publisherBtnStyle="{{barrage}}"
                commentTip="{{comment_tip}}"
                isGray="{{grey_model}}"
            >
            </fs-danmaku>
        </div>
    </div>
    `;

    static components:object = {
        'fs-danmaku': FsDanmakuHMo,
        'fs-meme': MoMeme
    };

    static messages = {
        // 表态
        // 修改标题状态
        'modify:attitude:status': function (arg) {
            let value = arg.value;
            this.data.set('attitudeStatus', value);
        },
        // 表态失败
        'like:opinion:error': function (arg) {
            let value = arg.value;
            danmakuLog('click_emoji', `emoji_id=${value.list[value.index].attitude_type}`, logExt);
        },
        // 表态成功
        'like:opinion:success': function (arg) {
            let value = arg.value;
            danmakuLog('click_emoji', `emoji_id=${value.list[value.index].attitude_type}`, logExt);
        },
        // 跳转更多
        'click:more:link': function () {
            let moreUrl = this.data.get('moreUrl').replace();
            moreUrl ? jump({cmd: moreUrl}) : '';
        },
        // 弹幕
        // 移动端水平弹幕单条点击
        [CLICK_DANMAKU_H_ITEM_MO]: function (arg) {
            const value = arg.value;
            const listUrl = value.data.listUrl;
            jump({cmd: listUrl ? listUrl : this.data.get('moreUrl')});
        },
        // 发布弹幕成功
        [PUBLISH_DANMAKU_H_MO_SUCCESS]: function () {
            danmakuLog('publish_button', '', logExt);
        },
        // 发布弹幕失败
        [PUBLISH_DANMAKU_H_MO_ERROR]: function () {
            danmakuLog('publish_button', '', logExt);
        },
        // 发布器调起
        [PULISHER_DANMAKU_H_MO_AROUSE]: function () {
            danmakuLog('bar_click', '', logExt);
        }
        
    };

    static computed:object = {
        wrapperClass() {
            return [
                styles.aucDanmakuWrapper,
                this.data.get('isBigEvent') ? styles.isBigEvent : '',
                this.data.get('hasOperationPosition') || this.data.get('hasTopColumn')  ? styles.mtFu36 : '',
                !(this.data.get('hasOperationPosition') || this.data.get('hasTopColumn')) && this.data.get('imageHeader') ? styles.mtFu75 : '',
            ]
        },
        titleColor() {
            const titleColor = this.data.get('title_color') ? JSON.parse(this.data.get('title_color')) : {};
            return titleColor[this.data.get('pageMode')] || '';
        },
        descColor() {
            const descColor = this.data.get('desc_color') ? JSON.parse(this.data.get('title_color')) : {};
            return descColor[this.data.get('pageMode')] || '';
        },
        titlePic() {
            const titlePic = this.data.get('title_pic') ? JSON.parse(this.data.get('title_pic')) : {};
            return titlePic[this.data.get('pageMode')] || '';
        },
        headerBg() {
            const headerBg = this.data.get('picture_background') ? JSON.parse(this.data.get('picture_background')) : {};
            return headerBg[this.data.get('pageMode')] || '';
        },
        list() {
            const list = this.data.get('comment_list');
            if (!list || list.length === 0) {
                return [];
            }
            list.map(item => {
                return jsonToHump(item);
            })
        },
        barrage() {
            const headerBg = this.data.get('barrage_color') ? JSON.parse(this.data.get('barrage_color')) : {};
            const mcBg = headerBg[this.data.get('pageMode')] || ''
            return `background-color:${machiningColor(mcBg)}`;
        },
        danmakuOut() {
            let danmakuOut = this.data.get('picture_frame') ? JSON.parse(this.data.get('picture_frame')) : {};
            const danmakuOutPc = danmakuOut[this.data.get('pageMode')] || '';
            return `background-image:${danmakuOutPc}`;
        },
        danmakuIn() {
            let danmakuIn = this.data.get('background_color') ? JSON.parse(this.data.get('background_color')) : {};
            let danmakuInColor = danmakuIn[this.data.get('pageMode')] || '';
            let danmakuInPC = this.data.get('picture_background') ? JSON.parse(this.data.get('picture_background')) : {};
            let danmakuInPcs = danmakuInPC[this.data.get('pageMode')] || '';
            return `${danmakuInColor ? 'background-color:' + machiningColor(danmakuInColor) : ''};${danmakuInPcs ? 'background-image:url(' + danmakuInPcs + ')': ''}`;
        }
    };

    initData(): AucDanmakuData {
        return {
            styles,
            sData: {
                sfrom: 'express',
                source: 'zhuanti',
                appname: 'baiduboxapp'
            },
            danmakuData: {},
            source: 'zhuanti',
            appid: '25528201',
            memeList: [],
            attitudeStatus: null,
            attitudeTotal: 0,
            gifAnimation: true
        }
    }

    attached(): void {

        this.data.set('memeList', this.data.get('attitude_conf'));
        this.data.set('attitudeStatus', this.data.get('attitude_status'));
        this.data.set('attitudeTotal', this.data.get('attitude_total'));
        this.data.set('gifAnimation', this.data.get('attitude_status') ? false : true);
        let that = this;
        // 添加数据通道监听落地页返回
        window.syncPurchaseStatusCallBk = (action, data) => {
            const result = JSON.parse(data);
            if (action !== 'com.baidu.channel.feed.assistmessage' || !result || !result.declareBarrage ||
                !result.declareBarrage[0] || result.declareBarrage[0].data.attitudeId !== this.data.get('attitude_id')) {
                return;
            }
            const list = result.declareBarrage[0].data.list;
            that.data.set('attitudeTotal', result.declareBarrage[0].data.total);
            that.data.set('memeList', list);
            that.data.set('gifAnimation', false);
            let flag = false;
            list.forEach(item => {
                if (item.status) {
                    flag = true;
                    that.data.set('attitudeStatus', item.attitude_type);
                }
            });
            if (!flag) {
                that.data.set('attitudeStatus', '');
            }
        };
        boxx && boxx.event && boxx.event.on({
            action: 'com.baidu.channel.feed.assistmessage',
            page: 'topicLanding',
            jscallback: window.syncPurchaseStatusCallBk
        });

        this.nextTick(() => {
            componentLog('darmaku_card_', 'show', logExt);
            if (+this.data.get('comment_display')) {
                danmakuLog('show_comment', '', logExt);
            }
            if (+this.data.get('attitude_display')) {
                danmakuLog('show_emoji', '', logExt);
            }
        })
    }
}

export default AucDanmaku;
