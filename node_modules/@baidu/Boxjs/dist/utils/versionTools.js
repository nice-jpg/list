/**
 * @file utils/versionTools.js
 * @author gaojiexuan@baidu.com
 * @description 版本判断相关工具函数
 */

var filter = require('../core/BDPolyfill/filter');
var versionMap = require('../core/versionMap');
var $ = require('../utils/_bdboxWrapper');
var platformAPI = require('../utils/platform');
var versionCompare = platformAPI.versionCompare;
var boxVersion = platformAPI.boxVersion;

var tools = {};
/* istanbul ignore next */
tools.queryToJson = require('../thirdParty/bdbox/utils/queryToJson');

tools.platform = platformAPI.os;

// Todo:和端确认解析字段
tools.canInvokeNew = function (action) {
    var config = versionMap[action];
    var versionRange = config.versionRange;
    var platform = tools.platform;
    var boxType = platformAPI.boxType;

    // lite\info版的key为系统版本与框版本拼接
    if (boxType !== 'main') {
        platform = [platform, boxType].join('');
        versionRange = config[platform + 'VersionRange'];
    } else if (!versionRange) {
        if (!config.notSupport) {
            versionRange = config[platform + 'VersionRange'];
        } else {
            return true;
        }
    }

    var lowVersion = versionRange[0];
    var highVersion = versionRange[1];


    // // 9.1以上直接调，不用判断版本
    // if (versionCompare(boxVersion, '9.1') >= 0) {
    //     return true;
    // }

    var gt = versionCompare(boxVersion, lowVersion) >= 0; // 大于小的
    var lt = !!highVersion && versionCompare(boxVersion, highVersion) <= 0; // 小于大的

    if (gt && (!highVersion || lt) && (!config.notSupport || config.notSupport.indexOf(platform) < 0)) {
        return true;
    } else {
        return false;
    }

};


tools.canInvokeOld = function (action) {
    var platform = tools.platform;
    var configs = filter[action];
    var boxType = platformAPI.boxType;

    if (!configs) {
        return false;
    }

    // lite/info/pro版的key为系统版本与框版本拼接
    if (boxType !== 'main') {
        platform = [platform, boxType].join('');
    }

    var platformConfig = configs[platform];

    if (!platformConfig) {
        return false;
    }

    var versionRange = platformConfig.versionRange;
    var allRange = false;
    var lowV = '';
    var highV = '';
    var lt = false;
    var gt = false;

    if (!versionRange || !!versionRange && versionRange.length === 0) {
        allRange = true;
    } else {
        lowV = versionRange[0];
        highV = versionRange[1];

        lt = (!!lowV && versionCompare(boxVersion, lowV) >= 0);
        gt = (!highV || (!!highV && versionCompare(boxVersion, highV) <= 0));
    }

    if (allRange || (gt && lt)) {
        return true;
    } else {
        return false;
    }
};



tools.getWhoCanHandle = function (action) {
    /**
     * 如果action的version存在、且大于当前端支持的最低端能力版本号，走最新的schema调用
     * 如果action的version不存在则走老端能力
     * 如果action的version存在、但小于当前端支持的最低端能力版本号：1、存在老的端能力走老的，2、不存在老的不调用
     */

    /**
     * 和端二次讨论结论：9.1之后双端的scheme形式直接调用，不需要jssdk判断版本号，双端保障不会出bug和crash。9.1之前前端维护版本号
     *
     */

    var version = versionMap[action];

    if (!!version) {
        version = version.v;
    }

    // 新的没有，旧的有
    if (!version && tools.canInvokeOld(action)) {
        return 'old';
        // 新的有，且版本可用
    } else if (!!version && tools.canInvokeNew(action)) {
        return 'new';
        // 新的有、版本不可用，但旧的可用
    } else if (!!version && !tools.canInvokeNew(action) && tools.canInvokeOld(action)) {
        return 'old';
    }
};

return tools;