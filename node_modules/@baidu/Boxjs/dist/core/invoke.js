/**
 * @file core/api.js
 * @author gaojiexuan@baidu.com
 * @description 端能力统一api
 */

var $ = require('../utils/_bdboxWrapper');
var schemeSplicer = require('./schemeSplicer');
var versionMap = require('./versionMap');
var bdPolyfill = require('./BDPolyfill/index');
var tools = require('../utils/versionTools');
/* istanbul ignore next */
var log = require('../thirdParty/log');
var platform = require('../utils/platform');
var versionCompare = platform.versionCompare;
var boxVersion = platform.boxVersion;
// var Promise = require('es6-promise');


function callbackResHandle(res) {
    var errCode = '';
    var errMsg = '';
    var result = {};

    if ($.isObject(res)) {
        if (res.errCode >= 0) {
            errCode = res.errCode;
        } else {
            errCode = +res.status;
        }
        errMsg = res.errMsg || res.message;
        result = res.data;
    }
    /* istanbul ignore else */
    else {
        /* istanbul ignore next */
        try {
            /* istanbul ignore next */
            res = JSON.parse(res);
            /* istanbul ignore next */
        } catch (e) {
            /* istanbul ignore next */
            console.log(e);
        }
        /* istanbul ignore next */
        errCode = +res.status || res;
        /* istanbul ignore next */
        result = res.data || arguments[1];
    }

    return {
        errCode: errCode,
        errMsg: errMsg,
        data: result || {}
    }
}

function numTostr(data) {
    /* istanbul ignore next */
    for (var i in data) {
        /* istanbul ignore if */
        /* istanbul ignore next */
        if (typeof data[i] === 'number') {
            data[i] = '' + data[i];
        } else if (typeof data[i] === 'object') {
            /* istanbul ignore next */
            data[i] = numTostr(data[i]);
        }
    }
    /* istanbul ignore next */
    return data;
}

function cloneData(data) {
    /* istanbul ignore if */
    /* istanbul ignore next */
    if (data.callback && typeof data.callback === 'function') {
        var _callback = data.callback;
    }
    /* istanbul ignore next */
    var _data = JSON.stringify(data);
    /* istanbul ignore next */
    var _dataClone = JSON.parse(_data);
    /* istanbul ignore next */
    _dataClone.callback = _callback;
    /* istanbul ignore next */
    return numTostr(_dataClone);
}

return function (action, data, abtest) {

    var vm = versionMap[action];
    var randomNum = Math.floor(Math.random() * 100);// 抽样1%上报success
    /* istanbul ignore if */
    if (window.searchboxBoxjsId === 'swan' && data && !data.cancelNumTostr) {
        data = cloneData(data);
    }
    /* istanbul ignore if */
    if (action.match('Sync')) {
        if (!action) {
            return $.sdkError['COMMAND_NOT_EXIST'];
        }
        if (!$.isBoxApp()) {
            return $.sdkError['NOT_IN_BDBOX'];
        }

        var result = '';
        var callback = function () {};
        var whoCanHandle = tools.getWhoCanHandle(action);

        if (whoCanHandle === 'old') {
            result = bdPolyfill(action, data || {}, callback);
        } else if (whoCanHandle === 'new') {
            result = schemeSplicer(action, data || {}, callback, vm);
        } else {
            result = $.sdkError['COMMAND_NOT_EXIST'];
        }

        var syncRes = callbackResHandle(result);
        syncRes = vm.thunk ? vm.thunk(syncRes) : syncRes;

        if (syncRes.errCode === 0) {
            if (randomNum === 6) {
                log(window.searchboxBoxjsId, 'succ_' + action);
            }
            return syncRes.data;
        } else {
            log(window.searchboxBoxjsId, 'fail_' + action, syncRes);
            return syncRes;
        }
    } else {
        return new Promise(function (resolve, reject) {
            if (!action) {
                reject($.sdkError['COMMAND_NOT_EXIST']);
                return;
            }
            if (!$.isBoxApp()) {
                reject($.sdkError['NOT_IN_BDBOX']);
                return;
            }

            var callback = function (res) {
                var callbackRes = callbackResHandle(res);

                if (callbackRes.errCode === 0) {
                    if (randomNum === 6) {
                        log(window.searchboxBoxjsId, 'succ_' + action);
                    }
                    resolve(callbackRes.data);
                } else {
                    log(window.searchboxBoxjsId, 'fail_' + action, callbackRes);
                    reject({
                        errCode: callbackRes.errCode,
                        errMsg: callbackRes.errMsg
                    });
                }
            };

            var whoCanHandle = tools.getWhoCanHandle(action);

            if (whoCanHandle === 'old') {
                bdPolyfill(action, data || {}, callback);
            } else if (whoCanHandle === 'new') {
                schemeSplicer(action, data || {}, callback, vm, abtest);
            } else {
                reject($.sdkError['COMMAND_NOT_EXIST']);
            }
        });
    }
};