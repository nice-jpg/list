/**
 * @file
 * @author renzhonghua
 */

var invoke = require('../../core/invoke');

return {
    cuid: function (abtest) {
        /* istanbul ignore next */
        var action = 'utils/getCUID';
        /* istanbul ignore next */
        return invoke(action, {}, abtest);
    },
    info: function (key, abtest) {
        var data = {};
        var arr = [];
        var action = '';
        var keyname = '';

        /* istanbul ignore if */
        /* istanbul ignore next */
        if (typeof key === 'string') {
            keyname = key;
            arr.push(key);
        }
        else {
            keyname = key[0];
            arr = key;
        }

        switch (keyname) {
            case 'netInfo':
                action = 'utils/getDeviceInfo';
                data = {
                    keys: arr
                };
                break;
            case 'screenInfo':
                /* istanbul ignore next */
                action = 'utils/getScreenInfo';
                /* istanbul ignore next */
                data = {
                    keys: arr
                };
                /* istanbul ignore next */
                break;
            case 'platformInfo':
                /* istanbul ignore next */
                action = 'utils/getPlatformInfo';
                /* istanbul ignore next */
                break;
        }

        return invoke(action, data, abtest);
    },
    location: function (type, abtest) {
        /* istanbul ignore next */
        var data = {
            'coor_type': type
        };
        /* istanbul ignore next */
        var action = 'utils/location';
        /* istanbul ignore next */
        return invoke(action, data, abtest);
    }
};