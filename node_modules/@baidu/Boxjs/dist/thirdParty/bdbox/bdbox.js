
var $ = require('@baidu/Boxjs/dist/utils/_bdboxWrapper')
/**
 * 框Bdbox基础库
 * @namespace Bdbox
 * @global
 * @author wangyongqing01
 * @version $Id: bdbox.js 286319 2016-03-14 08:25:23Z wangyongqing01 $
 */
(function(window, document, undefined) {

    /* eslint-disable */
var now = (+new Date());
var _id = (now + '').slice(-3);
var ua = navigator.userAgent;

/** @lends Bdbox */
var $ = {
    /**
     * 当前环境是否为框，通过userAgent判断
     * @type {Boolean}
     */
    isBoxApp: function (subName) {
        subName = subName || '';
        if (/ baiduboxapp\//i.test(ua) === false) {
            // 框外
            return false;
        }
        if (ua.indexOf(subName + ' baiduboxapp') < 0) {
            // 具体的 app ：主线 / lite / info 等
            return false;
        }
        return true;
    },
    isBox: / baiduboxapp\//i.test(ua) &&  !/ (lite|info|pro|mission) baiduboxapp/.test(ua),
    $isBox: function(){
        var navigator = window.navigator || {}
        var ua = navigator.userAgent
        return / baiduboxapp\//i.test(ua) &&  !/ (lite|info|pro|mission) baiduboxapp/.test(ua)
    },
    isLiteBox: / (lite|info) baiduboxapp\//i.test(ua),
    $isLiteBox: function(){
        /* istanbul ignore next */
        var navigator = window.navigator || {}
        /* istanbul ignore next */
        var ua = navigator.userAgent
        /* istanbul ignore next */
        return / (lite|info) baiduboxapp\//i.test(ua)
    },
    isInfoBox: / info baiduboxapp\//i.test(ua),
    $isInfoBox: function(){
        /* istanbul ignore next */
        var navigator = window.navigator || {}
        /* istanbul ignore next */
        var ua = navigator.userAgent
        /* istanbul ignore next */
        return / info baiduboxapp\//i.test(ua)
    },
    isProBox: / pro baiduboxapp\//i.test(ua),
    $isProBox: function(){
        /* istanbul ignore next */
        var navigator = window.navigator || {}
        /* istanbul ignore next */
        var ua = navigator.userAgent
        /* istanbul ignore next */
        return / pro baiduboxapp\//i.test(ua)
    },
    isMissionBox: / mission baiduboxapp\//i.test(ua),
    /**
     * 当前系统是否为iOS
     * @type {Boolean}
     */
    isIOS: /(iPhone|iPod|iPad)/.test(ua),
    $isIOS: function(){
        var navigator = window.navigator || {}
        return /(iPhone|iPod|iPad)/.test(navigator.userAgent)
    },
    /**
     * 当前系统是否为android
     * @type {Boolean}
     */
    isAndroid: /(Android);?[\s\/]+([\d.]+)?/.test(ua),
    $isAndroid: function(){
        var navigator = window.navigator || {}
        return /(Android);?[\s\/]+([\d.]+)?/.test(navigator.userAgent)
    },
    /**
     * 获取唯一id，用于一些随机数
     * @return {Number} id 随机数
     * @example
     * var jsonpFnName = '_box_' + Bdbox.getId();
     */
    getId: function() {
        return _id++;
    },
    /**
     * 空数组
     * @type {Array}
     */
    emptyArr: [],
    /**
     * 空function，用于一些回调函数默认函数
     * @return {Undefined} undefined 未定义
     */
    emptyFn: function() {},
    /**
     * 空object
     * @type {Object}
     */
    cleanObj: {},
    /**
     * document.getElementById实现
     * @param  {String} id nodeID，不带#
     * @return {Object} domlist  DOM节点
     * @example
     * Bdbox.getId('id').style.display = 'none';
     */
    byId: function(id) {
        return $.isString(id) ? document.getElementById(id) : id;
    },
    /**
     * 泛数组转换为数组
     * @description 转换后的数组可以用数组方法
     * @param  {Object} arrayLike 类似数组的对象
     * @return {Array}  array 转成数组类型的数组
     * Bdbox.toArray(document.querySelectorAll('*')).forEach(function(node){
     *     console.log(node);
     * });
     */
    toArray: function(arrayLike) {
        return $.emptyArr.slice.call(arrayLike);
    },
    /**
     * querySelectorAll选择器
     * @param  {String} selector 选择器
     * @param  {DOM} [context=document]  上下文
     * @return {DomList}   array  返回toArray处理好的dom节点数组
     */
    $: function(selector, context) {
        context = (context && context.nodeType === 1) ? context : document;
        return $.toArray(context.querySelectorAll(selector));
    }
};

/**
 * 是否是function类型
 * @name isFunction
 * @function
 * @memberOf Bdbox
 * @param  {Object} obj 要判断的对象
 * @return {Boolean} bool  true|false
 */
/**
 * 是否是string类型
 * @name isString
 * @function
 * @memberOf Bdbox
 * @param  {Object} obj 要判断的对象
 * @return {Boolean} bool true|false
 */
/**
 * 是否是array类型
 * @name isArray
 * @function
 * @memberOf Bdbox
 * @param  {Object} obj 要判断的对象
 * @return {Boolean} bool 返回true|false
 */
/**
 * 是否是一个Number类型
 * @name isNumber
 * @function
 * @memberOf Bdbox
 * @param  {Object} obj 要判断的对象
 * @return {Boolean} bool  返回true|false
 */
/**
 * 是否是一个RegExp类型
 * @name isRegExp
 * @function
 * @memberOf Bdbox
 * @param  {Object} obj 要判断的对象
 * @return {Boolean} bool  返回true|false
 */
'Function,String,Array,Number,RegExp'.replace(/[^, ]+/g, function(t) {
    $['is' + t] = function(s) {
        return isType(s, t);
    };
});
/**
 * 是否为布尔
 * @function
 * @name isBoolean
 * @memberOf Bdbox
 * @param  {Object}  obj 要判断的对象
 * @return {Boolean}  bool true|false
 */
$.isBoolean = function(obj) {
    return obj === true || obj === false;
};
/**
 * 是否为object
 * @function
 * @name isObject
 * @memberOf Bdbox
 * @param  {Object}  obj 要判断的对象
 * @return {Boolean} bool true|false
 */
$.isObject = function(obj) {
    return typeof obj === 'object';
};
/**
 * 是否为undefined
 * @function
 * @name isUndefined
 * @memberOf Bdbox
 * @param  {Object}  obj 要判断的对象
 * @return {Boolean} bool  true|false
 */
$.isUndefined = function(obj) {
    return obj === undefined;
};
/**
 * 是否是window对象
 * @function
 * @name isWindow
 * @memberOf Bdbox
 * @param  {Object}  obj 要判断的对象
 * @type {Boolean}
 */
$.isWindow = function(obj) {
    return obj != null && obj == obj.window
}

/**
 * 是否是纯object对象
 * @function
 * @name isPlainObject
 * @memberOf Bdbox
 * @param  {Object}  obj 要判断的对象
 * @type {Boolean}
 */
$.isPlainObject = function(obj) {
    return $.isObject(obj) && !$.isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype
}

function isType(obj, type) {
    return $.cleanObj.toString.call(obj).slice(8, -1) === type;
}

;
    /**
 * require方法
 * @description 请求需要一个模块，id按照fis规范：`命名空间:xxx/xxx`，
 * 例如Bdbox的模块都是：`common:bdbox/xxx`
 * @function
 * @name require
 * @memberOf Bdbox
 * @param  {String} id 模块名
 * @return {Object} obj  模块对象
 * @example
 * var module = require('common:bdbox/someModule');
 * module.someFn();
 * //test.js
 * var version_compare = require('common:bdbox/utils/version_compare');
 * var getVersion = require('common:bdbox/utils/getVersion');
 * var boxversion = getVersion();
 * console.log(boxversion);
 * //也可以直接使用Bdbox.xxx.xxx形式，例如：
 * require('common:bdbox/android/invokeApp');
 * Bdbox.android.invokeApp('bd_query', 'setQuery', ['web','上框关键词']);
 */
function require(id) {
    var mod = modulesMap[id];
    if (mod) {
        return mod.exports;
    } else {
        throw 'module ' + id + ' is undefined';
    }
}
;
    //AMD模块
var modulesMap = {};
/**
 * define函数第二个参数构造工厂函数
 *
 * @callback factory
 * @param {function} require 根据amdjs规范的require函数
 * @param {function} module 根据amdjs规范的module
 * @param {function} exports 根据amdjs规范的exports
 * @param {function} $ 有别于amdjs规范的Bdbox对象，所以Bdbox模块中的`$`是Bdbox，而不是`Zepto`
 */
/**
 * Bdbox.define方法
 * @name define
 * @memberOf Bdbox
 * @function
 * @description 会暴漏给全局define，AMDjs规范，但是第四个参数为Bdbox
 * @param  {Sting} namespace namespace是模块名称，按照fis规范：`命名空间:xxx/xxx`，例如bdbox的模块都是：`common:bdbox/xxx`
 * @param {factory} factory 构造工厂函数
 * @example
 * //`factory` 默认包含了``require``、``module``、``exports`` 和 ``$`` 四个参数（编写代码时，可以看成全局变量）。
 * //其中``require``、``module``、``exports`` 是符合AMD规范的。**而``$``是``Bdbox``独有的**！！主要为了考虑使用Bdbox对象方便而添加的~
 * //``require``：声明依赖的模块
 * //``module``：模块对象，一般使用``module.exports``导出
 * //``exports``：导出，多个导出情况可以使用``exports``
 * //``$``： Bdbox对象，所以在模块中可以直接使用``$.isFunction``等
 * //common/static/bdbox/demo.js
 * var str = 'I am a demo';
 * //使用modlue导出模块
 * return str;
 * //上面模块，在外部调用：
 * require('common:bdbox/demo');
 * console.log(Bdbox.demo);// I am a demo
 *     //or
 * var demo = require('common:bdbox/demo');
 * console.log(demo);//I am a demo
 * //或者

 * //common/static/bdbox/demo2.js
 * //调用模块依赖
 * var getVersion = require('common:bdbox/utils/getVersion');
 * var A = {
 *     str: getVersion,
 *     func: function(){}
 * };
 * //因为$实际为Bdbox
 * //所以除了使用getVersion，还可以下面的方式使用$.getVersion
 * A.other = $.getVersion();
 * //使用modlue导出
 * return A;
 * //上面模块，在外部调用：
 * require('common:bdbox/demo2');
 * console.log(Bdbox.demo2.str);//xxx
 * Bdbox.demo2.func();
 *
 * //再或者
 * //common/static/bdbox/demo3.js
 * var B = {
 *     str: 'xxx',
 *     func: function(cb){
 *         //直接使用$, $就是Bdbox对象哦
 *         if($.isFunction(cb)){
 *             cb();
 *         }
 *     }
 * };
 * //导出
 * return A;
 *
 * //再或者

 * //common/static/bdbox/demo4.js
 * exports.demo = '12121';
 * exports.send = function(){
 *     alert('Bdbox.demo4.send fire!');
 * };
 */
$.define = define;
function define(id, factory) {
    var ids = id.split(':');
    var names = ids.pop().split('/');
    var root = $;
    var name, lastName;

    while (name = names.shift()) {
        if (name === 'bdbox') {
            continue;
        }
        lastName = name;
        if (names.length) {
            root = (root[name] = root[name] || {});
        }
    }

    var mod = modulesMap[id] = {
        exports: {}
    };

    var ret = $.isFunction(factory) ? factory.apply(mod, [require, mod.exports, mod, $]) : factory;

    if (ret) {
        mod.exports = ret;
    }
    root[lastName] = mod.exports;

}
;
    window.Bdbox = $;
    /**
     * @global
     * @name require
     * @desc AMD的require实现，具体用法，点击：{@link Bdbox.require}
     */
    window.require = require;
    /**
     * @global
     * @name define
     * @desc AMD的define实现，具体用法，点击：{@link Bdbox.define}
     */
    window.define = $.define;
}(window, document));
