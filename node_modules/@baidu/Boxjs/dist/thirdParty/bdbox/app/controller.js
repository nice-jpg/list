
var $ = require('@baidu/Boxjs/dist/utils/_bdboxWrapper')
/*jshint -W121*/
var Observer = require('./observer');
var View = require('./view');

if (!Function.prototype.bind) {
    Function.prototype.bind = function(context) {
        var slice = [].slice,
            args = slice.call(arguments, 1),
            self = this,
            nop = function() {},
            bound = function() {
                return self.apply(this instanceof nop ? this : (context || {}),
                    args.concat(slice.call(arguments)));
            };
        nop.prototype = self.prototype;
        bound.prototype = new nop();
        return bound;
    };
}

var defaultFn = ['init', 'main', 'before', 'after', 'unload'];
/**
 * 控制器类，经过observer封装
 * @lends  Bdbox.app.controller
 * @class  Controller
 * @param {Object} config 控制器配置：root/name/router/main/before/after/unload/apis
 * @author wangyongqing01
 * @version $Id: controller.js 286585 2016-03-15 11:57:15Z wangyongqing01 $
 */
var Controller = function(config) {
    config = config || {};
    Observer(this);
    this.router = config.router;
    var name = this.name = config.name;
    this.view = View(config.root || name, config.apis);
    var self = this;

    defaultFn.forEach(function(v) {
        if ($.isFunction(config[v])) {
            self[v] = config[v].bind(self);
        }
    });
    this.bindEvent();
}

Controller.prototype.bindEvent = function() {
    var self = this;
    defaultFn.forEach(function(v) {
        self.on(v, self[v]);
    });
};
/**
 * Controller封装
 * @memberOf Bdbox.app
 * @function
 * @name  controller
 * @param  {Object} config controller配置
 * @return {Controller}        返回Controller对象
 * @author wangyongqing01
 * @version  $Id: controller.js 286585 2016-03-15 11:57:15Z wangyongqing01 $
 * @example
 * Bdbox.app.controller({
 *     name: 'info',
 *     router: /^info/,
 *     main: fn,
 *     before: beforeFn,
 *     after: afterFn,
 *     unload: unloadFn
 * });
 */
return function(config) {
    return new Controller(config);
}
