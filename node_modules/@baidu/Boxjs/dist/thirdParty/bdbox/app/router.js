
var $ = require('@baidu/Boxjs/dist/utils/_bdboxWrapper')
var currentHash = location.hash,
    routingMap = {},
    routingRegMap = {},
    lastLocation = location.href;


/**
 * 先添加路由规则与对应的处理函数
 * @memberOf Bdbox.app
 * @namespace router
 * @param  {string|RegExp} path   匹配的路径
 * @param  {function} handler 处理函数
 * @author wangyongqing01
 * @version $Id: router.js 216781 2014-12-16 06:19:59Z xiayitian $
 *
 * @example
 * Bdbox.app.router(/aaa\/(\d+)\/ddd\/(\d+)/, function(path){
 *     console.log(arguments);
 * });
 * Bdbox.app.router('aaa/bb/ccc/', function(path){
 *     console.log(arguments);
 * });
 * Bdbox.app.router(/aaa\/(\w+)\/cc/);
 * Bdbox.app.router(/aaa\/ccc\/(\d+)/, function(){
 *    console.log(arguments);
 * });
 * Bdbox.app.router.remove(/aaa\/(\d+)\/ddd\/(\d+)/);
 * Bdbox.app.router.remove('aaa/bbb', handler)
 */
var router = function(path, handler) {

    if ($.isString(path)) {
        path = path.replace(/^\/|\/$/g, '');
        routingMap[path] = routingMap[path] || [];
        routingMap[path].push(handler);
    } else if ($.isRegExp(path)) {
        var str = path.toString();
        routingRegMap[str] = routingRegMap[str] || {
            reg: path,
            fns: []
        };
        routingRegMap[str].fns.push(handler);
    } else {
        throw 'Path Type is Error';
    }

    return handler;
};
/**
 * 删除router规则
 * @memberOf Bdbox.app.router
 * @param  {string|regexp} path    router路径
 * @param  {function} handler 删除的函数
 * @return {boolean}         删除成功还是失败
 * @example
 * Bdbox.app.router.remove(/aaa\/(\d+)\/ddd\/(\d+)/);
 * Bdbox.app.router.remove('aaa/bbb', handler)
 */
router.remove = function(path, handler) {
    var handlers;
    if ($.isString(path) && routingMap[path]) {
        if ($.isUndefined(handler)) {
            delete routingMap[path];
        } else {
            handlers = routingMap[path];
            handlers.splice(handlers.indexOf(handler), 1);
        }
        return true;
    } else if ($.isRegExp(path) && routingRegMap[path.toString()]) {
        var str = path.toString();
        if ($.isUndefined(handler)) {
            delete routingRegMap[str];
        } else {
            handlers = routingRegMap[str].fns;
            handlers.splice(handlers.indexOf(handler), 1);
        }
        return true;
    }
    return false;
};
/**
 * 停止router
 * @memberOf Bdbox.app.router
 */
router.stop = function() {
    window.removeEventListener('hashchange', router.checkUrl, true);
};
/**
 * 开始router
 * @memberOf Bdbox.app.router
 */
router.start = function() {
    //事件监听
    window.addEventListener('hashchange', router.checkUrl, true);
};

router.start();

/**
 * 检测url
 * @memberOf Bdbox.app.router
 * @param  {string} hash hash值
 */
router.checkUrl = function(hash) {
    hash = hash && hash.type ? location.hash : hash;
    if (hash !== currentHash) {
        execRouter(hash);
    }
    currentHash = hash;
};
//匹配/#/ 或 /#!/
var rhashBang = /^#(!)?/;
/**
 * 执行hash值
 * @function  exec
 * @memberOf Bdbox.app.router
 * @param  {string} hash hash值
 */
function execRouter(hash) {
    hash = (hash + '').replace(rhashBang, '');
    var pathObj = parseQuery(hash);
    var pathname = pathObj.pathname.replace(/^\/|\/$/g, '');
    var query = pathObj.query;

    if ($.isArray(routingMap[pathname])) {
        routingMap[pathname].forEach(function(fn) {
            fn(query, pathname);
        });
    } else {
        var route;
        for (var i in routingRegMap) {
            route = routingRegMap[i];
            if (route.reg.test(pathname)) {
                var match = route.reg.exec(pathname);
                $.isArray(route.fns) && route.fns.forEach(function(fn) {
                    fn(query, pathname, match);
                });
                break;
            }
        }
    }
}
router.exec = execRouter;

function parseQuery(path) {
    var array = path.split('#'),
        query = {},
        tail = array[1];
    if (array.length == 1 && array[0].indexOf('?') > -1) {
        tail = array[0], array[0] = array[0].split('?')[0];
    }
    if (tail) {
        var index = tail.indexOf('?');
        if (index > 0) {
            var seg = tail.slice(index + 1).split('&'),
                len = seg.length,
                i = 0,
                s;
            for (; i < len; i++) {
                if (!seg[i]) {
                    continue;
                }
                s = seg[i].split('=');
                query[decodeURIComponent(s[0])] = decodeURIComponent(s[1]);
            }
        }
    }
    return {
        pathname: array[0],
        query: query
    };
}

return router;
