
var $ = require('@baidu/Boxjs/dist/utils/_bdboxWrapper')
/**
 * 将一个对象包装成观察者
 * @memberOf Bdbox.app
 * @namespace Bdbox.app.observer
 * @param {Object} el 待包装的对象
 * @return {Object} 返回一个带有on/emit的观察者对象
 * @author wangyongqing01
 * @version $Id: observer.js 211253 2014-11-21 03:14:35Z wangyongqing01 $
 * @example
 * var obj = {};
 * Bdbox.app.observer(obj);
 * obj.on('test', function(){
 *     console.log(arguments);
 * })
 * obj.on(/t/, function(){
 *     console.log('tttt', arguments);
 * })
 * obj.trigger('test', 111,222);
 */
return function(el) {
    var callbacks = {},
        slice = $.emptyArr.slice;

    var getListeners = function(evt) {
        var events = callbacks;
        var response = {};

        if (evt instanceof RegExp) {
            for (var key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    // console.log(key, evt, events[key].length);
                    response[key] = events[key];
                }
            }
        } else {
            // console.log(arguments.callee.caller.toString(), evt);
            evt.replace(/[^,]+/g, function(name, pos) {
                response[name] = events[name] || (events[name] = []);
            });
        }

        return response;
    }
    /**
     * 添加事件监听
     * @memberOf Bdbox.app.observer
     * @function on
     * @param  {string}   events 事件类型|或者正则
     * @param  {Function} fn     处理函数
     * @return {this}          this对象
     */
    el.on = function(events, fn) {
        if ($.isFunction(fn)) {
            var listeners = getListeners(events);
            for (var key in listeners) {
                if (listeners.hasOwnProperty(key) && !~listeners[key].indexOf(fn)) {
                    listeners[key].push(fn);
                }
            }
        }

        return el;
    }
    /**
     * 解绑函数
     * @memberOf Bdbox.app.observer
     * @function off
     * @param  {String|RegExp}   events 解绑类型
     * @param  {Function} fn     解绑函数，如果不传则解绑整个事件
     * @return {this}          this
     */
    el.off = function(events, fn) {
        if (events === '*') {
            callbacks = {};
        } else {
            var listeners = getListeners(events);
            var isNil = $.isUndefined(fn);
            for (var key in listeners) {
                if (listeners.hasOwnProperty(key)) {
                    if (isNil) {
                        listeners[key].length = 0;
                    } else {
                        var index = listeners[key].indexOf(fn);

                        if (~index) {
                            listeners[key].splice(index, 1);
                        }
                    }

                }
            }
        }
        return el;
    }
    /**
     * 只绑定一次
     * @memberOf Bdbox.app.observer
     * @function one
     * @alias Bdbox.app.observer.once
     * @param  {string}   name 事件类型
     * @param  {Function} fn   回调函数
     * @return {this}        返回this
     */
    el.one = function(name, fn) {
        if (fn) fn._once = true;
        return el.on(name, fn);
    }
    el.once = el.one;
    /**
     * 触发事件类型
     * @memberOf Bdbox.app.observer
     * @function emit
     * @alias Bdbox.app.observer.trigger
     * @param  {string} name 触发事件
     * @param {mix} data.. 支持传入的多个处理函数参数
     * @return {this}      this
     */
    el.trigger = function(name) {
        var args = slice.call(arguments, 1),
            listeners = getListeners(name);

        for (var key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                var fns = listeners[key];
                var i = fns.length;
                while (i--) {
                    var fn = listeners[key][i];
                    if (fn._once === true) {
                        fns.splice(i, 1);
                    }
                    fn.apply(el, args);
                }
            }
        }
        return el;
    }
    el.emit = el.trigger;
    return el;
};
