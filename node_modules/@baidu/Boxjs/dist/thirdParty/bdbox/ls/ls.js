
var $ = require('@baidu/Boxjs/dist/utils/_bdboxWrapper')
/* jshint -W801,-W061*/
/**
 * localstorage方法封装，页面加载之后会自动执行`updateVersion`更新缓存
 * @namespace Bdbox.ls
 * @requires common:bdbox/utils/cookie
 * @author wangyongqing01
 * @version $Id: ls.js 251156 2015-06-11 02:27:09Z wangyongqing01 $
 */
var cookie = {
    set: function _cookie(key, value, domain, date, path) {
        path = path || '/';
        document.cookie = key + '=' + encodeURIComponent(value) + ';domain=' + domain + ';path=' + path + ';expires=' + date.toGMTString() + ';';
        return this;
    },
    get: function(key) {
        var result = '';
        if (key) {
            var cookies = document.cookie.split('; ');
            var reg = /\+/g;
            for (var i = 0, l = cookies.length; i < l; i++) {
                var parts = cookies[i].split('=');
                var name = parts[0];
                var cookie = parts[1];

                if (key === name) {
                    result = decodeURIComponent(cookie.replace(reg, ' '));
                    break;
                }
            }
        }
        return result;
    }
};
var config = {
    key: 'bdapp_lsv',
    lssp: 'lssp',
    value_sep: '_',
    content_sep: '-'
};
var lssp = config.lssp;


var value_sep = config.value_sep;
var content_sep = config.content_sep;
/** @lends Bdbox.ls */
var boxls = {
    /**
     * 是否支持localstorage，通过cookie判断
     * @type {boolean}
     */
    support: cookie.get('lssp') !== 'no'
};
var HEAD = document.head || document.getElementsByTagName('head')[0];
var BASE = HEAD.firstChild;

var getById = $.byId;

var ls = window.localStorage;
/**
 * 通过存入localstorage方式判断是否支持
 * @function
 * @return {Boolean} bool true|false
 */
boxls.isSupport = function() {
    if (boxls.support && localStorage) {
        try {
            var tmp = 'test support';
            ls.setItem('__bdbox__', tmp);
            if (ls.__bdbox__ !== tmp) {
                boxls.support = false;
            }
            ls.removeItem('__bdbox__');
        } catch (e) {
            boxls.support = false;
        }
    } else {
        boxls.support = false;
    }
    boxls.isSupport = function() {
        return boxls.support;
    };
    return boxls.support;
};

/**
 * 删除localstorage
 * @param  {String} id 删除的key
 * @return {Object}    Bdbox.ls Bdbox.ls
 */
boxls.remove = function(id) {
    ls[id] = null;
    ls.removeItem('bdbox_' + id);
    return boxls;
};
/**
 * 添加localstorage
 * @param {String} key   存入的key
 * @param {String|Object} value 存入的内容，object会用`JSON.stringify()`转义
 * return {Object}    Bdbox.ls Bdbox.ls
 */
boxls.set = function(key, value) {
    if (typeof value === 'object') {
        value = JSON.stringify(value);
    }
    ls.setItem('bdbox_' + key, value);
    return boxls;
};
/**
 * 获取一个key的localstorage
 * @param  {String} id 获取的localstorage缓存key
 * @param {Boolean} isCheck 是否检查长短，如果为true，则会判断长度小于100的页面会重新加载
 * @return {String} value 返回获取到的key
 */
boxls.get = function(id, isCheck) {
    var content = ls['bdbox_' + id] || '';

    if (isCheck && (content.length < 100)) {
        //缓存失效
        var date = new Date();
        var cookieId = (LS.key && LS.key !== '') ? LS.key : config.key;
        cookie.set(cookieId, '', document.domain, date);
        window.location.reload();
    }
    return content;
};
/**
 * 种不支持localstorage的cookie
 */
boxls.lsspCookie = function() {
    var date = new Date();
    var time = +date;
    date.setTime(time + 604800000); //604800000 = 7 * 24 * 3600 * 1000
    cookie.set(lssp, 'no', document.domain, date);
    window.location.reload();
};
/**
 * 从cookie中解析缓存的localstorage版本信息
 * @param  {String} [str=getCookie] 缓存的版本信息
 * @return {Object}  back 返回解析后的json对象
 */
boxls.parseVersion = function(str) {
    var cookieId = (LS.key && LS.key !== '') ? LS.key : config.key;
    str = str || cookie.get(cookieId);
    var back = {};
    if (!str) {
        return back;
    }
    str.split(value_sep).forEach(function(v) {
        v = v.split(content_sep);
        back[v[0]] = v[1];
    });
    return back;
};
/**
 * 通过script标签的`data-lsid`获取key
 * @return {Array} array 返回的keys
 * @example
 * ```html
 * 例如：
 * script data-lsid="jZ" data-lsv="1"
 * //...
 * script
 * ```
 *
 * ```javascript
 * //会被解析成：
 *   var json = Bdbox.ls.getKeysByTag();
 *   //{
 *   //    "jZ": 1
 *   //}
 *
 *  ```
 */
boxls.getKeysByTag = function() {
    var arr = [];
    $.$('[data-lsid]').forEach(function(node) {
        var val = node.getAttribute('data-lsid');
        if (!~arr.join(',').indexOf(val)) {
            arr.push(val);
        }
    });

    return arr;
};
/**
 * 自动更新version信息，通过解析页面最新的`data-lsv`信息，更新localstorage缓存
 */
boxls.updateVersion = function() {
    var newVObj = {},
        id, content;
    var lsgroup = null;

    //存入localstorage
    $.$('[data-lsv]').forEach(function($node) {
        lsgroup = $node.getAttribute('data-lsid');
        newVObj[lsgroup] = $node.getAttribute('data-lsv');

        content = $node.innerHTML || $node.value;
        if (content.length > 100) {
            boxls.set(lsgroup, content);
        }
    });

    if (lsgroup && boxls.get(lsgroup)) {
        //缓存成功，更新cookie version
        //需要解析cookie重新设置

        var oldVObj = boxls.parseVersion(); //解析旧的cookie
        var vArr = boxls.getKeysByTag(); //解析新cookie keys
        var version = [];
        window.LS.cookies.forEach(function(v) {
            var val = newVObj[v];
            if (!val) {
                val = oldVObj[v];
            }
            if (val) {
                version.push(v + content_sep + val);
            }
        });
        // console.log(version);
        var date = new Date();
        var time = +date;
        date.setTime(time + 604800000); //604800000 = 7 * 24 * 3600 * 1000
        //jZ-2345_base-124345343
        version = version.join(value_sep);
        var cookieId = (LS.key && LS.key !== '') ? LS.key : config.key;
        // console.log(cookieId, version, document.domain, date, LS.path || '/');
        cookie.set(cookieId, version, document.domain, date, LS.path || '/');
    }
};
if (boxls.isSupport()) {
    window.addEventListener('load', function() {
        boxls.updateVersion();
    }, false);
}


return boxls;
