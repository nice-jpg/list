
var $ = require('@baidu/Boxjs/dist/utils/_bdboxWrapper')
/* eslint-disable */
/* jshint ignore: start */

var each = require('../utils/each');
var classSelectorRE = /^\.([\w-]+)$/,
    idSelectorRE = /^#([\w-]*)$/,
    tagSelectorRE = /^[\w-]+$/,
    hover = {
        mouseenter: 'mouseover',
        mouseleave: 'mouseout'
    },
    handlers = {};
var returnTrue = function() {
    return true
},
    returnFalse = function() {
        return false
    },
    ignoreProperties = /^([A-Z]|layer[XY]$)/,
    eventMethods = {
        preventDefault: 'isDefaultPrevented',
        stopImmediatePropagation: 'isImmediatePropagationStopped',
        stopPropagation: 'isPropagationStopped'
    };
/**
 * 事件代理，用法同Zepto.delegate
 * @memberOf Bdbox.event
 * @namespace delegate
 * @author wangyongqing01
 * @version $Id: delegate.js 286585 2016-03-15 11:57:15Z wangyongqing01 $
 */
var delegate = {
    /**
     * on方法
     * @memberOf Bdbox.event.delegate
     * @param  {element}   parentNode 父节点
     * @param  {string}   selector   选择器
     * @param  {string}   event      事件类型
     * @param  {Function} callback   回调函数
     */
    on: function(parentNode, selector, event, callback) {
        return add(parentNode, event, callback, selector, function(fn) {
            return function(e) {
                var evt, match = closest(e.target, selector, parentNode);
                if (match) {
                    evt = createProxy(e);
                    evt.currentTarget = match;
                    evt.liveFired = parentNode;
                    return fn.apply(match, [evt].concat([].slice.call(arguments, 1)));
                }
            };
        });
    },
    /**
     * off方法
     * @memberOf Bdbox.event.delegate
     * @param  {Element}   parentNode 父节点
     * @param  {string}   selector   选择器
     * @param  {string}   event      事件类型
     * @param  {Function} callback   回调函数
     */
    off: function(parentNode, selector, event, callback) {
        return remove(parentNode, event, callback, selector);
    }
};

return delegate;


function bid(element) {
    return element._bid || (element._bid = $.getId());
}

function createProxy(event) {
    var key, proxy = {
            originalEvent: event
        };
    for (key in event)
        if (!ignoreProperties.test(key) && event[key] !== undefined) proxy[key] = event[key];

    each(eventMethods, function(predicate, name) {
        proxy[name] = function() {
            this[predicate] = returnTrue;
            return event[name].apply(event, arguments);
        };
        proxy[predicate] = returnFalse;
    })
    return proxy;
}

function parse(event) {
    var parts = ('' + event).split('.')
    return {
        e: parts[0],
        ns: parts.slice(1).sort().join(' ')
    }
}

function add(element, events, fn, selector, getDelegate, capture) {
    var id = bid(element),
        set = (handlers[id] || (handlers[id] = []));

    eachEvent(events, fn, function(event, fn) {

        var handler = parse(event)
        handler.fn = fn
        handler.sel = selector
        // emulate mouseenter, mouseleave
        if (handler.e in hover) fn = function(e) {
            var related = e.relatedTarget
            if (!related || (related !== this && !contains(this, related)))
                return handler.fn.apply(this, arguments)
        }
        handler.del = getDelegate && getDelegate(fn, event)
        var callback = handler.del || fn
        handler.proxy = function(e) {
            var result = callback.apply(element, [e].concat(e.data))
            if (result === false) {
                e.preventDefault();
                e.stopPropagation();
            }
            return result
        }
        handler.i = set.length;
        set.push(handler);
        if ('addEventListener' in element) {

            element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));
        }
    })
}

function realEvent(type) {
    return hover[type] || type
}

function eventCapture(handler, captureSetting) {
    return handler.del &&
        (handler.e == 'focus' || handler.e == 'blur') || !! captureSetting
}

function eachEvent(events, fn, iterator) {
    events.split(/\s/).forEach(function(type) {
        iterator(type, fn)
    });
}

function remove(element, events, fn, selector, capture) {
    var id = bid(element)
    eachEvent(events || '', fn, function(event, fn) {
        findHandlers(element, event, fn, selector).forEach(function(handler) {
            delete handlers[id][handler.i]
            if ('removeEventListener' in element) {
                element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));
            }
        });
    })
}



function findHandlers(element, event, fn, selector) {
    event = parse(event)
    if (event.ns) var matcher = matcherFor(event.ns)
    return (handlers[bid(element)] || []).filter(function(handler) {
        return handler && (!event.e || handler.e == event.e) && (!event.ns || matcher.test(handler.ns)) && (!fn || bid(handler.fn) === bid(fn)) && (!selector || handler.sel == selector)
    })
}

function closest(node, selector, context) {
    var collection = false;

    while (node && !(collection ? collection.indexOf(node) >= 0 : matches(node, selector))) {
        node = node !== context && !isDocument(node) && node.parentNode
    }
    return node;
}

function isDocument(obj) {
    return obj != null && obj.nodeType == obj.DOCUMENT_NODE
}

function matcherFor(ns) {
    return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)')
}

function matches(element, selector) {
    if (!element || element.nodeType !== 1) {
        return false
    }
    var matchesSelector = element.webkitMatchesSelector || element.matchesSelector;
    if (matchesSelector) {
        return matchesSelector.call(element, selector);
    }
    // fall back to performing a selector:
    var match, parent = element.parentNode,
        temp = !parent;
    if (temp)(parent = tempParent).appendChild(element);
    match = ~qsa(parent, selector).indexOf(element);
    temp && tempParent.removeChild(element);
    return match;
};

var qsa = function(element, selector) {
    var found;
    return (isDocument(element) && idSelectorRE.test(selector)) ?
        ((found = element.getElementById(RegExp.$1)) ? [found] : []) :
        (element.nodeType !== 1 && element.nodeType !== 9) ? [] :
        slice.call(
            classSelectorRE.test(selector) ? element.getElementsByClassName(RegExp.$1) :
            tagSelectorRE.test(selector) ? element.getElementsByTagName(selector) :
            element.querySelectorAll(selector)
    );
};

function contains(parent, node) {
    return parent !== node && parent.contains(node)
}
