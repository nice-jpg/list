
var $ = require('@baidu/Boxjs/dist/utils/_bdboxWrapper')
/**
 *
 * @file 通用关注组件 Subscribe 组件不依赖zepto，百度域名非必须
 *
 * @param id            {string} id 组件标识
 * @param opts          {object} 组件配置，包含类型，文案，扩展配置等。如{type:'stock',isaladin:0/1}
 * @param ops.type      {string}  资源类型
 * @param ops.isaladin  {boolean}  是否是阿拉丁
 *
 * @author Created by youliang on 16/10/1.
 *
 * @update v0.1.1 加入fallcallback传参数errmessage object {"errno":0,"request_id":"透传","errmsg":"透传","data":{}}
 * @example errmessage 框外未登录 {"errno":10000,"errmsg":"透传"} errno {number} 枚举：10000框外未登录，10010框内小于8.0，10020登录接口失败，20020关注接口失败。
 *
 */
/* global Bdbox */
/* eslint-disable fecs-camelcase */
var $Box = $;
var versionCompare = require('../utils/version_compare');
var getVersion = require('../utils/getVersion');
var o2o = require('../client/o2o');

var iosCMD = require('../ios/open');
var androidInvoke = require('../android/invokeApp');
var clientToast = require('../client/toast');
var boxLogin = require('../client/login');
var multilog = require('../monitor/multilog');
var loadjs = require('../io/loadJS');
var toQuery = require('../utils/jsonToQuery');
var toJSON = require('../utils/queryToJson');



var host;
var extHost;

// 关注业务
var subLog = multilog(18);

var isub = function (id, ops) {
    this.id = id;
    this.toastBool = null;
    this.toastTransition = null;
    this.needUI = (ops && ops.needUI) || true;
    if (this.needUI) {
        this.createDom();
    }
    this.ops = ops || {};
    this.ua = this.getUa();
    this.isNew = $Box.isBox && versionCompare(getVersion(), '7.7.0') >= 0;
    this.isNew90 = $Box.isBox && versionCompare(getVersion(), '9.0.0') >= 0;
    this.ops.sfrom = this.ua;
    !this.ops.noPv && subLog.pv('__subscribeComponentsPv__', this.ops);
    if (location.port && !ops.onLine) {
        host = '';
        extHost = '';
    } else {
        host = 'https://mbd.baidu.com';
        extHost = 'https://ext.baidu.com';
    }
};
var subProto = isub.prototype;

subProto.createDom = function () {
    // 提示toast dom
    var id = this.id;
    var tTips = document.createElement('div');
    tTips.className = 'subscribe-toast subscribe-toast-tips';
    tTips.id = 'toast-text-' + id;
    var dtc = document.createElement('div');
    dtc.className = 'subscribe-tips-context';
    dtc.innerText = '关注失败';
    tTips.appendChild(dtc);
    this.$toastOne = tTips;
    // 跳转toast dom
    var tClick = document.createElement('div');
    tClick.className = 'subscribe-toast subscribe-toast-click';
    tClick.id = 'toast-click-' + id;
    var scc = document.createElement('div');
    scc.className = 'subscribe-click-container';
    scc.innerHTML = '<div class="subscribe-click-context">关注成功，请到“'
        + '<span class="subscribe-click-text2">首页-关注</span>”查看'
        + '</div>'
        + '<div class="subscribe-click-button" ontouchstart="">去查看</div>';
    tClick.appendChild(scc);

    this.$toastTwo = tClick;
    if (!document.getElementById('subcribe_style')) {
        /* eslint-disable max-len */
        var cssText = '.subscribe{box-sizing:border-box;-webkit-box-sizing:border-box}.subscribe-toast-tips{box-sizing:border-box;-webkit-box-sizing:border-box;position:fixed;top:50%;margin-top:-25px;height:50px;width:100%;text-align:center;z-index:200;transition:opacity .3s;-webkit-transition:opacity .3s;opacity:0}.subscribe-toast-tips.subscribe-active{opacity:1}.subscribe-tips-context{box-sizing:border-box;-webkit-box-sizing:border-box;display:inline-block;width:auto;margin:0 auto;height:50px;min-width:100px;padding:0 17px;font:18px/50px Arial,Helvetica,sans-serif;color:#fff;background-color:rgba(0,0,0,0.7);border-radius:2px}@media screen and (max-width:320px){.subscribe-tips-context{font:16px/50px Arial,Helvetica,sans-serif}}.subscribe-toast-click{box-sizing:border-box;-webkit-box-sizing:border-box;position:fixed;bottom:36px;margin-top:-25px;height:50px;width:100%;z-index:200;text-align:center;transition:opacity .3s;-webkit-transition:opacity .3s;opacity:0}.subscribe-toast-click.subscribe-active{opacity:1}.subscribe-click-container{box-sizing:border-box;-webkit-box-sizing:border-box;display:inline-block;width:92%;margin:0 auto;height:50px;min-width:100px;padding:0 17px;background-color:rgba(0,0,0,0.7);border-radius:2px;color:#fff}@media screen and (max-width:320px){.subscribe-click-container{padding:0 10px}}.subscribe-click-context{display:inline-block;vertical-align:top;float:left;box-sizing:border-box;-webkit-box-sizing:border-box;font:16px/50px Arial,Helvetica,sans-serif;width:76%;text-align:left;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}@media screen and (max-width:320px){.subscribe-click-context{font:14px/50px Arial,Helvetica,sans-serif}}.subscribe-click-button{float:right;box-sizing:border-box;-webkit-box-sizing:border-box;display:inline-block;vertical-align:top;margin-top:11px;width:20%;height:28px;border-radius:2px;font:14px/28px Arial,Helvetica,sans-serif;background-color:#3c76ff;text-align:center}@media screen and (max-width:320px){.subscribe-click-button{width:60px;font:12px/28px Arial,Helvetica,sans-serif}}.subscribe-click-button:active{background-color:#3970f2}';
        var tStyle = document.createElement('style');
        tStyle.id = 'subcribe_style';
        tStyle.rel = 'stylesheet';
        tStyle.type = 'text/css';
        tStyle.innerHTML = cssText;
        document.head.appendChild(tStyle);
    }
};

subProto.relateAPI = function (data, callback, failCallback) {
    if (!data || typeof data !== 'object') {
        /* eslint-disable fecs-camelcase */
        if (!data.type || !data.sfrom || !data.third_id || !data.sort_index) {
            throw new Error('missing params');
        } else if (callback && typeof callback !== 'function') {
            throw new Error('callback must be a function');
        } else {
            throw new Error('params error');
        }
    }
    /* eslint-disable fecs-camelcase */
    var thirdID = $Box.isArray(data.third_id) ? data.third_id.join(',') : data.third_id;
    var isNew = this.isNew;


    var sortData = {
        type: data.type,
        sfrom: data.sfrom,
        third_id: thirdID,
        store: isNew ? 'uid_cuid' : 'uid'
    };

    var sortAPI = extHost + '/api/subscribe/v1/relation/get?callback=?&' + toQuery(sortData);
    var sortCallback = function (sdata) {
        callback && callback(sdata);
    };
    var sortFailCallback = function (err) {
        failCallback && failCallback(err);
    };
    loadjs({
        url: sortAPI,
        success: sortCallback,
        error: sortFailCallback
    });
};

subProto.toast = function (config) {
    /**
     *
     * @param config            {object}    配置参数
     * @param config.type       {string}    toast类型 click可点击，tips仅提示
     * @param config.text       {string}    配置文案
     * @param config.url        {string}    toast跳转地址 当type=click时的跳转url，默认跳 手百我的关注
     * @param config.callback   {function}  回调函数callback
     *
     * @update 11.1改动:满足toast-tips,文案定制
     */
    if (!this.isPlainObject(config) || this.isEmptyObject(config)) {
        throw new Error('params error,config is not a json');
    }
    var type = config.type || null;
    var callback = config.callback || null;
    var url = config.url || null;
    var ctext = config.text || null;
    var self = this;
    var isNew = this.isNew;
    if (!type || typeof type !== 'string') {
        throw new Error('params error');
    }
    var $body = document.body;

    var $toast = $body.querySelectorAll('.subscribe-toast');
    if (this.toastBool) {
        clearTimeout(this.toastBool);
        clearTimeout(this.toastTransition);
    }
    if ($toast.length) {
        for (var i = 0; i < $toast.length; i++) {
            $toast[i].parentNode.removeChild($toast[i]);
            self.removeClass($toast[i], 'subscribe-active');
        }
    }
    switch (type) {
        case 'tips':
            subLog.event('subComponents', 'interface', {
                isaladin: this.ops.isaladin ? '1' : '0',
                ua: this.ua,
                pos: 'tips',
                source: this.ops.type ? this.ops.type : 'others'
            });
            if ($Box.isBox) {
                return clientToast(ctext);
            }
            $body.appendChild(self.$toastOne);
            var $toastOne = document.querySelector('#toast-text-' + self.id);
            this.toastTransition = setTimeout(function () {
                if (ctext) {
                    $toastOne.querySelector('.subscribe-tips-context').innerText = ctext;
                }
                $toastOne.className = 'subscribe-toast subscribe-toast-tips subscribe-active';
            }, 10);
            this.toastBool = setTimeout(function () {
                try {
                    self.$toastOne.parentNode.removeChild(self.$toastOne);
                } catch (e) {
                    return;
                }
            }, 3000);
            break;
        case 'click':
            subLog.event('subComponents', 'interface', {
                isaladin: this.ops.isaladin ? '1' : '0',
                ua: this.ua,
                pos: 'click',
                source: this.ops.type ? this.ops.type : 'others'
            });
            if ($Box.isLiteBox) {
                return this.toast({
                    type: 'tips',
                    text: '关注成功，请到“首页-关注”查看'
                });
            }
            if (this.isNew90) {
                return this.toast({
                    type: 'tips',
                    text: config.text ? config.text : '关注成功'
                });
            }
            var versionText = isNew ? '关注' : '我的关注';
            var text = $Box.$isBox() ? versionText : '首页-关注';
            self.$toastTwo.querySelector('.subscribe-click-text2').innerText = text;
            $body.appendChild(self.$toastTwo);
            if (!isNew && $Box.$isBox()) {
                self.$toastTwo.style.bottom = '100px';
                self.$toastTwo.querySelector('.subscribe-click-button').style.display = 'none';
            } else if ($Box.isLiteBox) {
                self.$toastTwo.querySelector('.subscribe-click-button').style.display = 'none';
            }
            this.toastTransition = setTimeout(function () {
                self.addClass(self.$toastTwo, 'subscribe-active');
            }, 10);

            this.toastBool = setTimeout(function () {
                try {
                    self.$toastTwo.parentNode.removeChild(self.$toastTwo);
                } catch (e) {
                    return;
                }
            }, 3000);
            var $toMe = document.querySelector('#toast-click-' + self.id + ' .subscribe-click-button');
            $toMe.onclick = null;
            setTimeout(function () {
                $toMe.onclick = function (e) {
                    self.$toastTwo.parentNode.removeChild(self.$toastTwo);
                    if (typeof callback === 'function') {
                        callback && callback();
                    } else {
                        self.toLandingPage(url);
                    }
                };
            }, 10);
            break;
    }
    return this;

};
subProto.toLandingPage = function (url, isToast) {
    /*
     * 框内cmd打开，框外location跳转
     * 无url则跳转我的关注，7.6以下以及框外执行location跳转
     */
    subLog.event('subComponents', 'interface', {
        isaladin: this.ops.isaladin ? '1' : '0',
        ua: this.ua,
        pos: 'toLanding',
        from: isToast ? 'button' : 'toast',
        source: this.ops.type ? this.ops.type : 'others'
    });
    if (url) {
        var params = $Box.$isIOS() ? {
            newbrowser: 1
        } : {};
        $Box.$isBox() ? o2o(url, params) : window.location.href = url;

    } else if ($Box.$isBox() && versionCompare(getVersion(), '7.6.0') >= 0) {
        if ($Box.isIOS) {
            var cmd = {
                mode: 2,
                /* eslint-disable max-len url */
                url: 'baiduboxapp://apppage?action=openPage&params=%7b%22pageid%22%3a%22mysubscription%22%2c%22url%22%3a%22https%3a%2f%2fmbd.baidu.com%2fwebpage%3faction%3dicard%26type%3dsubscribe%22%2c%22titile%22%3a%22%22%7d',
                minver: '7.6.0'
            };
            iosCMD(cmd.url, function (isTimeout) {
                if (isTimeout) {
                    toast('网络出错，请稍候重新连接');
                }
            });
        } else if ($Box.$isAndroid()) {
            var cmd = {
                mode: '7',
                commands: [{
                    mode: '6',
                    intent: 'intent:#Intent;S.rn_search_box_key=6;S.rn_bundle_id=box.rnplugin.myattention;S.rn_component_name=MyAttention;end',
                    class: 'com.baidu.searchbox.reactnative.RNSearchBoxMainActivity',
                    /* eslint-disable fecs-camelcase */
                    min_v: '25167488'
                }, {
                    mode: '0',
                    intent: 'intent:#Intent;S.user_sub_center_load_url=/webpage?action=icard&type=subscribe;B.launch_center=true;B.user_sub_center_search_enable=false;B.create_menu_key=false;end',
                    class: 'com.baidu.searchbox.xsearch.UserSubscribeCenterActivity',
                    /* eslint-disable fecs-camelcase */
                    dyna_url_key: 'user_sub_center_load_url',
                    /* eslint-disable fecs-camelcase */
                    http_style: true,
                    /* eslint-disable fecs-camelcase */
                    min_v: '24381184'
                }],
                min_v: '24381184'
            };
            androidInvoke('Bdbox_android_utils', 'command', [JSON.stringify(cmd)]);
        }

    } else {
        var suburl = host + '/webpage?action=icard&type=subscribe';
        var urlJSON = toJSON(window.location.href);
        if (urlJSON.channel && urlJSON.channel === 'wise_home') {
            suburl += '&channel=wise_home';
        }
        window.location.href = suburl;
    }
};
subProto.subscribe = function (data, callback, failCallback, unlogin) {
    var self = this;
    var isNew = this.isNew;
    if (!data || typeof data !== 'object') {
        if (!data.type || !data.op_type || !data.third_id) {
            throw new Error('missing params');
        } else if (callback && typeof callback !== 'function') {
            throw new Error('callback must be a function');
        } else {
            throw new Error('params error');
        }
    }
    subLog.event('subComponents', 'interface', {
        isaladin: this.ops.isaladin ? '1' : '0',
        ua: this.ua,
        type: data.op_type,
        pos: 'subscribe',
        source: this.ops.type ? this.ops.type : 'others'
    });
    var errMessage = {};
    var failcb = function (errData) {
        if (!errData.errno) {
            // 未捕获的错误类型，可能是断网，接口500
            errData = {
                errno: 500,
                errmsg: 'request failed,uncaught error'
            };
        }
        if (failCallback) {
            failCallback(errData);
        } else {
            // 框外未登录不弹窗
            if (!errData.errno === 10000) {
                self.toast({
                    type: 'tips'
                });
            }
        }
        // 执行后清空
        errMessage = {};

    };
    var loginAPI = extHost + '/api/subscribe/v1/relation/status?callback=?';
    var receiveData = {
        type: data.type,
        /* eslint-disable fecs-camelcase */
        op_type: data.op_type ? data.op_type : 'add',
        /* eslint-disable fecs-camelcase */
        third_id: data.third_id,
        sfrom: data.sfrom ? data.sfrom : 'sbox',
        source: data.source ? data.source : 'mysub_h5',
        store: (isNew || $Box.isLiteBox) ? 'uid_cuid' : 'uid',
        sid: data.sid ? data.sid : ''
    };
    if (data.ext && this.isPlainObject(data.ext)) {
        receiveData.ext = encodeURIComponent(JSON.stringify(data.ext));
    }
    var receiveAPI = extHost + '/api/subscribe/v1/relation/receive?callback=?&'
        + toQuery(receiveData);
    var loginCallback = function (login) {
        var suc = login.errno;
        var isLogin = login.data.isLogin;
        // {"errno":10000,"request_id":"透传","errmsg":"透传","data":{}}
        if (suc === 0) {
            if (!isLogin && !$Box.$isBox() && !$Box.isLiteBox) {
                if (unlogin) {
                    unlogin();
                } else {
                    errMessage = {
                        errno: 10000,
                        errmsg: login.errmsg || ''
                    };
                    failcb(errMessage);
                    window.location.href = 'http://wappass.baidu.com/passport/login?u='
                        + encodeURIComponent(window.location.href);
                }
            } else if (!isLogin && $Box.$isBox() && !isNew) {
                // 版本小于8.0
                errMessage = {
                    errno: 10010,
                    errmsg: login.errmsg || ''
                };
                failcb(errMessage);
                self.toLogin();
            } else {
                loadjs({
                    url: receiveAPI,
                    success: receiveCallback,
                    error: failcb
                });
            }
        } else {
            // 登录接口错误
            errMessage = {
                errno: 10020,
                errmsg: login.errmsg || ''
            };
            failcb(errMessage);
        }
    };
    var receiveCallback = function (sdata) {
        var suc = sdata.errno;
        if (suc === 0) {
            subLog.event('subComponents', 'interface', {
                isaladin: self.ops.isaladin ? '1' : '0',
                ua: self.ua,
                status: 'success',
                type: data.op_type,
                pos: 'subscribe',
                source: self.ops.type ? self.ops.type : 'others'
            });
            callback && callback(sdata);
        } else {
            // 关注接口错误
            errMessage = {
                errno: 20020,
                errmsg: sdata.errmsg || ''
            };
            failcb(errMessage);
        }
    };
    loadjs({
        url: loginAPI,
        success: loginCallback,
        error: failcb
    });
};
subProto.toLogin = function () {
    /**
     * 调起登录
     */
    subLog.event('subComponents', 'interface', {
        isaladin: this.ops.isaladin ? '1' : '0',
        ua: this.ua,
        pos: 'toLogin',
        source: this.ops.type ? this.ops.type : 'others'
    });
    if (!$Box.$isBox()) {
        window.location.href = 'http://wappass.baidu.com/passport/login?u=' + encodeURIComponent(window.location.href);
    } else if ($Box.$isBox()) {
        var instance = {
            target: '',
            params: {
                subpro: 'webpage_card',
                tpl: 'webpage_card'
            },
            callbackName: '',
            callback: function (res) {
                if (!res) {
                    location.reload(1);
                }
            },
            doLogin: function () {
                this.callbackName && delete window[this.callbackName];
                this.callbackName = '_LOGIN_CALLBACK_' + $Box.getId();
                window[this.callbackName] = this.callback;
                this.params.callback = 'window.' + this.callbackName;
                boxLogin(this.params);
            }
        };
        instance.doLogin();
    }
};
subProto.showDialog = function (text, data, callback, failCallback) {
    return this.subscribe(data, callback, failCallback);
};
subProto.getUa = function () {
    var ua = navigator.userAgent.toLowerCase();
    /* eslint-disable fecs-camelcase */
    /* eslint-disable fecs-camelcase _browsers*/
    var browsers = null;
    switch (!0) {
        case $Box.$isBox():
            browsers = 'bdbox';
            break;
        case /micromessenger/i.test(ua):
            browsers = 'wechat';
            break;
        case /baidubrowser/i.test(ua):
            browsers = 'baidubrowser';
            break;
        case /ucbrowser/i.test(ua):
            browsers = 'ucbrowser';
            break;
        default:
            browsers = 'others';
            break;
    }
    return browsers;
};

// classfunc
subProto.hasClass = function (obj, cls) {
    return obj.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));
};

subProto.addClass = function (obj, cls) {
    if (!this.hasClass(obj, cls)) {
        obj.className = this.trim(obj.className) + ' ' + cls;
    }
};

subProto.removeClass = function (obj, cls) {
    if (this.hasClass(obj, cls)) {
        var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
        obj.className = obj.className.replace(reg, ' ');
    }
};
subProto.trim = function (str) {
    return str.replace(/(^\s*)|(\s*$)/g, '');
};
subProto.isEmptyObject = function (obj) {
    var name;
    for (name in obj) {
        return false;
    }
    return true;
};
subProto.isPlainObject = function (obj) {
    var isjson = typeof(obj) === 'object'
        && Object.prototype.toString.call(obj).toLowerCase() === '[object object]'
        && !obj.length;
    return isjson;
};
return isub;
