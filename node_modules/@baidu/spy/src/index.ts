/**
 * @file spy
 * @author kaivean
 */

interface SpyOption {
    /**
     * 模块ID
     */
    pid: string;

    // 日志ID
    /**
     * 日志ID
     */
    lid?: string;

    /**
     * 全局抽样配置，默认是 1，取值从[0, 1]
     */
    sample?: number;

    /**
     * 是否校验发送字段符合规范，默认是 true
     */
    check?: boolean;
}

interface Option {
    /**
     * 指标组，它的每个key就是指标名称（英文表示），在平台对应分组添加该指标名称便能实现自动统计
     */
    info: object;

    /**
     * 维度信息对象，它的每个字段就是一个维度名称（英文表示），在平台对应分组添加该维度名称便能实现自动统计
     */
    dim?: object;

    /**
     * 分组，默认：common
     */
    group?: string;

    /**
     * 抽样，会覆盖全局抽样配置，默认是 1，取值从[0, 1]
     */
    sample?: number;
}

interface ErrorInfo {
    /**
     * 错误唯一标识，平台会统计该错误唯一标识的数量
     */
    msg?: string;
    [propName: string]: any;
}

interface ErrorOption {
    /**
     * 错误信息对象，它必须有msg字段，是错误唯一标识，其他字段可用户随意添加用来补充错误信息
     */
    info?: ErrorInfo;

    /**
     * 维度信息对象，它的每个字段就是一个维度名称（英文表示），在平台对应分组添加该维度名称便能实现自动统计
     */
    dim?: object;

    /**
     * 分组，默认：common
     */
    group?: string;

    /**
     * 抽样，默认是 1，取值从[0, 1]，该抽样会覆盖实例初始化时的抽样配置
     */
    sample?: number;

    /**
     * 业务拓展信息
     */
    ext?: any;
}

const domain = location.protocol === 'http:'
    ? 'http://sestat.baidu.com/mwb2.gif?'
    : 'https://sp1.baidu.com/5b1ZeDe5KgQFm2e88IuM_a/mwb2.gif?';

const isIos = /(iPhone|iPod|iPad)/.test(navigator.userAgent);

function err(msg: string) {
    console.error(`[spy_log]${msg}`);
    // throw new Error(msg);
}

function stringify(obj: any) {
    return Object.keys(obj).map((key: string) => {
        let value = obj[key];

        if (typeof value === 'undefined') {
            value = '';
        } else if (typeof value !== 'string') {
            value = JSON.stringify(value);
        }

        return encodeURIComponent(key) + '=' + encodeURIComponent(value);
    }).join('&');
}

export default class Spy {

    public sample: any = {};

    public markCache: any = {};

    public option: SpyOption;

    private listenErrorOption: ErrorOption = {};

    constructor(option: SpyOption) {
        this.globalErrorCallback = this.globalErrorCallback.bind(this);

        if (!option.pid) {
            throw new Error('pid is required');
        }

        this.option = {
            pid: option.pid,
            lid: option.lid,
            check: option.check !== false,
            sample: option.sample
        };
    }

    public send(query: any) {
        if (!this.check(query)) {
            return;
        }

        // 当前api设置了抽样，
        if (typeof query.sample === 'number') {
            if (Math.random() > query.sample) {
                return;
            }
        } else if (typeof this.option.sample === 'number' && Math.random() > this.option.sample) { // 否则，用全局抽样
            return;
        }

        delete query.sample;

        query = Object.assign(
            {
                pid: this.option.pid,
                lid: this.option.lid,
                ts: Date.now(),
                group: 'common'
            },
            query
        );

        const url = domain + stringify(query);

        // 目前服务器端支持sendBeacon的post请求，可以优先采用，该api可以降低打点丢失率
        // 但是ios有些问题：http://agroup.baidu.com/share/md/69a7db08788f447a86638bbc5187df6c
        if (!(
            !isIos
            &&  navigator.sendBeacon
            && navigator.sendBeacon(url)
        )) {
            (new Image()).src = url;
        }
    }

    public check(query: any): boolean {
        if (!this.option.check) {
            return true;
        }

        const types = ['perf', 'except', 'dist', 'count'];
        if (types.indexOf(query.type) === -1) {
            err('type only is one of ' + types.join(', '));
            return false;
        }

        if (query.group && query.group.length > 30) {
            err('group length execeeds 30');
            return false;
        }

        const simpleReg = /^[a-zA-Z0-9-_]{0,30}$/;

        if (query.type === 'except') {
            if (
                !(typeof query.info.msg === 'string' && query.info.msg.length)
            ) {
                err('info msg field must be not empty and is String');
                return false;
            }
        } else {
            for (const infoKey of Object.keys(query.info)) {
                if (!simpleReg.test(infoKey)) {
                    err(`info key [${infoKey}] is unexpected. `
                        + 'Length must be not more than 30. '
                        + 'Supported chars: a-zA-Z0-9-_');
                    return false;
                }

                const infoVal = query.info[infoKey];
                if (query.type === 'dist') {
                    if (infoVal.length > 30) {
                        err(`info.${infoKey} value length execeeds 30 when type == 'dist'`);
                        return false;
                    }
                } else if (typeof infoVal !== 'number') {
                    err(`info.${infoKey} value must be number`);
                    return false;
                }
            }
        }

        if (query.dim) {
            for (const dimKey of Object.keys(query.dim)) {
                if (!simpleReg.test(dimKey)) {
                    err(`dim key [${dimKey}] is unexpected. `
                        + 'Length must be not more than 30. '
                        + 'Supported chars: a-zA-Z0-9-_');
                    return false;
                }
                const dimVal = query.dim[dimKey];
                if (!/^[a-zA-Z0-9\-_\*\.\s\/#\+@\&\u4e00-\u9fa5]{0,30}$/.test(dimVal)) {
                    err(`dim.${dimKey} value [${dimVal}] is unexpected. `
                        + 'Length must be not more than 30. '
                        + 'Supported chars: a-zA-Z0-9-_*. /#+@& and Chinese');
                    return false;
                }
            }
        }

        return true;
    }

    /**
     *
     * @param option 配置
     */
    public sendPerf(option: Option) {
        this.send(Object.assign({
            type: 'perf'
        }, option));
    }

    /**
     *
     * @param option 错误配置项
     */
    public sendExcept(option: ErrorOption) {
        this.send(Object.assign({
            type: 'except'
        }, option));
    }

    /**
     *
     * @param option 配置
     */
    public sendDist(option: Option) {
        this.send(Object.assign({
            type: 'dist'
        }, option));
    }

    /**
     *
     * @param option 配置
     */
    public sendCount(option: Option) {
        this.send(Object.assign({
            type: 'count'
        }, option));
    }

    /**
     *
     * @param e 错误实例
     * @param option 错误配置项
     */
    public sendExceptForError(e: Error, option: ErrorOption) {
        const newOpt: ErrorOption = Object.assign({}, option);
        newOpt.info = Object.assign({}, option.info || {}, {
            msg: e.message,
            stack: e.stack
        });

        this.sendExcept(newOpt);
    }

    public getPerformanceTimingInfo(cb: (info?: any) => void): any {
        if (window.performance && window.performance.timing) {
            const timing = window.performance.timing;

            const handle = () => {
                // 此时还处于loadStart，需要等到loadEnd才算完成，所以通过setTimeout轮询
                setTimeout(() => {
                    if (timing.loadEventEnd && timing.loadEventEnd > 0) {
                        const {
                            navigationStart,
                            requestStart,
                            responseStart,
                            responseEnd,
                            domContentLoadedEventStart,
                            domComplete,
                            domLoading,
                            domainLookupStart,
                            domainLookupEnd,
                            connectStart,
                            connectEnd,
                            loadEventStart,
                            loadEventEnd
                        } = timing;
                        cb({
                            // dns查询时间
                            dns: domainLookupEnd - domainLookupStart,
                            // tcp连接时间
                            tcp: connectEnd - connectStart,
                            // 首字节耗时，网络请求 + 后端耗时
                            req: responseStart - requestStart,
                            // html传输耗时
                            res: responseEnd - responseStart,
                            // 页面解析耗时
                            dct: domComplete - domLoading,
                            // load事件回调耗时
                            load: loadEventEnd - loadEventStart,
                            // Dom ready，即Dom构建完成 总耗时
                            domready: domContentLoadedEventStart - navigationStart,
                            // 页面加载完成 总耗时
                            finish: loadEventEnd - navigationStart
                        });
                    } else {
                        // 循环，知道load完成
                        handle();
                    }
                }, 200);

                window.removeEventListener('load', handle);
            };

            if (timing.loadEventEnd && timing.loadEventEnd > 0) {
                handle();
            } else {
                window.addEventListener('load', handle);
            }
        } else {
            cb();
        }
    }

    public listenGlobalError(option?: ErrorOption) {
        if (option) {
            this.listenErrorOption = option;
        }
        window.removeEventListener('error', this.globalErrorCallback);
        window.addEventListener('error', this.globalErrorCallback);
    }

    public unListenGlobalError() {
        window.removeEventListener('error', this.globalErrorCallback);
        this.listenErrorOption = {};
    }

    public startMark(sign: string) {
        this.markCache[sign] = {
            start: Date.now()
        };
    }

    public endMark(sign: string): number | null {
        if (this.markCache[sign]) {
            this.markCache[sign].total = Date.now() - this.markCache[sign].start;
            return this.markCache[sign].total;
        }
        return null;
    }

    public clearMark(sign: string) {
        if (this.markCache[sign]) {
            delete this.markCache[sign];
        }
    }

    public getAllMark() {
        const ret: any = {};
        for (const sign of Object.keys(this.markCache)) {
            ret[sign] = this.markCache[sign].total;
        }
        return ret;
    }

    public clearAllMark() {
        this.markCache = {};
    }

    private globalErrorCallback(event: Event) {
        const eventError: any = event.error || {};
        const newOpt: ErrorOption = Object.assign({}, this.listenErrorOption);
        newOpt.info = Object.assign({}, this.listenErrorOption.info || {}, {
            msg: event.message,
            // 不一定所有浏览器都支持col参数
            colno: event.colno || event.column || (window.event && window.event.errorCharacter),
            lineno: event.lineno || event.line,
            filename: event.filename || event.sourceURL,
            stack: eventError.stack
        });

        this.sendExcept(newOpt);
    }
}
