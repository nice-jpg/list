/**
 * @file 端能力相关函数
 * @author zhangtingting12 <zhangtingting12@baidu.com>
 * Reference: http://icode.baidu.com/repos/baidu/hulk/xbox/tree/master:packages/@baidu/xbox-na
 */

const ua = typeof window === 'object' && window.self === window ? navigator.userAgent : '';
// 是否为ios端
export const isIOS = () => /(iPhone|iPod|iPad)/.test(ua);
// 是否为android端
export const isAndroid = () => /(Android);?[\s\/]+([\d.]+)?/.test(ua);
// 是否为主版。baiduboxapp: 框的常规UA biduboxapp:  个别网站会触发内核的风控策略(比如域名以le.com结尾)，UA会被替换
export const isMainBox = () => (
    / (baiduboxapp|biduboxapp)\//i.test(ua) && !/ (lite|info|pro|mission) (baiduboxapp|biduboxapp)/.test(ua)
);

/**
 * iosInvoke传入schema打开框架
 *
 * @param {string} schema 协议
 */
export const iosInvoke = schema => {
    let elem = document.createElement('iframe');
    let body = document.body || document.getElementsByTagName('body')[0];
    elem.style.display = 'none';
    elem.src = schema;
    body.appendChild(elem);
    setTimeout(function () {
        body.removeChild(elem);
        elem = null;
    }, 0);
};
/**
 * androidInvoke传入schema打开框架
 *
 * @param {string} schema 协议
 * @return {Object} 发起schema请求
 */
export const androidInvoke = schema => {
    let androidJsBridge = window.Bdbox_android_jsbridge;
    if (androidJsBridge && androidJsBridge.dispatch) {
        androidJsBridge.dispatch(schema);
    }
    else {
        let re = window.prompt('BdboxApp:' + JSON.stringify({
            obj: 'Bdbox_android_jsbridge',
            func: 'dispatch',
            args: [schema]
        }));
        return re;
    }
};
/**
 * @function type
 * @param {any} obj - 被判断的对象
 * @return {string} 返回类型：array/date/string/object/undefined/function/boolean/null/regexp/math 等
 */
export const type = obj => Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
let index = 0;
/**
 * getRandomName随机生成唯一名称
 * @param {string} preffix 前缀
 * @return {string} 随机函数名称
 */
export const getRandomName = preffix => {
    index++;
    return preffix + (Date.now().toString(16) + index).slice(-1 * 8);
};
const gb = typeof window === 'object' ? window : global;
/**
 * @function getGlobalFunc
 * @param {function} func - 全局函数
 * @return {string} funcName - 返回全局函数名
 */
export const getGlobalFunc = func => {
    if (typeof func === 'function') {
        const name = `_xfunc_${getRandomName('_xfunc_')}`;
        gb[name] = (...args) => func.apply(gb, args);
        return name;
    }
    return func;
};

/**
 * 经常会出现 params 的 stringify 之后再encode 的情况，这里统一处理了
 * 还处理了函数问题，可以直接传入匿名函数即可自动转为全局函数
 * @function json2params
 * @param {Object} json - 参数
 * @param {boolean} encode - 是否encode
 * @return {Promise} promise - Promise
 */
const json2params = (json, encode = true) => {
    if (type(json) === 'string') {
        return json;
    }
    const rs = {};
    for (let i in json) {
        let j = json[i];
        if (type(j) === 'function') {
            j = getGlobalFunc(j);
        }
        rs[i] = j;
    }

    return encodeURIComponent(JSON.stringify(rs));
};
/**
 * json2query将json转换为query格式
 *
 * @param {Object} json对象
 * @return {string} 拼接的query
 */
const json2query = json => {
    let arr = [];
    for (let i in json) {
        let j = json[i];
        if (type(j) === 'function') {
            j = getGlobalFunc(j);
        }

        arr.push(i + '=' + j);
    }
    return arr.join('&');
};
/**
 * 双端Promise 调起命令，host 和 params 分开处理，支持函数直接传入
 * @param {String} action - schema host 部分
 * @param {object} params - 参数
 * @param {string} schemaHead - schema 头，默认 baiduboxapp
 * @return {Promise}
 */
export function invokeP(action, queryParams = {}, schemaHead = 'baiduboxapp') {
    if (!isMainBox()) {
        return Promise.reject({
            status: 902,
            message: '主版APP外无法调用端能力'
        });
    }
    return new Promise((resolve, reject) => {
        let tmp = queryParams.params || {};
        if (Object.keys(tmp).length === 0 && tmp.constructor === Object || tmp === '%7B%7D' || tmp === '{}') {
            // 删除空的params对象
            delete queryParams.params;
        }
        else if (type(tmp) === 'object') {
            queryParams.params = json2params(tmp);
        }

        const query = {
            ...queryParams,
            callback(result) {
                let data = result;
                if (type(result) === 'string') {
                    try {
                        data = JSON.parse(result);
                    } catch (e) {
                        console.log(e);
                    }
                }
                if (+data.status === 0) {
                    resolve(data.data);
                    return;
                }
                reject(data);
            }
        };
        const search = json2query(query);

        const schema = `${schemaHead}://${action}?${search}`;
        if (isIOS()) {
            iosInvoke(schema);
        }
        else if (isAndroid()) {
            androidInvoke(schema);
        }
    });
}


/**
 * versionCompare比较两个版本
 *
 * @param {string} version1 待比较版本1
 * @param {string} version2 待比较版本2
 * @return {number} 返回结果相同0，1大于2返回1，1小于2返回-1
 */
export const versionCompare = (version1, version2) => {
    version2 += '';
    version1 += '';
    let a = version1.split('.');
    let b = version2.split('.');
    let i = 0;
    let len = Math.max(a.length, b.length);
    for (; i < len; i++) {
        if ((a[i] && !b[i] && parseInt(a[i], 10) > 0) || (parseInt(a[i], 10) > parseInt(b[i], 10))) {
            return 1;
        }
        else if ((b[i] && !a[i] && parseInt(b[i], 10) > 0) || (parseInt(a[i], 10) < parseInt(b[i], 10))) {
            return -1;
        }
    }
    return 0;
};
/**
 * getBoxVersion获取框版本
 *
 * @return {string} 返回版本
 */
const getBoxVersion = () => {
    let version = '0';
    if (typeof window === 'object' && window.baiduboxapp_version) {
        return window.baiduboxapp_version;
    }
    if (isMainBox()) {
        let a;
        if ((a = /baiduboxapp\/([\d.]+)/.exec(ua))) {
            version = a[1];
        }
        else if ((a = /([\d+.]+)_(?:diordna|enohpi)_/.exec(ua))) {
            // 老版本手百
            a = a[1].split('.');
            version = a.reverse().join('.');
        }
    }
    return version;
};
export const version = getBoxVersion();

// export const showToast = message => (
//     invokeP('video/slrShowToastMsg', {
//         params: {
//             message
//         }
//     })
// );
