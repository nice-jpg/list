/**
 * @file 事件触发器
 * @author zhangtingting12 <zhangtingting12@baidu.com>
 */

export default class EventEmitter {

    constructor(prefix = '_') {
        this._events = {};
        this._eventsCount = 0;
        this.prefix = prefix.slice(0, 1); // 前缀一个字符

    }
    /**
     * 增加一个事件监听
     * @public
     * @param {string} event 事件名称
     * @param {function} fn 监听函数
     * @param {object} [context] 可选，上下文
     * @param {Boolean} [once] 可选，监听一次，默认非一次监听
     * @return {object}
     */
    on(event, fn, context, once = false) {
        if (typeof fn !== 'function') {
            throw new TypeError('The listener must be a function');
        }

        const listener = {
            fn,
            context: context || this,
            once
        };
        const evt = this.prefix ? this.prefix + event : event;

        if (!this._events[evt]) {
            this._events[evt] = [];
            this._eventsCount++;
        }
        this._events[evt].push(listener);
        return this;
    }
    /**
    * 增加仅触发一次的事件监听
    * @public
    * @param {string} event 事件名称
    * @param {function} fn 监听函数
    * @param {object} [context] 可选，上下文
    * @return {object}
    */
    once(event, fn, context) {
        return this.on(event, fn, context, true);
    }
    /**
     * 事件触发
     * @public
     * @param {string} event 事件名称
     * @param  {...any} data 发送的数据
     * @return {Boolean} 触发结果
     */
    emit(event, ...data) {
        const evt = this.prefix ? this.prefix + event : event;
        if (!this._events[evt]) {
            return false;
        }
        const listeners = (this._events[evt] || []).slice();

        for (let i = 0, len = listeners.length; i < len; i++) {
            if (listeners[i].once) {
                this.off(event, listeners[i].fn, undefined, true);
            }
            try {
                listeners[i].fn.apply(listeners[i].context, data); 
            }
            catch (err) {
                console.log('emit ' + event + ' event error! please check it: ', err);
            }
            
        }

        return true;
    }
    /**
    * 清除一个事件的所有监听
    * @private
    * @param {string} evt 事件名称
    */
    clearEvent(evt) {
        if (--this._eventsCount === 0) {
            this._events = {};
        }
        else {
            delete this._events[evt];
        }
    }
    /**
    * 移除一个事件监听
    * @public
    * @param {string} event 事件名称
    * @param {function} fn 监听函数
    * @param {object} [context] 可选，上下文
    * @param {Boolean} [once] 可选，监听一次
    * @return {object}
    */
    off(event, fn, context, once) {
        // 计算增加事件前缀
        const evt = this.prefix ? this.prefix + event : event;

        if (this._events[evt] && this._events[evt].length) {
            if (!fn) {
                this.clearEvent(evt);
            }
            else {
                const listeners = this._events[evt];
                let events = [];
                for (let i = 0, len = listeners.length; i < len; i++) {
                    // 即使fn相同，触发次数和上下文不同时也认为是两个不同的监听函数
                    if (listeners[i].fn !== fn
                        || (once && !listeners[i].once) 
                        || (context && listeners[i].context !== context)
                    ) {
                        events.push(listeners[i]);
                    }
                }

                if (events.length) {
                    this._events[evt] = events;
                }
                else {
                    this.clearEvent(evt);
                }
            }
        }
        return this;
    }
   /**
    * 移除全部事件监听
    * @public
    * @return {object}
    */
    removeAllListeners() {
        this._events = {};
        this._eventsCount = 0;
        return this;
    }
}

