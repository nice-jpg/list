/**
 * @file Player主函数
 * @author zhangtingting12 <zhangtingting12@baidu.com>
 */

import EventEmitter from './EventEmitter';
import INNERPLUGINS from './plugins';
import PluginApi from './PluginApi';
import {type} from './utils';

export default class XPlayer extends EventEmitter {
    constructor(config) {
        if (!config 
            || type(config) !== 'object'
            || Object.keys(config).length === 0
            || !config.id) {
            throw new Error('player config error');
        }

        super();
        // 默认在创建对象时使用传入的plugin，依次执行new init create，此值为真时，代表用户需手动调用init和create函数
        this._defaultInit = !config.customizedInit;

        // 初始化默认参数
        this.options = {
            autoplay: false,
            muted: false,
            loop: false
        };

        this.reset(config);
        this._controller = {};
        /**
         * player mode，默认h5方式，使用api.setMode可切换为na方式
         * @type {string}
         */
        this._mode = config.mode || 'h5'; // h5 或 na

        // 支持用户构造时传入插件
        if (config.plugins) {
            this.registryPlugins(config.plugins);
        }
        /**
        * player的parent element
        * @type {Element}
        */
        this._root = document.getElementById(config.id);

        /**
        * 播放器实例
        * @type {Object}
        */
        this.video = null;

        /**
         * Plugin's dictionary.
         * @type {Object}
         */
        this._plugins = INNERPLUGINS || {};

        // 已经初始化
        this._inited = false;

        if (this._defaultInit) {
            this.init();
        }
    }
    /**
    * 重置实例
    */
    reset(config) {
        /**
         * video options
         * @type {boolean}
         */
        // 复制播放器的配置
        Object.keys(config).forEach(prop => {
            if (prop !== 'pluginOptions') {
                this.options[prop] = config[prop];
            }
        });

        // 保存用户plugin配置
        this.pluginOptions = config.pluginOptions || this.pluginOptions || {};
        // 初始化完成reset事件触发
        this._inited && this.emit('reset', config);
    }
    /**
    * 校验插件名称合法
    * @private
    * @param {string} key 插件关键字，作为播放器实例的api字典内的关键字
    * @return {Boolean}
    */
    _validate(key) {
        // 内部属性不可覆盖
        if (key.indexOf('_') === 0) {
            return false;
        }
        // 内部方法不可覆盖
        if (['on', 'once', 'emit', 'off', 'init', 'destroy', 'reset',
            'registryPlugin', 'registryPlugins', 'isSupportCode'].includes(key)) {
            return this[key];
        }
        return true;
    }
    /**
    * 注册一个插件，当实例创建时会被加载，可以覆盖默认插件
    * @param {string} key 插件关键字，作为播放器实例的api字典内的关键字
    * @param {Function} Cls 插件类
    */
    registryPlugin(key, Cls) {
        if (!this._validate(key)) {
            // console.log('请重新定义');
            return;
        }
        if (this._inited) {
            return this._loadPlugin(key, Cls);
        }
        if (!this._plugins) {
            this._plugins = {};
        }
        this._plugins[key] = Cls;
    }

    /**
    * 注册一组插件，当实例创建时会被加载，可以覆盖默认插件
    * @param {object} plugins 插件组 {key1: Plugin1, key2: Plugin2}
    */
    registryPlugins(plugins = {}, mode = 'h5') {
        this._mode = mode;
        Object.keys(plugins).forEach(key => this.registryPlugin(key, plugins[key]));
    }

    /**
    * 挂载播放器实例api
    * @private
    */
    _loadPlugin(pluginName, PluginCls) {
        // 插件挂载
        let api = new PluginApi(pluginName, this);
        let pluginInstance = new PluginCls(api, this.pluginOptions[pluginName]);
        this._defineProp(pluginName, pluginInstance);
    }
    /**
    * 定义播放器plugin对应的方法
    * key是内部属性名称，pluginInstance是内部属性实现方法，在plugins目录下
    * @private
    */
    _defineProp(key, pluginInstance) {
        let descriptor = {};
        if (type(pluginInstance.get) === 'function') {
            descriptor.get = pluginInstance.get.bind(pluginInstance);
            if (type(pluginInstance.set) === 'function') {
                descriptor.set = pluginInstance.set.bind(pluginInstance);
            }
        }
        else if (type(pluginInstance.run) === 'function') {
            descriptor = {
                get() {
                    return pluginInstance.run.bind(pluginInstance);
                }
            };
        }
        Object.defineProperty(this, key, descriptor);
    }

    /**
    * 播放器内部方法,插件不可覆盖此方法，当插件需要在实例化player时需要完成一些操作
    * @inner
    */
    init() {
        // 仅初始化一次
        if (this._inited) {
            return;
        }
        this._inited = true;
        // 初始化插件
        Object.keys(this._plugins).forEach(pluginName => {
            const Cls = this._plugins[pluginName];
            // 插件挂载
            this._loadPlugin(pluginName, Cls);
        });
        // init finished
        this.emit('init');
    }
    /**
    * 销毁实例
    */
    destroy() {
        if (!this._root) {
            return;
        }
        this.emit('destroy'); // 触发destroy通知各个插件卸载事件等
        // 移除所有事件
        this.removeAllListeners();
        this._root = null;
    }
}

