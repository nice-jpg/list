/**
 * @baidu/xbox-player v1.0.7
 * global xbox.player 
 * Created at 2022-01-13 14:49:39
 */

define(['exports'], function (exports) { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  /**
   * @file 事件触发器
   * @author zhangtingting12 <zhangtingting12@baidu.com>
   */
  var EventEmitter = /*#__PURE__*/function () {
    function EventEmitter() {
      var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '_';

      _classCallCheck(this, EventEmitter);

      this._events = {};
      this._eventsCount = 0;
      this.prefix = prefix.slice(0, 1); // 前缀一个字符
    }
    /**
     * 增加一个事件监听
     * @public
     * @param {string} event 事件名称
     * @param {function} fn 监听函数
     * @param {object} [context] 可选，上下文
     * @param {Boolean} [once] 可选，监听一次，默认非一次监听
     * @return {object}
     */


    _createClass(EventEmitter, [{
      key: "on",
      value: function on(event, fn, context) {
        var once = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        if (typeof fn !== 'function') {
          throw new TypeError('The listener must be a function');
        }

        var listener = {
          fn: fn,
          context: context || this,
          once: once
        };
        var evt = this.prefix ? this.prefix + event : event;

        if (!this._events[evt]) {
          this._events[evt] = [];
          this._eventsCount++;
        }

        this._events[evt].push(listener);

        return this;
      }
      /**
      * 增加仅触发一次的事件监听
      * @public
      * @param {string} event 事件名称
      * @param {function} fn 监听函数
      * @param {object} [context] 可选，上下文
      * @return {object}
      */

    }, {
      key: "once",
      value: function once(event, fn, context) {
        return this.on(event, fn, context, true);
      }
      /**
       * 事件触发
       * @public
       * @param {string} event 事件名称
       * @param  {...any} data 发送的数据
       * @return {Boolean} 触发结果
       */

    }, {
      key: "emit",
      value: function emit(event) {
        var evt = this.prefix ? this.prefix + event : event;

        if (!this._events[evt]) {
          return false;
        }

        var listeners = (this._events[evt] || []).slice();

        for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          data[_key - 1] = arguments[_key];
        }

        for (var i = 0, len = listeners.length; i < len; i++) {
          if (listeners[i].once) {
            this.off(event, listeners[i].fn, undefined, true);
          }

          try {
            listeners[i].fn.apply(listeners[i].context, data);
          } catch (err) {
            console.log('emit ' + event + ' event error! please check it: ', err);
          }
        }

        return true;
      }
      /**
      * 清除一个事件的所有监听
      * @private
      * @param {string} evt 事件名称
      */

    }, {
      key: "clearEvent",
      value: function clearEvent(evt) {
        if (--this._eventsCount === 0) {
          this._events = {};
        } else {
          delete this._events[evt];
        }
      }
      /**
      * 移除一个事件监听
      * @public
      * @param {string} event 事件名称
      * @param {function} fn 监听函数
      * @param {object} [context] 可选，上下文
      * @param {Boolean} [once] 可选，监听一次
      * @return {object}
      */

    }, {
      key: "off",
      value: function off(event, fn, context, once) {
        // 计算增加事件前缀
        var evt = this.prefix ? this.prefix + event : event;

        if (this._events[evt] && this._events[evt].length) {
          if (!fn) {
            this.clearEvent(evt);
          } else {
            var listeners = this._events[evt];
            var events = [];

            for (var i = 0, len = listeners.length; i < len; i++) {
              // 即使fn相同，触发次数和上下文不同时也认为是两个不同的监听函数
              if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
                events.push(listeners[i]);
              }
            }

            if (events.length) {
              this._events[evt] = events;
            } else {
              this.clearEvent(evt);
            }
          }
        }

        return this;
      }
      /**
       * 移除全部事件监听
       * @public
       * @return {object}
       */

    }, {
      key: "removeAllListeners",
      value: function removeAllListeners() {
        this._events = {};
        this._eventsCount = 0;
        return this;
      }
    }]);

    return EventEmitter;
  }();

  var Autoplay = /*#__PURE__*/function () {
    function Autoplay(api, pluginOptions) {
      _classCallCheck(this, Autoplay);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
    * autoplay自动播放
    */


    _createClass(Autoplay, [{
      key: "get",
      value: function get() {
        if (this.api.getMode() === 'na') {
          return !!this.api.getPlayerOption('autoplay');
        }

        var video = this.api.getVideoInstance();
        return video ? video.autoplay : '';
      }
    }, {
      key: "set",
      value: function set(isTrue) {
        if (this.api.getMode() === 'na') {
          // 播放之后设置无效
          if (!this.api.getPlayerController('playerKernelInit')) {
            this.api.setPlayerOption('autoplay', isTrue);
          }

          return;
        }

        var video = this.api.getVideoInstance();
        video && (video.autoplay = isTrue);
        this.api.setPlayerOption('autoplay', isTrue);
      }
    }]);

    return Autoplay;
  }();

  var Muted = /*#__PURE__*/function () {
    function Muted(api, pluginOptions) {
      _classCallCheck(this, Muted);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
      * 是否静音
      */


    _createClass(Muted, [{
      key: "get",
      value: function get() {
        // 安卓端内核video.muted会直接将音量设置为0，因此内部维护muted不再更改video.muted值
        if (this.api.getMode() === 'na') {
          // 创建播放器后初始化，通过事件更改状态，此处直接取即可
          return this.api.getPlayerOption('muted');
        }

        var video = this.api.getVideoInstance();
        return video ? video.muted : '';
      }
    }, {
      key: "set",
      value: function set(isTrue) {
        var _this$api$getBoxTools = this.api.getBoxTools(),
            isIOS = _this$api$getBoxTools.isIOS,
            isAndroid = _this$api$getBoxTools.isAndroid,
            invokeP = _this$api$getBoxTools.invokeP;

        var containerId = this.api.getPlayerOption('containerId');
        var video = this.api.getVideoInstance();

        if (this.api.getMode() === 'na') {
          if (isIOS()) {
            // 依赖muted事件更新muted值
            invokeP('video/slrSetMuted', {
              params: {
                containerId: containerId,
                muted: +isTrue
              }
            });
          } else if (isAndroid()) {
            video.zeusVideoExt = JSON.stringify({
              id: containerId,
              // 唯一标识，必选
              name: 'h5samelayer',
              // 播放器类型，默认h5samelayer
              action: 'setMute',
              data: {
                muted: +isTrue
              }
            });
          }

          return;
        }

        video && (video.muted = isTrue);
        this.api.setPlayerOption('muted', isTrue);
      }
    }]);

    return Muted;
  }();

  var Play = /*#__PURE__*/function () {
    function Play(api, pluginOptions) {
      _classCallCheck(this, Play);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
     * 播放{
     * run为本插件对应的方法实际执行的函数
     */


    _createClass(Play, [{
      key: "run",
      value: function run() {
        if (this.api.getMode() === 'na') {
          return this.naRun();
        }

        this.h5Run();
      }
    }, {
      key: "h5Run",
      value: function h5Run() {
        var video = this.api.getVideoInstance();
        return video && video.play();
      }
    }, {
      key: "naRun",
      value: function naRun() {
        var _this = this;

        var _this$api$getBoxTools = this.api.getBoxTools(),
            isIOS = _this$api$getBoxTools.isIOS,
            isAndroid = _this$api$getBoxTools.isAndroid,
            invokeP = _this$api$getBoxTools.invokeP;

        if (isIOS()) {
          var containerId = this.api.getPlayerOption('containerId');
          var player = this.api.getPlayerInstance();
          var paused = player.paused;
          invokeP('video/slrPlayPlayer', {
            params: {
              containerId: containerId
            }
          }).then(function () {
            // 主要解决12.13之前的版本暂停后play事件的触发
            if (paused && _this.api.getPlayerController('playerKernelInit')) {
              _this.api.emit('play');

              _this.api.setPlayerOption('paused', false);

              _this.api.emit('playing');
            }
          });
        } else if (isAndroid()) {
          this.h5Run();
        }
      }
    }]);

    return Play;
  }();

  var Volume = /*#__PURE__*/function () {
    function Volume(api, pluginOptions) {
      _classCallCheck(this, Volume);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
    * volume声音
    */


    _createClass(Volume, [{
      key: "get",
      value: function get() {
        // 端内统一用option来维护volume值，安卓端video.volume用于更改
        if (this.api.getMode() === 'na') {
          return this.api.getPlayerOption('volume');
        }

        var video = this.api.getVideoInstance();
        return video ? video.volume : '';
      }
    }, {
      key: "set",
      value: function set(vol) {
        var _this = this;

        var _this$api$getBoxTools = this.api.getBoxTools(),
            isIOS = _this$api$getBoxTools.isIOS,
            invokeP = _this$api$getBoxTools.invokeP;

        var containerId = this.api.getPlayerOption('containerId');

        if (this.api.getMode() === 'na' && isIOS()) {
          invokeP('video/slrSetSystemVolume', {
            params: {
              containerId: containerId,
              volume: vol
            }
          }).then(function () {
            return _this.api.setPlayerOption('volume', vol);
          });
          return;
        }

        var video = this.api.getVideoInstance();
        video && (video.volume = vol);
      }
    }]);

    return Volume;
  }();

  var Duration = /*#__PURE__*/function () {
    function Duration(api, pluginOptions) {
      _classCallCheck(this, Duration);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
     * 时长，用户只可读取该属性
     * run为本插件对应的方法实际执行的函数
     */


    _createClass(Duration, [{
      key: "get",
      value: function get() {
        var isIOS = this.api.getBoxTools().isIOS;

        if (this.api.getMode() === 'na' && isIOS()) {
          return this.api.getPlayerOption('duration');
        }

        var video = this.api.getVideoInstance();
        return video ? video.duration : '';
      }
    }]);

    return Duration;
  }();

  var PlayerError = /*#__PURE__*/function () {
    function PlayerError(api, pluginOptions) {
      _classCallCheck(this, PlayerError);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
     * 错误，用户只可读取该属性
     * run为本插件对应的方法实际执行的函数
     */


    _createClass(PlayerError, [{
      key: "get",
      value: function get() {
        var isIOS = this.api.getBoxTools().isIOS;

        if (this.api.getMode() === 'na' && isIOS()) {
          return this.api.getPlayerOption('error');
        }

        var video = this.api.getVideoInstance();
        return video ? video.error : '';
      }
    }]);

    return PlayerError;
  }();

  var PlaybackRate = /*#__PURE__*/function () {
    function PlaybackRate(api, pluginOptions) {
      _classCallCheck(this, PlaybackRate);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
    * 播放倍速
    */


    _createClass(PlaybackRate, [{
      key: "get",
      value: function get() {
        var isIOS = this.api.getBoxTools().isIOS;

        if (this.api.getMode() === 'na' && isIOS()) {
          return this.api.getPlayerOption('playbackRate');
        }

        var video = this.api.getVideoInstance();
        return video ? video.playbackRate : '';
      }
    }, {
      key: "set",
      value: function set(rate) {
        var _this = this;

        var _this$api$getBoxTools = this.api.getBoxTools(),
            isIOS = _this$api$getBoxTools.isIOS,
            invokeP = _this$api$getBoxTools.invokeP;

        if (this.api.getMode() === 'na' && isIOS()) {
          var containerId = this.api.getPlayerOption('containerId');
          invokeP('video/slrPlaybackRate', {
            params: {
              containerId: containerId,
              playbackRate: rate
            }
          }) // 内核未初始化
          .then(function (res) {
            return !_this.api.getPlayerController('playerKernelInit') && _this.api.setPlayerOption('playbackRate', res.playbackRate);
          });
          return;
        }

        var video = this.api.getVideoInstance();
        video && (video.playbackRate = rate);
        this.api.setPlayerOption('playbackRate', rate);
      }
    }]);

    return PlaybackRate;
  }();

  var Src = /*#__PURE__*/function () {
    function Src(api, pluginOptions) {
      _classCallCheck(this, Src);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }

    _createClass(Src, [{
      key: "get",
      value: function get() {
        var isIOS = this.api.getBoxTools().isIOS;

        if (this.api.getMode() === 'na' && isIOS()) {
          return this.api.getPlayerOption('src');
        }

        var video = this.api.getVideoInstance();
        return video ? video.src : '';
      } // 设置统一用reset方法

    }]);

    return Src;
  }();

  /**
   * @file Create
   * @author zhangtingting12 <zhangtingting12@baidu.com>
   */

  /**
   * ios端内外标签高度
   * @param {number} height 生成ios的特殊dom高度，需要内部高度大于外部，触发overflow:scroll
   */
  var genDomHeight = function genDomHeight(height) {
    return {
      wrap: height,
      inner: height + 1
    };
  };

  var Create = /*#__PURE__*/function () {
    function Create(api, pluginOptions) {
      var _this = this;

      _classCallCheck(this, Create);

      this.api = api;
      this.pluginOptions = pluginOptions; // 暂时定义为new Player时用户传过来的

      this.perf = {}; // 记录时间点:clk点击, createStart开始创建,queryStart开始查询

      this.perflog = {}; // 记录耗时

      this.isEmitPerf = false; // 控制性能事件发送

      this.api.on('reset', function (data) {
        return _this.reset(data);
      });
      this.api.on('destroy', function () {
        return _this.destroy();
      });
    } // 可设置查询次数，使用h5模式 h5Mode=true


    _createClass(Create, [{
      key: "run",
      value: function run(iosMaxQueryCnt, h5Mode) {
        if (this.api.getVideoInstance() || !this.api.getRoot()) {
          return;
        }

        var options = this.api.getPlayerOption();
        this.perf.createStart = +new Date();
        this.perf.clk = options.prepareInvokePlayerTime || this.perf.createStart;

        var _this$api$getBoxTools = this.api.getBoxTools(),
            isMainBox = _this$api$getBoxTools.isMainBox,
            version = _this$api$getBoxTools.version,
            versionCompare = _this$api$getBoxTools.versionCompare,
            isIOS = _this$api$getBoxTools.isIOS,
            isAndroid = _this$api$getBoxTools.isAndroid;

        this.isIOS = isIOS();
        this.isAndroid = isAndroid();
        var getRandomName = this.api.getBoxTools().getRandomName;
        this.cid = getRandomName('h5-samelayer-cid-') || this.cid;
        this.api.setPlayerOption('containerId', this.cid); // 业务方指定了同层失败不使用默认video标签，也即只触发mode=h5，不创建video

        options.customizedVideo && this.api.setPlayerController('slrOnly', true); // ios在12.9时功能完全,android在12.10时功能完全

        if (!h5Mode && isMainBox() && (this.isIOS && versionCompare(version, '12.9') >= 0 || this.isAndroid && versionCompare(version, '12.10') >= 0)) {
          if (this.isIOS) {
            this.iosMaxQueryCnt = iosMaxQueryCnt || 5;
            return this.iosCreateVideo();
          } else if (this.isAndroid) {
            return this.androidCreateVideo(options.pageUrl);
          }
        }

        this.h5Run();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var invokeP = this.api.getBoxTools().invokeP;
        var video = this.api.getVideoInstance();
        var controller = this.api.getPlayerController();

        if (this.api.getMode() === 'na') {
          // 卸载页面事件
          window.removeEventListener('pagehide', controller.pagehideHandler);
          window.removeEventListener('pageshow', controller.pageshowHandler);

          if (this.isIOS) {
            var eventCallback = controller.eventCallback;

            window[eventCallback] = function () {};

            invokeP('video/slrStopPlayer', {
              params: {
                containerId: this.cid
              }
            }); // 卸载页面显隐事件

            document.removeEventListener(controller.visibilityChange, controller.visibilityHandler);
            this.removeDom();
            return;
          } else if (this.isAndroid) {
            var jscallback = controller.operationjscallback;

            window[jscallback] = function () {};

            invokeP('v5/datachannel/unregister', {
              action: 'com.baidu.videoplayer.operationresult',
              jscallback: jscallback
            });
          }
        } // 卸载video事件


        Object.keys(controller.videoEventHandler).forEach(function (evtname) {
          return video.removeEventListener(evtname, controller.videoEventHandler[evtname]);
        }); // 卸载全屏事件

        Object.keys(controller.docEventHandler).forEach(function (evtname) {
          return document.removeEventListener(evtname, controller.docEventHandler[evtname]);
        }); // android的NA播放器依赖此处销毁

        video.src = '';
        this.removeDom();
      }
    }, {
      key: "removeDom",
      value: function removeDom() {
        var dom = this.api.getVideoInstance();

        if (dom) {
          dom.parentNode && dom.parentNode.removeChild(dom);
        }

        this.api.setVideoInstance(null);
      }
    }, {
      key: "iosCreateVideo",
      value: function iosCreateVideo() {
        var root = this.api.getRoot();
        var rootPos = this.getContainerBox(root);
        var options = this.api.getPlayerOption(); // 没有指定宽高则默认使用外层div的宽高

        this.width = options.width || rootPos.width;
        this.height = options.height || rootPos.height;

        var _genDomHeight = genDomHeight(this.height),
            wrap = _genDomHeight.wrap,
            inner = _genDomHeight.inner;

        var video = document.createElement('div');
        video.className = this.cid;
        video.style = 'width:' + this.width + 'px;height:' + wrap + 'px;' + 'overflow: scroll; -webkit-overflow-scrolling: touch; background-color: transparent;';
        var videoInner = document.createElement('div');
        videoInner.style = 'width: 100%; height:' + inner + 'px'; // 预创建

        options.precreate && video.setAttribute('data-precreatevideoinfo', JSON.stringify({
          videoUrl: options.src,
          vid: options.vid,
          playerControlType: options.playerControlType || 0
        })); // 预取推荐使用单独的prefetch方法
        // options.prefetchVideoInfo
        //     && video.setAttribute('data-prefetchvideoinfo', JSON.stringify(options.prefetchVideoInfo));

        video.appendChild(videoInner);
        root.appendChild(video);
        this.times = 0;
        this.isScrollViewFound = false;
        this.isRenderComplete = false;
        this.api.setVideoInstance(video); // 获取video的真实宽高开始查找

        var position = options.position || this.getContainerBox(video);
        this.api.setPlayerOption('', {
          width: this.width,
          height: this.height,
          position: position
        });
        this.perf.queryStart = +new Date();
        this.iosQuery(position);
      }
    }, {
      key: "getContainerBox",
      value: function getContainerBox(e) {
        var bcr = e.getBoundingClientRect();
        return {
          left: bcr.left + window.scrollX,
          top: bcr.top + window.scrollY,
          width: Math.round(bcr.width),
          height: Math.round(bcr.height)
        };
      }
    }, {
      key: "iosQuery",
      value: function iosQuery(position) {
        var _this2 = this;

        var invokeP = this.api.getBoxTools().invokeP; // 超过iosMaxQueryCnt次数且同层渲染失败

        if (++this.times > this.iosMaxQueryCnt && !(this.isScrollViewFound && this.isRenderComplete)) {
          this.perflog.queryfail = +new Date() - this.perf.queryStart;
          return this.h5Run();
        }

        var params = {
          containerId: this.cid,
          position: position,
          scrollHeight: genDomHeight(position.height).inner
        }; // 能力超时和调用失败时，重试并且退化

        invokeP('video/slrIsFoundContainerView', {
          params: params
        }).then(function (data) {
          // ios ab实验开关，默认值为0关闭态，
          if (!data.isSupportSameLR) {
            return _this2.h5Run();
          }

          _this2.perflog.model = data.detailMsg || null;

          if (data.isScrollViewFound) {
            _this2.isScrollViewFound = true;

            if (data.isRenderComplete) {
              _this2.isRenderComplete = true;
              _this2.perflog.count = _this2.times;
              _this2.perflog.querysuc = +new Date() - _this2.perf.queryStart;
              _this2.times = 999;
              return _this2.iosInvokePlayer();
            }
          }

          _this2.iosQuery(position);
        }).catch(function (e) {
          _this2.perflog.queryfail = +new Date() - _this2.perf.queryStart;

          _this2.h5Run();
        });
      }
    }, {
      key: "iosInvokePlayer",
      value: function iosInvokePlayer() {
        var _this3 = this;

        var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'video/slrInvokePlayer';
        var cid = this.cid;

        var _this$api$getBoxTools2 = this.api.getBoxTools(),
            invokeP = _this$api$getBoxTools2.invokeP,
            getGlobalFunc = _this$api$getBoxTools2.getGlobalFunc; // 设置事件回调


        var eventCallback = this.api.getPlayerController('eventCallback') || getGlobalFunc(function (evtName, evtData) {
          return _this3.iosPlayerEventDispatch(evtName, evtData);
        });
        this.api.setPlayerController('eventCallback', eventCallback);
        var options = this.api.getPlayerOption();
        var fullScreenType = options.fullScreenType || 'windowFullScreen'; // jssdk使用true or false，端上使用1 or 0
        // 默认忽略转屏

        var isIgnoreDeviceOrientation = !options.hasOwnProperty('isIgnoreDeviceOrientation') || !!options.isIgnoreDeviceOrientation;
        var params = {
          containerId: cid,
          eventCallback: eventCallback,
          videoinfo: _objectSpread2(_objectSpread2({}, options), {}, {
            vid: options.vid,
            videoUrl: options.src,
            posterImage: options.poster,
            // autoPlay: +options.autoplay,
            muted: +options.muted,
            loop: +options.loop,
            syncPlayerPosition: 1,
            fullScreenType: fullScreenType,
            isIgnoreDeviceOrientation: +isIgnoreDeviceOrientation,
            // eslint-disable-next-line
            ext_log: _objectSpread2({
              prepareInvokePlayerTime: this.perf.clk
            }, options.ext || {})
          })
        };
        var player = this.api.getPlayerInstance();
        invokeP(schema, {
          params: params
        }).then(function () {
          _this3.api.setMode('na');

          _this3.perflog.create = +new Date() - _this3.perf.createStart;

          _this3.api.emit('ready', {
            mode: 'na',
            isIOS: _this3.isIOS,
            isAndroid: _this3.isAndroid
          });

          var _this3$api$getPlayerC = _this3.api.getPlayerController(),
              fromCache = _this3$api$getPlayerC.fromCache,
              hidePlaying = _this3$api$getPlayerC.hidePlaying;

          if (fromCache && hidePlaying || !fromCache && options.autoplay) {
            _this3.isEmitPerf = true;
            player.play();

            _this3.api.setPlayerController('fromCache', false);

            _this3.api.setPlayerController('hidePlaying', false);
          }
        }).catch(function (e) {
          _this3.h5Run();
        });
        this.iosUpdatePlayerStatus();

        if (options.hasOwnProperty('volume')) {
          player.volume = options.volume;
        } else {
          // 更新系统声音
          invokeP('video/slrGetSystemVolume', {
            params: {
              containerId: this.cid
            }
          }).then(function (res) {
            return _this3.api.setPlayerOption('volume', res.volume);
          });
        }

        this.api.setPlayerOption('', {
          ended: false,
          paused: false,
          fullscreen: false,
          currentTime: 0,
          duration: 0,
          readyState: 0,
          networkState: 0,
          fullScreenType: fullScreenType,
          isIgnoreDeviceOrientation: isIgnoreDeviceOrientation,
          timeInterval: options.timeInterval || 1,
          // ios设置播放器进度间隔
          accurate: options.accurate || false // ios跳转精确定位

        }); // 初始化全屏函数

        var ev1 = this.api.getPlayerController('fullscreenEvt') || function (e) {
          e.stopPropagation();
          e.preventDefault();
        };

        this.api.setPlayerController('fullscreenEvt', ev1);
        this.iosVideoVisible();
      }
    }, {
      key: "iosVideoVisible",
      value: function iosVideoVisible() {
        var _this4 = this;

        if (this.api.getPlayerController('visibilityHandler')) {
          // 避免重复增加
          return;
        }

        var state = '';
        var visibilityChange = '';

        if (typeof document.visibilityState !== 'undefined') {
          state = 'visibilityState';
          visibilityChange = 'visibilitychange';
        } else if (typeof document.webkitVisibilityState !== 'undefined') {
          state = 'webkitVisibilityState';
          visibilityChange = 'webkitvisibilitychange';
        }

        if (!visibilityChange) {
          /* eslint-disable no-console */
          console.log('browser donot supports the Page Visibility API.');
          /* eslint-enable no-console */

          return;
        }

        var handler = function handler() {
          var player = _this4.api.getPlayerInstance();

          if (!player) {
            return;
          }

          if (document[state] === 'visible') {
            if (_this4.api.getPlayerController('hideNeedResume')) {
              player.reset({
                src: player.src
              }); // 重置不能同步进度，需要调用端能力同步具体见文档

              player.play();

              _this4.api.setPlayerController('hideNeedResume', false);
            }
          } else {
            // 起播成功，且视频不处于暂停态
            if (_this4.api.getPlayerController('playerKernelInit') && !player.ended && !player.paused) {
              player.pause();

              _this4.api.setPlayerController('hideNeedResume', true);
            }
          }
        };

        this.api.setPlayerController('visibilityChange', visibilityChange);
        this.api.setPlayerController('visibilityHandler', handler); // safari 7 和其他现代浏览器生效 android 4.4及以上生效

        document.addEventListener(visibilityChange, handler, false);
        this.naBackRecovery();
      }
    }, {
      key: "naBackRecovery",
      value: function naBackRecovery() {
        var _this5 = this;

        if (this.api.getPlayerController('pagehideHandler')) {
          // 避免重复增加
          return;
        }

        var pageshowHandler = function pageshowHandler(e) {
          if (!e.persisted) {
            return;
          } // 从缓存中读取


          var player = _this5.api.getPlayerInstance();

          if (_this5.isIOS) {
            setTimeout(function () {
              _this5.api.setPlayerController('fromCache', true);

              _this5.perf.clk = +new Date();
              _this5.perf.createStart = _this5.perf.clk;

              _this5.iosCreateVideo();
            }, 10);
          } else if (_this5.api.getPlayerController('hidePlaying')) {
            // 安卓
            player.play();

            _this5.api.getPlayerController('hidePlaying', false);
          }
        };

        window.addEventListener('pageshow', pageshowHandler);
        this.api.setPlayerController('pageshowHandler', pageshowHandler);

        var pagehideHandler = function pagehideHandler() {
          if (_this5.isIOS) {
            // 卸载页面移除dom
            _this5.removeDom();

            _this5.perf = {};
          }

          var player = _this5.api.getPlayerInstance(); // 判断正在播放：起播成功，且视频不处于暂停态


          var playing = _this5.api.getPlayerController('playerKernelInit') && !player.ended && !player.paused; // 正在播放的视频缓存恢复后仍然播放

          _this5.api.setPlayerController('hidePlaying', playing);
        };

        window.addEventListener('pagehide', pagehideHandler);
        this.api.setPlayerController('pagehideHandler', pagehideHandler);
      }
    }, {
      key: "iosUpdatePlayerStatus",
      value: function iosUpdatePlayerStatus() {
        var _this6 = this;

        var invokeP = this.api.getBoxTools().invokeP; // 更新播放器状态初始值

        invokeP('video/slrGetPlayerStatus', {
          params: {
            containerId: this.cid,
            gather: ['muted', 'duration', 'rate', 'loop']
          }
        }).then(function (res) {
          return _this6.api.setPlayerOption('', {
            muted: !!res.muted,
            duration: res.duration || 0,
            playbackRate: res.rate,
            loop: !!res.loop
          });
        });
      }
    }, {
      key: "iosPlayerEventDispatch",
      value: function iosPlayerEventDispatch(evtName) {
        var evtData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (!evtName || evtData.containerId !== this.cid) {
          return;
        }

        delete evtData.containerId;

        switch (evtName) {
          case 'slrPlayerStateChanged':
            this.iosPlayerStatusDispatch(evtData);
            break;

          case 'slrLoadingViewStatusChanged':
            this.api.setPlayerOption('networkState', 2); // loading中说明视频在加载中

            this.api.emit('loadingchange', evtData.loadingShow);
            break;

          case 'slrMuteChanged':
            this.api.setPlayerOption('', {
              muted: !!evtData.muted,
              volume: evtData.volume
            });
            this.api.emit('mutedchange', !!evtData.muted);
            break;

          case 'slrSystemVolumeChanged':
            this.api.setPlayerOption('volume', evtData.volume);
            this.api.emit('volumechange', evtData.volume);
            break;

          case 'slrPlayerProgressChanged':
            this.api.setPlayerOption('', {
              currentTime: evtData.currentTime,
              duration: evtData.duration
            });
            this.api.emit('timeupdate', evtData.currentTime);
            break;

          case 'slrRateChanged':
            this.api.setPlayerOption('playbackRate', evtData.newRate);
            this.api.emit('ratechange', evtData.newRate);
            break;

          
        }
      }
    }, {
      key: "iosPlayerStatusDispatch",
      value: function iosPlayerStatusDispatch(evtData) {
        var evtname = '';

        switch (evtData.event) {
          case 'onStartPrepare':
            // 开始准备播放
            evtname = 'prepare';
            this.api.setPlayerOption('', {
              ended: false,
              readyState: 1
            });
            break;

          case 'onPrepared':
            // 准备播放缓冲成功
            evtname = 'canplay';
            this.api.setPlayerOption('readyState', 4);
            break;

          case 'onPlaySuccess':
            // 启播成功
            this.api.setPlayerController('playerKernelInit', true);
            this.perflog.clk2play = +new Date() - this.perf.clk;
            this.iosUpdatePlayerStatus(); // 启播后更新播放器信息，尤其是duration在启播后才能得到

            this.isEmitPerf && this.emitPerfEvent();

          case 'onReplay':
            // 重新播放 12.13增加
            this.api.setPlayerOption('ended', false);

          case 'onResumePlay':
            // 继续播放 12.13增加
            this.api.emit('play');
            this.api.setPlayerOption('paused', false);
            evtname = 'playing';
            break;

          case 'onPaused':
            // 暂停
            evtname = 'pause';
            this.api.setPlayerOption('paused', true);
            break;

          case 'onFinished':
            // 播放完成
            evtname = 'ended';
            this.api.setPlayerOption('ended', true);
            break;

          case 'onClosed':
            // 播放器关闭
            evtname = 'closed';
            break;

          case 'onError':
            // 播放错误
            evtname = 'error';
            this.api.setPlayerOption('error', evtData);
            break;
        }

        evtname && this.api.emit(evtname);
      }
      

    }, {
      key: "androidCreateVideo",
      value: function androidCreateVideo() {
        var _this7 = this;

        var pageUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        this.api.setMode('na');
        this.androidNaEvent().then(function () {
          _this7.createVideoTag({
            't7-video-player-type': 'h5samelayer',
            't7-video-player-ext': pageUrl
          });

          _this7.androidInitPlayer();
        });
        this.naBackRecovery();
      }
    }, {
      key: "androidInitPlayer",
      value: function androidInitPlayer() {
        var _this8 = this;

        var video = this.api.getVideoInstance();
        var options = this.api.getPlayerOption(); // 传递日志

        var log = {};
        ['from', 'page', 'value'].forEach(function (key) {
          if (options.hasOwnProperty(key)) {
            log[key] = options[key];
          }
        }); // 12.23新增：passThrough 可配置的videoInfo透传参数key

        var passThrough = ['mpd', 'clarityUrl'].concat(options.passThrough || []); // 12.23新增videoInfo: 用于透传端上播放器扩展的能力字段
        // 协议确实是要求videoUrl或clairty必须有一个: http://wiki.baidu.com/pages/viewpage.action?pageId=1522277714
        // 优先级：mpd > clairty > videoUrl > src

        var videoInfo = {
          videoUrl: options.src
        };
        passThrough.forEach(function (key) {
          options[key] && (videoInfo[key] = options[key]);
        }); // 指令长度有限制，因此mpd和clarityUrl做下互斥处理

        if (videoInfo.mpd && videoInfo.clarityUrl) {
          delete videoInfo.clarityUrl;
        } // 12.9新增: ignore4gToast needReadLocalProgress 获取系统音量


        video.zeusVideoExt = JSON.stringify({
          id: this.cid,
          name: 'h5samelayer',
          action: 'init',
          data: {
            vid: options.vid,
            ignore4gToast: +!!options.ignore4gToast,
            syncProgress: +!!options.needReadLocalProgress,
            getSysVolume: +(!options.hasOwnProperty('volume') || options.muted),
            videoInfo: videoInfo,
            samelrLog: _objectSpread2(_objectSpread2({}, log), {}, {
              extLog: _objectSpread2({
                prepareInvokePlayerTime: this.perf.clk
              }, options.ext || {})
            })
          }
        });
        var player = this.api.getPlayerInstance();

        var loadHandler = function loadHandler() {
          // 播放器默认静音
          _this8.perflog.create = +new Date() - _this8.perf.createStart;

          if (options.hasOwnProperty('volume')) {
            player.volume = options.volume;
          } // 13.2新增：搜索新增由端上控制音量，前端不再维护静音状态


          !options.useAutoVolume && (player.muted = !!options.muted);

          if (options.hasOwnProperty('seekSeconds')) {
            player.currentTime = options.seekSeconds;
          }

          video.removeEventListener('loadedmetadata', loadHandler);
        }; // 在端上返回onPrepared播放器创建完成事件，内核会调用loadedmetadata事件，在此处理一些音量等事件


        video.addEventListener('loadedmetadata', loadHandler);
        this.api.emit('ready', {
          mode: 'na',
          isIOS: this.isIOS,
          isAndroid: this.isAndroid
        });
      }
    }, {
      key: "androidNaEvent",
      value: function androidNaEvent() {
        var _this9 = this;

        var _this$api$getBoxTools3 = this.api.getBoxTools(),
            invokeP = _this$api$getBoxTools3.invokeP,
            getGlobalFunc = _this$api$getBoxTools3.getGlobalFunc;

        var jscallback = getGlobalFunc(function (action, data) {
          if (action !== 'com.baidu.videoplayer.operationresult' || !_this9.api.getVideoInstance()) {
            return;
          }

          try {
            data = JSON.parse(data);
          } catch (e) {}

          if (data.status === 0) {
            var id = _this9.api.getPlayerOption('containerId');

            var video = _this9.api.getVideoInstance();

            var player = _this9.api.getPlayerInstance();

            switch (data.action) {
              case 'init':
                break;
              // 端上的操作只有在volume为0时才是静音操作，静音态关联由sdk维护

              case 'volumeChanged':
                // volumeChanged存在物理按键触发和video.volume赋值触发
                if (player.volume === data.data.volume && !_this9.api.getPlayerOption('useAutoVolume')) {
                  return;
                } // 根据事件结果来控制option内的volume，video.volume只用来改变音量


                _this9.api.setPlayerOption('volume', data.data.volume);

                if (video.volume !== data.data.volume) {
                  player.volume = data.data.volume;
                }

                _this9.api.emit('volumechange', data.data.volume); // 起播后才可控制静音状态


                if (!_this9.api.getPlayerController('playerKernelInit')) {
                  return;
                }

                if (data.data.volume === 0 && !player.muted) {
                  // 音量为0 置为静音态
                  player.muted = true;
                }

                if (data.data.volume > 0 && player.muted) {
                  // 静音态音量变化 取消静音
                  player.muted = false;
                }

                break;

              case 'setMute':
                if (player.muted !== !!data.data.muted) {
                  // 静音状态变化
                  _this9.api.setPlayerOption('muted', !!data.data.muted);

                  _this9.api.emit('mutedchange', !!data.data.muted);
                }

                break;

              case 'getSysVolume':
                var newVolume = +data.data.volume === 1 ? +data.data.volume : +data.data.volume.toFixed(3); // 当option内没有配置volume值时，保存默认值，当loadedmetadata触发时统一设置volume

                _this9.api.setPlayerOption('volume', newVolume);

                break;

              
            }
          }
        });
        this.api.setPlayerController('operationjscallback', jscallback);
        return invokeP('v5/datachannel/register', {
          action: 'com.baidu.videoplayer.operationresult',
          jscallback: jscallback
        });
      }
    }, {
      key: "videoEventDispatch",
      value: function videoEventDispatch() {
        var _this10 = this;

        var video = this.api.getVideoInstance();
        var isH5 = this.api.getMode() === 'h5';
        var evtArr = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'waiting', 'webkitendfullscreen' // iOS下退出全屏触发事件
        ];
        isH5 && evtArr.push('volumechange');
        var evtHandler = {};
        evtArr.forEach(function (evtname) {
          evtHandler[evtname] = function (e) {
            var playerKernelInit = _this10.api.getPlayerController('playerKernelInit');

            if (!isH5 && !playerKernelInit && evtname === 'canplay' && _this10.api.getPlayerOption('autoplay')) {
              _this10.isEmitPerf = true; // na情况下自动播放

              video.play();
            }

            if (!playerKernelInit && evtname === 'play') {
              // 首次play触发打点
              _this10.api.setPlayerController('playerKernelInit', true);

              _this10.perflog.clk2play = +new Date() - _this10.perf.clk;
              _this10.isEmitPerf && _this10.emitPerfEvent();
            }

            _this10.api.emit(evtname, e);
          };

          video.addEventListener(evtname, evtHandler[evtname]);
        });
        this.api.setPlayerController('videoEventHandler', evtHandler);
        var docEvtHandler = {};
        ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'].forEach(function (item) {
          docEvtHandler[item] = function () {
            var fullscreenEl = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;

            if (fullscreenEl && fullscreenEl === video) {
              _this10.api.setPlayerOption('fullscreen', true);

              _this10.api.emit('enterfullscreen');
            } else if (_this10.api.getPlayerOption('fullscreen')) {
              _this10.api.setPlayerOption('fullscreen', false);

              _this10.api.emit('exitfullscreen');
            }
          };

          document.addEventListener(item, docEvtHandler[item]);
        });
        this.api.setPlayerController('docEventHandler', docEvtHandler);
      }
    }, {
      key: "createVideoTag",
      value: function createVideoTag() {
        var attr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var root = this.api.getRoot();
        var options = this.api.getPlayerOption();
        var video = document.createElement('video');
        var width = options.width ? options.width + 'px' : '100%';
        var height = options.height ? options.height + 'px' : '100%';
        video.style = 'width:' + width + '; height: ' + height + ';' + (options.videoGravity === 2 ? 'object-fit: cover;' : '');
        Object.keys(attr).forEach(function (name) {
          return video.setAttribute(name, attr[name]);
        });
        root.appendChild(video); // 修改播放信息

        var propArr = ['controls', 'loop', 'mediaGroup', 'playbackRate', 'preload', 'src', 'poster', 'volume']; // h5video设置muted

        this.api.getMode() === 'h5' && (propArr = propArr.concat(['muted', 'autoplay']));
        Object.keys(options).filter(function (ele) {
          return propArr.indexOf(ele) > -1;
        }).forEach(function (key) {
          try {
            video[key] = options[key];
          } catch (e) {}
        });
        this.api.setPlayerOption('containerId', this.cid);
        this.api.setVideoInstance(video);
        this.videoEventDispatch();
        return video;
      }
    }, {
      key: "emitPerfEvent",
      value: function emitPerfEvent() {
        var _this$perf = this.perf,
            clk = _this$perf.clk,
            queryStart = _this$perf.queryStart,
            createStart = _this$perf.createStart;
        this.perflog.clk2create = createStart - clk;

        if (queryStart) {
          this.perflog.clk2query = queryStart - clk;
        } // 指标包括：
        // 点击到播放耗时clk2play
        // ios查询次数：count
        // ios查询成功耗时querysuc
        // ios查询失败耗时queryfail
        // 创建开始到结束耗时create
        // 点击到创建开始耗时：clk2create（参考指标）
        // 点击到开始查询耗时clk2query:（参考指标）


        this.api.emit('perf', this.perflog);
        this.perflog = {};
        this.isEmitPerf = false;
      }
      /**
      * 重置播放器宽高
      */

    }, {
      key: "resetRect",
      value: function resetRect(width, height) {
        var _this$api$getBoxTools4 = this.api.getBoxTools(),
            isIOS = _this$api$getBoxTools4.isIOS,
            invokeP = _this$api$getBoxTools4.invokeP;

        var video = this.api.getVideoInstance();

        var _this$api$getPlayerOp2 = this.api.getPlayerOption(),
            containerId = _this$api$getPlayerOp2.containerId,
            videoGravity = _this$api$getPlayerOp2.videoGravity;

        var isnaIOS = this.api.getMode() === 'na' && isIOS(); // 调整位置

        if (isnaIOS) {
          var _genDomHeight2 = genDomHeight(height),
              wrap = _genDomHeight2.wrap,
              inner = _genDomHeight2.inner;

          var videoInner = video.firstChild;
          video.style.width = width + 'px';
          video.style.height = wrap + 'px';
          videoInner.style.height = inner + 'px';
          invokeP('video/slrUpdatePlayerInfo', {
            params: {
              containerId: containerId,
              position: {
                left: 0,
                top: 0,
                width: width,
                height: height
              }
            }
          });
        } else {
          var w = width ? width + 'px' : '100%';
          var h = height ? height + 'px' : '100%';
          video.style = 'width:' + w + '; height: ' + h + ';' + (videoGravity === 2 ? 'object-fit: cover;' : '');
        }
      }
      /**
      * 重置播放器参数
      */

    }, {
      key: "reset",
      value: function reset(config) {
        var video = this.api.getVideoInstance();

        if (!video) {
          return;
        }

        var options = this.api.getPlayerOption();
        var mode = this.api.getMode(); // 更改宽高

        if (config.width || config.height) {
          // 调整位置
          this.resetRect(options.width, options.height);
          config.width && delete config.width;
          config.height && delete config.height;
        } // 只调整大小就结束或当前设置h5由用户自行处理降级方案


        if (Object.keys(config).length === 0 || mode === 'h5' && this.api.getPlayerController('slrOnly')) {
          return;
        }

        this.perf.createStart = +new Date();
        this.perf.clk = config.prepareInvokePlayerTime || this.perf.createStart; // 内核重新初始化

        this.api.setPlayerController('playerKernelInit', false); // 更改属性

        if (mode === 'na' && this.isIOS) {
          this.perf.queryStart = this.perf.createStart;
          this.iosInvokePlayer('video/slrSetPlayerInfo');
          return;
        } // 修改播放地址


        var propArr = ['controls', 'loop', 'mediaGroup', 'playbackRate', 'preload', 'src', 'poster', 'volume']; // h5video设置muted

        mode === 'h5' && (propArr = propArr.concat(['muted', 'autoplay']));
        Object.keys(options).filter(function (ele) {
          return propArr.indexOf(ele) > -1;
        }).forEach(function (key) {
          try {
            video[key] = options[key];
          } catch (e) {}
        });

        if (mode === 'h5') {
          this.api.emit('ready', {
            mode: 'h5',
            isIOS: this.isIOS,
            isAndroid: this.isAndroid
          });
          return;
        }

        if (this.isAndroid) {
          video.setAttribute('t7-video-player-ext', options.pageUrl || '');
          this.androidInitPlayer();
        }
      }
      /**
      * 创建h5播放器
      */

    }, {
      key: "h5Run",
      value: function h5Run() {
        this.api.setMode('h5'); // 清除ios残留dom

        this.removeDom();

        if (this.api.getPlayerController('slrOnly')) {
          // h5退化方案由业务方处理
          this.api.emit('ready', {
            mode: 'h5',
            isIOS: this.isIOS,
            isAndroid: this.isAndroid
          });
          this.emitPerfEvent();
          return;
        }

        this.isEmitPerf = !!this.api.getPlayerOption('autoplay');
        this.createVideoTag({
          playsinline: true,
          'webkit-playsinline': true
        });
        this.api.emit('ready', {
          mode: 'h5',
          isIOS: this.isIOS,
          isAndroid: this.isAndroid
        });
      }
    }]);

    return Create;
  }();

  var Ended = /*#__PURE__*/function () {
    function Ended(api, pluginOptions) {
      _classCallCheck(this, Ended);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
     * 是否结束，用户只可读取该属性
     * run为本插件对应的方法实际执行的函数
     */


    _createClass(Ended, [{
      key: "get",
      value: function get() {
        var isIOS = this.api.getBoxTools().isIOS;

        if (this.api.getMode() === 'na' && isIOS()) {
          return this.api.getPlayerOption('ended');
        }

        var video = this.api.getVideoInstance();
        return video ? video.ended : '';
      }
    }]);

    return Ended;
  }();

  var Pause = /*#__PURE__*/function () {
    function Pause(api, pluginOptions) {
      _classCallCheck(this, Pause);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
     * 暂停
     * run为本插件对应的方法实际执行的函数
     */


    _createClass(Pause, [{
      key: "run",
      value: function run() {
        if (this.api.getMode() === 'na') {
          return this.naRun();
        }

        this.h5Run();
      }
    }, {
      key: "h5Run",
      value: function h5Run() {
        var video = this.api.getVideoInstance(); // 兼容ios端h5模式出现的video.pause()报错问题

        return video && typeof video.pause === 'function' && video.pause();
      }
    }, {
      key: "naRun",
      value: function naRun() {
        var _this$api$getBoxTools = this.api.getBoxTools(),
            isIOS = _this$api$getBoxTools.isIOS,
            isAndroid = _this$api$getBoxTools.isAndroid,
            invokeP = _this$api$getBoxTools.invokeP;

        if (isIOS()) {
          var containerId = this.api.getPlayerOption('containerId');
          invokeP('video/slrPausePlayer', {
            params: {
              containerId: containerId
            }
          });
        } else if (isAndroid()) {
          this.h5Run();
        }
      }
    }]);

    return Pause;
  }();

  var CurrentTime = /*#__PURE__*/function () {
    function CurrentTime(api, pluginOptions) {
      _classCallCheck(this, CurrentTime);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
    * 当前播放进度
    */


    _createClass(CurrentTime, [{
      key: "get",
      value: function get() {
        var isIOS = this.api.getBoxTools().isIOS;

        if (this.api.getMode() === 'na' && isIOS()) {
          return this.api.getPlayerOption('currentTime');
        }

        var video = this.api.getVideoInstance();
        return video ? video.currentTime : '';
      }
    }, {
      key: "set",
      value: function set(time) {
        var _this$api$getBoxTools = this.api.getBoxTools(),
            isIOS = _this$api$getBoxTools.isIOS,
            invokeP = _this$api$getBoxTools.invokeP;

        if (this.api.getMode() === 'na' && isIOS()) {
          var _this$api$getPlayerOp = this.api.getPlayerOption(),
              containerId = _this$api$getPlayerOp.containerId,
              accurate = _this$api$getPlayerOp.accurate;

          invokeP('video/slrSeekPlayer', {
            params: {
              containerId: containerId,
              seconds: time,
              accurate: accurate
            }
          });
          return;
        }

        var video = this.api.getVideoInstance();
        video && (video.currentTime = time);
      }
    }]);

    return CurrentTime;
  }();

  var Loop = /*#__PURE__*/function () {
    function Loop(api, pluginOptions) {
      _classCallCheck(this, Loop);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
     * loop循环次数
     */


    _createClass(Loop, [{
      key: "get",
      value: function get() {
        var isIOS = this.api.getBoxTools().isIOS;

        if (this.api.getMode() === 'na' && isIOS()) {
          return this.api.getPlayerOption('loop');
        }

        var video = this.api.getVideoInstance();
        return video ? video.loop : '';
      }
    }, {
      key: "set",
      value: function set(isTrue) {
        var _this = this;

        var _this$api$getBoxTools = this.api.getBoxTools(),
            isIOS = _this$api$getBoxTools.isIOS,
            invokeP = _this$api$getBoxTools.invokeP;

        if (this.api.getMode() === 'na' && isIOS()) {
          var containerId = this.api.getPlayerOption('containerId');
          invokeP('video/slrSetLoop', {
            params: {
              containerId: containerId,
              loop: +isTrue
            }
          }).then(function () {
            return _this.api.setPlayerOption('loop', isTrue);
          });
          return;
        }

        var video = this.api.getVideoInstance();
        video && (video.loop = isTrue);
        this.api.setPlayerOption('loop', isTrue);
      }
    }]);

    return Loop;
  }();

  var Paused = /*#__PURE__*/function () {
    function Paused(api, pluginOptions) {
      _classCallCheck(this, Paused);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
     * 是否暂停了，用户只可读取该属性
     * run为本插件对应的方法实际执行的函数
     */


    _createClass(Paused, [{
      key: "get",
      value: function get() {
        var isIOS = this.api.getBoxTools().isIOS;

        if (this.api.getMode() === 'na' && isIOS()) {
          return this.api.getPlayerOption('paused');
        }

        var video = this.api.getVideoInstance();
        return video ? video.paused : '';
      }
    }]);

    return Paused;
  }();

  var Poster = /*#__PURE__*/function () {
    function Poster(api, pluginOptions) {
      _classCallCheck(this, Poster);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
    * poster视频封面
    */


    _createClass(Poster, [{
      key: "get",
      value: function get() {
        var isIOS = this.api.getBoxTools().isIOS;

        if (this.api.getMode() === 'na' && isIOS()) {
          return this.api.getPlayerOption('poster');
        }

        var video = this.api.getVideoInstance();
        return video ? video.poster : '';
      } // 设置统一用reset方法

    }]);

    return Poster;
  }();

  var ReadyState = /*#__PURE__*/function () {
    function ReadyState(api, pluginOptions) {
      _classCallCheck(this, ReadyState);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
     * 就绪态，用户只可读取该属性
     * run为本插件对应的方法实际执行的函数
     */


    _createClass(ReadyState, [{
      key: "get",
      value: function get() {
        var isIOS = this.api.getBoxTools().isIOS;

        if (this.api.getMode() === 'na' && isIOS()) {
          return this.api.getPlayerOption('readyState');
        }

        var video = this.api.getVideoInstance();
        return video ? video.readyState : '';
      }
    }]);

    return ReadyState;
  }();

  var NetworkState = /*#__PURE__*/function () {
    function NetworkState(api, pluginOptions) {
      _classCallCheck(this, NetworkState);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
     * 表示音频/视频元素的当前网络状态：
     * 0 = NETWORK_EMPTY - 音频/视频尚未初始化
     * 1 = NETWORK_IDLE - 音频/视频是活动的且已选取资源，但并未使用网络
     * 2 = NETWORK_LOADING - 浏览器正在下载数据
     * 3 = NETWORK_NO_SOURCE - 未找到音频/视频来源
     */


    _createClass(NetworkState, [{
      key: "get",
      value: function get() {
        var isIOS = this.api.getBoxTools().isIOS;

        if (this.api.getMode() === 'na' && isIOS()) {
          return this.api.getPlayerOption('networkState');
        }

        var video = this.api.getVideoInstance();
        return video ? video.networkState : '';
      }
    }]);

    return NetworkState;
  }();

  var Replay = /*#__PURE__*/function () {
    function Replay(api, pluginOptions) {
      _classCallCheck(this, Replay);

      this.api = api;
      this.pluginOptions = pluginOptions;
    }
    /**
     * 重新播放
     * run为本插件对应的方法实际执行的函数
     */


    _createClass(Replay, [{
      key: "run",
      value: function run() {
        if (this.api.getMode() === 'na') {
          return this.naRun();
        }

        this.h5Run();
      }
    }, {
      key: "naRun",
      value: function naRun() {
        var _this$api$getBoxTools = this.api.getBoxTools(),
            isIOS = _this$api$getBoxTools.isIOS,
            invokeP = _this$api$getBoxTools.invokeP;

        var containerId = this.api.getPlayerOption('containerId');

        if (isIOS()) {
          invokeP('video/slrReplayPlayer', {
            params: {
              containerId: containerId
            }
          });
        }

        this.h5Run();
      }
    }, {
      key: "h5Run",
      value: function h5Run() {
        var video = this.api.getVideoInstance();

        if (video) {
          video.currentTime = 0;
          (video.paused || video.ended) && video.play();
        }
      }
    }]);

    return Replay;
  }();

  /**
   * 播放器内部属性
  * @inner
   */

  var INNERPLUGINS = {
    // 属性
    autoplay: Autoplay,
    // 设置/返回 自动播放属性
    paused: Paused,
    // 是否处于暂停状态
    currentTime: CurrentTime,
    // 设置/返回视频当前播放时间
    duration: Duration,
    // 返回视频时长，单位：秒
    ended: Ended,
    // 返回视频是否播放结束
    loop: Loop,
    // 是否开启了循环播放
    muted: Muted,
    // 静音
    networkState: NetworkState,
    // 返回视频的当前网络状态
    playbackRate: PlaybackRate,
    // 设置或返回音频/视频的当前播放速度。
    // preload: Preload, // h5 option初始化参数配置，不可修改 规定是否在页面加载后载入视频。
    readyState: ReadyState,
    // 返回视频的就绪状态
    src: Src,
    // 设置/返回当前视频的地址
    poster: Poster,
    // 设置/返回当前视频的封面
    volume: Volume,
    // 设置/返回视频的音量
    error: PlayerError,

    
    // 'played', // h5 video属性  played 属性返回 TimeRanges 对象。TimeRanges 对象表示用户已经播放或看到的音频/视频范围。
    // 'seekable', //   h5 video属性 seekable 属性返回 TimeRanges 对象。TimeRanges 对象表示音频/视频中用户可寻址的范围。可寻址范围指的是用户在音频/视频中可寻址（移动播放位置）的时间范围。
    // 'seeking', // h5 video属性 属性返回用户目前是否在音频/视频中寻址。寻址中（Seeking）指的是用户在音频/视频中移动/跳跃到新的位置。
    // 方法
    create: Create,
    play: Play,
    replay: Replay,

    
    pause: Pause
  };

  /**
   * @file 端能力相关函数
   * @author zhangtingting12 <zhangtingting12@baidu.com>
   * Reference: http://icode.baidu.com/repos/baidu/hulk/xbox/tree/master:packages/@baidu/xbox-na
   */
  var ua = (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' && window.self === window ? navigator.userAgent : ''; // 是否为ios端

  var isIOS = function isIOS() {
    return /(iPhone|iPod|iPad)/.test(ua);
  }; // 是否为android端

  var isAndroid = function isAndroid() {
    return /(Android);?[\s\/]+([\d.]+)?/.test(ua);
  }; // 是否为主版。baiduboxapp: 框的常规UA biduboxapp:  个别网站会触发内核的风控策略(比如域名以le.com结尾)，UA会被替换

  var isMainBox = function isMainBox() {
    return / (baiduboxapp|biduboxapp)\//i.test(ua) && !/ (lite|info|pro|mission) (baiduboxapp|biduboxapp)/.test(ua);
  };
  /**
   * iosInvoke传入schema打开框架
   *
   * @param {string} schema 协议
   */

  var iosInvoke = function iosInvoke(schema) {
    var elem = document.createElement('iframe');
    var body = document.body || document.getElementsByTagName('body')[0];
    elem.style.display = 'none';
    elem.src = schema;
    body.appendChild(elem);
    setTimeout(function () {
      body.removeChild(elem);
      elem = null;
    }, 0);
  };
  /**
   * androidInvoke传入schema打开框架
   *
   * @param {string} schema 协议
   * @return {Object} 发起schema请求
   */

  var androidInvoke = function androidInvoke(schema) {
    var androidJsBridge = window.Bdbox_android_jsbridge;

    if (androidJsBridge && androidJsBridge.dispatch) {
      androidJsBridge.dispatch(schema);
    } else {
      var re = window.prompt('BdboxApp:' + JSON.stringify({
        obj: 'Bdbox_android_jsbridge',
        func: 'dispatch',
        args: [schema]
      }));
      return re;
    }
  };
  /**
   * @function type
   * @param {any} obj - 被判断的对象
   * @return {string} 返回类型：array/date/string/object/undefined/function/boolean/null/regexp/math 等
   */

  var type = function type(obj) {
    return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
  };
  var index = 0;
  /**
   * getRandomName随机生成唯一名称
   * @param {string} preffix 前缀
   * @return {string} 随机函数名称
   */

  var getRandomName = function getRandomName(preffix) {
    index++;
    return preffix + (Date.now().toString(16) + index).slice(-1 * 8);
  };
  var gb = (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' ? window : global;
  /**
   * @function getGlobalFunc
   * @param {function} func - 全局函数
   * @return {string} funcName - 返回全局函数名
   */

  var getGlobalFunc = function getGlobalFunc(func) {
    if (typeof func === 'function') {
      var name = "_xfunc_".concat(getRandomName('_xfunc_'));

      gb[name] = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return func.apply(gb, args);
      };

      return name;
    }

    return func;
  };
  /**
   * 经常会出现 params 的 stringify 之后再encode 的情况，这里统一处理了
   * 还处理了函数问题，可以直接传入匿名函数即可自动转为全局函数
   * @function json2params
   * @param {Object} json - 参数
   * @param {boolean} encode - 是否encode
   * @return {Promise} promise - Promise
   */

  var json2params = function json2params(json) {

    if (type(json) === 'string') {
      return json;
    }

    var rs = {};

    for (var i in json) {
      var j = json[i];

      if (type(j) === 'function') {
        j = getGlobalFunc(j);
      }

      rs[i] = j;
    }

    return encodeURIComponent(JSON.stringify(rs));
  };
  /**
   * json2query将json转换为query格式
   *
   * @param {Object} json对象
   * @return {string} 拼接的query
   */


  var json2query = function json2query(json) {
    var arr = [];

    for (var i in json) {
      var j = json[i];

      if (type(j) === 'function') {
        j = getGlobalFunc(j);
      }

      arr.push(i + '=' + j);
    }

    return arr.join('&');
  };
  /**
   * 双端Promise 调起命令，host 和 params 分开处理，支持函数直接传入
   * @param {String} action - schema host 部分
   * @param {object} params - 参数
   * @param {string} schemaHead - schema 头，默认 baiduboxapp
   * @return {Promise}
   */


  function invokeP(action) {
    var queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var schemaHead = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'baiduboxapp';

    if (!isMainBox()) {
      return Promise.reject({
        status: 902,
        message: '主版APP外无法调用端能力'
      });
    }

    return new Promise(function (resolve, reject) {
      var tmp = queryParams.params || {};

      if (Object.keys(tmp).length === 0 && tmp.constructor === Object || tmp === '%7B%7D' || tmp === '{}') {
        // 删除空的params对象
        delete queryParams.params;
      } else if (type(tmp) === 'object') {
        queryParams.params = json2params(tmp);
      }

      var query = _objectSpread2(_objectSpread2({}, queryParams), {}, {
        callback: function callback(result) {
          var data = result;

          if (type(result) === 'string') {
            try {
              data = JSON.parse(result);
            } catch (e) {
              console.log(e);
            }
          }

          if (+data.status === 0) {
            resolve(data.data);
            return;
          }

          reject(data);
        }
      });

      var search = json2query(query);
      var schema = "".concat(schemaHead, "://").concat(action, "?").concat(search);

      if (isIOS()) {
        iosInvoke(schema);
      } else if (isAndroid()) {
        androidInvoke(schema);
      }
    });
  }
  /**
   * versionCompare比较两个版本
   *
   * @param {string} version1 待比较版本1
   * @param {string} version2 待比较版本2
   * @return {number} 返回结果相同0，1大于2返回1，1小于2返回-1
   */

  var versionCompare = function versionCompare(version1, version2) {
    version2 += '';
    version1 += '';
    var a = version1.split('.');
    var b = version2.split('.');
    var i = 0;
    var len = Math.max(a.length, b.length);

    for (; i < len; i++) {
      if (a[i] && !b[i] && parseInt(a[i], 10) > 0 || parseInt(a[i], 10) > parseInt(b[i], 10)) {
        return 1;
      } else if (b[i] && !a[i] && parseInt(b[i], 10) > 0 || parseInt(a[i], 10) < parseInt(b[i], 10)) {
        return -1;
      }
    }

    return 0;
  };
  /**
   * getBoxVersion获取框版本
   *
   * @return {string} 返回版本
   */

  var getBoxVersion = function getBoxVersion() {
    var version = '0';

    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' && window.baiduboxapp_version) {
      return window.baiduboxapp_version;
    }

    if (isMainBox()) {
      var a;

      if (a = /baiduboxapp\/([\d.]+)/.exec(ua)) {
        version = a[1];
      } else if (a = /([\d+.]+)_(?:diordna|enohpi)_/.exec(ua)) {
        // 老版本手百
        a = a[1].split('.');
        version = a.reverse().join('.');
      }
    }

    return version;
  };

  var version = getBoxVersion(); // export const showToast = message => (
  //     invokeP('video/slrShowToastMsg', {
  //         params: {
  //             message
  //         }
  //     })
  // );

  var PluginAPI = /*#__PURE__*/function () {
    function PluginAPI(id, playerInstance) {
      _classCallCheck(this, PluginAPI);

      this._player = playerInstance;
      this.id = id;
    }

    _createClass(PluginAPI, [{
      key: "getPlayerInstance",
      value: function getPlayerInstance() {
        return this._player;
      }
    }, {
      key: "getVideoInstance",
      value: function getVideoInstance() {
        return this._player.video;
      }
    }, {
      key: "setVideoInstance",
      value: function setVideoInstance(v) {
        this._player.video = v;
      }
    }, {
      key: "getRoot",
      value: function getRoot() {
        return this._player._root;
      }
    }, {
      key: "getMode",
      value: function getMode() {
        return this._player._mode;
      }
    }, {
      key: "setMode",
      value: function setMode(mode) {
        this._player._mode = mode;
      }
    }, {
      key: "getPlayerOption",
      value: function getPlayerOption(key) {
        return key ? this._player.options[key] : this._player.options;
      }
    }, {
      key: "setPlayerOption",
      value: function setPlayerOption(key, value) {
        if (key) {
          this._player.options[key] = value;
        } else if (type(value) === 'object') {
          // 不传key时，默认做配置合并
          _extends(this._player.options, value);
        }
      }
    }, {
      key: "getPlayerController",
      value: function getPlayerController(key) {
        return key ? this._player._controller[key] : this._player._controller;
      }
    }, {
      key: "setPlayerController",
      value: function setPlayerController(key, value) {
        this._player._controller[key] = value;
      }
    }, {
      key: "getBoxTools",
      value: function getBoxTools() {
        return {
          isIOS: isIOS,
          isAndroid: isAndroid,
          isMainBox: isMainBox,
          iosInvoke: iosInvoke,
          androidInvoke: androidInvoke,
          getGlobalFunc: getGlobalFunc,
          getRandomName: getRandomName,
          invokeP: invokeP,
          versionCompare: versionCompare,
          version: version
        };
      }
    }, {
      key: "on",
      value: function on(key, cb) {
        this._player.on(key, cb);
      }
    }, {
      key: "once",
      value: function once(key, cb) {
        this._player.once(key, cb);
      }
    }, {
      key: "emit",
      value: function emit(key, cb) {
        this._player.emit(key, cb);
      }
    }, {
      key: "off",
      value: function off(key, cb) {
        this._player.off(key, cb);
      }
    }]);

    return PluginAPI;
  }();

  var XPlayer = /*#__PURE__*/function (_EventEmitter) {
    _inherits(XPlayer, _EventEmitter);

    var _super = _createSuper(XPlayer);

    function XPlayer(config) {
      var _this;

      _classCallCheck(this, XPlayer);

      if (!config || type(config) !== 'object' || Object.keys(config).length === 0 || !config.id) {
        throw new Error('player config error');
      }

      _this = _super.call(this); // 默认在创建对象时使用传入的plugin，依次执行new init create，此值为真时，代表用户需手动调用init和create函数

      _this._defaultInit = !config.customizedInit; // 初始化默认参数

      _this.options = {
        autoplay: false,
        muted: false,
        loop: false
      };

      _this.reset(config);

      _this._controller = {};
      /**
       * player mode，默认h5方式，使用api.setMode可切换为na方式
       * @type {string}
       */

      _this._mode = config.mode || 'h5'; // h5 或 na
      // 支持用户构造时传入插件

      if (config.plugins) {
        _this.registryPlugins(config.plugins);
      }
      /**
      * player的parent element
      * @type {Element}
      */


      _this._root = document.getElementById(config.id);
      /**
      * 播放器实例
      * @type {Object}
      */

      _this.video = null;
      /**
       * Plugin's dictionary.
       * @type {Object}
       */

      _this._plugins = INNERPLUGINS || {}; // 已经初始化

      _this._inited = false;

      if (_this._defaultInit) {
        _this.init();
      }

      return _this;
    }
    /**
    * 重置实例
    */


    _createClass(XPlayer, [{
      key: "reset",
      value: function reset(config) {
        var _this2 = this;

        /**
         * video options
         * @type {boolean}
         */
        // 复制播放器的配置
        Object.keys(config).forEach(function (prop) {
          if (prop !== 'pluginOptions') {
            _this2.options[prop] = config[prop];
          }
        }); // 保存用户plugin配置

        this.pluginOptions = config.pluginOptions || this.pluginOptions || {}; // 初始化完成reset事件触发

        this._inited && this.emit('reset', config);
      }
      /**
      * 校验插件名称合法
      * @private
      * @param {string} key 插件关键字，作为播放器实例的api字典内的关键字
      * @return {Boolean}
      */

    }, {
      key: "_validate",
      value: function _validate(key) {
        // 内部属性不可覆盖
        if (key.indexOf('_') === 0) {
          return false;
        } // 内部方法不可覆盖


        if (['on', 'once', 'emit', 'off', 'init', 'destroy', 'reset', 'registryPlugin', 'registryPlugins', 'isSupportCode'].indexOf(key) !== -1) {
          return this[key];
        }

        return true;
      }
      /**
      * 注册一个插件，当实例创建时会被加载，可以覆盖默认插件
      * @param {string} key 插件关键字，作为播放器实例的api字典内的关键字
      * @param {Function} Cls 插件类
      */

    }, {
      key: "registryPlugin",
      value: function registryPlugin(key, Cls) {
        if (!this._validate(key)) {
          // console.log('请重新定义');
          return;
        }

        if (this._inited) {
          return this._loadPlugin(key, Cls);
        }

        if (!this._plugins) {
          this._plugins = {};
        }

        this._plugins[key] = Cls;
      }
      /**
      * 注册一组插件，当实例创建时会被加载，可以覆盖默认插件
      * @param {object} plugins 插件组 {key1: Plugin1, key2: Plugin2}
      */

    }, {
      key: "registryPlugins",
      value: function registryPlugins() {
        var _this3 = this;

        var plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'h5';
        this._mode = mode;
        Object.keys(plugins).forEach(function (key) {
          return _this3.registryPlugin(key, plugins[key]);
        });
      }
      /**
      * 挂载播放器实例api
      * @private
      */

    }, {
      key: "_loadPlugin",
      value: function _loadPlugin(pluginName, PluginCls) {
        // 插件挂载
        var api = new PluginAPI(pluginName, this);
        var pluginInstance = new PluginCls(api, this.pluginOptions[pluginName]);

        this._defineProp(pluginName, pluginInstance);
      }
      /**
      * 定义播放器plugin对应的方法
      * key是内部属性名称，pluginInstance是内部属性实现方法，在plugins目录下
      * @private
      */

    }, {
      key: "_defineProp",
      value: function _defineProp(key, pluginInstance) {
        var descriptor = {};

        if (type(pluginInstance.get) === 'function') {
          descriptor.get = pluginInstance.get.bind(pluginInstance);

          if (type(pluginInstance.set) === 'function') {
            descriptor.set = pluginInstance.set.bind(pluginInstance);
          }
        } else if (type(pluginInstance.run) === 'function') {
          descriptor = {
            get: function get() {
              return pluginInstance.run.bind(pluginInstance);
            }
          };
        }

        Object.defineProperty(this, key, descriptor);
      }
      /**
      * 播放器内部方法,插件不可覆盖此方法，当插件需要在实例化player时需要完成一些操作
      * @inner
      */

    }, {
      key: "init",
      value: function init() {
        var _this4 = this;

        // 仅初始化一次
        if (this._inited) {
          return;
        }

        this._inited = true; // 初始化插件

        Object.keys(this._plugins).forEach(function (pluginName) {
          var Cls = _this4._plugins[pluginName]; // 插件挂载

          _this4._loadPlugin(pluginName, Cls);
        }); // init finished

        this.emit('init');
      }
      /**
      * 销毁实例
      */

    }, {
      key: "destroy",
      value: function destroy() {
        if (!this._root) {
          return;
        }

        this.emit('destroy'); // 触发destroy通知各个插件卸载事件等
        // 移除所有事件

        this.removeAllListeners();
        this._root = null;
      }
    }]);

    return XPlayer;
  }(EventEmitter);

  var pf = (function (prefetchInfo) {
    if (isMainBox() && versionCompare(version, '12.6') >= 0) {
      var head = isIOS() ? 'video/slrPrefetchVideo' : isAndroid() ? 'videoplayer/slrPrefetchVideo' : '';
      head && invokeP(head, {
        params: {
          prefetchInfo: prefetchInfo
        }
      });
    }
  });

  var prefetch = pf;

  exports.default = XPlayer;
  exports.prefetch = prefetch;

  Object.defineProperty(exports, '__esModule', { value: true });

});
