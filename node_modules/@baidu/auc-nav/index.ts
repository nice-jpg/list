import {Component} from 'san';
import styles from './style.module.less';
import {AucNavData} from './types';
import {WujiButton, WujiGrid} from '@baidu/wuji-san';
import {aucArrow} from '@baidu/auc-arrow';
import aucNavInner from '@baidu/auc-nav-inner/index';
import aucNavMore from '@baidu/auc-nav-more/index';
import throttle from 'lodash.throttle';
import {pr2px} from '@baidu/auc-base/utils';

// 大事件类型
const bingEventType = ['mourn', 'match', 'celebration'];

export class topicNavs extends Component {
    static template:string = `
    <div class="{{wrapClass}}">
        <auc-nav-inner
            class="{{isFixed ? styles.aucNavOp0 : ''}}"
            navs="{{navs}}"
            isFixed="{{false}}"
            s-ref="noFixedNavs"
            showMore="{{showMore}}"
            activeIndex="{{activeIndex}}"
            landType="{{landType}}"
            bigEventClass="{{bigEventClass}}"
            bigEventColor="{{bigEventColor}}"
            navColor="{{navColor}}"
            on-nav-click="navClick"
            on-more-click="triggerNavDialogClick"
            on-first-scroll="firstScroll"
            isTransparentWrap="{{isTransparentWrap}}"
        ></auc-nav-inner>
        <auc-nav-inner
            class="{{fixedNavsClass}}"
            navs="{{navs}}"
            s-ref="fixedNavs"
            isFixed="{{true}}"
            showMore="{{showMore}}"
            activeIndex="{{activeIndex}}"
            top="{{navInnerTop}}"
            isPc="{{isPc}}"
            landType="{{landType}}"
            bigEventClass="{{bigEventClass}}"
            bigEventColor="{{bigEventColor}}"
            navColor="{{navColor}}"
            on-nav-click="navClick"
            on-more-click="moreClick"
            on-first-scroll="firstScroll"
            isTransparentWrap="{{isTransparentWrap}}"
        ></auc-nav-inner>
        <auc-nav-more
            s-if="showMore"
            navs="{{navs}}"
            showMore="{{showMore}}"
            activeIndex="{{activeIndex}}"
            on-nav-click="moreNavClick"
            on-more-click="moreClick"
            class="{{navMoreClass}}"
            landType="{{landType}}"
            bigEventColor="{{bigEventColor}}"
            navDialogTop="{{navDialogTop}}"
            bigEventClass="{{bigEventClass}}"
            title="{{dialogTitle}}"
        ></auc-nav-more>
        <div class="{{styles.aucMask}}" s-if="showMore" on-click="maskClick"></div>
    </div>`;
    static components:object = {
        'wuji-button': WujiButton,
        'wuji-col': WujiGrid.Col,
        'wuji-row': WujiGrid.Row,
        'auc-arrow': aucArrow,
        'auc-nav-inner': aucNavInner,
        'auc-nav-more': aucNavMore
    };

    initData(): AucNavData {
        return {
            styles,
            activeIndex: 0,
            translateX: 0,
            isMore: false,
            showMore: false,
            navDialogTop: '',
            navInnerTop: '',
            showedDialog: false, // 确认是否显示过弹窗，显示过则不会完全清除这个dom（不然动画会有问题）
            isFixed: false,
            hasTitleBar: false,
            navs: [],
            noMarginTop: false,
            isPc: false,
        };
    }

    static computed = {
        wrapClass() {
            return [
                styles.navWrapper,
                styles [this.data.get('isBigEventHeader') ? this.data.get('imgType') === 3 ? 'bigEventHeader' : 'bigEventHeader2' : ''],
                styles [this.data.get('noMarginTop') ? 'noMarginTop' : ''],
                styles [this.data.get('navColor') ? 'navWrapperSpecial' : ''],
            ]
        },
        arrow():string {
            return this.data.get('showMore') ? 'up' : 'down';
        },
        fixedNavsClass():Array<string> {
            return [
                styles[!this.data.get('isFixed') ? 'aucNavOp0' : ''],
                styles[this.data.get('hasTitleBar') ? 'hasTitleBar' : '']
            ]
        },
        navMoreClass():Array<string> {
            return [
                styles[this.data.get('showMore') ? 'aucShowMore' : 'aucNoShowMore']
            ]
        },
        bigEventClass() {
            const landType = this.data.get('landType');
            return [
                bingEventType[landType - 1],
                this.data.get('navColor') ? 'aucNavSpecial' : ''
            ];
        }
    };
    inited() {
    }
    attached(): void {
        this.watch('activeIndex',(activeIndex)=>{
            this.ref('fixedNavs').moveAnimation(activeIndex);
            this.ref('noFixedNavs').moveAnimation(activeIndex);
        });

        window.onscroll = throttle(() => {
            this.checkFixed();
        }, 100);
        this.watch('showMore',(showMore)=>{
            if (showMore) {
                document.documentElement.style.overflow = 'hidden';
            } else {
                document.documentElement.style.overflow = 'auto';
            }
        });
    }

    // 检查是否需要将nav切换为fixed
    checkFixed() {
        let noFixedNavs:HTMLElement = this.ref('noFixedNavs').el;
        let offsetTop:number = noFixedNavs.offsetTop;
        let height:number = noFixedNavs.getBoundingClientRect().height;
        let scrollY:number = window.scrollY;
        let oldFixed:boolean = this.data.get('isFixed');
        const statusBarHeight = this.data.get('statusBarHeight');
        // 特殊差值
        let specialNumber:number = !this.data.get('navDialogTop') && this.data.get('landType') ? pr2px(120) : 0;
        let newFixed:boolean = scrollY > offsetTop - height - statusBarHeight + specialNumber;

        if (oldFixed !== newFixed) {
            this.data.set('isFixed', newFixed);
            this.fire('change-fixed', newFixed);
        }
    }

    navClick(index?:number): void {
        this.fire('nav-change', index);
    }
    moreClick() {
        this.data.set('showedDialog', true);
        this.data.set('showMore', !this.data.get('showMore'));
    }
    triggerNavDialogClick() {
        this.data.set('showedDialog', true);
        this.data.set('showMore', !this.data.get('showMore'));
        this.fire('trigger-dialog', true);
        this.fire('more-click');
    }
    moreNavClick(index) {
        this.fire('nav-change', index);
        // 点击更多里的tab之后关掉浮层
        this.data.set('showMore', false);
        this.fire('trigger-dialog', false);
    }
    maskClick() {
        this.data.set('showMore', false);
        this.fire('trigger-dialog', false);
    }
    dropDownNavClick(index) {
        this.data.set('activeIndex', index);
    }
    firstScroll() {
        this.fire('first-scroll');
    }
}

export default topicNavs;
