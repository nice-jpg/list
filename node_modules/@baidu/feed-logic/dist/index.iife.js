var MyBundle = (function (exports, axios, QS) {
    'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);
    var QS__default = /*#__PURE__*/_interopDefaultLegacy(QS);

    axios__default["default"].defaults.timeout = 5000;
    axios__default["default"].defaults.withCredentials = true;
    axios__default["default"].defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
    axios__default["default"].interceptors.response.use(function (response) {
        if (response.status === 200) {
            return Promise.resolve(response);
        }
        return Promise.reject(response);
    }, function (error) {
        return Promise.reject(error.response);
    });
    /**
     * get方法，对应get请求
     * @param {String} url [请求的url地址]
     * @param {Object} params [请求时携带的参数]
     */
    function get(url, params) {
        return new Promise(function (resolve, reject) {
            axios__default["default"]
                .get(url, {
                params: params,
            })
                .then(function (res) {
                if (res.status === 200 && res.data) {
                    var data = res.data;
                    if (!+data.errno) {
                        resolve(data.ret || {});
                    }
                    else {
                        reject(data);
                    }
                }
                else {
                    reject(res.data);
                }
            })
                .catch(function (err) {
                reject(err);
            });
        });
    }
    /**
     * post方法，对应post请求
     * @param {String} url [请求的url地址]
     * @param {Object} params [请求时携带的参数]
     */
    function post(url, data, params) {
        if (params === void 0) { params = {}; }
        return new Promise(function (resolve, reject) {
            axios__default["default"]
                .post(url, QS__default["default"].stringify(data), {
                params: params,
            })
                .then(function (res) {
                if (res.status === 200 && res.data) {
                    var data_1 = res.data;
                    if (!+data_1.errno) {
                        resolve(data_1.ret || {});
                    }
                    else {
                        reject(data_1);
                    }
                }
                else {
                    reject(res.data);
                }
            })
                .catch(function (err) {
                reject(err);
            });
        });
    }

    exports.get = get;
    exports.post = post;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({}, axios, QS);
