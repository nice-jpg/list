/**
 * @file index.ts
 * @author leizhihao
 */

import styles from './style.module.less';
import {AucColumnData} from './types';
import {iteration, components} from '@baidu/auc-topic-trans/column';
import AucLoader, {LoaderState} from '@baidu/auc-loader';
import {pageLog} from '@baidu/auc-log';
import {jump} from "@baidu/auc-base/jump";
import AucComponent from "@baidu/auc-base/AucComponent";
import Swiper from './utils/swiper';
import {env} from '@baidu/auc-base/env';
if (!env.isSSR) {
    import('./assets/swiper.css');
}
export class AucColumn extends AucComponent {
    static template:string = /* html */ `
    <div class="{{columnClass}}" style="{{isBigEvent && columnBackColor ? 'background-color:' + columnBackColor : ''}}">
        <template s-if="columnName && showTitle">
            <div 
                s-if="columnNameType && isBigEvent"
                class="{{styles.columnNameImg}}"
                style="background-image:url({{columnNameImg[pageMode === 'dark' ? 'day' : pageMode]}})"
            ></div>
            <div s-else class="{{styles.columnName}}">
                {{columnName}}
                <template s-if="columnType == 5 && columnTags.length !== 1">
                    <div class="{{styles.tabBarSwiper}}" s-ref="tabBar">
                        <div class="{{styles.tabBarWrapper}} swiper-wrapper">
                            <div class="{{styles.top_bar}} {{currentIndex === index ? styles.active: ''}} swiper-slide"
                                on-click="topBarClick(index)"
                                s-for="top_bar,index in columnTags">
                                {{top_bar + ' ' + tagsCount[index]}}
                            </div>
                        </div>
                    </div>
                </template>
            </div>
            <div s-if="columnType == 8" class="{{styles.baikeLogo}}"></div>
        </template>
        <div class="{{styles.columnContent}}">
            <template
                s-for="news,index in computedNewsList"
            >
                <components
                    s-is="news.componentName"
                    s-bind="news"
                    class="{{styles.comp}}"
                    index="{{index}}"
                    box-prase-icon-list="{{boxPraseIconList}}"
                    is-immersive="{{isImmersive}}"
                    status-bar-height="{{statusBarHeight}}"
                    page-mode="{{pageMode}}"
                    globalVedioMute="{{globalVedioMute}}"
                    globalVedioAutoplay="{{globalVedioAutoplay}}"
                    globalVedioVolume="{{globalVedioVolume}}"
                    networtType="{{networtType}}"
                    isBigEvent="{{isBigEvent}}"
                    landType="{{landType}}"
                    columnBackColor="{{columnBackColor}}"
                    statusBarHeight="{{statusBarHeight}}"
                    titleBarHeight="{{titleBarHeight}}"
                    topicId="{{topicId}}"
                    on-jump="comJump"
                    on-backShoubai="backShoubai"
                    on-videoMute="videoMute"
                ></components>
            </template>
        </div>
        <auc-loader
            s-if="isShowLoader && !(!isLast && isEnd)"
            state="{{loadingState}}"
            class="{{columnType === 2 || columnType === 5 ? styles.timelineLoader : ''}}"
            is-double-row="{{columnType === 7}}"
            isColumnBackColor="{{isBigEvent && columnBackColor}}"
            on-click-loader="handleClickMore"
        >
            <span slot="end">
                <span s-if="isLast">没有更多内容了</span>
            </span>
        </auc-loader>
        <div s-else class="{{styles.writeDiv}}"></div>
    </div>`;

    static computed:object = {
        computedNewsList() {
            const newsList = this.data.get('newsList');
            const columnType = this.data.get('columnType');
            let result = [];
            if (!Array.isArray(newsList)) {
                return result;
            }
            // 双列&单数，扔掉最后一个
            if (columnType === 7 && newsList.length % 2 !== 0) {
                newsList.pop();
            }
            result = newsList.map(item => iteration(
                item,
                columnType,
                // columnIndex + 1，是作为打点用的index的考虑
                +this.data.get('columnIndex') + 1)
            );
            if (+columnType === 11) {
                let data = [
                    {
                        componentName: 'auc-zhengming',
                        rightSide: [],
                        oppositeSide: []
                    }
                ];
                result.map(item => {
                    if (+item.camp === 1) {
                        data[0].rightSide.push(item);
                    } else {
                        data[0].oppositeSide.push(item);
                    }
                })

                result = data;
            }
            return result;

        },
        // 卫报模板不显示loader(不显示分割线)，最后一个显示loader(为的是展示出没有更多内容了)
        isShowLoader() {
            const columnType = this.data.get('columnType');
            const isLast = this.data.get('isLast');
            return columnType !== 3 && columnType !== 4 || isLast;
        },
        columnClass() {
            const columnType = this.data.get('columnType');
            const computedNewsList = this.data.get('computedNewsList');

            // columnType 1 热议栏目、观点 2 时间轴 3 观点 4 热议 5 事件脉络 6 顶部大图 7 双列 8 百科 9 一图秒懂 10 辟谣
            return [
                styles.aucColumnWrapper,
                columnType === 7 ? styles.aucDoubleRowColume : '',
                this.data.get('isBigEvent') ? styles.bigEvent : '',
                this.data.get('isBigEvent') && this.data.get('columnNameType') ? styles.specialColumn : '',
                !this.data.get('showTitle') ? styles.hiddenTitle : '',
                this.data.get('columnBackColor') ? styles.columnBackColor : '',
                columnType === 7 && computedNewsList.length < 2 ? styles.columnHidden : '',
                [2, 5, 9].includes(columnType) ? styles.timelinColumn : '',
                columnType === 10 ? styles.columnRefuteRumor : ''
            ];
        }
    };

    static components:object = {
        'auc-loader': AucLoader,
        ...components
    };

    initData(): AucColumnData {
        return {
            styles,
            columnName: '',
            columnType: '',
            columnIndex: 0,
            loadingState: LoaderState.DEFAULT,
            isFold: false,
            isEnd: false,
            newsList: [],
            LoaderState,
            isLast: false,
            currentIndex: 0,
            columnExt: {},
            columnTags: []
        };
    }
    initend() {
    }
    comJump(data) {
        this.fire('comJump', data);
        jump(data);
    }
    topBarClick(index) {
        const currentIndex = this.data.get('currentIndex');
        if (currentIndex === index) { // 防止重复点击当前标签
            return;
        }
        this.data.set('currentIndex', index);
        const columnData:AucColumnData = this.data.get('');
        const tag = this.data.get('columnTags')[index];
        this.fire('click-tag', {...columnData, timelineTag: tag, isTagClick: 1});
    }
    backShoubai() {
        this.fire('backShoubai');
    }

    attached(): void {
        // console.log(this.data.get());
        new Swiper(this.ref('tabBar'), {
            freeMode: true,
            slidesPerView: 'auto',
            setWrapperSize: true,
            on: {
                click() {
                    let thisWidth = this.clickedSlide.offsetWidth;
                    let thisLeft = this.clickedSlide.offsetLeft;
                    let offsetX = this.width / 2 - thisLeft - thisWidth  / 2;
                    //偏移量在1/2视口内时，容器不发生偏移
                    if (offsetX > 0){
                        offsetX = 0;
                    } else if (offsetX < this.maxTranslate()) { //offsetX小于容器最大偏移时，让偏移量等于容器最大的偏移量
                        offsetX = this.maxTranslate();
                    }
                    //设置容器的过渡动画
                    this.setTransition(300);
                    this.setTranslate(offsetX);
                    
                }
            }
        });
        this.registerScrollInView().then(() => {
            this.log('column_show');
        });
        const columnTags = this.data.get('columnExt.columnTags');
        if (columnTags) {
            this.data.set('columnTags', this.data.get('columnExt.columnTags').split(','));
            this.data.set('tagsCount', this.data.get('columnExt.tagsCount').split(','));
        }
    }

    handleClickMore() {
        const columnData:AucColumnData = this.data.get('');
        let timelineTag = '';
        const currentIndex = this.data.get('currentIndex');
        const columnType = this.data.get('columnType');
        const columnTags = this.data.get('columnTags');
        if (columnType === 5 && columnTags) {
            timelineTag = columnTags[currentIndex];
        }
        this.fire('click-more', {...columnData, timelineTag, isTagClick: 0});
        this.log('more_click');
    }

    log(type) {
        pageLog(type, {
            column_type: this.data.get('columnType'),
            column_id: +this.data.get('columnIndex') + 1
        });
    }

    videoMute() {
        this.fire('videoMute')
    }
}

export default AucColumn;
