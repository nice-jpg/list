/*
 * @Descripttion: 
 * @version: 
 * @Author: xiongyang
 * @Date: 2020-06-01 19:27:17
 * @LastEditors: xiongyang
 * @LastEditTime: 2020-06-02 10:58:11
 */ 
import {IvkAppCreator} from '../../src/index';
import san from 'san';
import config from './config.json';

const App = san.defineComponent({
    template: `
        <div id="app">
        <div class="cut">===========================</div>
        <button class="btn" on-click="getHitMcp">是否命中mcp策略</button>
        <button class="btn" on-click="getActionFlag">是否命中屏蔽策略</button>
        <button class="btn" on-click="getExitInfo">获取退场状态</button>
        <button class="btn" on-click="invokeBox">执行调起手百</button>
        <button class="btn" on-click="clearStorage">清除localstorage</button>
        <div class="infoCon">
            是否命中mcp策略: {{hitMcp}} <br/>
            是否命中屏蔽策略: {{hisActionFlag}} <br/>
            退场状态：{{extInfo}}
        </div>
        </div>
    `,
    attached() {
        const mcpShare = config.mcpShare;
        this.pos = 'pos_13';
        this.logId = mcpShare['log_id'];
        this.opt = mcpShare['action_rule'][this.pos];
        this.index = 0;

        // 创建构造器
        this.creator = new IvkAppCreator();
        // 设置公参，设置一次即可
        this.creator.setCommonParams({
            app: 'wise',
            scene: 'sharepage'
        });
        let options = {
            pos: this.pos,
            opt: this.opt,
            logId: this.logId,
            index: this.index
        };
        // 初始化一个mcp调起实例
        this.ivkMcpInst = this.creator.create(options);
    },
    getHitMcp() {
        // 是否命中mcp策略
        let hitMcp = this.ivkMcpInst.hitMcp();
        this.data.set('hitMcp', hitMcp);
    },
    getActionFlag() {
        // 获取屏蔽策略状态
        let hisActionFlag = !this.ivkMcpInst.getActionFlag();
        this.data.set('hisActionFlag', JSON.stringify(hisActionFlag));
    },
    getExitInfo() {
        // 是否命中mcp策略
        let extInfo = this.ivkMcpInst.getExitInfo();
        this.data.set('extInfo', JSON.stringify(extInfo));
    },
    invokeBox() {
        // 执行调起
        let sucCb = (msg) => {
            // doSomething
            this.sucCallback(msg);
        };
        let failCb = (msg) => {
            // doSomething
            this.failCallback(msg);
        };
        // 可传入失败或者成功回调函数
        this.ivkMcpInst.execInvoke({sucCb, failCb});
        // 直接调起
        // this.ivkMcpInst.execInvoke();
    },
    sucCallback() {
        console.log(msg, 'successCallback msg')
    },
    failCallback(msg) {
        console.log(msg, 'failCallback msg')
    },
    clearStorage() {
        localStorage.clear();
        location.reload()
    }
});

new App().attach(document.body);