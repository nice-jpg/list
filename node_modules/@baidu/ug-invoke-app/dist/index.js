import H5ErrLogInstance from '@baidu/ug-error-log';
import Url from 'url-parse';
import qs from 'query-string';
import { toQueryString, stringifyQuery, toGlobalFunc } from '@baidu/eop-utils';
import ClipboardAction from 'clipboard/src/clipboard-action';

/**
 * @file browserslist
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
// browser并不是越多越好，够用即可
// 判断browser是否有意义，在于他是否是对各种调起rules有影响
// 对于没有意义的browser，比如遨游浏览器和opera这种，并没有什么区别
const browserMap = new Map([['wechat', /micromessenger/i], ['qqbrowser', /\bm?qqbrowser\/([0-9.]+)(?!.* qq)/i], ['qq', /\bqq\/([0-9.]+)/i], ['weibo', /weibo__/i], ['uc', /((?:[\s\/])uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w.]+)/i], ['360', /(qihu|qhbrowser|qihoobrowser|360browser)/i], ['baiduboxlite', /(lite|info) baiduboxapp/i], ['fortunecat', /fcapp/i], ['baiduboxmission', /mission baiduboxapp/i], ['baiduboxvision', /baiduboxvision/i], ['baiduboxapp', /baiduboxapp/i], ['tieba', /tieba/i], ['baiduhaokan', /haokan/i], ['bdminivideo', /bdminivideo/i], ['bdnetdisk', /netdisk/i], ['baidumap', /baidumap/i], ['baiduhi', /baiduhi_android/i], ['bddrama', /bddrama/i], ['knews', /knews/i], ['baiduboxsenior', /baiduboxsenior/i], ['wenku', /com.baidu.wenku/i], ['lemon', /lemonapp/i], ['baiduinput', /baiduinput/i], ['weibaapp', /weibaapp/i], ['youjia', /youjia/i], ['yike', /youa/i], ['bdwkst', /-HadesCore-.*student/i], ['askmybaby', /mybaby/i], ['tomas', /tomas/i], ['yiju', /bdyiju/i], ['rap', /hiphop/i], ['wepod', /wepod/i], ['bdhealthapp', /bdhealthapp/i], ['yymobile', /.*yy([(])?(clientversion:)?([0-9.]+).*/gi], ['baiduhanyu', /dictapp/i], ['sogou', /sogoum(obilebrowser|se)/i], ['alipay', /alipayclient/i], ['taobao', /\baliapp\(tb\/([0-9.]+)\)/i], ['tianmao', /\baliapp\(tm\/([0-9.]+)\)/i], ['tao', /\btaobrowser\/([0-9.]+)/i], ['quark', /\bquark\/([0-9.]+)/i], ['xiaomi', /\bmiuibrowser\/([0-9.]+)/i], ['oppo', /\bheytapbrowser\/([0-9.]+)/i], ['vivo', /\bvivobrowser\/([0-9.]+)/i], ['meizu', /\bmzbrowser\/([0-9.]+)/i], ['huawei', /huaweibrowser\/([0-9.]+)/i], ['samsung', /\bsamsungbrowser\/([0-9.]+)/i], ['edge', /edge\/([0-9.]+)/i], ['firefox', /\bfirefox\/([0-9.ab]+)/i], ['chrome', /(?:chrome|crios|crmo)\/([0-9.]+)/i], ['safari', /\bversion\/([0-9.]+(?: beta)?)(?: mobile(?:\/[a-z0-9]+)?)? safari\//i]]);

/**
 * @file 手机厂商list
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
// 正则匹配不到的，给个默认值 '-'
const brandMap = {
  samsung: /.*Android.*(SAMSUNG|SM-).*/i,
  xiaomi: /.*Android.*(Mi|M2011K2C).*/i,
  oppo: /.*(OPPO|heytap|p[a-z][a-z][a-z]\d0).*/i,
  vivo: /.*Android.*(vivo|v\d\d\d\d[a-z]?a?).*/i,
  huawei: /.*huawei.*/i,
  honor: /.*honor.*/i,
  apple: /(iPhone|iPod|iPad|Macintosh)/i
};

/**
 * @file 环境判断
 * @author zhuzhibo <zhuzhibo@baidu.com>
 */
const ua = navigator.userAgent;

function detectIpad() {
  let isMobile = RegExp(/iPad/i).test(navigator.userAgent);

  if (!isMobile) {
    const isMac = RegExp(/Macintosh/i).test(navigator.userAgent);

    if (isMac && navigator.maxTouchPoints && navigator.maxTouchPoints > 2) {
      isMobile = true;
    }
  }

  return isMobile;
}

const IS_IPAD = detectIpad();
const IS_IOS = /(iPhone|iPod|iPad|Macintosh)/i.test(ua) || IS_IPAD;
const IS_ANDROID = /(Android)/i.test(ua);

function getIOSVersion() {
  let reg = /OS ((\d+_?){2,3})\s/i;

  if (IS_IOS) {
    let osv = reg.exec(navigator.userAgent); // @ts-ignore

    if ((osv === null || osv === void 0 ? void 0 : osv.length) > 0) {
      // @ts-ignore
      return osv[0].replace('OS', '').replace('os', '').replace(/\s+/g, '').replace(/_/g, '.');
    }
  }

  return '';
}

const IOS_VERSION = Number(getIOSVersion().split('.')[0]);

/**
 * @file ua parser
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
function getHostInfo() {
  const ua = navigator.userAgent;
  const os = IS_IOS ? 'ios' : IS_ANDROID ? 'android' : '-'; // 返回值默认-

  const res = {
    browser: '-',
    brand: '-',
    os
  }; // 正则匹配一下browser name

  for (const [browser, browserReg] of browserMap) {
    if (browserReg.test(ua)) {
      res.browser = browser;
      break;
    }
  } // 正则匹配一下brand


  for (let [brand, brandReg] of Object.entries(brandMap)) {
    if (brandReg.test(ua)) {
      res.brand = brand;
      break;
    }
  }

  return res;
}

/**
 * @file 手机厂商market头规则
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
// 这里的匹配规则一定要从头到尾
// 存在优先级的
// [browser, brand, marketScheme]
const androidStoreRules = [// 三星不支持market协议,优先级最高
['*', 'samsung', 'samsungapps'], // 微博是白名单机制，所以优先级要高,除了三星
['weibo', '*', 'market'], // 手百是白名单机制，所以优先级要高
['baiduboxapp', '*', 'market'], ['baiduboxlite', '*', 'market'], ['tomas', '*', 'market'], // 小米 红米 uc 搜狗需要走mi 商店
['xiaomi', 'xiaomi', 'mimarket'], ['uc', 'xiaomi', 'mimarket'], ['sogou', 'xiaomi', 'mimarket'], // qq浏览器比较特殊，华为荣耀只能走market，不然多重调起容易没反应
['qqbrowser', 'huawei', 'market'], ['qqbrowser', 'honor', 'market'], // 华为 荣耀机型都走自己的应用商店
['*', 'huawei', 'appmarket'], ['*', 'honor', 'appmarket'], // oppo
['oppo', 'oppo', 'oppomarket'], ['uc', 'oppo', 'oppomarket'], ['sogou', 'oppo', 'oppomarket'], ['quark', 'oppo', 'oppomarket'], // vivo
['uc', 'vivo', 'vivomarket'], ['sogou', 'vivo', 'vivomarket']];

/**
 * @file 安卓应用商店调起协议
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
const marketMap = {
  mimarket: pkgName => `mimarket://details?id=${pkgName}&back=true`,
  appmarket: pkgName => `appmarket://details?id=${pkgName}&back=true`,
  oppomarket: pkgName => `oppomarket://details?packagename=${pkgName}`,
  vivomarket: pkgName => `vivomarket://details?id=${pkgName}`,
  samsungapps: pkgName => `samsungapps://ProductDetail/${pkgName}?back=1`,
  market: pkgName => `market://details?id=${pkgName}`
};

/**
 * 获得当前机型 调用安卓市场协议的scheme
 *
 */
function getMarketScheme(pkgName) {
  const {
    browser,
    brand
  } = getHostInfo();
  let marketScheme = `market://details?id=${pkgName}`;

  for (const [browserRule, brandRule, schemeName] of androidStoreRules) {
    if ((browserRule === '*' || browser === browserRule) && (brandRule === '*' || brand === brandRule)) {
      marketScheme = marketMap[schemeName](pkgName);
      break;
    }
  } // 贴吧特殊case
  // 贴吧专用协议,贴吧不加后面参数生效不了


  if (browser === 'tieba') {
    marketScheme += '&enable_tieba_native_open=1';
  }

  return marketScheme;
}

/**
 * @file invokeTypeRules
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
const notUlinkRules = [['weibo', 'baiduboxapp'], ['uc', 'baiduboxapp'], ['quark', 'baiduboxapp'], ['chrome', '*']]; // [browser,appName][]

const notIframeRules = [['uc', '*'], ['chrome', '*'], ['samsung', '*']]; // 工具函数，检测是否匹配某个规则

const matchRules = (rules, browser, appName) => rules.some(([browserRule, appNameRule]) => {
  return (browserRule === '*' || browserRule === browser) && (appNameRule === '*' || appNameRule === appName);
}); // ios系统，且版本》9.或者是个iapd  无所谓版本了


const matchIosWithVersion = IS_IOS && IOS_VERSION > 9 || IS_IPAD;
function matchedUlink(browser, appName) {
  const notUlink = matchRules(notUlinkRules, browser, appName); // ios系统支持，且不在notUlink名单中

  return matchIosWithVersion && !notUlink;
}
function notMatchedIframe(browser, appName) {
  return matchIosWithVersion || matchRules(notIframeRules, browser, appName);
}

/**
 * @file schema 调起
 * @author zhuzhibo <zhuzhibo@baidu.com>
 * @author zsy
 */

/**
 *
 * invokeAction包含了
 * 直接使用location = scheme
 * 和iframe两种方式
 *
 */
function invokeAction(scheme, appName) {
  const {
    browser
  } = getHostInfo(); // 注意这里的appName，如果以后有规则匹配
  // 要去确认下!!!会不会影响单独的api  invokeMarket!!!

  if (notMatchedIframe(browser, appName)) {
    window.top.location.href = scheme;
    return;
  } // 其余一律走iframe调起


  let node = document.createElement('iframe');
  node.style.display = 'none';
  node.src = scheme;
  const body = document.body;
  body.appendChild(node); // 销毁 iframe

  setTimeout(() => {
    body.removeChild(node); // @ts-ignore

    node = null;
  }, 0);
}

/**
 * @file 调起情况检测
 * @author zhuzhibo(zhuzhibo@baidu.com)
 * @author zsy
 */

/**
 * 调起情况检测
 *
 */
function checkInvoke(timeout) {
  return new Promise((resolve, reject) => {
    const timer = setTimeout(() => {
      // 如果visibilitychange事件不触发，但是state会变化
      // 这里可以兜底判断回调
      // 但是这种概率还是挺小的
      if (document.visibilityState === 'hidden') {
        clearTimeout(timer);
        resolve();
        return;
      }

      reject();
    }, timeout);
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'hidden') {
        clearTimeout(timer);
        resolve();
      }
    });
  });
}

/**
 * @file 返回值列表
 * @author zhuzhibo(zhuzhibo@baidu.com)
 * @author zsy
 */
const Status = {
  TRY_JUMP: 90001,
  INVOKE_SUCCESS: 10000,
  APPSTORE_SUCCESS: 10001,
  APK_SUCCESS: 10002,
  YYB_SUCCESS: 10003,
  FAILEDURL_SUCCESS: 10004,
  COPY_FAILED: 20004,
  INVOKE_FAIL: 20005,
  NOT_SUPPORT_SYSTEM: 20006,
  INVOKE_APPSTORE_FAIL: 20007,
  INVOKE_ULINK_FAIL: 20008,
  APPNAME_NOT_SUPPORT: 20011,
  PARAMS_ERROR: 21000
};

/**
 * @file 调起类型
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
// 只有这5种情况会去尝试调起并且可能失败
// 需要标志不同的statusCode
// 所以这里要区分一下
// 像yyb这种就不需要了，直接就确定了只有调起yyb成功的code了
const InvokeType = {
  DEEPLINK: "deeplink",
  ULINK: "ulink",
  SCHEME: "scheme",
  NOT_TRY: "notTry",
  ANDROID_MARKET: "market"
};

/**
 * @file send error
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
H5ErrLogInstance.init({
  url: 'https://activity.baidu.com/activity/felog/log',
  app: 'ug-invoke-app_prod02',
  watch: false
});
function getRandomNumber() {
  return Math.floor(100 * Math.random());
} // 当次调起  是否命中抽样
// query上_uia_h=1参数优先级最高
// 或者计算抽样比例

function isHit(statRatio) {
  let url = new Url(window.location.href);
  let query = qs.parse(url.query) || {};
  return query._uia_h === '1' || getRandomNumber() < statRatio;
}
/**
 *
 *
 * ug-invoke-app行为统计打点
 * 尝试调起
 * 异常报错
 * 调起成功、失败、应用商店等
 * status必须传，其他的会根据invokeapp第一次进入的时候的缓存发出
 * 如果有单次覆盖参数，可以在这个方法里传，不影响缓存
 *
 *
 */

function sendH5ErrLog(options, status, useSendBeacon = true) {
  if (options.isHitStat) {
    // 前面这三个不需要打点了
    const {
      marketScheme,
      isHitStat,
      pkgName,
      ...rest
    } = options;
    const uiaVer = window.__UIA_VERSION__ || '-';
    H5ErrLogInstance.send({ ...rest,
      uiaVer,

      /* eslint-disable */
      _uia_status: status
      /* eslint-enable */

    }, useSendBeacon);
  }
}

/**
 * @file 尝试调起失败处理
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
async function handleInvokeFailed(options, invokeType) {
  // 之所以sendH5Errlog不在最后处理
  // 是因为跳页面就销毁上下文，打点一定要在跳转前发出
  if (invokeType === InvokeType.ULINK) {
    sendH5ErrLog(options, Status.INVOKE_ULINK_FAIL);
    return Promise.reject(Status.INVOKE_ULINK_FAIL);
  }

  if (options.toStore) {
    if (IS_ANDROID && invokeType !== InvokeType.ANDROID_MARKET) {
      return invokeAndroidMarket(options);
    } else if (IS_IOS && options.iosStoreUrl) {
      sendH5ErrLog(options, Status.APPSTORE_SUCCESS);
      location.href = options.iosStoreUrl;
      return Status.APPSTORE_SUCCESS;
    }
  }

  if (IS_ANDROID && options.apkUrl) {
    sendH5ErrLog(options, Status.APK_SUCCESS);
    location.href = options.apkUrl;
    return Status.APK_SUCCESS;
  }

  if (options.failedUrl) {
    sendH5ErrLog(options, Status.FAILEDURL_SUCCESS);
    location.href = options.failedUrl;
    return Status.FAILEDURL_SUCCESS;
  } // 前面已经处理过android去market的场景
  // 还能进入这里，说明安卓调起应用商店失败了


  if (options.toStore && IS_ANDROID && invokeType === InvokeType.ANDROID_MARKET) {
    sendH5ErrLog(options, Status.INVOKE_APPSTORE_FAIL);
    return Promise.reject(Status.INVOKE_APPSTORE_FAIL);
  }

  sendH5ErrLog(options, Status.INVOKE_FAIL);
  return Promise.reject(Status.INVOKE_FAIL);
}

/**
 * @file invoke 类型
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
async function invokeWithType(options, invokeType) {

  if (invokeType === InvokeType.ULINK) {
    window.top.location.href = options.ulink;
  } else if (invokeType === InvokeType.ANDROID_MARKET && options.marketScheme) {
    invokeAction(options.marketScheme, options.appName);
  } else if (invokeType === InvokeType.SCHEME) {
    invokeAction(options.scheme, options.appName);
  }

  try {
    await checkInvoke(options.timeout);
    const status = invokeType === InvokeType.ANDROID_MARKET ? Status.APPSTORE_SUCCESS : Status.INVOKE_SUCCESS;
    sendH5ErrLog(options, status);
    return status;
  } catch (e) {
    return handleInvokeFailed(options, invokeType);
  }
}

/**
 * @file 调起应用商店
 * @author zhuzhibo(zhuzhibo@baidu.com)
 */

async function invokeAndroidMarket(options) {
  options.marketScheme = getMarketScheme(options.pkgName);
  return invokeWithType(options, InvokeType.ANDROID_MARKET);
} // 专门给外边人写的单独的api

async function invokeMarket(pkgName, timeout = 2000) {
  const scheme = getMarketScheme(pkgName); // 函数签名需要一个AppName，但其实invokeMarket并不会用到
  // 所以这里随意传入一个好了了

  invokeAction(scheme, 'baiduinput');

  try {
    await checkInvoke(timeout);
    return Status.APPSTORE_SUCCESS;
  } catch (e) {
    return Promise.reject(Status.INVOKE_APPSTORE_FAIL);
  }
}

/**
 * @file appconfig
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 * @see http://agroup.baidu.com/ceug-fe/md/article/2799135
 */
// 兼容一下第三方的appName名字
const appConfigMap = {
  baiduboxapp: {
    getUlink(scheme, target) {
      return `https://boxer.baidu.com/scheme?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://itunes.apple.com/cn/app/id382201985?mt=8',
    scheme: 'baiduboxapp://v11/appTab/select?item=home&upgrade=0',
    pkgName: 'com.baidu.searchbox'
  },
  baiduboxlite: {
    getUlink(scheme, target) {
      return `https://wakeup.baidu.com/baiduboxlite/scheme?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://itunes.apple.com/cn/app/id1281873118?mt=8',
    scheme: 'baiduboxlite://v11/appTab/select?item=home&upgrade=0',
    pkgName: 'com.baidu.searchbox.lite'
  },
  baiduhaokan: {
    getUlink(scheme, target) {
      const path = scheme.replace('baiduhaokan://', '');
      const hasQuestionMark = path.includes('?');
      return 'https://hku.baidu.com/h5/share/s/' + path + (hasQuestionMark ? '&' : '?') + `target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://itunes.apple.com/cn/app/bai-du-hao-kan/id1092031003',
    scheme: 'baiduhaokan://home/index',
    pkgName: 'com.baidu.haokan'
  },
  bdminivideo: {
    getUlink(scheme, target) {
      return `https://vv.baidu.com/feedvideoui/ulink?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://itunes.apple.com/cn/app/%E5%85%A8%E6%B0%91%E5%B0%8F%E8%A7%86%E9%A2%91/id1329385145?mt=8',
    scheme: 'bdminivideo://home/index',
    pkgName: 'com.baidu.minivideo'
  },
  tieba: {
    appStoreUrl: 'https://itunes.apple.com/app/apple-store/id477927812?pt=328057&ct=bottom_layer&mt=8',
    pkgName: 'com.baidu.tieba',

    // 贴吧没有提供ulink
    getUlink() {
      return '';
    },

    scheme: 'com.baidu.tieba://unidispatch/homepage'
  },
  bdnetdisk: {
    getUlink(scheme, target) {
      return `https://snsyun.baidu.com/wap/snsdeeplink?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    pkgName: 'com.baidu.netdisk',
    appStoreUrl: 'https://itunes.apple.com/cn/app/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98/id547166701?mt=8',
    scheme: 'bdnetdisk://n/action.EXTERNAL_ACTIVITY?m_n_v=10.0.20'
  },
  iqiyi: {
    getUlink() {
      return '';
    },

    pkgName: 'com.qiyi.video',
    appStoreUrl: 'https://apps.apple.com/cn/app/id393765873',
    scheme: 'iqiyi://'
  },
  baidumap: {
    getUlink(scheme, target) {
      return `https://clientmap.baidu.com/map/maplink.php?cburl=${encodeURIComponent(target)}&openapi=${encodeURIComponent(scheme)}`;
    },

    appStoreUrl: 'https://itunes.apple.com/cn/app/id452186370',
    scheme: 'baidumap://map?src=uginvoke',
    pkgName: 'com.baidu.BaiduMap'
  },
  bddrama: {
    getUlink(scheme, target) {
      return `https://ulinkmvideo.baidu.com/wisedrama/system/ulink?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/%E7%95%AA%E4%B9%90/id1484301936',
    pkgName: 'com.baidu.mv.drama',
    scheme: 'bddrama://home?source='
  },
  wenku: {
    getUlink() {
      return '';
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/id426340811',
    pkgName: 'com.baidu.wenku',
    scheme: 'bdwenku://wenku/operation?type=136&tab=find'
  },
  lemon: {
    getUlink(scheme, target) {
      return `https://wakeup.baidu.com/lemonapp/scheme?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'http://click.hm.baidu.com/app.gif?ap=1801081&ch=47556',
    scheme: 'lemon://share?type=13',
    pkgName: 'com.baidu.lemon'
  },
  baiduinput: {
    // 百度输入法不支持失败后跳转链接
    getUlink(scheme) {
      return `https://srf.baidu.com/?from=1024129m&c=apple&e=imehd&native_url=${encodeURIComponent(scheme)}`;
    },

    appStoreUrl: 'https://itunes.apple.com/app/apple-store/id916139408?pt=625805&ct=1024129m&mt=8',
    scheme: 'baiduimsettings2://superskin',
    pkgName: 'com.baidu.input'
  },
  baiduboxvision: {
    getUlink(scheme, target) {
      return `https://wakeup.baidu.com/baiduboxvision/scheme?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/id1526110789',
    scheme: 'baiduboxvision://appTab/select?item=home',
    pkgName: 'com.baidu.searchbox.vision'
  },
  weibaapp: {
    getUlink() {
      return '';
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/%E5%BE%AE%E5%8F%AD/id1410178720',
    scheme: 'lazybd://com.melon.lazymelon/home',
    pkgName: 'com.melon.lazymelon'
  },
  youjia: {
    getUlink() {
      return '';
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/id1490227077',
    scheme: 'youjia://app/homepage',
    pkgName: 'com.baidu.autocar'
  },
  askmybaby: {
    getUlink() {
      return '';
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/%E5%AE%9D%E5%AE%9D%E7%9F%A5%E9%81%93-%E7%A7%91%E5%AD%A6%E5%A4%87%E5%AD%95%E6%80%80%E5%AD%95%E8%82%B2%E5%84%BF%E5%8A%A9%E6%89%8B/id858401906',
    scheme: 'askmybaby://com.baidu.mbaby/',
    pkgName: 'com.baidu.mbaby'
  },
  yike: {
    // 一刻相册不支持失败后跳转链接
    getUlink(scheme) {
      return `https://photo.baidu.com/app/scheme?&scheme=${encodeURIComponent(scheme)}`;
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/%E4%B8%80%E5%88%BB%E7%9B%B8%E5%86%8C-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%87%BA%E5%93%81/id1467852587',
    scheme: 'youa://youa.com/home',
    pkgName: 'com.baidu.youavideo'
  },
  baiduhanyu: {
    getUlink(scheme, target) {
      return `https://wakeup.baidu.com/baidudict/scheme?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/1/id1065829176',
    scheme: 'baidudict://com.baidu.dict',
    pkgName: 'com.baidu.dict'
  },
  yoopu: {
    getUlink(scheme, target) {
      return `https://wakeup.baidu.com/yoopu/scheme?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://itunes.apple.com/cn/app/id1533615786?mt=8',
    scheme: 'yoopu://',
    pkgName: 'com.baidu.yoopu'
  },
  tomas: {
    getUlink(scheme, target) {
      return `https://wakeup.baidu.com/tomas/scheme?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/id1546173008',
    scheme: 'tomas://',
    pkgName: 'com.baidu.searchbox.tomas'
  },
  fortunecat: {
    getUlink(scheme, target) {
      return `https://wakeup.baidu.com/fortunecat/scheme?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/id1523487452',
    scheme: 'fortunecat://invoke?p=%7B%22type%22%3A0%2C%22source%22%3A1%7D&ubc_ext=%7B%22invoke_channel%22%3A%221024634f%22%7D',
    pkgName: 'com.baidu.fortunecat'
  },
  yiju: {
    getUlink(scheme, target) {
      return `https://ulinkmvideo.baidu.com/yiju/system/ulink?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/id1548246673',
    scheme: 'bdyiju://home/index',
    pkgName: 'com.baidu.yiju'
  },
  bdhealthapp: {
    getUlink(scheme, target) {
      return `https://jiankang.baidu.com/scheme?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/id1555616850',
    scheme: 'bdhealthapp://app/home',
    pkgName: 'com.baidu.bdhealth'
  },
  bdwkst: {
    getUlink() {
      return '';
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/id1527030248',
    scheme: 'bdwkst://student/operation?type=136',
    pkgName: 'com.baidu.student'
  },
  rap: {
    getUlink(scheme, target) {
      return `https://ulinkmvideo.baidu.com/wisedrama/system/yinciulink?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/id1528455665',
    scheme: 'bdhiphop://',
    pkgName: 'com.baidu.rap'
  },
  wepod: {
    getUlink(scheme, target) {
      return `https://ulinkmvideo.baidu.com/wisedrama/system/wepodulink?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/id1541812473',
    scheme: 'bdwepod://',
    pkgName: 'com.baidu.wepod'
  },
  yymobile: {
    getUlink(scheme) {
      return `https://ulink.yy.com/urlscheme?type=scheme&action=${encodeURIComponent(scheme)}&autodownload=1`;
    },

    appStoreUrl: 'https://apps.apple.com/app/id427941017',
    scheme: 'yymobile://',
    pkgName: 'com.duowan.mobile'
  },
  baiduboxsenior: {
    getUlink(scheme, target) {
      return `https://wakeup.baidu.com/baiduboxsenior/scheme?scheme=${encodeURIComponent(scheme)}&target=${encodeURIComponent(target)}`;
    },

    appStoreUrl: 'https://apps.apple.com/cn/app/id1581796662',
    scheme: 'baiduboxsenior://v11/appTab/select?item=home&upgrade=0',
    pkgName: 'com.baidu.searchbox.senior'
  },
  knews: {
    getUlink() {
      return '';
    },

    appStoreUrl: '',
    scheme: 'knews://v11/appTab/select?item=home&upgrade=0',
    pkgName: 'com.miui.knews'
  }
};

/**
 * @file deeplink map
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
// 手百
const boxDeeplinkConfig = {
  getScheme(appUrl, callback) {
    return 'baiduboxapp://v7/vendor/ad/deeplink?' + `${toQueryString(stringifyQuery({
      params: {
        appUrl
      }
    }))}` + `&callback=${toGlobalFunc(callback)}`;
  },

  successCode: 0
}; // 百度看看

const baiduboxvision = {
  getScheme(appUrl, callback) {
    return 'baiduboxvision://v7/vendor/ad/deeplink?' + `${toQueryString(stringifyQuery({
      params: {
        appUrl
      }
    }))}` + `&callback=${toGlobalFunc(callback)}`;
  },

  successCode: 0
}; // 全民

const bdminivideo = {
  getScheme(appUrl, callback) {
    return 'bdminivideo://growth/launch3rdApp?' + toQueryString(stringifyQuery({
      callback: callback,
      params: {
        scheme: appUrl
      }
    }, true));
  },

  successCode: 0
};
const deeplinkConfigMap = {
  baiduboxapp: boxDeeplinkConfig,
  baiduboxlite: boxDeeplinkConfig,
  tomas: boxDeeplinkConfig,
  baiduboxvision,
  // 好看的端能力launch3rdApp有问题，调起失败也会返回成功的信息
  // 暂时搁置不处理
  bdminivideo
};
// 类型保护
// Browser => DeeplinkApp
function isDeeplinkApp(browser) {
  return Object.keys(deeplinkConfigMap).includes(browser);
}

/**
 * @file 调起应用宝
 * @author zhuzhibo(zhuzhibo@baidu.com)
 * @author zsy
 */
/**
 * 调起应用宝
 */

function openYYB(options) {
  const YYBUrl = `http://a.app.qq.com/o/simple.jsp?pkgname=${options.pkgName}`;
  sendH5ErrLog(options, Status.YYB_SUCCESS);
  location.href = `${YYBUrl}&android_schema=${encodeURIComponent(options.scheme)}`;
  return Status.YYB_SUCCESS;
}

/**
 * @file 不尝试调起的规则配置
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
// 这里的匹配规则一定要从头到尾
// 存在优先级的
// [browser, appName, os]
// 从当前browser调起至目标appName，不尝试调起，直接走失败路径
const notTryJumpRules = [['xiaomi', 'baiduboxapp', 'android'], ['uc', 'baiduboxapp', 'android'], ['oppo', 'baiduboxapp', 'android'], ['vivo', 'baiduboxapp', 'android'], ['wechat', 'baiduboxapp', 'android']];

/**
 * @file 检查是否处于黑名单浏览器中
 * @author zhuzhibo <zhuzhibo@baidu.com>
 */

/**
 * 检查是否处于黑名单浏览器中
 */
function checkNotTryJump(browser, appName, os) {
  for (const [browserRule, appNameRule, osRule] of notTryJumpRules) {
    if ((browserRule === '*' || browserRule === browser) && (appNameRule === '*' || appNameRule === appName) && (osRule === '*' || osRule === os)) {
      return true;
    }
  }

  return false;
}

/**
 * @file na deeplink能力
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
async function naDeeplink(options, browser) {
  return new Promise(resolve => {
    const {
      getScheme,
      successCode
    } = deeplinkConfigMap[browser]; // 回调是小程序触发的，类型很难搞啊

    function callback(result) {
      let res = JSON.parse(result);

      if (+res.status === successCode) {
        sendH5ErrLog(options, Status.INVOKE_SUCCESS);
        resolve(Status.INVOKE_SUCCESS);
      } else {
        resolve(handleInvokeFailed(options, InvokeType.DEEPLINK));
      }
    }

    invokeAction(getScheme(options.scheme, callback), options.appName);
  });
}

/**
 * @file 剪贴板操作
 * @author zhuzhibo <zhuzhibo@baidu.com>
 * @author zsy
 */
/**
 * 基于 clipboard.js 的默认复制剪贴板方法
 *
 */

function copyText(token) {
  return new Promise((resolve, reject) => {
    new ClipboardAction({
      action: 'copy',
      text: token,
      container: document.body,
      emitter: {
        emit(type) {

          if (type === 'success') {
            resolve();
          } else {
            reject();
          }
        }

      }
    });
  });
}

/**
 * @file NA能力  写剪贴板
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */

const naCopy = text => new Promise((resolve, reject) => {
  window._naCopyCb_ = function (res) {
    // 调起成功
    if (res && Number(JSON.parse(res).status) === 0) {
      resolve('naCopyDone');
    } else {
      reject(res);
    }
  };

  const params = encodeURIComponent(JSON.stringify({
    data: text
  }));
  invokeAction(`baiduboxapp://v19/utils/setClipboardData?params=${params}&callback=_naCopyCb_`, 'baiduboxapp');
});
/**
 *
 * 兜底Promise.race  HOC
 *
 */

async function raceTime(time, func, ...args) {
  return Promise.race([func(...args), new Promise((resolve, reject) => {
    // 超时  调用失败
    setTimeout(() => reject(`调用超时！: ${func.name}`), time);
  })]);
} //  包装一下超时调用
// 使用这个方法更安全
// 不会hang住

const invokeNaCopy = text => raceTime(500, naCopy, text);

async function execCopy(options) {
  try {
    await copyText(options.token);
  } catch (e) {
    // 手百端内  可以试试  端能力写剪贴板
    let naCopyRes = false;

    if (options.browser === 'baiduboxapp') {
      try {
        await invokeNaCopy(options.token);
        naCopyRes = true;
      } catch (err) {
        // todo  考虑上报吗？
        console.log(err);
      }
    } // 复制失败以后


    if (!naCopyRes) {
      sendH5ErrLog(options, Status.COPY_FAILED); // 打开这个选项的，直接中断调起流程，返回错误

      if (options.checkTokenCopied) {
        return Promise.reject(Status.COPY_FAILED);
      }
    }
  }
}

/**
 * @file execInvoke index
 * @author zhuzhibo(zhuzhibo@baidu.com)
 */
async function execInvoke(options) {
  // 开始 尝试调起！打点！
  // 复制口令可能失败，也要算到尝试调起的结果中
  // 所以这里要提到最前
  sendH5ErrLog(options, Status.TRY_JUMP); // 处理口令

  if (options.token) {
    await execCopy(options);
  }

  const {
    browser,
    appName,
    os
  } = options; // 安卓和ios才有调起的意义
  // 其他系统直接报错就行了

  if (IS_IOS || IS_ANDROID) {
    // 应用宝调起
    if (IS_ANDROID && options.toYYB && browser === 'wechat') {
      return openYYB(options);
    } // deeplink调起
    else if (options.useDeeplink && /baidu\.com/i.test(location.href) && isDeeplinkApp(browser)) {
        return naDeeplink(options, browser);
      } // 黑名单浏览器不尝试调起，注意这里的notTryJump行为，本意上因为知道无法成功调起，所以不做操作直接调起失败
      else if (options.useNotTryList && checkNotTryJump(browser, appName, os)) {
          return handleInvokeFailed(options, InvokeType.NOT_TRY);
        } // ulink调起
        else if (options.ulink && matchedUlink(browser, appName)) {
            return invokeWithType(options, InvokeType.ULINK);
          } // scheme调起


    return invokeWithType(options, InvokeType.SCHEME);
  }

  return Promise.reject(Status.NOT_SUPPORT_SYSTEM);
}

/**
 * @file invoke
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
async function invokeApp({
  appName,
  token = '',
  scheme = '',
  toStore = true,
  toYYB = true,
  ulink,
  timeout = 2500,
  useDeeplink = false,
  apkUrl = '',
  failedUrl = '',
  useNotTryList = true,
  checkTokenCopied = true,
  iosStoreUrl = '',
  statRatio = 10
}) {
  // 不支持的端appName，应该直接抛错，不能用百度做回退
  if (!Object.keys(appConfigMap).includes(appName)) {
    return Promise.reject(Status.APPNAME_NOT_SUPPORT);
  } // 处理下参数


  const {
    appStoreUrl,
    pkgName,
    scheme: defaultScheme,
    getUlink
  } = appConfigMap[appName];
  const finalScheme = scheme || defaultScheme;
  const finalAppStoreUrl = iosStoreUrl || appStoreUrl;
  const finalUlink = ulink !== null && ulink !== void 0 ? ulink : getUlink(finalScheme, toStore ? finalAppStoreUrl : failedUrl);
  const isHitStat = isHit(statRatio);
  return execInvoke({ ...getHostInfo(),
    isHitStat,
    appName,
    token,
    apkUrl,
    failedUrl,
    pkgName,
    scheme: finalScheme,
    iosStoreUrl: finalAppStoreUrl,
    toStore,
    toYYB,
    timeout,
    useDeeplink,
    ulink: finalUlink,
    useNotTryList,
    checkTokenCopied,
    statRatio
  });
}
async function invokeTpApp({
  token = '',
  scheme,
  toStore = false,
  toYYB = false,
  ulink = '',
  timeout = 2500,
  apkUrl = '',
  failedUrl = '',
  checkTokenCopied = true,
  iosStoreUrl = '',
  pkgName
}) {
  if (!scheme || (toStore || toYYB) && !pkgName) {
    console.error('invokeTpApp参数错误，请检查！');
    return Promise.reject(Status.PARAMS_ERROR);
  }

  const statRatio = 10;
  const isHitStat = isHit(statRatio);
  return execInvoke({ ...getHostInfo(),
    isHitStat,
    appName: 'tp',
    token,
    apkUrl,
    failedUrl,
    pkgName,
    scheme,
    iosStoreUrl,
    toStore,
    toYYB,
    timeout,
    useDeeplink: false,
    ulink,
    useNotTryList: false,
    checkTokenCopied,
    statRatio
  });
}

/**
 * @file index
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
// 全局版本号，确认线上版本
window.__UIA_VERSION__ = '2.2.4';

export { appConfigMap, getHostInfo, invokeApp, invokeMarket, invokeTpApp };
