/**
 * @file NA能力  写剪贴板
 * @author zhangsiyuan(zhangsiyuan@baidu.com)
 */
import {invokeAction} from '../invoke/invokeAction';

// naCopy能力
export const naCopy = (text: string) => new Promise((resolve, reject) => {
    (window as any)._naCopyCb_ = function (res: string) {
        // 调起成功
        if (res && Number(JSON.parse(res).status) === 0) {
            resolve('naCopyDone');
        }
        else {
            reject(res);
        }
    };
    const params = encodeURIComponent(JSON.stringify({data: text}));
    invokeAction(`baiduboxapp://v19/utils/setClipboardData?params=${params}&callback=_naCopyCb_`, 'baiduboxapp');
});

/**
 *
 * 兜底Promise.race  HOC
 *
 */
export async function raceTime(time: number, func: (...args: any[]) => any, ...args: any[]) {
    return Promise.race([
        func(...args),
        new Promise((resolve, reject) => {
            // 超时  调用失败
            setTimeout(() => (reject(`调用超时！: ${func.name}`)), time);
        }),
    ]);
}

//  包装一下超时调用
// 使用这个方法更安全
// 不会hang住
export const invokeNaCopy = (text: string) => raceTime(500, naCopy, text);
