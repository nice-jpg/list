/**
 * @file ubc日志打点
 *
 * @author changyuqing@baidu.com
 */

import {getUrl, getCookieByName} from './utils/utils';
import {CONFIG, CONFIG_MERGE} from './config';
import merge from 'lodash.merge';
import {smartSend} from './utils/send';
import {version as sdkVersion} from '../package.json';
import {MergeLogger} from './MergeLogger';
import {RetryLogger} from './RetryLogger';
import {sha256} from './utils/sha';

/**
 *
 * @constructor ubc业务日志类
 * @description ubc业务日志类
 *
 * @example
 * new Ubclogger({
 *     serverId:123,
 *     idfrom:'res_fuli',
 *     page:'index'
 * })
 */
export class UbcLogger {

    /**
     * Create a UbcLogger
     *
     * @class UbcLogger
     * @param {Object} [options]                        初始化入参
     * @param {number} [options.serverId]               活动serverId
     * @param {string} [options.page]                   页面page名称
     * @param {string} [options.from]                   日志类型
     * @param {Object} [options.queryParams]            ubcUrl上的query(appname,from,cfrom,smfw)
     * @param {boolean} [options.testMode=false]        true走线下地址; false或者为空走线上ubc地址
     * @param {string} [options.testUrl]                打点数据上传地址;传入后，打点数据将发送至该地址
     * @param {string} [options.source]                 资源位source
     * @param {string} [options.idfrom]                 资源位idfrom(等价于资源位source，优先级更高)
     * @param {Object} [options.logMergeOpt]            日志合并参数配置
     * @param {Object} [options.logMergeOpt.ifAutoMerge] 是否开启自动合并，默认不开启
     * @param {Object} [options.logMergeOpt.mergeNumMax] 最大日志合并数量
     * @param {Object} [options.logMergeOpt.mergeInterval] 合并时间间隔
     * @param {boolean} [options.logErrRetry]            是否开启日志重试
     * @param {Object} [options.axiosParams]            透传axiosParams参数
     *
     *
     */
    constructor(options = {}) {
        // ubcLog
        this.ubcParams = {};
        // 是否初始化
        this.logInited = false;
        // set后的options
        this.options = {};

        // 合并打点
        this.mergeLogger = null;
        // 打点重试机制
        this.retryLogger = null;

        this._initUbcParams();
        // 初始化设置参数
        this.set(Object.assign({
            duration: 3,
            testMode: false,
            apptype: 1
        }, options));

    }

    /**
     * _initUbcParams
     *
     * @private
     */
    _initUbcParams() {
        this.ubcParams = {};
        this.ubcDefaultLogData = CONFIG.DEFAULT_LOG_DATA;
        // merge默认数据
        merge(
            this.ubcParams,
            this.ubcDefaultLogData
        );
    }

    /**
     * _initUbcUrl
     *
     * @private
     * @param {Object} options  options入参
     */
    _initUbcUrl(options = {}) {
        // 获取ubcUrl
        const query = options.queryParams || {};

        this.ubcUrl = getUrl(
            options.testMode ? (options.testUrl ? options.testUrl : CONFIG.TEST_UBC_URL) : CONFIG.UBC_URL,
            merge({}, CONFIG.DEFAULT_QUERY, query)
        );
        this.ubcMergeUrl = getUrl(
            options.testMode ? (options.testUrl ? options.testUrl : CONFIG_MERGE.TEST_UBC_URL) : CONFIG_MERGE.UBC_URL,
            merge({}, CONFIG_MERGE.DEFAULT_QUERY, query)
        );
    }

    /**
     * set
     * options可不填，缺省字段会以上次设置的为准
     * @example
     * ubclogger.set({
     *     serverId:123,
     *     idfrom:'res_fuli',
     *     page:'index'
     * })
     * @param {Object} [options]                  初始化入参
     * @param {number} [options.serverId]               活动serverId
     * @param {string} [options.page]                   页面page名称
     * @param {string} [options.from]                   日志类型
     * @param {Object} [options.queryParams]            ubcUrl上的query(appname,from,cfrom,smfw)
     * @param {string} [options.testMode]         true走线下地址; false或者为空走线上ubc地址
     * @param {string} [options.testUrl]                打点数据上传地址;传入后，打点数据将发送至该地址
     * @param {string} [options.source]                 资源位source
     * @param {string} [options.idfrom]                 资源位idfrom(等价于资源位source，优先级更高)
     * @param {Object} [options.logMergeOpt]            日志合并参数配置
     * @param {boolean} [options.logMergeOpt.ifAutoMerge] 是否开启自动合并，默认不开启
     * @param {number} [options.logMergeOpt.mergeNumMax] 最大日志合并数量
     * @param {number} [options.logMergeOpt.mergeInterval] 合并时间间隔
     * @param {boolean} [options.logErrRetry]            是否开启日志重试
     * @param {Object} [options.axiosParams]            透传axiosParams参数
     *
     */
    set(options = {}) {
        this.options = {
            ...this.options,
            ...options
        };
        this._initUbcUrl(this.options);

        // 配置serverId,source(idfrom),page
        merge(this.ubcParams, {
            actiondata: {
                id: this.options.serverId,
                content: {
                    source: this.options.source || this.options.idfrom,
                    page: this.options.page,
                    from: this.options.from,
                    ext: {
                        apptype: this.options.apptype
                    }
                }
            }
        });
        if (+this.options.serverId) {
            this.logInited = true;
        }

        if (this.options.logMergeOpt) {
            // 初始化mergeLogger
            if (!this.mergeLogger) {
                this.mergeLogger = new MergeLogger({
                    logFn: (paramsList) => {
                        return this._sendMerge(paramsList, this.options);
                    }
                });
            }
            // 修改mergeLogger选项
            this.mergeLogger.set(this.options.logMergeOpt);
        }

        // 初始化retryLogger
        if (this.options.logErrRetry && !this.retryLogger) {
            this.retryLogger = new RetryLogger({
                logFn: (url, logData) => {
                    logData.actiondata.metadata.uploadTimeStamp = Date.now();
                    return smartSend(url, logData, {...this.options, useXhr: true});
                }
            });
        }
    }

    /**
     * 发送普通点
     * @private
     * @param  {Object} params  打点自定义参数
     * @param  {Object} options 额外参数
     * @param  {boolean} options.useSendBeacon 是否使用SendBeacon API发送请求
     * @return {Promise} promise 打点成功发送返回then
     */
    _send(params = {}, options = {}) {
        let logData = {};
        let now = Date.now();
        // 事件打点正常处理
        let baiduId = getCookieByName('BAIDUID');
        if (baiduId && this.options.logErrRetry) {
            // 获得没有加metadata的logData
            merge(logData, this.ubcParams, {
                actiondata: {
                    timestamp: now,
                    content: params
                }
            });
            // 通过baiduId和logData计算摘要值（logData里面已经包含了当前时间戳）
            let loggerId = sha256(baiduId + JSON.stringify(logData));
            logData.actiondata.metadata = {
                md5: loggerId,
                uploadTimeStamp: now
            };

            return smartSend(this.ubcUrl, logData, {...options, useXhr: true}).then(data => {
                // 打点成功后通知retryLogger
                this.retryLogger.active();
                return data;
            }).catch(err => {
                //向队列中加一条日志
                this.retryLogger.addLog({url: this.ubcUrl, loggerData: logData, loggerId});
                return Promise.reject(err);
            });
        } else {
            merge(logData, this.ubcParams, {
                actiondata: {
                    timestamp: now,
                    content: params
                }
            });
            return smartSend(this.ubcUrl, logData, options);
        }

    }

    /**
     * 发送合并点
     * @private
     * @param  {Array} paramsList  打点自定义参数
     * @param  {Object} options 额外参数
     * @param  {boolean} options.useSendBeacon 是否使用SendBeacon API发送请求
     * @param  {string} options.loggerId 发送请求时指定loggerId
     * @return {Promise} promise 打点成功发送返回then
     */
    _sendMerge(paramsList = [], options = {}) {
        let logData = {};
        let now = Date.now();
        // 事件打点正常处理
        let {actiondata} = this.ubcParams;
        let data = paramsList.map(params => {
            let tempLogData = {};
            merge(tempLogData, actiondata, {
                timestamp: now,
                content: params
            });
            return tempLogData;
        });
        logData = {
            ...CONFIG_MERGE.DEFAULT_LOG_DATA,
            data
        };
        return smartSend(this.ubcMergeUrl, logData, options);
    }

    /**
     * send
     * @example
     * ubclogger.send({
     *     page: 'y_ent_login',
     *     type: 'login_clk',
     *     value: 'login',
     *     ext: {
     *         p1: 'login'
     *     }
     * })
     * @param  {Object} params  打点自定义参数
     * @param  {Object} [options] 额外选项
     * @param  {boolean} [options.useSendBeacon] 是否使用SendBeacon API发送请求
     * @return {Promise} promise 打点成功发送返回then
     */
    send(params = {}, options) {
        if (!this.logInited) {
            throw 'UBC SDK serverId can not be empty!';
        }
        options = {
            ...this.options,
            ...options
        };
        if (this.options?.logMergeOpt?.ifAutoMerge) {
            this.mergeLogger.add(params);
            return Promise.resolve();
        } else {
            return this._send(params, options);
        }
    }

    /**
     * sendMergeLog
     * @example
     * ubclogger.sendMergeLog({
     *     page: 'y_ent_login',
     *     type: 'login_clk',
     *     value: 'login',
     *     ext: {
     *         p1: 'login'
     *     }
     * })
     * @param  {Object} params  打点自定义参数
     * @return {Promise} promise 打点成功发送返回then
     */
    sendMergeLog(params = {}) {
        if (!this.logInited) {
            throw 'UBC SDK serverId can not be empty!';
        }
        if (this.options?.logMergeOpt) {
            this.mergeLogger.add(params);
            return Promise.resolve();
        } else {
            return this._send(params);
        }

    }

    /**
     * getVersion 获得当前sdk版本
     * @return {string} 当前sdk版本
     */
    getVersion() {
        return sdkVersion;
    }
}
