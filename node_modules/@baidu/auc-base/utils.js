export const machiningColor = (color) => {
    if (/^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/.test(color)) {
        return color;
    } else if (/^([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/.test(color)) {
        return `#${color}`;
    } else if (/^(\d{1,3},\d{1,3},\d{1,3})$/.test(color)) {
        return `rgb(${color})`;
    }
};

export const hex2rgb = (hexCode = '', startAlpha = 1, endAlpha = 0) => {
    let hex = hexCode.replace(/#/g, '');
    if (!hex || !/^([0-9a-f]{3}){1,2}$/i.test(hex)) {
        return {
            rgb: `rgba(0,0,0,${startAlpha})`,
            rgb0: `rgba(0,0,0,${endAlpha})`,
        };
    }

    if (hex.length === 3) {
        hex = `${hex[0]}${hex[0]}${hex[1]}${hex[1]}${hex[2]}${hex[2]}`;
    }
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);
    return {
        rgb: `rgba(${r},${g},${b},${startAlpha})`,
        rgb0: `rgba(${r},${g},${b},${endAlpha})`,
    };
};

export const getRootSize = () =>
    parseFloat(getComputedStyle(document.documentElement).fontSize);

export const pr2rem = (n, rootValue = 300) => n / rootValue;

export const pr2px = (n) => pr2rem(n) * getRootSize();

export const durationTrans = (a) => {
    let b = '';
    let h = parseInt(a / 3600, 10);
    let m = parseInt((a % 3600) / 60, 10);
    let s = parseInt((a % 3600) % 60, 10);
    if (h > 0) {
        h = h < 10 ? '0' + h : h;
        b += h + ':';
    }
    m = m < 10 ? '0' + m : m;
    s = s < 10 ? '0' + s : s;
    b += m + ':' + s;
    return b;
};

export const formatNum = (n) => {
    if (!n || n < 0) {
        return '0';
    }
    if (n < 1e4) {
        return '' + n;
    }
    else if (n < 1e5) {
        return Math.round(n / 1e3) / 10 + '万';
    }
    else if (n < 1e8) {
        return Math.round(n / 1e4) + '万';
    }
    else if (n < 1e9) {
        return Math.round(n / 1e7) / 10 + '亿';
    }
    return Math.round(n / 1e8) + '亿';
};

