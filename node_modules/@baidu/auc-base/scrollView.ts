/**
 * @file scroll view file
 * @author mayihui@baidu.com
 * */

/**
 * @example
 *
 * import initScrollView from '@baidu/led-core/utils/scrollView';
 *
 * class Test extends Component {
 *     inited() {
 *         this.scrollView = initScrollView(this.handleScroll);
 *     },
 *     attached() {
 *         this.scrollView.register(this.el, {id: 1});
 *     },
 *     handleScroll(eventName, data) {
 *         console.log(eventName, data);
 *     }
 * }
 * */
import throttle from 'lodash.throttle';
import {env} from './env';
import {getViewPort, inView} from './viewport';

const defaultEvent = 'scroll:realShow';

const subscribe = (item = {listeners: []}) => {
    return function (fn) {
        item.listeners.push(fn);
        return function () {
            item.listeners = item.listeners.filter(item => item === fn);
        };
    };
};

/**
 * 元素进入view时的调用
 *
 * @param {ScrollEvent} item - 已经注册过的event数据
 * */
const enterView = (item, e) => {
    let isShow = false;
    item.inView = true;
    if (item.options.time-- > 0) {
        isShow = true;
        let events;
        const eventName = item.eventName;
        if (!Array.isArray(eventName)) {
            events = [eventName];
        }
        events.forEach(evt => {
            const data = typeof item.data === 'function' ? item.data() : item.data;
            item.event(evt, data);
        });
    }

    item.listeners.forEach(fn => {
        fn.call(undefined, {type: 'enter', item, e});
        isShow && fn.call(undefined, {type: 'show', item, e});
    });
};

/**
 * 元素离开view时的调用
 *
 * @param {ScrollEvent} item - 已经注册过的event数据
 * */
const leaveView = (item, e) => {
    item.inView = false;
    item.listeners.forEach(fn => {
        fn.call(undefined, {type: 'leave', item, e});
    });
};

const handleScroll = (events, offset = 0) => e => {
    events
        .filter(item => item.ref && item.ref.getBoundingClientRect)
        .forEach(item => {
            const inViewFn = item.options.inViewFn;
            let isInView = inView(item.ref, offset);
            isInView = typeof inViewFn === 'function' ? inViewFn(isInView) : isInView;
            if (isInView) {
                item.inView || enterView(item, e);
            }
            else {
                item.inView && leaveView(item, e);
            }
        });
};

/**
 * 开始监听滚动事件
 *
 * @param {ViewPort} container - viewport
 * @param {Events[]} events - events
 * @param {number} offset - 偏移量
 * @return {Object}
 * */

export const startListen = (container, events = [], offset = 0) => {
    if (env.isSSR) {
        return {
            // eslint-disable-next-line no-empty-function
            init: () => {}
        };
    }
    const ref = container.ref;
    const scrollFn = throttle(handleScroll(events, offset), 150);
    ref.addEventListener('scroll', scrollFn, false);
    let progress = true;
    return {
        // 开启滚动监听
        stop() {
            if (progress) {
                ref.removeEventListener('scroll', scrollFn, false);
                progress = false;
            }
        },
        // 暂停滚动监听
        resume() {
            if (!progress) {
                ref.addEventListener('scroll', scrollFn, false);
                progress = true;
            }
        },
        // 初始化设置
        init(event, eventName = defaultEvent) {
            return {

                /**
                 * 注册dom元素和要发送的数据
                 *
                 * @param {HTMLElement} ref - ref 要展示的dom元素
                 * @param {Object} data - data 要发送的数据
                 * @param {ScrollOptions} options - 其他参数
                 *
                 * @return {ScrollEvent}
                 * */

                register(ref, data = {}, options = {time: 1}) {
                    let result = this.find(ref);
                    if (!result) {
                        result = {
                            event,
                            eventName,
                            ref,
                            inView: false,
                            data,
                            options,
                            listeners: []
                        };

                        result.subscribe = subscribe(result);
                        events.push(result);
                    }
                    scrollFn();
                    return result;
                },

                /**
                 * 查找dom元素的注册数据
                 *
                 * @param {HTMLElement} ref - ref 要查找的dom元素
                 *
                 * @return {ScrollEvent}
                 * */

                find(ref) {
                    return events.find(item => item.ref === ref);
                },

                /**
                 * 删除dom元素的注册数据
                 *
                 * @param {HTMLElement} ref - ref 要查找的dom元素
                 * */

                remove(ref) {
                    const refIndex = events.findIndex(item => item.ref === ref);
                    refIndex >= 0 && events.splice(refIndex, 1);
                },

                /**
                 * 销毁所有注册数据
                 * */

                destroy() {
                    events.length = 0;
                }
            };
        }
    };
};

const {stop, init, resume} = startListen(getViewPort());

export {stop, resume};

const preScroll = startListen(getViewPort(), [], 300);

export const preScrollInit = preScroll.init;

export default init;
