/**
 * @file viewport 相关方法
 * @author lihaizhu
 */

import {isNumber} from '@baidu/xbox/is';
import {env} from './env';
import global from './global';

export function getScrollHeight() {
    return global.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
}

export function getPageWidth() {
    return Math.max(document.body.scrollWidth, document.body.offsetWidth);
}

export function getPageHeight() {
    return Math.max(document.body.scrollHeight, document.body.offsetHeight);
}

export function getViewHeight() {
    return global.innerHeight || document.documentElement.clientHeight || 0;
}

export function getViewWidth() {
    return document.documentElement.clientWidth || document.body.clientWidth || 0;
}

export function isScrollBottom() {
    const viewHeight = getViewHeight();
    const scrollHeight = getScrollHeight();
    const pageHeight = getPageHeight();
    return viewHeight + scrollHeight >= pageHeight;
}

/**
 * 判断element是否在视窗内
 * @param {DOM} ref DOM element
 * @package {number} offset 偏移量
 * @returns {boolean} 是否在视窗内
 */
export function inView(ref, offset) {
    if (!ref) {
        return;
    }
    const {top, bottom} = ref.getBoundingClientRect();
    const viewHeight = getViewHeight();
    return top - offset < viewHeight && bottom + offset > 0;
}

/**
 * 根据是否在iframe内来获取不同的viewport
 * */
export function getViewPort() {
    if (env.isSSR) {
        return {};
    }
    if (global.self !== global.top && env.isIOS) {
        const body = document.body;
        document.documentElement.style.overflowY = 'auto';
        document.documentElement.style.height = '100%';
        body.style.position = 'relative';
        body.style.height = '100%';
        body.style.overflowY = 'scroll';
        body.style.webkitOverflowScrolling = 'touch';

        /**
         * When page in IOS-IFRAME, scroll and rect have some bugs.
         * So we need add some elements to solve this problem.
         * copy from mip
         */
        const element = document.createElement('div');
        element.style.cssText = 'position:absolute;top:0;left:0;width:0;height:0;visibility:hidden;';
        document.body.appendChild(element);

        return {
            ref: body,
            width: getPageWidth(),
            height: getPageHeight(),
            scrollTop(top) {
                if (isNumber(top)) {
                    body.scrollTop = top;
                    return top;
                }
                return Math.round(-element.getBoundingClientRect().top);
            }
        };
    }
    return {
        ref: global,
        height: getViewHeight(),
        width: getViewWidth(),
        scrollTop(top) {
            if (isNumber(top) && typeof global.scrollTo === 'function') {
                global.scrollTo(0, top);
                return top;
            }
            return global.scrollY || 0;
        }
    };
}
