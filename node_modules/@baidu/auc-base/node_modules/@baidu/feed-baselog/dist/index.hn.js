/**
 * @file base log hn
 * @author okaychen<chenglong13@baidu.com>
 */
import { __assign } from "tslib";
import merge from 'lodash.merge';
import { RANDOM, INITARGS, LOGARGSHN, TBASEURL, UBCID } from './lib/const';
import * as ubchn from '@baidu/ubc-report-hn-sdk';
import ThunderHN from './lib/thunder.hn';
var BaseLogHN = /** @class */ (function () {
    function BaseLogHN(initArgs, thunderHome) {
        this.ubcIds = {};
        this.thunderHome = TBASEURL;
        // thunder request url
        thunderHome ? this.thunderHome = thunderHome : '';
        // 初始化合并默认值
        this.finalParams = merge({}, INITARGS, initArgs);
        // thunder初始化值
        this.baseParams = __assign({}, this.finalParams.tParams);
    }
    BaseLogHN.prototype.ubcInit = function (ubcId, queryList) {
        // 给每个ubcid绑定随机数实例
        this.ubcIds[ubcId] = RANDOM;
        this.ubcIds[ubcId] = new ubchn.UbcLogger({
            serverId: ubcId,
            axiosParams: {
                method: 'post'
            },
            queryParams: queryList
        });
    };
    BaseLogHN.prototype.ubcSend = function (ubcId, callback) {
        this.ubcIds[ubcId].send({}).then(callback);
    };
    /**
     * hn发送单打ubc日志
     *
     * @param {Object} [ubcListHN] ubc需要携带的参数
     */
    BaseLogHN.prototype.sendUbc = function (ubcListHN) {
        var ubcId = UBCID;
        var data = ubcListHN.data || {};
        ubcId = (data.actiondata && data.actiondata.id) || UBCID;
        this.ubcInit(ubcId, ubcListHN);
        this.ubcSend(ubcId);
    };
    /**
     * 发送thunder日志
     *
     * @param {Object} [params] thunder需要携带的参数
     */
    BaseLogHN.prototype.sendThunder = function (params) {
        var thunder = new ThunderHN(this.baseParams, { home: this.thunderHome });
        var tFinnalParams = merge({}, this.baseParams, params);
        thunder.send(tFinnalParams);
    };
    /**
     * 小流量迁移日志，支持双打，ubc/thunder小流量
     *
     * @param {Object} [thunderList] thunder日志参数
     * @param {number} [ubcId] 迁移ubcid，默认13587
     */
    BaseLogHN.prototype.sendLog = function (thunderList, ubcId) {
        if (ubcId === void 0) { ubcId = UBCID; }
        var mode = this.finalParams.mode;
        var thunder = new ThunderHN(this.baseParams, { home: this.thunderHome });
        var thunderURL = thunder.getFetchUrl(merge({}, this.baseParams, thunderList));
        var actiondata = LOGARGSHN.data.actiondata;
        actiondata.id = ubcId;
        actiondata.content.ext = {
            url: thunderURL + '&fromUbc=1'
        };
        if (mode === 'both') {
            // 双打
            this.sendUbc(__assign({}, LOGARGSHN));
            this.sendThunder(thunderList);
        }
        else if ((mode && Math.random() < +mode) || (!mode && mode !== 0)) {
            // 小流量ubc，mode不传默认选择
            this.sendUbc(__assign({}, LOGARGSHN));
        }
        else {
            // 小流量Thunder
            var mergeList = merge({}, thunderList, { fromUbc: 0 });
            this.sendThunder(mergeList);
        }
    };
    return BaseLogHN;
}());
export default BaseLogHN;
;
