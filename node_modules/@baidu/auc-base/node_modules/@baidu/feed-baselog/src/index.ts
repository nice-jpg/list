/**
 * @file base log
 * @author okaychen<chenglong13@baidu.com>
 */

import merge from 'lodash.merge';
import ThunderH5 from './lib/thunder.h5';
import * as ubc from '@baidu/ubc-report-sdk';
import type {ConfigType, InitArgs} from './lib/interface';
import {RANDOM, INITARGS, TBASEURL, LOGARGS, UBCID} from './lib/const';

export default class BaseLog {
    public finalParams: InitArgs;
    public baseParams: object;
    private ubcIds: any = {};
    constructor(initArgs?: InitArgs) {
        // 初始化合并默认值
        this.finalParams = merge({}, INITARGS, initArgs);
        // thunder base params
        this.baseParams = {
            ...this.finalParams.tParams
        }
    }

    // ubc set
    ubcInit(ubcId: string | number):void {
        // 给每个ubcid绑定随机数实例
        this.ubcIds[ubcId] = RANDOM;
        this.ubcIds[ubcId] = new ubc.UbcLogger({
            serverId: ubcId,
            ...this.finalParams.params
        })
    }

    // ubc send
    ubcSend<T, U>(ubcList: ConfigType<T, U>, callback?: Function):void {
        const {ubcId, params, queryParams} = ubcList;
        if (queryParams) {
            this.ubcIds[ubcId].set({
                queryParams: {...queryParams}
            })
        }
        this.ubcIds[ubcId].send({
            ...params
        }).then(callback);
    }

    /**
     * 发送ubc日志
     *
     * @param {Object} [ubcList] 发送日志需要携带的参数
     * @param {Function} [callback] 完成后的回调函数
     */
    sendUbc<T, U>(ubcList: ConfigType<T, U>, callback?: Function):void {
        const {ubcId} = ubcList;

        if (ubcId) {
            if (!this.ubcIds[ubcId]) {
                // 该id未被初始化
                this.ubcInit(ubcId)
                this.ubcSend({...ubcList}, callback)
            } else {
                this.ubcSend({...ubcList}, callback)
            }
        }
    }

    /**
     * 发送thunder日志
     *
     * @param {Object} [params] 需要携带的参数
     * @param {Function} [callback] 完成后的回调函数
     * @param {string} [url] 发送日志的跟路径
     */
    sendThunder<T>(params: T, callback?: Function, url?: string):void {
        const thunder = new ThunderH5(this.baseParams);
        const tFinnalParams = merge({}, this.baseParams, params);
        thunder.send({...tFinnalParams}, callback, url)
    }

    /**
     * 小流量迁移日志，支持双打，ubc/thunder小流量
     *
     * @param {Object} [thunderList] thunder日志参数
     * @param {number} [ubcId] 迁移ubcid，默认13587
     * @param {Function} [callback] 完成后的回调
     * @param {string} [url] 发送日志的跟路径
     */
    sendLog<T>(thunderList: T, ubcId: number = UBCID, callback?: Function, url: string = TBASEURL):void {
        const mode = this.finalParams.mode;
        const thunder = new ThunderH5(this.baseParams);
        const thunderURL = thunder.assembleUrl(url, this.baseParams, thunderList);
        LOGARGS.ubcId = ubcId;
        LOGARGS.params.ext = {
            url: thunderURL + '&fromUbc=1'
        }

        if (mode === 'both') {
            // 双打
            this.sendUbc({...LOGARGS}, callback);
            this.sendThunder(thunderList, callback, url);
        } else if ((mode && Math.random() < +mode) || (!mode && mode !== 0)) {
            // 小流量ubc，mode不传默认选择
            this.sendUbc({...LOGARGS}, callback);
        } else {
            // 小流量Thunder
            const mergeList = merge({}, thunderList, {fromUbc: 0});
            this.sendThunder(mergeList, callback, url);
        }
    }
};
