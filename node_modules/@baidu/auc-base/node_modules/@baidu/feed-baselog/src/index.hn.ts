/**
 * @file base log hn
 * @author okaychen<chenglong13@baidu.com>
 */

import merge from 'lodash.merge';
import type {InitArgs} from './lib/interface';
import {RANDOM, INITARGS, LOGARGSHN, TBASEURL, UBCID} from './lib/const';
import * as ubchn from '@baidu/ubc-report-hn-sdk';
import ThunderHN from './lib/thunder.hn';

export default class BaseLogHN {
    public finalParams: InitArgs;
    public baseParams: object;
    private ubcIds: any = {};
    public thunderHome: string = TBASEURL;
    constructor(initArgs?: InitArgs, thunderHome?: string) {
        // thunder request url
        thunderHome ? this.thunderHome = thunderHome : '';
        // 初始化合并默认值
        this.finalParams = merge({}, INITARGS, initArgs);
        // thunder初始化值
        this.baseParams = {
            ...this.finalParams.tParams
        }
    }

    ubcInit<T extends object>(ubcId: string | number, queryList: T):void {
         // 给每个ubcid绑定随机数实例
        this.ubcIds[ubcId] = RANDOM;
        this.ubcIds[ubcId] = new ubchn.UbcLogger({
            serverId: ubcId,
            axiosParams: {
                method: 'post'
            },
            queryParams: queryList
        });
    }

    ubcSend<T extends string | number>(ubcId: T, callback?: Function):void {
        this.ubcIds[ubcId].send({}).then(callback);
    }

    /**
     * hn发送单打ubc日志
     *
     * @param {Object} [ubcListHN] ubc需要携带的参数
     */
    sendUbc<T extends number>(ubcListHN: {data?: {actiondata?: {id?: T}}}):void {
        let ubcId = UBCID;
        let data = ubcListHN.data || {};
        ubcId = (data.actiondata && data.actiondata.id) || UBCID;

        this.ubcInit(ubcId, ubcListHN);
        this.ubcSend(ubcId);
    }

    /**
     * 发送thunder日志
     *
     * @param {Object} [params] thunder需要携带的参数
     */
    sendThunder<T>(params: T):void {
        const thunder = new ThunderHN(this.baseParams, {home: this.thunderHome});
        const tFinnalParams = merge({}, this.baseParams, params);
        thunder.send(tFinnalParams);
    }

    /**
     * 小流量迁移日志，支持双打，ubc/thunder小流量
     *
     * @param {Object} [thunderList] thunder日志参数
     * @param {number} [ubcId] 迁移ubcid，默认13587
     */
    sendLog<T>(thunderList: T, ubcId: number = UBCID):void {
        const mode = this.finalParams.mode;
        const thunder = new ThunderHN(this.baseParams, {home: this.thunderHome});
        const thunderURL = thunder.getFetchUrl(merge({}, this.baseParams, thunderList));
        const actiondata = LOGARGSHN.data.actiondata;
        actiondata.id = ubcId;
        actiondata.content.ext = {
            url: thunderURL + '&fromUbc=1'
        }

        if (mode === 'both') {
            // 双打
            this.sendUbc({...LOGARGSHN});
            this.sendThunder(thunderList);
        } else if ((mode && Math.random() < +mode) || (!mode && mode !== 0)) {
            // 小流量ubc，mode不传默认选择
            this.sendUbc({...LOGARGSHN});
        } else {
            // 小流量Thunder
            const mergeList = merge({}, thunderList, {fromUbc: 0});
            this.sendThunder(mergeList);
        }
    }
};