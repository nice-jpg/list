/**
 * @file thunder h5 image
 * @author okaychen(chenglong13@baidu.com)
 */

export default class ThunderH5 {
    private opt: {
        baseURL?: string,
        baseParams?: object
    };
    private baseURL: string = '';
    private baseParams: object = {};
    constructor (opt: object) {
        this.opt = opt || {};
        this.baseParams = this.opt.baseParams || {};
        this.config(this.opt);
    }
    
    // simpleMerge
    simpleMerge(obj1: any, obj2: any): object {
        if (!obj2 || !obj1) {
            return obj1;
        }
        for (let i in obj2) {
            if (obj2.hasOwnProperty(i)) {
                obj1[i] = obj2[i];
            }
        }
        return obj1;
    }

    // assembleUrl
    assembleUrl(url: string, baseParams: object, assParams: any): string {
        let params = '';
        /* istanbul ignore next */
        assParams = assParams || {};
        assParams.r = 'l' + Date.now();
        assParams = this.simpleMerge(this.simpleMerge({}, baseParams), assParams);
        // 拼接字符串
        for (let i in assParams) {
            if (assParams.hasOwnProperty(i)) {
                params += '&' + i + '=' + encodeURIComponent(assParams[i]);
            }
        }
        return url + '?' + params.slice(1);
    }

    config(opt: any): object {
        this.simpleMerge(this.opt, opt);
        // 日志打印基础URL
        this.baseURL = this.opt.baseURL || 'https://hpd.baidu.com/v.gif';
        // 需要混入日志打印的所有基础字段
        this.baseParams = this.simpleMerge(this.baseParams, opt.baseParams);
        return this;
    }

    send<T>(pobj: T, callback?: Function, url?: any): void {
        let req = new Image();
        let timer: any = null;
        url = url || this.baseURL;

        /* istanbul ignore next */
        req.onload = req.onerror = req.onabort = function () {
            if (timer) {
                clearTimeout(timer);
                timer = null;
                callback && callback();
            }
        };

        req.src = this.assembleUrl(url, this.baseParams, pobj);

        // 防止回调被hold住
        if (typeof callback === 'function') {
            /* istanbul ignore next */
            timer = setTimeout(function () {
                timer = null;
                callback();
            }, 500);
        }
    }
};
