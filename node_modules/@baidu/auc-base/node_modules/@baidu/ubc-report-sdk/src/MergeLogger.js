/**
 * @file MergeLogger
 *
 * @author changyuqing@baidu.com
 */

export class MergeLogger {
    constructor({
        logFn = () => { },

    }) {
        this.logFn = logFn;
        this.logArray = [];
        this.mergeNumMax = 5;
        this.mergeInterval = 5;
        this.timeId = null;
    }
    set({mergeNumMax, mergeInterval}) {
        if (mergeNumMax) {
            this.mergeNumMax = mergeNumMax;
        }
        if (mergeInterval) {
            this.mergeInterval = mergeInterval;
        }
    }
    add(logData) {
        this.logArray.push(logData);
        if (this.logArray.length === 1) {
            // 如果是进入队列的第一个日志，此时开启一个定时器
            this.timeId = setTimeout(() => {
                this.clearAll();
            }, this.mergeInterval * 1000)
        } else if (this.logArray.length >= this.mergeNumMax) {
            // 如果进入队列的日志个数达到上限，就直接发送
            this.clearAll();
        }

    }
    clearAll() {
        if (this.logArray.length > 0) {
            // 如果队列里面存在待发送的日志，调用发送函数进行发送
            this.logFn(this.logArray);
            // 清空日志队列
            this.logArray = [];
        }

        if (this.timeId) {
            clearTimeout(this.timeId);
            this.timeId = null;
        }
    }
}