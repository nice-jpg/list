/**
 * @file 表情处理
 * @author jiangxiaoli
 * @rewrite jiaowenhua <jiaowenhua@baidu.com>
 */
import {isIOS} from '@baidu/xbox/browser/detect';
import dateFormat from '@baidu/xbox/date-format';
import json2query from '@baidu/xbox/json2query';
import {config} from './emoticon/config';

const {packages: [packages], imgpath} = config;
const {emoticons: emoticonsList, blacklist: blacklistDefault, version} = packages;
// 匹配表情文本的正则表达式
// 规则是以字符长度为准，涵盖了从最短到最长的所有情况，方括号中的字符长度为1~7，加上两侧的方括号，所以总长度为3~9
// length为9的有：[MicDrop]
// length为8的有：[nonono] [Salute]
// length为7的有：[打call] [前面的别走] [n95口罩] [点亮平安灯] [给你小心心]
// ...
// length为1的有：[啊] [哟] [汗] [哼] [囧] [色] [晕] [衰] [嘘] [呆] [吐] [浪] [福] [⚡] [酸] [喜] [钟] [顶] [困] [来] [弱] [心] [耶] [呕] [额]
const MATCH_PATTERN = /\[([^\[\]]){1,7}\]/g;
// 替换模式：'1'表示以图片为主，'2'表示以文本为主
const MOD_LIST = ['1', '2'];
// 默认的class类名，被加在img标签上
const CLASS_NAME = 'xbox-emoticon';
// 表情图片的默认样式，区分了ios和android
const IMG_STYLE = isIOS()
    ? 'width:1.15em;height:1.15em;display:inline-block;margin:0 0.06em -0.205em 0.06em;'
    : 'width:1.12em;height:1.12em;display:inline-block;margin:0 0.03em -0.205em 0.03em;';

/**
 * 表情替换，例如输入text为'[疑问]'， 返回为<img>标签
 * @function replace
 * @param {String} str  - 处理如'[疑问]'
 * @return {String} img标签
 */
export const replace = str => {
    const reg = /\[.+?\]/ig;
    const result = str.replace(reg, text => {
        // text 格式如 '[疑问]'
        const icon = getIconByText(text);
        if (!icon) {
            return text;
        }
        // 替换成 <img> 标签
        return getImgTag(text, icon);
    });
    return result;
};

/**
 * 判断输入文本是否可以转为表情，返回true or false
 * @function query
 * @param {String} text  - 处理如'[疑问]'
 * @return {Boolean}
 */
export const query = text => {
    const reg = /^\[.+?\]$/;
    if (!reg.test(text)) {
        // 不符合 '[微笑]' 这种格式
        return false;
    }
    const icon = replace(text);
    if (icon === text) {
        // 未替换成功
        return false;
    }
    return true;
};

/**
 * 将文本转换为img标签
 * @function getImgTag
 * @param {String} text  - 处理如'[疑问]'
 * @param {String} icon  - 图片名字，如'face_01.png'
 * @return {String} 图片对应的标签
 */
export const getImgTag = (text, icon) => {
    // 注意要加随机数定期清理缓存
    const random = dateFormat(new Date(), 'yyyyMMddhh');
    return `<img data-text="${text}" src="${imgpath}${icon}?r=${random}" style="${IMG_STYLE}"/>`;
};

/**
 * 通过文本获取config中的表情名，例如输入text为'[微笑]' ，返回'face_01.png'
 * @function getIconByText
 * @param {String} text  - 处理如'[微笑]'
 * @return {String} 返回config中对应的icon，如'face_01.png'
 */
export const getIconByText = text => {
    let icon = '';
    let item;
    for (let i = 0; i < emoticonsList.length; i++) {
        item = emoticonsList[i];
        if (item.text === text) {
            icon = item.icon;
            break;
        }
    }
    return icon;
};

/**
 * 模糊替换字符串中的表情文本，比如“[微笑]”等
 * @param {String} str 初始文本
 * @param {Object} options 【可选】配置表
 * @param {String} options.mod 【可选】替换模式，'1'表示以图片为主，'2'表示以文本为主。默认值'1'
 * @param {String} options.cdn 【可选】图片的cdn域名。默认值'https://baidubox-emoji.cdn.bcebos.com/imgs/'
 * @param {RegExp} options.pattern 【可选】匹配的表情的正则表达式。默认值/\[([^\[\]]){1,7}\]/g
 * @param {String} options.classname 【可选】img标签额外增加的样式类名。默认会有“xbox-emoticon”
 * @param {String} options.styletext 【可选】img标签额外增加的内联样式。默认会有 IOS:'width:1.15em;height:1.15em;display:inline-block;margin:0 0.06em -0.205em 0.06em;'，Android:'width:1.12em;height:1.12em;display:inline-block;margin:0 0.03em -0.205em 0.03em;'
 * @param {Array} options.blacklist 【可选】忽略不替换、保留原样的表情格式，比如“['[微笑笑]','[笑哭哭]']”
 * @param {String} options.prod 【可选】产品线，用于统计
 * @param {String} options.referrer 【可选】当前页面的referrer。默认值document.referrer
 * @param {Object} options.ext 【可选】其他信息，用于统计
 * @returns 替换完表情后的文本
 */
export const fuzzyReplace = (str, options = {}) => {
    // 空值检查
    if (!str) {
        return '';
    }

    // 配置表
    const opt = {
        mod: MOD_LIST.indexOf('' + options.mod) > -1 ? ('' + options.mod) : '1',
        cdn: options.cdn || imgpath,
        pattern: options.pattern instanceof RegExp ? options.pattern : MATCH_PATTERN,
        classname: options.classname ? `${CLASS_NAME} ${options.classname}` : CLASS_NAME,
        styletext: options.styletext || IMG_STYLE,
        blacklist: options.blacklist ? blacklistDefault.concat(options.blacklist) : blacklistDefault,
        prod: options.prod || 'others',
        referrer: options.referrer || (typeof document !== 'undefined' && document.referrer) || 'NA',
        ext: options.ext || {}
    };

    const result = str.replace(opt.pattern, text => {
        // 黑名单中的表情不替换
        if (opt.blacklist.indexOf(text) > -1) {
            return text;
        }
        return generateNode(text, opt);
    });
    return result;
};

/**
 * 生成目标节点
 * @param {String} text 表情文本
 * @param {Object} opt 配置表
 * @returns 目标节点字符串
 */
function generateNode(text, opt) {
    let node = '';
    const {mod, classname, styletext, cdn} = opt;
    const random = dateFormat(new Date(), 'yyyyMMddhh');
    const logParam = generateLogParam(text, opt);

    if (mod === '2') {
        // 以文字为主
        node = `<span>${text}<img class="${classname}" style="${styletext};display:none;" title="${text}" alt="${text}" src="${cdn}${encodeURIComponent(text)}.png?r=${random}" onload="this.parentNode.removeChild(this.parentNode.childNodes[0]);this.style.display='inline-block';" onerror="var i=new Image();i.src='${logParam}';"></span>`;
    } else {
        // 以图片为主
        node = `<img class="${classname}" style="${styletext}" title="${text}" alt="${text}" src="${cdn}${encodeURIComponent(text)}.png?r=${random}" onerror="var i=new Image();i.src='${logParam}';this.outerHTML='${text}'">`;
    }
    return node;
}

/**
 * 生成日志参数
 * 这里只有一个点位serverId: 13476
 * http://feedlog.amis.baidu.com/zt/project_detail?id=3950&skipid=3950#zhuce
 * 我们所有上报的信息统一放在data.actiondata.content.ext中
 * @param {String} text 表情文本
 * @param {Object} opt 配置表
 * @returns 参数串
 */
function generateLogParam(text, opt) {
    const {mod, prod, referrer, ext}= opt;
    const tcHost = 'https://mbd.baidu.com/tcbox';
    const params = {
        service: 'bdbox',
        action: 'pblog',
        // 表明参数协议第二个版本
        ctv: '2',
        // 表明参数加密
        cen: 'uid_ua_ut',
        data: {
            cateid: 99,
            // 手百为1
            appid: '1',
            // 客户端：1、JS：2、SERVER：3
            dataid: '2',
            // 区分主动/被动行为，主动：1、被动：0
            actiontype: '1',
            // 写死, actionid：2=事件统计，1=pv统计
            actionid: '2',
            // 核心数据
            actiondata: {
                ref: '',
                gmv: '',
                source: '',
                boxVersion: '',
                boxPlatform: isIOS() ? 'ios' : 'android',
                // UBC打点类型：0为事件式、1为流式
                type: '0',
                // 数据收集标识id
                id: '13476',
                // 打点数据
                content: {
                    // 当前这个点位属于评论业务
                    from: prod,
                    type: mod,
                    page: referrer,
                    source: version,
                    value: text,
                    ext
                }
            }
        }
    };

    return `${tcHost}?${json2query(params, true)}`;
}

export {config};
export default {
    fuzzyReplace,
    replace,
    query,
    getImgTag,
    getIconByText,
    config
};
