/**
 * @file 专题运营位
 * @author gaohong01
 */

import styles from './style.module.less';
import {AucOperationPositionData} from './types';
import AucComponent from "@baidu/auc-base/AucComponent";
import kingKong from "./components/opetration-kingkong";
import beancurdCube from "./components/opetration-beancurd-cube";
import {componentLog} from '@baidu/auc-log';
import {jump} from "@baidu/auc-base/jump";
import {env} from '@baidu/auc-base/env';
import {machiningColor} from '@baidu/auc-base/utils';

export class AucOperationPosition extends AucComponent {
    static template:string = /* html */ `
    <div 
        class="{{wrapperClass}}"
        style="{{wrapperStyle}}"
    >
        <king-kong 
            s-if="divType && divType !==3"
            div-line="{{divLine}}"
            div-data="{{divData}}"
            div-type="{{divType}}"
            div-back-img-one="{{divBackImgOne}}"
            div-back-img-two="{{divBackImgTwo}}"
            div-back-color="{{divBackColor}}"
            page-mode="{{pageMode}}"
            isBigEvent="{{isBigEvent}}"
            on-jump="handleClick"
        ></king-kong>
        <beancurd-cube
            s-if="divType && divType ===3"
            div-line="{{divLine}}"
            div-data="{{divData}}"
            div-type="{{divType}}"
            page-mode="{{pageMode}}"
            isBigEvent="{{isBigEvent}}"
            on-jump="handleClick"
        ></beancurd-cube>
    </div>
    `;
    static components:object = {
        'king-kong': kingKong,
        'beancurd-cube': beancurdCube
    };

    static computed:object = {
        showOperationPosition() {
            let showOperationPosition = false;
            const kingkongsLength = this.data.get('divData').length;
            if (!this.data.get('divType')) {
                showOperationPosition = false;
            }
            if (this.data.get('divType') === 1 || this.data.get('divType') === 2) {
                showOperationPosition = (kingkongsLength > 2 && kingkongsLength < 6) || [6,8,10].includes(kingkongsLength) ? true : false;
            }
            if (this.data.get('divType') === 3) {
                showOperationPosition = kingkongsLength > 1 && kingkongsLength < 7 ? true : false;
            }
            return showOperationPosition;
        },
        wrapperStyle() {
            if (this.data.get('divType') === 2 || this.data.get('divType') === 3) {
               return '';
            }
            const kingkongsLength = this.data.get('divData').length;
            let bgOneline = this.data.get('divBackImgOne');
            let bgTwoline = this.data.get('divBackImgTwo');
            let bgColor = this.data.get('divBackColor');
            let pageMode = this.data.get('pageMode');
            let bgImg = bgOneline ? (typeof bgOneline === 'string' ? bgOneline : bgOneline[`${pageMode === 'dark' ? 'day' : pageMode}_outside`]) : undefined;
            if ([6,8,10].includes(kingkongsLength)) {
                bgImg = bgTwoline ? (typeof bgTwoline === 'string' ? bgTwoline : bgTwoline[`${pageMode === 'dark' ? 'day' : pageMode}_outside`]) : undefined;
            }
            let setBgColor = bgColor ? machiningColor(typeof bgColor === 'string' ? bgColor : bgColor[`${pageMode}_outside`]) : undefined;
            if (bgImg) {
               return `background-image:url('${bgImg}')`;
            }
            if (bgColor) {
               return `background-color:${setBgColor};background-image:none`;
            }
        },
        wrapperClass() {
            return [
                styles.aucOperationPosition,
                this.data.get('divType') === 1 ? styles.aucOperationPositionBg : '',
                this.data.get('divType') === 1 && this.data.get('hasNav') && !this.data.get('isBigEvent') ? styles.aucOperationPositionBgMfu : '',
                this.data.get('divType') === 2 && !this.data.get('hasNav') ? styles.aucOperationPositionBgMy : '',
                this.data.get('singleColumn') && !this.data.get('isBigEvent') ? styles.aucOperationPositionBgMbfu : '',
                this.data.get('isBigEvent') ? styles.aucOperationPositionBigEvent : '',
                this.data.get('hasDanmaku') ? styles.hasDanmaku : '',
                !this.data.get('hasTopColumn') && this.data.get('imageHeader') ? styles.mtFu75 : '',
            ];
        }
    };

    initData(): AucOperationPositionData {
        return {
            styles,
            divType: 0,
            divLine: 0,
            divData: [],
            divBackImgOne: '',
            divBackImgTwo: '',
            divBackColor: '',
            logBaseType: 'king_kong_',
            jumpProps:{}
        };
    }
  
    inited(): void {
        if (this.data.get('divType') === 3) {
            this.data.set('logBaseType', 'beancurd_cube_');
        }
    }

    attached(): void {
        this.registerScrollInView().then(() => {
            componentLog(this.data.get('logBaseType'), 'show', {});
        });   
    }
    
    handleClick(index): void {
        if (!env.isBoxSeries) {
            this.fire('backShoubai');
            return;
        }
        const cmd = this.data.get('divData')[index].cmd;
        jump({
            cmd
        });
        componentLog(this.data.get('logBaseType'), 'click', {
            nid: this.data.get('divData')[index].nid
        });
    }
}

export default AucOperationPosition;