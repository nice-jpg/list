/**
 * @file index.ts
 * @author gaohong01
 */
import {Component} from 'san';
import styles from './style.module.less';
import {kingKongData} from './types';
import {kingKongItem} from './item';

const machiningColor = (color) => {
    if (/^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/.test(color)) {
        return color
    } else if (/^([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/.test(color)) {
        return `#${color}`
    } else if (/^(\d{1,3},\d{1,3},\d{1,3})$/.test(color)) {
        return `rgb(${color})`
    }
}

export class kingKong extends Component {
    static template: string = /* html */ `
     <div
        s-if="isTwoLine || isOneLine"
        class="{{wrapperClass}}"
        style="{{wrapperStyle}}"
    >
         <template s-if="isOneLine">
             <div 
                 s-for="item, index in divData"
                 class="{{styles.aucKingkongItem}} {{styles.aucKingkongItemFlex}} {{active ? styles.active : ''}}"
                 on-click="handleClick(index)"
             >
                <kingkong-item
                    divIcon="{{item.divIcon}}"
                    divWordColor="{{item.divWordColor}}"
                    pageMode="{{pageMode}}"
                    divTitle="{{item.divTitle}}"
                >
                </kingkong-item>
            </div> 
         </template>
         <template s-if="isTwoLine">
             <div 
                 s-for="item, index in divData"
                 class="{{styles.aucKingkongItem}} {{(kingkongsLength === 6 && index < 3) || (kingkongsLength === 8 && index < 4) || (kingkongsLength === 10 && index < 5) ? styles.aucKingkongItemHasBottom : ''}}"
                 style="width:{{twoLineItemWidth}}"
                 on-click="handleClick(index)"
             >
                 <kingkong-item
                    divIcon="{{item.divIcon}}"
                    divWordColor="{{item.divWordColor}}"
                    pageMode="{{pageMode}}"
                    divTitle="{{item.divTitle}}"
                 >
                 </kingkong-item>
             </div>
         </template>
     </div>
     `;
    static components: object = {
        'kingkong-item': kingKongItem
    };

    static computed: object = {
        wrapperClass() {
            return [
                styles.aucKingkongWrapper,
                this.data.get('isTonglan') ? styles.aucKingkongWrapperPx : styles.aucKingkongWrapperMx,
                this.data.get('isTonglan') ? (this.data.get('isLightBorder') ? styles.aucKingkongLightBorder : styles.aucKingkongCrudeBorder) : '',
                this.data.get('isBigEvent') ? styles.aucKingkongWrapperBigEvent : ''
            ];
        },
        isTwoLine() {
            let kingkongsLength = this.data.get('kingkongsLength');
            return [6, 8, 10].includes(kingkongsLength) ? true : false;
        },
        isOneLine() {
            let kingkongsLength = this.data.get('kingkongsLength');
            return kingkongsLength > 2 && kingkongsLength < 6 ? true : false;
        },
        twoLineItemWidth() {
            return (100 / (this.data.get('kingkongsLength') / 2)) + '%';
        },
        wrapperStyle() {
            if (this.data.get('divType') === 2) {
                return '';
            }
            const kingkongsLength = this.data.get('divData').length;
            let bgOneline = this.data.get('divBackImgOne');
            let bgTwoline = this.data.get('divBackImgTwo');
            let bgColor = this.data.get('divBackColor');
            const pageMode = this.data.get('pageMode');
            let bgImg = bgOneline ? (typeof bgOneline === 'string' ? bgOneline : bgOneline[pageMode === 'dark' ? 'day' : pageMode]) : undefined;
            if ([6, 8, 10].includes(kingkongsLength)) {
                bgImg = bgTwoline ? (typeof bgTwoline === 'string' ? bgTwoline : bgTwoline[pageMode === 'dark' ? 'day' : pageMode]) : undefined;
            }
            let setBgColor = bgColor ? machiningColor(typeof bgColor === 'string' ? bgColor : bgColor[pageMode]) : undefined;
            if (bgImg) {
                return `background-image:url('${bgImg}')`;
            }
            if (bgColor) {
                return `background-color:${setBgColor};background-image:none`;
            }
        }
    };

    initData(): kingKongData {
        return {
            styles,
            isTonglan: false,
            isLightBorder: false,
            divType: 0,
            divLine: 0,
            divData: [],
            kingkongsLength: 0,
        };
    }

    inited(): void {
        this.data.set('kingkongsLength', this.data.get('divData').length);
        this.data.set('isTonglan', this.data.get('divType') === 2 ? true : false);
        this.data.set('isLightBorder', this.data.get('divType') === 2 && this.data.get('divType') === 2 ? true : false);
    }

    attached(): void {
    }

    handleClick(index): void {
        this.fire('jump', index);
    }
}

export default kingKong;
