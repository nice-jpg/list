/**
 * Copyright (C) 2021 ~ present baidu.com
 */
import type { ContainerElement } from './viewport';
/**
 * Scrollview 滚动视图
 */
interface Scrollview {
    /**
     * 停止滚动监听
     */
    stop: () => void;
    /**
     * 恢复滚动监听
     */
    resume: () => void;
}
/**
 * ScrollItem 监听结构封装
 */
interface ScrollItem {
    /**
     * 监听元素
     */
    element: Element;
    /**
     * 派发事件时携带的参数；函数类型，携带返回值
     */
    data?: unknown;
    /**
     * 满足条件时需要派发的事件
     */
    event: Listener;
    /**
     * 事件名称
     */
    eventName: string | string[];
    /**
     * 元素当前是否在视图中
     */
    inView: boolean;
    /**
     * 清空 listeners
     */
    clear?: () => void;
    dispatch?: Dispatcher;
    listeners: Listener[];
    time?: number;
    offsetX?: number;
    offsetY?: number;
    inViewFn?: (inView: boolean) => boolean;
    options: ScrollOptions;
}
interface ListenerParams {
    type: 'enter' | 'leave' | 'show';
    item: ScrollItem;
    event: Event;
}
/**
 * Listener
 */
declare type Listener = (data: ListenerParams) => void;
/**
 * Dispatcher
 */
declare type Dispatcher = (event: string, data: unknown) => void;
/**
 * ScrollOptions
 */
declare type ScrollOptions = Partial<ScrollItem>;
export declare type MaybeScrollview = false | Scrollview;
/**
 * 为一个元素在可滚动容器内注册滚动监听
 *
 * @param params.el DOM元素
 * @param params.container 目标容器
 * @param params.options 配置参数
 * @returns Scrollview 对象或 false
 */
export declare function registerScrollview({ element, container, options, }: {
    element: Element;
    container?: ContainerElement;
    options?: ScrollOptions;
}): MaybeScrollview;
export {};
