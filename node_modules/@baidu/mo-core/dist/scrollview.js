/**
 * Copyright (C) 2021 ~ present baidu.com
 */
import { extend } from '@baidu/xbox';
import throttle from 'lodash.throttle';
import { getViewport, isVisible, } from './viewport';
const defaultEvent = 'scroll:realShow';
const subscribe = (item) => {
    return (listener) => {
        listener && item.listeners.push(listener);
        return () => (item.listeners = item.listeners.filter(item => item === listener));
    };
};
/**
 * 元素进入 view 时调用
 *
 * @param item 已经注册过的 event 数据
 * @param event 滚动事件对象
 */
const enterView = (item, event) => {
    let isShow = false;
    item.inView = true;
    if (item.options.time && item.options.time-- > 0) {
        isShow = true;
        let events = item.eventName;
        if (!Array.isArray(events)) {
            events = [events];
        }
        events.forEach(evt => {
            const data = typeof item.data === 'function' ? item.data() : item.data;
            item.dispatch && item.dispatch(evt, data);
        });
    }
    item.listeners.forEach(fn => {
        fn.call(undefined, {
            type: 'enter',
            item,
            event,
        });
        isShow
            && fn.call(undefined, {
                type: 'show',
                item,
                event,
            });
    });
};
/**
 * 元素离开 view 时的调用
 *
 * @param item 已经注册过的 event 数据
 * @param event 滚动事件对象
 */
const leaveView = (item, event) => {
    item.inView = false;
    item.listeners.forEach(fn => {
        fn.call(undefined, {
            type: 'leave',
            item,
            event,
        });
    });
};
const handleScroll = (items) => {
    return (event) => {
        items
            .filter(item => item.listeners.length && item.element.getBoundingClientRect)
            .forEach(item => {
            const { offsetX, offsetY, inViewFn } = item.options;
            let isInView = isVisible(item.element, getViewport().element, offsetX, offsetY);
            if (typeof inViewFn === 'function') {
                isInView = inViewFn(isInView);
            }
            if (isInView) {
                item.inView || enterView(item, event);
            }
            else {
                item.inView && leaveView(item, event);
            }
        });
    };
};
/**
 * 为一个元素在可滚动容器内注册滚动监听
 *
 * @param params.el DOM元素
 * @param params.container 目标容器
 * @param params.options 配置参数
 * @returns Scrollview 对象或 false
 */
export function registerScrollview({ element, container = getViewport().element, options, }) {
    if (!element || !container) {
        return false;
    }
    let progress = true;
    const itemList = [];
    let subscribedItem = itemList.find(item => item.element === element);
    options = extend({
        time: 1,
    }, options);
    if (!subscribedItem) {
        // 未注册过元素
        subscribedItem = {
            data: options.data,
            eventName: options.eventName || defaultEvent,
            inView: false,
            listeners: [],
            options,
            element: element,
            clear() {
                this.listeners.length = 0;
            },
            event(params) {
                return params;
            },
        };
    }
    subscribe(subscribedItem)(options.event);
    itemList.push(subscribedItem);
    const scrollFn = throttle(handleScroll(itemList), 150);
    container.addEventListener('scroll', scrollFn, false);
    scrollFn(new Event('scroll'));
    return {
        // 停止滚动监听
        stop() {
            if (progress) {
                container.removeEventListener('scroll', scrollFn, false);
                progress = false;
            }
        },
        // 暂停滚动监听
        resume() {
            if (!progress) {
                container.addEventListener('scroll', scrollFn, false);
                progress = true;
            }
        },
    };
}
