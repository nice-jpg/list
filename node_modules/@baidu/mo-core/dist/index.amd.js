define(['exports', '@baidu/xbox', 'lodash.throttle'], (function (exports, xbox, throttle) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var throttle__default = /*#__PURE__*/_interopDefaultLegacy(throttle);

    /**
     * Copyright (C) 2021 ~ present baidu.com
     */
    // 降级页参数(query.pageType)
    // const DEGRADE_FLAG = 2;
    var env = {
        ua: xbox.UA,
        isBjh: true,
        isIOS: xbox.isIOS(),
        isSSR: xbox.isSSR(),
    };

    /**
     * Copyright (C) 2021 ~ present baidu.com
     *
     * 苹果会审核编译产出中的部分词汇，包括:
     * miniprogram
     * smartprogram
     * swan
     * isreview
     * isinreview
     * 小程序
     * 小游戏
     * 屏蔽
     * 审核
     * miniapp
     * mini_app
     * mini_program
     * smart_program
     * WebProgram
     * loan
     * creditcard
     * bankcard
     * debitcard
     */
    var arr2str = function (arr) { return String.fromCharCode.apply(String, arr); };
    /**
     * 敏感词: 小程序
     */
    var xcx = arr2str([
        23567,
        31243,
        24207,
    ]);
    /**
     * 敏感词: 小游戏
     */
    var xyx = arr2str([
        23567,
        28216,
        25103,
    ]);
    /**
     * 敏感词: swan
     */
    var sw = arr2str([
        115,
        119,
        97,
        110,
    ]);
    /**
     * 敏感词: swanubc
     */
    var swubc = arr2str([
        115,
        119,
        97,
        110,
        117,
        98,
        99,
    ]);
    /**
     * 敏感词: swanType
     */
    var swType = arr2str([
        115,
        119,
        97,
        110,
        84,
        121,
        112,
        101,
    ]);
    /**
     * 敏感词: miniprogram
     */
    var minip = arr2str([
        109,
        105,
        110,
        105,
        112,
        114,
        111,
        103,
        114,
        97,
        109,
    ]);
    /**
     * 敏感词: miniapp
     */
    var minia = arr2str([
        109,
        105,
        110,
        105,
        97,
        112,
        112,
    ]);
    /**
     * 敏感词: minigame
     */
    var minig = arr2str([
        109,
        105,
        110,
        105,
        103,
        97,
        109,
        101,
    ]);
    /**
     * 敏感词: miniApp
     */
    var miniA = arr2str([
        109,
        105,
        110,
        105,
        65,
        112,
        112,
    ]);
    /**
     * 敏感词: small_app
     */
    var small_a = arr2str([
        115,
        109,
        97,
        108,
        108,
        95,
        97,
        112,
        112,
    ]);
    /**
     * 敏感词: smallApp
     */
    var smallA = arr2str([
        115,
        109,
        97,
        108,
        108,
        65,
        112,
        112,
    ]);
    /**
     * 敏感词: smallapp
     */
    var smalla = arr2str([
        115,
        109,
        97,
        108,
        108,
        97,
        112,
        112,
    ]);
    /**
     * 敏感词: smartapp
     */
    var smarta = arr2str([
        115,
        109,
        97,
        114,
        116,
        97,
        112,
        112,
    ]);

    /**
     * Copyright (C) 2021 ~ present baidu.com
     */
    /**
     * When page in IOS-IFRAME, scroll and rect have some bugs.
     * So we need add some elements to solve this problem.
     * copy from mip
     */
    var patch = function () {
        var element = document.createElement('div');
        element.style.cssText = 'position:absolute;top:0;left:0;width:0;height:0;visibility:hidden;';
        document.body.appendChild(element);
        return element;
    };
    /**
     * 获取 Body 作为 Viewport 的封装
     *
     * @returns Viewport 结构
     */
    var getBody = function () {
        var body = document.body;
        var bodyStyle = body.style;
        document.documentElement.style.overflowY = 'auto';
        document.documentElement.style.height = '100%';
        bodyStyle.position = 'relative';
        bodyStyle.height = '100%';
        bodyStyle.overflowY = 'scroll';
        bodyStyle.webkitOverflowScrolling = 'touch';
        var bodyRect = body.getBoundingClientRect();
        var element = patch();
        return {
            element: body,
            offsetWidth: body.offsetWidth,
            offsetHeight: body.offsetHeight,
            scrollWidth: body.scrollWidth,
            scrollHeight: body.scrollHeight,
            top: bodyRect.top,
            left: bodyRect.left,
            scrollTop: function (top) {
                if (top && xbox.isNumber(top)) {
                    body.scrollTop = top;
                    return top;
                }
                return Math.round(-element.getBoundingClientRect().top);
            },
        };
    };
    /**
     * 获取 Window 作为 Viewport 的封装
     *
     * @returns Viewport 结构
     */
    var getWindow = function () { return ({
        element: window,
        offsetWidth: window.innerWidth,
        offsetHeight: window.innerHeight,
        scrollWidth: document.documentElement.scrollWidth,
        scrollHeight: document.documentElement.scrollHeight,
        top: 0,
        left: 0,
        scrollTop: function (top) {
            if (top && xbox.isNumber(top) && xbox.isFunction(window.scrollTo)) {
                window.scrollTo(0, top);
                return top;
            }
            return window.scrollY || 0;
        },
    }); };
    /**
     * 如果入参是 DOM 元素，将其封装为 viewport 结构
     * 如果是 iOS 环境下 iframe 中，viewport 为 body 的封装，否则是 window 的封装
     *
     * @param container 被封装为 viewport 的容器元素
     * @returns Viewport 结构
     */
    function getViewport(container) {
        if (container && container !== window && container !== document.body) {
            var element_1 = container;
            var containerRect = element_1.getBoundingClientRect();
            return {
                element: element_1,
                offsetWidth: element_1.offsetWidth,
                offsetHeight: element_1.offsetHeight,
                scrollWidth: element_1.scrollWidth,
                scrollHeight: element_1.scrollHeight,
                top: containerRect.top,
                left: containerRect.left,
                scrollTop: function (top) {
                    if (top && xbox.isNumber(top)) {
                        element_1.scrollTop = top;
                        return top;
                    }
                    return element_1.scrollTop;
                },
            };
        }
        else if (container === document.body || (window.self !== window.top && env.isIOS)) {
            return getBody();
        }
        return getWindow();
    }
    /**
     * 获取容器垂直方向滚动距离
     *
     * @param container 容器元素(可选)
     * @returns 垂直方向滚动距离
     */
    function getScrollTop(container) {
        return +getViewport(container).scrollTop();
    }
    /**
     * 判断容器是否滚动到底部
     *
     * @param container 容器元素(可选)
     * @returns 判断结果
     */
    function isScrollBottom(container) {
        var viewport = getViewport(container);
        return +viewport.scrollTop() + viewport.offsetHeight >= viewport.scrollHeight;
    }
    /**
     * 判断元素在指定容器内是否可见（露出1px）
     *
     * @param element DOM元素
     * @param container 目标元素
     * @param offsetX X轴偏移量
     * @param offsetY Y轴偏移量
     * @returns 元素是否可见
     */
    function isVisible(element, container, offsetX, offsetY) {
        if (container === void 0) { container = getViewport().element; }
        if (offsetX === void 0) { offsetX = 1; }
        if (offsetY === void 0) { offsetY = 1; }
        if (!element || !container) {
            return false;
        }
        var visible = (document && document.visibilityState) !== 'hidden';
        var elementRect = element.getBoundingClientRect();
        var viewport = getViewport(container);
        return (visible
            && elementRect.top < viewport.offsetHeight - offsetY
            && elementRect.bottom > viewport.top
            && elementRect.left < viewport.offsetWidth - offsetX
            && elementRect.right > viewport.left);
    }

    /**
     * Copyright (C) 2021 ~ present baidu.com
     */
    var defaultEvent = 'scroll:realShow';
    var subscribe = function (item) {
        return function (listener) {
            listener && item.listeners.push(listener);
            return function () { return (item.listeners = item.listeners.filter(function (item) { return item === listener; })); };
        };
    };
    /**
     * 元素进入 view 时调用
     *
     * @param item 已经注册过的 event 数据
     * @param event 滚动事件对象
     */
    var enterView = function (item, event) {
        var isShow = false;
        item.inView = true;
        if (item.options.time && item.options.time-- > 0) {
            isShow = true;
            var events = item.eventName;
            if (!Array.isArray(events)) {
                events = [events];
            }
            events.forEach(function (evt) {
                var data = typeof item.data === 'function' ? item.data() : item.data;
                item.dispatch && item.dispatch(evt, data);
            });
        }
        item.listeners.forEach(function (fn) {
            fn.call(undefined, {
                type: 'enter',
                item: item,
                event: event,
            });
            isShow
                && fn.call(undefined, {
                    type: 'show',
                    item: item,
                    event: event,
                });
        });
    };
    /**
     * 元素离开 view 时的调用
     *
     * @param item 已经注册过的 event 数据
     * @param event 滚动事件对象
     */
    var leaveView = function (item, event) {
        item.inView = false;
        item.listeners.forEach(function (fn) {
            fn.call(undefined, {
                type: 'leave',
                item: item,
                event: event,
            });
        });
    };
    var handleScroll = function (items) {
        return function (event) {
            items
                .filter(function (item) { return item.listeners.length && item.element.getBoundingClientRect; })
                .forEach(function (item) {
                var _a = item.options, offsetX = _a.offsetX, offsetY = _a.offsetY, inViewFn = _a.inViewFn;
                var isInView = isVisible(item.element, getViewport().element, offsetX, offsetY);
                if (typeof inViewFn === 'function') {
                    isInView = inViewFn(isInView);
                }
                if (isInView) {
                    item.inView || enterView(item, event);
                }
                else {
                    item.inView && leaveView(item, event);
                }
            });
        };
    };
    /**
     * 为一个元素在可滚动容器内注册滚动监听
     *
     * @param params.el DOM元素
     * @param params.container 目标容器
     * @param params.options 配置参数
     * @returns Scrollview 对象或 false
     */
    function registerScrollview(_a) {
        var element = _a.element, _b = _a.container, container = _b === void 0 ? getViewport().element : _b, options = _a.options;
        if (!element || !container) {
            return false;
        }
        var progress = true;
        var itemList = [];
        var subscribedItem = itemList.find(function (item) { return item.element === element; });
        options = xbox.extend({
            time: 1,
        }, options);
        if (!subscribedItem) {
            // 未注册过元素
            subscribedItem = {
                data: options.data,
                eventName: options.eventName || defaultEvent,
                inView: false,
                listeners: [],
                options: options,
                element: element,
                clear: function () {
                    this.listeners.length = 0;
                },
                event: function (params) {
                    return params;
                },
            };
        }
        subscribe(subscribedItem)(options.event);
        itemList.push(subscribedItem);
        var scrollFn = throttle__default["default"](handleScroll(itemList), 150);
        container.addEventListener('scroll', scrollFn, false);
        scrollFn(new Event('scroll'));
        return {
            // 停止滚动监听
            stop: function () {
                if (progress) {
                    container.removeEventListener('scroll', scrollFn, false);
                    progress = false;
                }
            },
            // 暂停滚动监听
            resume: function () {
                if (!progress) {
                    container.addEventListener('scroll', scrollFn, false);
                    progress = true;
                }
            },
        };
    }

    exports.env = env;
    exports.getScrollTop = getScrollTop;
    exports.getViewport = getViewport;
    exports.isScrollBottom = isScrollBottom;
    exports.isVisible = isVisible;
    exports.miniA = miniA;
    exports.minia = minia;
    exports.minig = minig;
    exports.minip = minip;
    exports.registerScrollview = registerScrollview;
    exports.smallA = smallA;
    exports.small_a = small_a;
    exports.smalla = smalla;
    exports.smarta = smarta;
    exports.sw = sw;
    exports.swType = swType;
    exports.swubc = swubc;
    exports.xcx = xcx;
    exports.xyx = xyx;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
