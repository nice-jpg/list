/**
 * Copyright (C) 2021 ~ present baidu.com
 */
export declare type ContainerElement = Element | Window;
export interface Viewport {
    /**
     * viewport 对应的容器
     */
    element: ContainerElement;
    /**
     * viewport 的实际宽度
     */
    offsetWidth: number;
    /**
     * viewport 的实际高度
     */
    offsetHeight: number;
    /**
     * viewport 的内容滚动宽度
     */
    scrollWidth: number;
    /**
     * viewport 的内容滚动高度
     */
    scrollHeight: number;
    /**
     * viewport 的顶部距离
     */
    top: number;
    /**
     * viewport 的左侧距离
     */
    left: number;
    /**
     * 获取/设置 viewport 垂直方向的滚动距离
     */
    scrollTop: (top?: number) => number | void;
    /**
     * 获取/设置 viewport 水平方向的滚动距离
     */
    scrollLeft?: (left?: number) => number | void;
}
/**
 * 如果入参是 DOM 元素，将其封装为 viewport 结构
 * 如果是 iOS 环境下 iframe 中，viewport 为 body 的封装，否则是 window 的封装
 *
 * @param container 被封装为 viewport 的容器元素
 * @returns Viewport 结构
 */
export declare function getViewport(container?: ContainerElement): Viewport;
/**
 * 获取容器垂直方向滚动距离
 *
 * @param container 容器元素(可选)
 * @returns 垂直方向滚动距离
 */
export declare function getScrollTop(container?: ContainerElement): number;
/**
 * 判断容器是否滚动到底部
 *
 * @param container 容器元素(可选)
 * @returns 判断结果
 */
export declare function isScrollBottom(container?: ContainerElement): boolean;
/**
 * 判断元素在指定容器内是否可见（露出1px）
 *
 * @param element DOM元素
 * @param container 目标元素
 * @param offsetX X轴偏移量
 * @param offsetY Y轴偏移量
 * @returns 元素是否可见
 */
export declare function isVisible(element?: Element, container?: ContainerElement, offsetX?: number, offsetY?: number): boolean;
