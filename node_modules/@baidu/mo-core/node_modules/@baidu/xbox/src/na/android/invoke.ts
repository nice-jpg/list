/**
 * @file android invoke
 * @module android
 * @author wangyongqing <wangyongqing01@baidu.com>
 *
 * 移出xbox native相关库之后，还可能用到底层调用方法来打补丁，所以这里迁移过来
 */

import {isString, isWindow} from '../../is';
import {globalObject} from '../../get-global-object';
import {stringify} from '../../stringify';

/**
 * androidInvoke传入schema打开框架
 *
 * @param schema 协议
 * @return 发起schema请求
 */
export function androidInvoke(schema: string) {
    if (!isWindow(globalObject)) {
        return;
    }

    const androidJsBridge = globalObject?.Bdbox_android_jsbridge;

    if (androidJsBridge) {
        return androidJsBridge?.dispatch(schema);
    }

    return globalObject?.prompt('Bdbox_android_jsbridge', 'dispatch', schema);
}

/**
 * 老版本的调起，prompt实现
 * @param obj 类似 Bdbox_android_utils
 * @param func 类似 command
 * @param args 参数数组
 */
export function prompt(obj: string, func: string, args: string | string[]) {
    if (!isWindow(globalObject)) {
        return;
    }

    if ({}.toString.call(args).slice(-6, -1) !== 'Array') {
        args = [args as string];
    }
    const data = stringify({
        obj,
        func,
        args,
    });
    return globalObject?.prompt(`BdboxApp:${data}`);
}

type CommandMode = '0' | '1';

/**
 * 安卓command调起，使用 Bdbox_android_utils.command
 *
 * @param intent 包含发送给客户端的参数
 * @param [mode=0] 0代表调起框界面；1代表调起第三方界面
 * @param [commandClass=''] 调起客户端具体activity，缺省
 * @param [minV=''] 调起的最小版本，可缺省
 * @return 返回对象格式的json
 */
export function command(intent: string, mode: CommandMode = '0', commandClass: string = '', minVersion: string = '') {
    const commandParams = {
        mode,
        intent,
    };
    commandClass
        && isString(commandClass)
        && Object.assign(commandParams, {
            class: commandClass,
        });
    minVersion
        && isString(minVersion)
        && Object.assign(commandParams, {
            min_v: minVersion,
        });

    return prompt('Bdbox_android_utils', 'command', stringify(commandParams));
}

/**
 * 同步invoke， Bdbox_aiapps_jsbridge
 *
 * @param schema 调起协议
 */
export function androidSyncInvoke(schema: string) {
    if (!isWindow(globalObject)) {
        return null;
    }

    const androidJsBridge = globalObject?.Bdbox_aiapps_jsbridge;

    if (androidJsBridge) {
        return androidJsBridge?.dispatch(schema);
    }

    return null;
}
