"use strict";
/**
 * @file 统计、监控类用到的基类
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Monitor = void 0;
var is_1 = require("../is");
var guid_1 = require("../guid");
var json2query_1 = require("../json2query");
var parse_url_1 = require("../parse-url");
var type_error_1 = require("../type-error");
var extend_1 = require("../extend");
/**
 * Monitor 日志监控类，可以直接用，或者继承他扩展他！
 *
 * @class Monitor
 * @param url 接受打点的 url 地址
 * @param options 配置，包括 before 处理函数和全局通用数据 globalData
 * @example
 * const monitor = new Monitor('http://baidu.com/gt.gif', {
 *      before:(data)=> {
 *          return data;
 *      },
 *      globalData: {
 *          a:1
 *      }
 * });
 * monitor.mark({b:1}).mark({cd:1}).send();
 * monitor.report({c:1});
 */
var Monitor = /** @class */ (function () {
    function Monitor(url, options) {
        if (options === void 0) { options = {}; }
        var urlObj = (0, parse_url_1.parseUrl)(url);
        url = urlObj.url;
        if (url.startsWith('//')) {
            // 通用协议，这里需要处理，解决 hybrid 使用 file 协议的情况
            var protocol = location.protocol;
            if (protocol !== 'http:') {
                protocol = 'https:';
            }
            url = protocol + url;
        }
        var globalData = options.globalData || {};
        this._default = Object.assign(urlObj.query || {}, globalData);
        this._url = url;
        this._data = {};
        this._mdata = {};
        this._before = options.before;
    }
    /**
     * 设置全局数据
     *
     * @param data 需要 set 的数据对象
     * @return 当前实例
     */
    Monitor.prototype.setGlobalData = function (data) {
        if ((0, is_1.isPlainObject)(data)) {
            (0, extend_1.extend)(this._default, data);
        }
        return this;
    };
    /**
     * 用于多次记录数据，数据会累计，只有调用过一次 send 方法才会清空
     * **注意**：后面传入同名的字段会覆盖掉之前传入的
     * **注意**：mark 的数据只能通过手动调用 send 才发送
     * 期间 report 方法的数据是单独发送的
     * 用于数据采集打点，比如速度统计，一个时间点一个打点，最后汇总发送
     *
     * @param data 用于添加的数据
     * @return 当前实例
     */
    Monitor.prototype.mark = function (data) {
        if (data === void 0) { data = {}; }
        if (!(0, is_1.isPlainObject)(data)) {
            throw (0, type_error_1.typeError)('data', 'object', data);
        }
        // 增加
        if ((0, is_1.isPlainObject)(data)) {
            Object.assign(this._mdata, data);
        }
        // 其他类型数据扔掉，只收 object|string
        return this;
    };
    Monitor.prototype._send = function (data, force) {
        var _a;
        if (force === void 0) { force = false; }
        if (!(0, is_1.isPlainObject)(data)) {
            throw (0, type_error_1.typeError)('data', 'object', data);
        }
        var img = new Image(1, 1);
        var imgName = "_xanybox_mt_" + (0, guid_1.guid)();
        // window[imgName] = img;
        Object.assign(window, (_a = {},
            _a[imgName] = img,
            _a));
        img.onload
            = img.onerror
                = img.onabort
                    = function () {
                        var _a;
                        img.onload = img.onerror = img.onabort = null;
                        // window[imgName] = img = null;
                        img = null;
                        Object.assign(window, (_a = {},
                            _a[imgName] = null,
                            _a));
                    };
        // 增加 默认数据
        data = (0, extend_1.extend)({}, this._default, data);
        var before = this._before;
        if (!force && before && (0, is_1.isFunction)(before)) {
            var result = before(data);
            // 如果返回是 false 则不发送
            if (result === false) {
                return this;
            }
            else if ((0, is_1.isUndefined)(result)) {
                // 如果是 undefined， 则继续使用 data
            }
            else if ((0, is_1.isPlainObject)(result) || (0, is_1.isString)(result)) {
                // 如果是对象或者字符串，则替换 data；
                data = result;
            }
        }
        var url = this._url + "?" + ((0, is_1.isString)(data) ? data : (0, json2query_1.json2query)(data, true));
        img.src = url + '&_rnd=' + (0, guid_1.guid)();
        return this;
    };
    /**
     * 跟 mark 配合使用，发送 mark 记录的数据
     *
     * @param force 是否跳过 before 函数处理直接发请求
     * @return 当前示例
     */
    Monitor.prototype.send = function (force) {
        this._send(this._data, force);
        // 发送过一次之后就清空
        // delete this._mdata;
        this._mdata = {};
        return this;
    };
    /**
     * 发送数据
     *
     * @param data 发送的数据
     * @param force 是否跳过 before 函数处理直接发请求
     * @return 当前实例
     */
    Monitor.prototype.report = function (data, force) {
        if (data === void 0) { data = {}; }
        if (!(0, is_1.isPlainObject)(data)) {
            throw (0, type_error_1.typeError)('data', 'object', data);
        }
        return this._send(data, force);
    };
    return Monitor;
}());
exports.Monitor = Monitor;
