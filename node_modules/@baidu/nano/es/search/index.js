/**
 * @file 组件 search 搜索
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';

const prefixCls = 's-search';

export default class Search extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div class="{{wrapClass}}">
            <form class="${prefixCls}" action="" on-submit="handleEvent($event, 'submit')" s-ref="search-form">
                <label for="{{inputId}}" class="${prefixCls}-label" s-ref="search-label">
                    <input
                        s-ref="search-input"
                        id="{{inputId}}"
                        class="${prefixCls}-input"
                        value="{=inputValue=}"
                        placeholder="{{placeholder}}"
                        maxlength="{{maxlength}}"
                        autocomplete="off"
                        type="search"
                        on-blur="handleEvent($event, 'blur')"
                        on-focus="handleEvent($event, 'focus')"
                        on-input="handleEvent($event, 'input')"
                        on-click="triggerFocus"
                    />
                </label>
                <template s-if="showBtn">
                    <span
                        s-if="hasFocus && showBtnClear"
                        class="${prefixCls}-btn-clear"
                        on-click="handleEvent($event, 'clear')"
                    />
                    <i class="${prefixCls}-line"/>
                    <a
                        s-if="isAndroid && hasFocus && showBtnClear"
                        class="{{searchButtonClass}}"
                        on-click="handleEvent($event, 'confirm')"
                    >搜索</a>
                    <a
                        s-else-if="hasFocus"
                        class="${prefixCls}-btn"
                        on-click="handleEvent($event, 'cancel')"
                    >取消</a>
                </template>
            </form>
        </div>
    `;

    static dataTypes = {
        autoFocus: DataTypes.bool,
        border: DataTypes.bool,
        fillMode: DataTypes.oneOf(['none', 'inside', 'outside']),
        inputId: DataTypes.string,
        inputValue: DataTypes.string,
        isAndroid: DataTypes.bool,
        maxlength: DataTypes.number,
        placeholder: DataTypes.string,
        showBtn: DataTypes.bool,
        showBtnConfirm: DataTypes.bool,
        confirmEmpty: DataTypes.bool
    };

    static computed = {
        wrapClass() {
            const data = this.data;
            const border = data.get('border');
            const isAndroid = data.get('isAndroid');
            const fillMode = data.get('fillMode');
            return [
                isAndroid && 'android',
                `${prefixCls}-wrap`,
                `${prefixCls}-fill-${fillMode}`,
                (!border && fillMode !== 'none') && `${prefixCls}-borderless`
            ].filter(c => c);
        },
        searchButtonClass() {
            const showBtnClear = this.data.get('showBtnClear');
            const confirmEmpty = this.data.get('confirmEmpty');
            return [
                `${prefixCls}-btn`,
                (!showBtnClear && !confirmEmpty) && 'disabled'
            ].filter(c => c);
        },
        showBtnClear() {
            return this.data.get('inputValue.length') > 0;
        }
    };

    initData() {
        return {
            autoFocus: false,
            border: false,
            fillMode: 'inside',
            inputId: 'searchbox',
            inputValue: '',
            isAndroid: false,
            maxlength: 20,
            placeholder: '请输入搜索关键词',
            showBtn: true,
            showBtnConfirm: false,
            confirmEmpty: false,
            hasFocus: false
        };
    }

    attached() {
        const autoFocus = this.data.get('autoFocus');
        autoFocus && this.triggerFocus();
        !this.data.get('isAndroid') && document.addEventListener('click', e => {
            if (e.target !== this.ref('search-form') && e.target !== this.ref('search-input')) {
                this.triggerBlur();
            }
        }, false);
    }

    triggerFocus() {
        const $input = this.ref('search-input');
        $input.focus();
    }

    triggerBlur() {
        const $input = this.ref('search-input');
        $input.blur();
    }

    // 事件类型: submit, input, focus, blur, clear, cancel, confirm
    handleEvent(e, eventType) {
        e.preventDefault();
        e.stopPropagation();

        const {inputValue, confirmEmpty, placeholder} = this.data.get();
        let value = inputValue.trim();
        let fallback = false;

        switch (eventType) {
            case 'clear': {
                this.data.set('inputValue', '');
                this.triggerFocus();
                break;
            }
            case 'submit':
            case 'confirm': {
                this.triggerBlur();
                break;
            }
            case 'blur': {
                this.data.set('hasFocus', false);
                break;
            }
            case 'focus': {
                this.data.set('hasFocus', true);
                break;
            }
            default: break;
        }

        if (!value && confirmEmpty && (eventType === 'submit' || eventType === 'confirm')) {
            value = placeholder;
            fallback = true;
            this.data.set('inputValue', placeholder);
        }

        this.fire(eventType, {inputValue: value, fallback});
    }
}
