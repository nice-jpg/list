/**
 * @file 组件 cell 单元格
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import '../assets/svg/new-right.svg';
import '../assets/svg/new-checkmark.svg';
import {Component, DataTypes} from 'san';
import Avatar from '../avatar';
import Icon from '../icon';

const prefixCls = 's-cell';

export default class Cell extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div class="{{wrapClass}}" on-click="handleClick">
            <slot name="aside"/>
            <s-avatar
                s-if="!hasAsideSlot && avatar"
                class="${prefixCls}-avatar"
                size="lg"
                src="{{avatar}}"
            />
            <div class="${prefixCls}-content">
                <slot name="content"/>
                <template s-if="!hasContentSlot">
                    <div class="${prefixCls}-title" s-if="title">{{title}}</div>
                    <div s-if="subtitle" class="${prefixCls}-subtitle">{{subtitle}}</div>
                </template>
            </div>
            <div class="${prefixCls}-helper">
                <slot name="helper"/>
                <template s-if="!hasHelperSlot">
                    <span>{{helper}}</span>
                    <s-icon
                        s-if="arrow"
                        class="${prefixCls}-arrow {{arrow}}"
                        type="new-right"
                    />
                    <s-icon
                        s-elif="helperIcon && helperIcon.type"
                        size="{{helperIcon.size || 'xs'}}"
                        color="{{helperIcon.color || ''}}"
                        type="{{helperIcon.type}}"
                    />
                </template>
            </div>
            <div s-if="hairline" class="${prefixCls}-hairline"/>
        </div>
    `;

    static components = {
        's-avatar': Avatar,
        's-icon': Icon
    };

    static dataTypes = {
        avatar: DataTypes.string,
        title: DataTypes.string,
        subtitle: DataTypes.string,
        helper: DataTypes.string,
        arrow: DataTypes.oneOf([false, 'right', 'up', 'down']),
        clickable: DataTypes.bool,
        hairline: DataTypes.bool,
        selected: DataTypes.bool
    };

    static computed = {
        wrapClass() {
            const data = this.data;
            const avatar = data.get('avatar');
            const hairline = data.get('hairline');
            const clickable = data.get('clickable');
            const title = data.get('title');
            const subtitle = data.get('subtitle');
            return [
                prefixCls,
                !hairline && `${prefixCls}-borderless`,
                clickable && `${prefixCls}-clickable`,
                (avatar || title && subtitle) && `${prefixCls}-higher`
            ].filter(c => c);
        }
    };

    initData() {
        return {
            avatar: '',
            title: '',
            subtitle: '',
            helper: '',
            arrow: false,
            clickable: true,
            hairline: true,
            selected: false
        };
    }

    inited() {
        const {
            selected,
            hasAsideSlot,
            hasContentSlot,
            hasHelperSlot
        } = this.data.get();
        const {
            aside,
            content,
            helper
        } = this.sourceSlots.named;

        if (selected) {
            this.data.set('helperIcon', {
                type: 'new-checkmark',
                color: '#3388ff',
                size: 'sm'
            });
        }

        this.data.set('hasAsideSlot', hasAsideSlot && !!aside);
        this.data.set('hasContentSlot', hasContentSlot && !!content);
        this.data.set('hasHelperSlot', hasHelperSlot && !!helper);
    }

    handleClick() {
        const data = this.data.get();
        data.clickable && this.fire('click', data);
    }
}
