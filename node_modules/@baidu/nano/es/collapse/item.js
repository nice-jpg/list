/**
 * @file 组件 collapse 折叠面板
 * @author baozhixin <baozhixin@baidu.com>
 */

import {Component, DataTypes} from 'san';
import Cell from '../cell';

const prefixCls = 's-collapse-item';

export default class Item extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div class="${prefixCls}">
            <s-cell class="{{headerClass}}" s-bind="cellProps" on-click="handleTitleClick">
                <slot name="aside" slot="aside"/>
                <slot name="content" slot="content"/>
                <slot name="helper" slot="helper"/>
            </s-cell>
            <div
                s-ref="panel"
                class="${prefixCls}-panel"
                style="{{panelStyle}}"
                on-transitionend="transitionEnd(expanded)"
            >
                <div s-ref="content" class="${prefixCls}-content">
                    <slot/>
                </div>
            </div>
            <div class="${prefixCls}-hairline"/>
        </div>
    `;

    static components = {
        's-cell': Cell
    };

    static dataTypes = {
        name: DataTypes.string,
        disabled: DataTypes.bool,
        avatar: DataTypes.string,
        title: DataTypes.string,
        subtitle: DataTypes.string,
        helper: DataTypes.string,
        helperIcon: DataTypes.object
    };

    static computed = {
        headerClass() {
            const disabled = this.data.get('disabled');
            const expanded = this.data.get('expanded');
            return [
                `${prefixCls}-header`,
                disabled && `${prefixCls}-header-disabled`,
                expanded && `${prefixCls}-header-expanded`
            ].filter(c => c);
        },

        cellProps() {
            const data = this.data;
            const avatar = data.get('avatar');
            const title = data.get('title');
            const subtitle = data.get('subtitle');
            const helper = data.get('helper');
            const helperIcon = data.get('helperIcon');
            const clickable = !data.get('disabled');
            const hasAsideSlot = data.get('hasAsideSlot');
            const hasContentSlot = data.get('hasContentSlot');
            const hasHelperSlot = data.get('hasHelperSlot');
            const expanded = this.data.get('expanded');
            const arrow = expanded ? 'up' : 'down';
            const hairline = expanded;

            return {
                avatar,
                title,
                subtitle,
                helper,
                helperIcon,
                arrow,
                clickable,
                hairline,
                hasAsideSlot,
                hasContentSlot,
                hasHelperSlot
            };
        }
    };

    initData() {
        return {
            name: '',
            avatar: '',
            title: '',
            subtitle: '',
            helper: '',
            helperIcon: {},
            disabled: false
        };
    }

    get parentData() {
        return this.parentComponent.data.get();
    }

    inited() {
        const name = this.data.get('name');
        const {accordion, value} = this.parentData;
        const expanded = value.indexOf(name) >= 0;
        const {aside, content, helper} = this.sourceSlots.named;

        this.data.set('expanded', expanded);
        this.data.set('hasAsideSlot', !!aside);
        this.data.set('hasContentSlot', !!content);
        this.data.set('hasHelperSlot', !!helper);

        // 监听value变化
        this.parentComponent.watch('value', value => {
            const expanded = accordion ? value === name : value.indexOf(name) >= 0;
            this.data.set('expanded', expanded);
            this.expand(expanded, true);
        });
    }

    attached() {
        this.expand(this.data.get('expanded'));
    }

    expand(expanded, animate) {
        const height = this.ref('content').offsetHeight + 'px';
        this.data.set('expanded', expanded);
        this.data.set('arrow', expanded ? 'up' : 'down');

        this.ref('panel').style.height = (expanded || animate) && height || 0;
        animate && this.nextTick(() => {
            this.data.set('panelStyle', {
                height: expanded ? height : 0
            });
        });
    }

    transitionEnd(expanded) {
        if (expanded) {
            this.ref('panel').style.height = '';
        }
    }

    handleTitleClick() {
        if (this.data.get('disabled')) {
            return;
        }

        let {name, expanded} = this.data.get();
        let {accordion, value} = this.parentData;
        if (accordion && name === value) {
            name = '';
        }

        this.parentComponent.switch(name, !expanded);
    }
}
