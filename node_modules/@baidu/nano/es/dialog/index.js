/**
 * @file 组件 dialog 对话框
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import '../assets/svg/g-close.svg';
import '../assets/svg/g-cross.svg';
import {Component, DataTypes} from 'san';
import Icon from '../icon';

const prefixCls = 's-dialog';

export default class Dialog extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div class="${prefixCls}-wrap" on-touchmove="handleTouchmove">
            <div class="${prefixCls}">
                <slot name="title">
                    <div s-if="title" class="${prefixCls}-header">{{title}}</div>
                </slot>
                <slot name="content">
                    <div class="{{contentClass}}" style="text-align:{{contentAlign}}">{{content | raw}}</div>
                </slot>
                <slot name="footer">
                    <div s-if="hasFooter" class="${prefixCls}-footer">
                        <div
                            s-if="showCancel"
                            class="${prefixCls}-cancel"
                            style="{{cancelColor ? 'color:' + cancelColor : ''}}"
                            on-click="handleCancel"
                        >
                            <span>{{cancelText}}</span>
                        </div>
                        <div
                            s-if="showConfirm"
                            class="{{confirmClass}}"
                            style="{{confirmColor ? 'color:' + confirmColor : ''}}"
                            on-click="handleConfirm"
                        >
                            <span>{{confirmText}}</span>
                        </div>
                    </div>
                    <div
                        s-if="hasClose && closeType === 'inside'"
                        class="{{closeClass}}"
                        on-click="handleClose"
                    >
                        <s-icon type="g-cross"/>
                    </div>
                </slot>
            </div>
            <div
                s-if="hasClose && closeType === 'outside'"
                class="{{closeClass}}"
                on-click="handleClose"
            >
                <s-icon type="g-close"/>
            </div>
            <div class="${prefixCls}-mask" on-click="handleMaskClick"/>
        </div>
    `;

    static components = {
        's-icon': Icon
    };

    static dataTypes = {
        title: DataTypes.string,
        content: DataTypes.string,
        contentAlign: DataTypes.oneOf(['left', 'center', 'right']),
        cancelText: DataTypes.string,
        cancelColor: DataTypes.string,
        confirmText: DataTypes.string,
        confirmColor: DataTypes.string,
        showCancel: DataTypes.bool,
        showConfirm: DataTypes.bool,
        showClose: DataTypes.bool,
        closeType: DataTypes.oneOf(['inside', 'outside']),
        maskClosable: DataTypes.bool
    };

    static computed = {
        contentClass() {
            const title = this.data.get('title');
            return [
                `${prefixCls}-content`,
                !title && `${prefixCls}-content-enhance`
            ].filter(c => c);
        },

        confirmClass() {
            const showCancel = this.data.get('showCancel');
            return [
                `${prefixCls}-confirm`,
                showCancel && `${prefixCls}-hairline`
            ].filter(c => c);
        },

        closeClass() {
            const closeType = this.data.get('closeType');
            return [
                `${prefixCls}-close`,
                !!closeType && `${prefixCls}-close-${closeType}`
            ].filter(c => c);
        },

        hasFooter() {
            const data = this.data;
            const cancelText = data.get('cancelText');
            const confirmText = data.get('confirmText');
            const showCancel = data.get('showCancel');
            const showConfirm = data.get('showConfirm');
            return cancelText && showCancel || confirmText && showConfirm;
        },

        hasClose() {
            const data = this.data;
            const showClose = data.get('showClose');
            const hasFooter = data.get('hasFooter');
            return showClose || !hasFooter;
        }
    };

    initData() {
        return {
            title: '',
            content: '',
            contentAlign: 'center',
            cancelText: '',
            cancelColor: '',
            confirmText: '',
            confirmColor: '',
            showCancel: false,
            showConfirm: true,
            showClose: false,
            closeType: 'inside',
            maskClosable: false
        };
    }

    handleCancel() {
        this.handleClose();
        this.fire('cancel');
    }

    handleConfirm() {
        this.handleClose();
        this.fire('confirm');
    }

    handleClose() {
        this.fire('close');
    }

    handleMaskClick() {
        const maskClosable = this.data.get('maskClosable');
        maskClosable && this.handleClose();
    }

    handleTouchmove(e) {
        e.preventDefault();
    }
}
