/**
 * @file 组件 error 空态
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import Icon from '../icon';
import Button from '../button';

const prefixCls = 's-error';
const mapTypeText = {
    app: '暂无应用',
    bookmark: '暂无书签',
    category: '暂无目录',
    comment: '暂无评论',
    cup: '休息一下',
    download: '暂无下载记录',
    dynamic: '暂无动态',
    empty: '暂无内容',
    history: '暂无历史',
    hourglass: '未完待续',
    image: '暂无图片',
    info: '数据异常',
    invisible: '爱豆已隐身',
    lock: '暂无权限',
    mark: '暂无关注',
    money: '无充值记录',
    music: '暂无音乐',
    network: '网络不给力',
    novel: '暂无小说',
    question: '暂无问答',
    reply: '暂无回帖',
    search: '暂无',
    star: '暂无收藏',
    ticket: '没有优惠券',
    trash: '暂无删除',
    user: '未登录',
    video: '暂无视频',
    circle: '暂无圈子',
    notice: '暂无通知'
};
const defaultType = 'empty';
const errorTypes = Object.keys(mapTypeText);

export default class Error extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div class="{{wrapClass}}">
            <div class="${prefixCls}-ico">
                <slot name="icon">
                    <s-icon
                        color="{{iconColor}}"
                        size="{{iconSize}}"
                        type="error-{{type}}"
                    />
                </slot>
            </div>
            <div s-if="title" class="${prefixCls}-txt">{{title}}</div>
            <slot name="action">
                <s-button
                    s-if="button && button.text"
                    class="${prefixCls}-btn"
                    hairline="{{true}}"
                    text="{{button.text}}"
                    on-click="handleClick"
                />
            </slot>
        </div>
    `;

    static components = {
        's-button': Button,
        's-icon': Icon
    };

    static dataTypes = {
        config: DataTypes.object, // 基础配置：errorType, errorText, errorButton
        iconColor: DataTypes.string, // 图标颜色
        iconSize: DataTypes.string, // 图标尺寸
        layout: DataTypes.string, // 组件布局方式
        text: DataTypes.string, // 单行标题
        type: DataTypes.oneOf(errorTypes) // 图标类型
    };

    static computed = {
        title() {
            const text = this.data.get('text');
            const type = this.data.get('type');
            return text || mapTypeText[type] || mapTypeText[defaultType];
        },
        wrapClass() {
            const isFull = this.data.get('layout') === 'full';
            return [
                prefixCls,
                isFull && `${prefixCls}-fullpage`
            ].filter(c => c);
        }
    };

    initData() {
        return {
            layout: 'auto',
            type: defaultType
        };
    }

    handleClick() {
        const data = this.data.get();
        const buttonParams = this.data.get('button');
        buttonParams.action && this.dispatch(buttonParams.action, data);
        this.fire('button-click', data);
    }
}

Error.types = errorTypes;
