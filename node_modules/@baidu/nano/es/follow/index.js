/**
 * @file 组件 follow 关注
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import Button from '../button';

const prefixCls = 's-follow';
const statusToText = {
    // 5: '被拉黑', // RELATION_BLACKED
    // 4: '拉黑', // RELATION_BLACK
    3: '互相关注', // RELATION_FRIEND
    2: '关注', // RELATION_FANS
    1: '已关注', // RELATION_FOLLOW
    0: '关注' // RELATION_NONE
};

export default class Follow extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div class="{{wrapClass}}" on-click="handleClick">
            <s-button
                s-bind="{{buttonProps}}"
                loading="{{loading}}"
                size="{{size}}"
                width="{{width}}"
                height="{{height}}"
                on-click="handleClick"
            />
        </div>
    `;

    static components = {
        's-button': Button
    };

    static dataTypes = {
        adapter: DataTypes.oneOf(['normal', 'outline', 'light']),
        followStatus: DataTypes.oneOf([0, 1, 2, 3]),
        size: DataTypes.oneOf(['sm', 'md', 'lg']),
        width: DataTypes.oneOfType([DataTypes.number, DataTypes.string]),
        height: DataTypes.oneOfType([DataTypes.number, DataTypes.string])
    };

    static computed = {
        buttonProps() {
            const data = this.data;
            const adapter = data.get('adapter');
            const loading = data.get('loading');
            const status = data.get('followStatus');
            const text = statusToText[status];
            let hairline = adapter !== 'normal' || text !== '关注';
            let type = 'primary';
            if (adapter === 'light') {
                type = 'default';
            }
            else if (text !== '关注' && type !== 'outline') {
                type = 'weak';
            }
            const props = {
                ghost: adapter === 'light',
                hairline,
                text: loading ? '' : text,
                type
            };
            return props;
        },

        wrapClass() {
            const adapter = this.data.get('adapter');
            const status = this.data.get('followStatus');
            return [
                prefixCls,
                `${prefixCls}-${adapter}`,
                `${prefixCls}-status-${status}`
            ];
        }
    };

    initData() {
        return {
            adapter: 'normal',
            followKey: '',
            followStatus: 0,
            followParams: {},
            loading: false,
            size: 'sm'
        };
    }

    handleClick() {
        const data = this.data.get();
        if (!data.loading) {
            this.fire('click', data);

            if (data.action) {
                this.dispatch(data.action, data);
            }
        }
    }
}
