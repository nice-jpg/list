/**
 * @file 组件 nav
 * @author baozhixin <baozhixin@baidu.com>
 */

import {Component, DataTypes} from 'san';
import Tab from './tab';
import {raf} from '../utils/raf';

const prefixCls = 's-tabs';

export default class Nav extends Component {
    // eslint-disable-next-line
    static template = `
        <div class="${prefixCls}-nav">
            <s-tab
                s-for="tab, index in tabs"
                s-ref="tab-{{index}}"
                active="{{tab.active}}"
                disabled="{{tab.disabled}}"
                name="{{tab.name}}"
                index="{{index}}"
                last="{{index === tabs.length - 1}}"
                on-click="native:tabClickHandler(index, tab)"
            />
            <div s-if="type === 'line'"
                class="${prefixCls}-cursor"
                style="{{cursorStyle}}"
            />
        </div>
    `;

    static components = {
        's-tab': Tab
    };

    static dataTypes = {
        color: DataTypes.string,
        cursorOffsetX: DataTypes.number,
        cursorWidth: DataTypes.number,
        tabs: DataTypes.array,
        type: DataTypes.string
    };

    static computed = {
        cursorStyle() {
            const x = this.data.get('cursorOffsetX');
            if (x === undefined) {
                return {
                    display: 'none'
                };
            }

            const color = this.data.get('color');
            const width = this.data.get('cursorWidth') + 'px';
            const trans = `translate3d(${x}px, 0, 0)`;

            return {
                'background-color': color,
                'transform': trans,
                '-webkit-transform': trans,
                width
            };
        }
    };

    attached() {
        this.$tabs = {};
        const owner = this.owner;

        owner.watch('activeIndex', index => {
            const curTab = this.ref(`tab-${index}`);

            owner.fire('change', {
                activeIndex: index,
                name: curTab.data.get('name')
            });

            this.scrollIntoView();

            // 代码手动触发改变index
            this.changeTabHandler(index);
        });
    }

    scrollIntoView(immediate) {
        const owner = this.owner;
        const {activeIndex, scrollable} = owner.data.get();

        if (!scrollable || !this.ref(`tab-${activeIndex}`)) {
            return;
        }

        const $curTab = this.$tabs[activeIndex].el;
        const $scroll = owner.ref('scroll');
        const to = $curTab.offsetLeft - (this.el.offsetWidth - $curTab.offsetWidth) / 2;

        if (immediate) {
            $scroll.scrollLeft = to;
        }
        else {
            this.scrollLeftTo($scroll, to);
        }
    }

    scrollLeftTo(el, to, duration = 0.2) {
        let count = 0;
        const from = el.scrollLeft;
        const frames = duration === 0 ? 1 : Math.round((duration * 1000) / 16);

        function animate() {
            el.scrollLeft += (to - from) / frames;

            if (++count < frames) {
                raf(animate);
            }
        }

        animate();
    }

    tabClickHandler(curActiveIndex, tab) {
        if (!tab.disabled) {
            this.owner.data.set('activeIndex', curActiveIndex);
            this.changeTabHandler(curActiveIndex);
        }

        this.owner.fire('tab-click', {
            activeIndex: curActiveIndex,
            disabled: tab.disabled,
            name: tab.name
        });
    }
    
    changeTabHandler(curActiveIndex) {
        this.owner.$panels.forEach((panel, index) => {
            const isActive = index === curActiveIndex;
            this.ref(`tab-${index}`).data.set('active', isActive);
            panel.data.set('active', isActive);
        });
    }

    updateCursorStyle(offset) {
        if (!offset) {
            const activeIndex = this.owner.data.get('activeIndex');
            const $curTab = this.$tabs[activeIndex];
            offset = $curTab.offset;
        }
        this.data.set('cursorWidth', offset.width);
        this.data.set('cursorOffsetX', offset.left);
    }
}
