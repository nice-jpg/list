/**
 * @file 组件 tabs
 * @author baozhixin <baozhixin@baidu.com>
 */

import {Component, DataTypes} from 'san';
import Nav from './nav';

const prefixCls = 's-tabs';

export default class Tabs extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div class="{{wrapClass}}">
            <div class="${prefixCls}-wrap">
                <div s-if="scrollable" s-ref="scroll" class="${prefixCls}-scrollable">
                    <s-nav color="{{color}}" tabs="{{tabs}}" type="{{type}}"/>
                </div>
                <s-nav s-else color="{{color}}" tabs="{{tabs}}" type="{{type}}"/>
                <div class="nav-right">
                    <div s-if="scrollable" class="${prefixCls}-mask"/>
                    <slot name="nav-right"/>
                </div>
                <div class="${prefixCls}-hairline"/>
            </div>
            <div class="{{contentClass}}">
                <div s-if="animated"
                    class="${prefixCls}-track"
                    style="{{trackStyle}}"
                ><slot/></div>
                <slot s-else/>
            </div>
        </div>
    `;

    static components = {
        's-nav': Nav
    };

    static dataTypes = {
        activeIndex: DataTypes.number,
        animated: DataTypes.bool,
        color: DataTypes.string,
        scrollable: DataTypes.bool,
        tabs: DataTypes.array,
        type: DataTypes.oneOf(['line', 'card'])
    };

    static computed = {
        wrapClass() {
            const type = this.data.get('type');

            return [
                prefixCls,
                `${prefixCls}-${type}`
            ];
        },
        contentClass() {
            const animated = this.data.get('animated');

            return [
                `${prefixCls}-content`,
                animated && `${prefixCls}-animated`
            ].filter(c => c);
        },
        trackStyle() {
            const index = this.data.get('activeIndex');
            const x = index > 0 ? `-${index}00%` : 0;
            const trans = `translate3d(${x}, 0, 0)`;

            return {
                'transform': trans,
                '-webkit-transform': trans
            };
        }
    };

    static messages = {
        's-tabs:updateTabPanel'() {
            this.updateTabPanel();
        }
    };

    initData() {
        return {
            activeIndex: 0,
            animated: false,
            // isSticky: false,
            scrollable: false,
            tabs: [],
            // top: 0,
            type: 'line'
        };
    }

    inited() {
        this.$panels = [];
    }

    getPanels(children = [], panels = []) {
        children.forEach(child => {
            if (child) {
                if (child.isTabPanel) {
                    if (this.data.get('activeIndex') === panels.length) {
                        child.data.set('active', true);
                    }
                    panels.push(child);
                }
                else if (child.children && child.children.length) {
                    this.getPanels(child.children, panels);
                }
            }
        });

        return panels;
    }

    updateTabPanel() {
        const panels = this.$panels = this.getPanels(this.children);
        const tabs = panels.map(panel => panel.data.get());
        this.data.set('tabs', tabs);
    }
}
