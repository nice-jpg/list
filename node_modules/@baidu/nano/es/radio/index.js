/**
 * @file 组件 radio 单选按钮
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';

const prefixCls = 's-radio';

/* eslint-disable max-len */
const svgOuter = 'M30 57c14.912 0 27-12.088 27-27S44.912 3 30 3 3 15.088 3 30s12.088 27 27 27zm0 3C13.431 60 0 46.569 0 30 0 13.431 13.431 0 30 0c16.569 0 30 13.431 30 30 0 16.569-13.431 30-30 30z';
const svgInner = 'M30 0c16.569 0 30 13.431 30 30 0 16.569-13.431 30-30 30C13.431 60 0 46.569 0 30 0 13.431 13.431 0 30 0z';
/* eslint-enable max-len */

export default class Radio extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <label
            class="{{wrapClass}}"
            style="{{wrapStyle}}"
        >
            <input
                class="${prefixCls}-input"
                type="radio"
                checked="{{checked}}"
                on-click="handleClick"
            />
            <span class="${prefixCls}">
                <svg
                    class="${prefixCls}-outer"
                    viewBox="0 0 60 60"
                    role="presentation"
                ><path d="${svgOuter}"/></svg>
                <svg
                    class="${prefixCls}-inner"
                    viewBox="0 0 60 60"
                    role="presentation"
                ><path d="${svgInner}"/></svg>
            </span>
            <span class="${prefixCls}-label">{{label}}</span>
        </label>
    `;

    static dataTypes = {
        color: DataTypes.string,
        checked: DataTypes.bool,
        disabled: DataTypes.bool
    };

    static computed = {
        wrapClass() {
            const checked = this.data.get('checked');
            const disabled = this.data.get('disabled');
            return [
                `${prefixCls}-wrap`,
                checked && `${prefixCls}-checked`,
                disabled && `${prefixCls}-disabled`
            ].filter(c => c);
        },
        wrapStyle() {
            const color = this.data.get('color');
            return color ? {
                'color': color
            } : {};
        }
    };

    initData() {
        return {
            color: '',
            checked: false,
            disabled: false,
            toggle: false
        };
    }

    handleClick() {
        const {checked, disabled, toggle} = this.data.get();
        if (disabled) {
            return;
        }
        let newChecked = toggle ? !checked : checked;
        this.data.set('checked', newChecked);
        this.fire('click', newChecked);
    }
}
