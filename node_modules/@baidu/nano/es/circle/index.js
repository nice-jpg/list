/**
 * @file 组件 Circle 环形进度条
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import pr2rem from '../utils/pr2rem';
import isNumeric from '../utils/is-numeric';

const prefixCls = 's-circle';
const viewBox = 282; // 视觉稿尺寸

export default class Circle extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div class="${prefixCls}" style="{{wrapStyle}}">
            <svg viewBox="0 0 ${viewBox} ${viewBox}">
                <path
                    d="{{getPath(strokeWidth, clockwise)}}"
                    fill="{{fill}}"
                    stroke="{{layerColor}}"
                    stroke-width="{{strokeWidth * 2}}"
                />
                <path
                    d="{{getPath(strokeWidth, clockwise)}}"
                    fill="none"
                    stroke="{{color}}"
                    stroke-width="{{strokeWidth * 2}}"
                    stroke-linecap="{{strokeLinecap}}"
                    stroke-dasharray="{{getDasharray(rate, strokeWidth)}}"
                />
            </svg>
            <div class="${prefixCls}-content">
                <slot>
                    <span class="${prefixCls}-text {{textClass}}">{{text || format(rate) + '%'}}</span>
                </slot>
            </div>
        </div>
    `;

    static dataTypes = {
        size: DataTypes.oneOfType([DataTypes.string, DataTypes.number]),
        rate: DataTypes.oneOfType([DataTypes.string, DataTypes.number]),
        color: DataTypes.string,
        layerColor: DataTypes.string,
        fill: DataTypes.string,
        speed: DataTypes.oneOfType([DataTypes.string, DataTypes.number]),
        text: DataTypes.string,
        strokeWidth: DataTypes.oneOfType([DataTypes.string, DataTypes.number]),
        strokeLinecap: DataTypes.oneOf(['butt', 'round', 'square']),
        clockwise: DataTypes.bool,
        textClass: DataTypes.string
    };

    static computed = {
        wrapStyle() {
            const size = this.data.get('size');
            if (isNumeric(size)) {
                const width = pr2rem(size) + 'rem';
                return {
                    width,
                    height: width
                };
            }
        }
    };

    initData() {
        return {
            size: 141,
            rate: 0,
            color: '#fff',
            layerColor: '#5d5d5d',
            fill: '#ccc',
            speed: 0,
            strokeWidth: 10,
            strokeLinecap: 'round',
            clockwise: true,
            text: '',
            textClass: ''
        };
    }

    getDasharray(num, strockWidth) {
        // 进度
        const rate = this.format(num);
        // 周长
        let p = 2 * Math.PI * (viewBox / 2 - strockWidth);
        // 偏移
        let o = (p * rate) / 100;
        return `${o} ${p}`;
    }

    getPath(strockWidth, clockwise) {
        // https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths
        const size = viewBox;
        const half = size / 2;
        const flag = clockwise ? 1 : 0;
        const r = half - strockWidth;
        const m = `M ${half} ${half} m 0 -${r}`;
        const a1 = `a ${r} ${r} 0 0 ${flag} 0 ${r * 2}`;
        const a2 = `a ${r} ${r} 0 0 ${flag} 0 -${r * 2}`;
        return [m, a1, a2].join(' ');
    }

    // 取 0 ~ 100 之间整数
    format(num) {
        return Math.floor(Math.max(0, Math.min(100, num)));
    }
}
