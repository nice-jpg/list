/**
 * @file 组件 scroll-list 滑动列表
 * @author xueruijun <xueruijun@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import Error from '../error';
import Flash from '../flash';
import Loader from '../loader';
import '../assets/svg/error-network.svg';

const prefixCls = 's-scroll-list';

export default class ScrollList extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div class="${prefixCls}">
            <!-- 首屏加载模式下，存在 flash-loading、error 及 empty 态 -->
            <template s-if="isFirst">
                <s-flash
                    s-if="isLoading"
                    s-bind="{{loadingConfig}}"
                />
                <s-error
                    s-elif="isError"
                    s-bind="{{errorConfig}}"
                    on-button-click="clickErrorLoader"
                />
                <s-error
                    s-elif="isEmpty"
                    s-bind="{{emptyConfig}}"
                />
            </template>
            <!-- 正常模式下，只有 slot 传入的展示列表和底部的 loader bar -->
            <template s-else>
                <slot />
                <s-loader
                    s-if="{{showLoader}}"
                    state="{{loaderState}}"
                    s-bind="{{loaderConfig}}"
                    on-error-click="clickErrorLoader"
                />
            </template>
        </div>
    `;

    static components = {
        's-error': Error,
        's-flash': Flash,
        's-loader': Loader
    };

    static dataTypes = {
        isFirst: DataTypes.bool,
        isLoading: DataTypes.bool,
        loadingConfig: DataTypes.object,
        isError: DataTypes.bool,
        errorConfig: DataTypes.object,
        isEmpty: DataTypes.bool,
        emptyConfig: DataTypes.object,
        showLoader: DataTypes.bool,
        loaderConfig: DataTypes.object,
        hasMore: DataTypes.bool
    };

    static computed = {
        loaderState() {
            if (this.data.get('isLoading')) {
                return 1;
            }
            if (!this.data.get('hasMore')) {
                return 2;
            }
            if (this.data.get('isError')) {
                return 3;
            }
            return 0;
        }
    };

    initData() {
        return {
            isFirst: true,
            isLoading: false,
            isError: false,
            isEmpty: false,
            hasMore: true,
            showLoader: true,
            loadingConfig: {
                layout: 'full'
            },
            errorConfig: {
                layout: 'full',
                type: 'network',
                text: '网络不给力，请稍后重试',
                button: {
                    text: '重新加载'
                }
            }
        };
    }

    attached() {
        this.data.get('isFirst') && this.fire('fetch'); // 首页加载模式时第一次进入页面要拉取数据

        // 下拉获取新的数据
        window.addEventListener('scroll', () => {
            if (this.isBottom && this.data.get('hasMore')) {
                this.fire('fetch');
            }
        });
    }

    // 是否滚动到页面底部
    get isBottom() {
        const {clientHeight, scrollHeight} = document.documentElement;
        const scrollTop = document.documentElement.scrollTop || document.body.scrollTop || 0;

        return clientHeight + scrollTop + 20 > scrollHeight;
    }

    clickErrorLoader() {
        this.fire('error-click');
    }
}
