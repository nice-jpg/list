/**
 * @file 组件 video San Component for Nano
 * @author wangwenyuan03 <wangwenyuan03@baidu.com>
 */

import './style/index.less';
import '../assets/svg/v-play.svg';
import '../assets/svg/v-pause.svg';
import '../assets/svg/g-refresh.svg';
import '../assets/svg/v-voice.svg';
import '../assets/svg/v-mute.svg';
import '../assets/svg/v-fullscreen.svg';
import {Component, DataTypes} from 'san';
import Icon from '../icon';
import Slider from '../slider';
const prefixCls = 's-video';
const pad = function (val) {
    val = Math.floor(val);
    if (val < 10) {
        return '0' + val;
    }
    return val + '';
};

export default class Video extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div class="${prefixCls}" on-click="handleControls">
            <video s-ref="video"
                class="${prefixCls}-video"
                playsinline
                webkit-playsinline
                x5-video-player-type="h5-page"
                x5-playsinline
                x5-video-player-fullscreen="true"
                x5-video-orientation="portraint"
                x-webkit-airplay="true"
                t7-video-player-type="h5"
                poster="{{poster}}"
                controlsList="nodownload"
                on-playing="handlePlaying"
                on-canplay="handleCanplay"
                on-pause="handlePause"
                on-timeupdate="handleTimeupdate"
                on-click="handleClick"
                on-ended="handleEnded"
            >
                <source s-for="source in sources" src="{{source.src}}" type="{{source.type}}"/>
            </video>
            <div class="${prefixCls}-edit ${prefixCls}-play"
                on-click="handlePlayClick"
                s-if="videoStatus === 'paused'">
                <s-icon
                    color="#ffffff"
                    type="v-play"
                    size="{{72}}"
                />
            </div>
            <div class="${prefixCls}-edit ${prefixCls}-pause"
                on-click="handlePauseClick"
                s-if="videoStatus === 'playing' && controlsShow">
                <s-icon
                    color="#ffffff"
                    type="v-pause"
                    size="{{72}}"
                />
            </div>
            <div class="${prefixCls}-edit ${prefixCls}-replay" on-click="replayVideo" s-if="videoStatus === 'ended'">
                <s-icon
                    color="#ffffff"
                    type="g-refresh"
                    size="{{60}}"
                />
            </div>
            <div class="${prefixCls}-control" s-if="controlsShow && duration">
                <button class="${prefixCls}-control-sound" on-click="handleSound">
                    <s-icon
                        s-if="!muted"
                        color="#ffffff"
                        size="{{66}}"
                        type="v-voice"
                    />
                    <s-icon
                        s-if="muted"
                        color="#ffffff"
                        size="{{66}}"
                        type="v-mute"
                    />
                </button>
                <div class="${prefixCls}-control-slider">
                    <s-slider value="{{currentTime}}" max="{{duration || 100}}" on-change="handleSliderChange">
                        <div slot="lead" class="s-slider-lead">{{currentTime | dateFormat}}</div>
                        <div slot="button" class="s-slider-button"/>
                        <div slot="tail" class="s-slider-tail">{{duration | dateFormat}}</div>
                    </s-slider>
                </div>
                <button class="${prefixCls}-control-screen" on-click="handleFullScreen">
                    <s-icon
                        color="#ffffff"
                        size="{{66}}"
                        type="v-fullscreen"
                    />
                </button>
            </div>
        </div>
    `;

    static components = {
        's-icon': Icon,
        's-slider': Slider
    };

    static dataTypes = {
        autoplay: DataTypes.bool,
        poster: DataTypes.string,
        sources: DataTypes.oneOfType([DataTypes.array, DataTypes.object])
    };

    static filters = {
        dateFormat(sec) {
            let min = 0;
            min = Math.floor(sec / 60);
            sec = sec - min * 60;
            return pad(min) + ':' + pad(sec);
        }
    };

    initData() {
        return {
            name: 'video',
            muted: true,
            controlsShow: true,
            currentTime: 0,
            duration: 0,
            videoStatus: 'paused',
            sources: [],
            poster: ''
        };
    }

    inited() {
        let sources = this.data.get('sources');
        if (!Array.isArray(sources)) {
            this.data.set('sources', [sources]);
        }
    }

    attached() {
        this.video = this.ref('video');
        this.data.set('muted', this.video.muted);
    }

    handleSound(e) {
        e && e.stopPropagation();
        this.video.muted = !this.video.muted;
        this.data.set('muted', this.video.muted);
    }

    handleSliderChange(value) {
        this.data.set('currentTime', value);
        this.video.currentTime = value;
    }

    playVideo() {
        this.video.play();
    }

    pauseVideo() {
        this.video.pause();
    }

    replayVideo(e) {
        e && e.stopPropagation();
        this.video.currentTime = 0;
        this.playVideo();
        this.fire('replayClick');
    }

    setVideoLoop(loop) {
        this.video.loop = loop;
    }

    setPlaySpeed(speed) {
        this.video.playbackRate = speed;
    }

    handleControls() {
        let controlsShow = this.data.get('controlsShow');
        this.data.set('controlsShow', !controlsShow);
        if (this.contrlHideTimer) {
            clearTimeout(this.contrlHideTimer);
        }
        if (!controlsShow) {
            this.contrlHideTimer = setTimeout(() => {
                this.data.set('controlsShow', false);
                this.contrlHideTimer = null;
            }, 5000);
        }
    }

    handlePlayClick(e) {
        e && e.stopPropagation();
        this.playVideo();
        this.fire('playClick');
    }

    handlePauseClick(e) {
        e && e.stopPropagation();
        this.pauseVideo();
        this.fire('pauseClick');
    }

    handleClick(e) {
        this.fire('click', e);
    }

    handlePlaying(e) {
        this.data.set('videoStatus', 'playing');
        this.data.set('controlsShow', false);
        this.fire('playing', e);
    }

    handleCanplay(e) {
        this.data.set('duration', parseInt(this.video.duration, 10));
        this.fire('canplay', e);
    }

    handleTimeupdate(e) {
        this.data.set('currentTime', parseInt(this.video.currentTime, 10));
        this.fire('timeupdate', e);
    }

    handleFullScreen() {
        if (this.video.requestFullscreen) {
            // 最新标准
            this.video.requestFullscreen();
        }
        else if (this.video.webkitRequestFullScreen) {
            // 安卓
            this.video.webkitRequestFullScreen();
        }
        else {
            // ios
            this.video.webkitEnterFullScreen();
        }
    }

    handlePause(e) {
        this.data.set('videoStatus', 'paused');
        this.fire('pause', e);
    }

    handleEnded(e) {
        this.data.set('videoStatus', 'ended');
        this.fire('ended', e);
    }

}
