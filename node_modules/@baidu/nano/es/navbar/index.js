/**
 * @file 组件 navbar 导航栏
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import stickiness from '../utils/stickiness';
import pr2px from '../utils/pr2px';
import pr2rem from '../utils/pr2rem';

const prefixCls = 's-navbar';

export default class Navbar extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div class="{{wrapClass}}" style="{{wrapStyle}}">
            <div s-ref="body" class="{{bodyClass}}" style="{{bodyStyle}}">
                <div s-if="showTitle" class="${prefixCls}-title">{{title}}</div>
                <div class="${prefixCls}-aside">
                    <slot name="aside"/>
                </div>
                <div class="${prefixCls}-tools">
                    <slot name="tools"/>
                </div>
                <div s-if="showBorder" class="hairline"/>
            </div>
        </div>
    `;

    static dataTypes = {
        showBorder: DataTypes.bool,
        showTitle: DataTypes.bool,
        sticky: DataTypes.bool,
        title: DataTypes.string,
        top: DataTypes.number,
        unit: DataTypes.oneOf(['pr', 'px'])
    };

    static computed = {
        wrapClass() {
            const fixed = this.data.get('fixed');
            const sticky = this.data.get('sticky');
            return [
                prefixCls,
                (!fixed && stickiness.native && sticky) && `${prefixCls}-sticky`
            ].filter(c => c);
        },
        wrapStyle() {
            const top = this.data.get('top');
            const unit = this.data.get('unit');
            let ret = {};
            if (stickiness.native && Math.abs(top) > 0) {
                ret.top = unit === 'pr' ? `${pr2rem(top)}rem` : `${top}px`;
            }
            return ret;
        },
        bodyClass() {
            const fixed = this.data.get('fixed');
            return [
                `${prefixCls}-body`,
                fixed && `${prefixCls}-fixed`
            ].filter(c => c);
        },
        bodyStyle() {
            const fixed = this.data.get('fixed');
            const top = this.data.get('top');
            const unit = this.data.get('unit');
            let ret = {};
            if (fixed && stickiness.native && Math.abs(top) > 0) {
                ret.top = unit === 'pr' ? `${pr2rem(top)}rem` : `${top}px`;
            }
            return ret;
        }
    };

    initData() {
        return {
            fixed: false,
            showBorder: true,
            showTitle: true,
            sticky: false,
            top: 0,
            unit: 'pr'
        };
    }

    attached() {
        const that = this;
        const {sticky, top, unit} = that.data.get();

        if (sticky) {
            stickiness.add({
                el: that.ref('body'),
                top: unit === 'pr' ? pr2px(top) : top,
                change(isSticky) {
                    that.fire('sticky-change', isSticky);
                }
            });
        }
    }
}
