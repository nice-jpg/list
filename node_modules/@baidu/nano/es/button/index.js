/**
 * @file 组件 button 按钮
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import isNumeric from '../utils/is-numeric';
import pr2rem from '../utils/pr2rem';
import Icon from '../icon';

const prefixCls = 's-button';

export default class Button extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div
            class="{{wrapClass}}"
            style="{{wrapStyle}}"
            on-click="handleClick"
            on-touchstart="handleTouchstart"
        >
            <slot>
                <s-icon s-if="icon" class="icon" type="{{icon}}"/>
                <div s-else class="spinner"/>
                <div s-if="text" class="text">{{text}}</div>
            </slot>
        </div>
    `;

    static components = {
        's-icon': Icon
    };

    static dataTypes = {
        block: DataTypes.bool,
        color: DataTypes.string,
        disabled: DataTypes.bool,
        ghost: DataTypes.bool,
        hairline: DataTypes.bool,
        icon: DataTypes.string,
        loading: DataTypes.bool,
        shape: DataTypes.oneOf(['', 'round', 'square']),
        size: DataTypes.oneOf(['sm', 'md', 'lg']),
        text: DataTypes.string,
        type: DataTypes.oneOf(['primary', 'danger', 'default', 'weak']),
        width: DataTypes.oneOfType([DataTypes.number, DataTypes.string]),
        height: DataTypes.oneOfType([DataTypes.number, DataTypes.string])
    };

    static computed = {
        wrapClass() {
            const data = this.data;
            const block = data.get('block');
            const color = data.get('color');
            const disabled = data.get('disabled');
            const ghost = data.get('ghost');
            const hairline = data.get('hairline');
            const loading = data.get('loading');
            const shape = data.get('shape');
            const size = data.get('size');
            const text = data.get('text');
            const type = color ? 'color' : data.get('type');

            return [
                prefixCls,
                `${prefixCls}-${size}`,
                `${prefixCls}-${type}`,
                block && `${prefixCls}-block`,
                disabled && `${prefixCls}-disabled`,
                ghost && `${prefixCls}-ghost`,
                hairline && `${prefixCls}-hairline`,
                loading && `${prefixCls}-loading`,
                !text && `${prefixCls}-notext`,
                !!shape && `${prefixCls}-${shape}`
            ].filter(c => c);
        },

        wrapStyle() {
            let ret = {};
            const data = this.data;
            const color = data.get('color');
            const width = data.get('width');
            const height = data.get('height');
            if (color) {
                ret.color = color;
            }
            if (isNumeric(width)) {
                ret.width = `${pr2rem(width)}rem`;
            }
            if (isNumeric(height)) {
                ret.height = `${pr2rem(height)}rem`;
            }
            return ret;
        }
    };

    initData() {
        return {
            block: false,
            disabled: false,
            ghost: false,
            hairline: false,
            icon: '',
            loading: false,
            shape: '',
            size: 'md',
            text: '',
            type: 'default'
        };
    }

    handleClick(e) {
        e.stopPropagation();
        const context = this.data.get();
        const {disabled, loading} = context;

        if (!disabled && !loading) {
            this.fire('click', context);
        }
    }

    handleTouchstart(e) {
        e.stopPropagation();
        this.fire('touchstart', this.data.get());
    }
}
