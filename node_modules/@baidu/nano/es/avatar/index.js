/**
 * @file 组件 avatar 头像
 * @author baozhixin <baozhixin@baidu.com>
 *
 * mark: 头像小于sm则不显示vip图标
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import isNumeric from '../utils/is-numeric';
import pr2rem from '../utils/pr2rem';

const prefixCls = 's-avatar';
const sizeType = {
    xs: 84,
    sm: 105,
    md: 129,
    lg: 156,
    xl: 192,
    xxl: 219
};
const format = size => {
    if (isNumeric(size)) {
        let type = 'xs';
        switch (true) {
            case size >= sizeType.xxl:
                type = 'xxl';
                break;
            case size >= sizeType.xl:
                type = 'xl';
                break;
            case size >= sizeType.lg:
                type = 'lg';
                break;
            case size >= sizeType.md:
                type = 'md';
                break;
            case size >= sizeType.sm:
                type = 'sm';
                break;
        }
        return type;
    }
    return size;
};

export default class Avatar extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div class="{{wrapClass}}" style="{{wrapStyle}}">
            <div class="${prefixCls}-placeholder"/>
            <div class="${prefixCls}-img" style="{{imgStyle}}"/>
            <div s-if="shape !== 'square' && !!vip" class="${prefixCls}-vip vip-{{vip}}"/>
            <span s-if="badge" class="${prefixCls}-badge"/>
        </div>
    `;

    static dataTypes = {
        badge: DataTypes.bool,
        hairline: DataTypes.bool,
        shape: DataTypes.oneOf(['circle', 'square']),
        size: DataTypes.oneOfType([
            DataTypes.number,
            DataTypes.oneOf(Object.keys(sizeType))
        ]),
        src: DataTypes.string,
        vip: DataTypes.oneOf(['', '0', '1', '2', '3', '10', 'swan', 'select', 'unselect'])
    };

    static computed = {
        wrapClass() {
            const hairline = this.data.get('hairline');
            const shape = this.data.get('shape');
            const size = this.data.get('size');
            return [
                prefixCls,
                `${prefixCls}-${shape}`,
                `${prefixCls}-${format(size)}`,
                hairline && `${prefixCls}-hairline`
            ].filter(c => c);
        },

        wrapStyle() {
            let ret = {};
            const size = this.data.get('size');
            if (isNumeric(size)) {
                const width = `${pr2rem(size)}rem`;
                ret = {
                    width,
                    height: width
                };
            }
            return ret;
        },

        imgStyle() {
            const data = this.data;
            const src = data.get('src');
            const loaded = data.get('loaded');

            if (loaded && src) {
                return {
                    'background-image': `url(${src})`
                };
            }
        }
    };

    initData() {
        return {
            badge: false,
            hairline: true,
            shape: 'circle',
            size: 'md',
            src: '',
            vip: ''
        };
    }

    inited() {
        const data = this.data;
        const src = this.data.get('src');
        const img = new Image();

        img.onload = () => {
            data.set('loaded', true);
        };

        img.onerror = img.onabort = e => {
            this.fire('error', e);
        };

        img.src = src;
    }
}

Avatar.sizeType = sizeType;
