/**
 * @file 组件 toast 反馈提示
 * @author baozhixin <baozhixin@baidu.com>
 */

import './style/index.less';
import {Component, DataTypes} from 'san';
import Avatar from '../avatar';
import Icon from '../icon';
import Button from '../button';

const prefixCls = 's-toast';

export default class Toast extends Component {
    // eslint-disable-next-line
    static template = /*html*/ `
        <div class="{{wrapClass}}">
            <div class="{{toastClass}}"
                s-transition="fadeTrans"
                on-animationend="animationEnd"
            >
                <s-avatar s-if="image && !icon" size="sm" src="{{image}}" shape="{{imageShape}}"/>
                <div s-else class="${prefixCls}-ico">
                    <div s-if="!button && loading" class="${prefixCls}-spinner"/>
                    <s-icon s-elif="icon" type="{{icon}}" color="{{iconColor}}"/>
                </div>
                <div class="${prefixCls}-txt">
                    <span>{{text | raw}}</span>
                    <div s-if="button && subText" class="${prefixCls}-subtxt">{{subText}}</div>
                </div>
                <template s-if="button">
                    <div s-if="buttonType === 'default'" class="${prefixCls}-btn" on-click="handleClick">
                        <span>{{button}}</span>
                        <s-icon type="g-triangle"/>
                    </div>
                    <s-button s-else size="sm" text="{{button}}" type="{{buttonType}}" on-click="handleClick"/>
                </template>
            </div>
        </div>
    `;

    static components = {
        's-avatar': Avatar,
        's-icon': Icon,
        's-button': Button
    };

    static dataTypes = {
        button: DataTypes.string,
        buttonType: DataTypes.oneOf(['default', 'primary', 'danger', 'weak']),
        duration: DataTypes.number,
        icon: DataTypes.string,
        iconColor: DataTypes.string,
        image: DataTypes.string,
        imageShape: DataTypes.oneOf(['circle', 'square']),
        loading: DataTypes.bool,
        placement: DataTypes.oneOf(['center', 'bottom']),
        text: DataTypes.string,
        subText: DataTypes.string,
        onClick: DataTypes.func
    };

    static computed = {
        toastClass() {
            const animationName = this.data.get('animationName');
            return [
                prefixCls,
                !!animationName && animationName
            ].filter(c => c);
        },

        wrapClass() {
            const button = this.data.get('button');
            const icon = this.data.get('icon');
            const image = this.data.get('image');
            const loading = this.data.get('loading');
            const placement = button ? 'bottom' : (loading || icon) ? 'center' : this.data.get('placement');

            return [
                `${prefixCls}-wrap`,
                `${prefixCls}-${placement}`,
                !!button && `${prefixCls}-with-action`,
                (loading || (icon || image) && !button) && `${prefixCls}-with-icon`
            ].filter(c => c);
        }
    };

    initData() {
        return {
            animationName: '',
            buttonType: 'default',
            duration: 2,
            iconColor: '#f2f2f2',
            imageShape: 'circle',
            placement: 'center',
            text: '提示信息'
        };
    }

    attached() {
        const {duration} = this.data.get();

        this.timer && clearTimeout(this.timer);
        this.timer = duration > 0 ? setTimeout(() => {
            this.close();
        }, duration * 1e3) : null;
    }

    disposed() {
        this.timer && clearTimeout(this.timer);
    }

    handleClick(e) {
        const onClick = this.data.get('onClick');
        if (typeof onClick === 'function') {
            onClick(e);
        }
        this.fire('click', e);
        this.close();
    }

    fadeTrans() {
        const that = this;
        return {
            enter(el, done) {
                that.animationApply('active fade-enter', done);
            }
        };
    }

    close() {
        this.animationApply('fade-leave', () => {
            this.dispose();
        });
    }

    // 初始保留这个空函数，避免下面的警告信息
    // [SAN WARNING] animationend listen fail,"animationEnd" not exist
    animationEnd() {}

    animationApply(name, callback) {
        this.data.set('animationName', name);
        this.animationEnd = () => {
            callback && callback();
        };
    }
}
