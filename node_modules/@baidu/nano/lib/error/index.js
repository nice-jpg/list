"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

var _san = require("san");

var _icon = _interopRequireDefault(require("../icon"));

var _button = _interopRequireDefault(require("../button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-error';
var mapTypeText = {
  app: '暂无应用',
  bookmark: '暂无书签',
  category: '暂无目录',
  comment: '暂无评论',
  cup: '休息一下',
  download: '暂无下载记录',
  dynamic: '暂无动态',
  empty: '暂无内容',
  history: '暂无历史',
  hourglass: '未完待续',
  image: '暂无图片',
  info: '数据异常',
  invisible: '爱豆已隐身',
  lock: '暂无权限',
  mark: '暂无关注',
  money: '无充值记录',
  music: '暂无音乐',
  network: '网络不给力',
  novel: '暂无小说',
  question: '暂无问答',
  reply: '暂无回帖',
  search: '暂无',
  star: '暂无收藏',
  ticket: '没有优惠券',
  trash: '暂无删除',
  user: '未登录',
  video: '暂无视频',
  circle: '暂无圈子',
  notice: '暂无通知'
};
var defaultType = 'empty';
var errorTypes = Object.keys(mapTypeText);

var Error =
/*#__PURE__*/
function (_Component) {
  _inherits(Error, _Component);

  function Error() {
    _classCallCheck(this, Error);

    return _possibleConstructorReturn(this, _getPrototypeOf(Error).apply(this, arguments));
  }

  _createClass(Error, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        layout: 'auto',
        type: defaultType
      };
    }
  }, {
    key: "handleClick",
    value: function handleClick() {
      var data = this.data.get();
      var buttonParams = this.data.get('button');
      buttonParams.action && this.dispatch(buttonParams.action, data);
      this.fire('button-click', data);
    }
  }]);

  return Error;
}(_san.Component);

exports.default = Error;

_defineProperty(Error, "template",
/*html*/
"\n        <div class=\"{{wrapClass}}\">\n            <div class=\"".concat(prefixCls, "-ico\">\n                <slot name=\"icon\">\n                    <s-icon\n                        color=\"{{iconColor}}\"\n                        size=\"{{iconSize}}\"\n                        type=\"error-{{type}}\"\n                    />\n                </slot>\n            </div>\n            <div s-if=\"title\" class=\"").concat(prefixCls, "-txt\">{{title}}</div>\n            <slot name=\"action\">\n                <s-button\n                    s-if=\"button && button.text\"\n                    class=\"").concat(prefixCls, "-btn\"\n                    hairline=\"{{true}}\"\n                    text=\"{{button.text}}\"\n                    on-click=\"handleClick\"\n                />\n            </slot>\n        </div>\n    "));

_defineProperty(Error, "components", {
  's-button': _button.default,
  's-icon': _icon.default
});

_defineProperty(Error, "dataTypes", {
  config: _san.DataTypes.object,
  // 基础配置：errorType, errorText, errorButton
  iconColor: _san.DataTypes.string,
  // 图标颜色
  iconSize: _san.DataTypes.string,
  // 图标尺寸
  layout: _san.DataTypes.string,
  // 组件布局方式
  text: _san.DataTypes.string,
  // 单行标题
  type: _san.DataTypes.oneOf(errorTypes) // 图标类型

});

_defineProperty(Error, "computed", {
  title: function title() {
    var text = this.data.get('text');
    var type = this.data.get('type');
    return text || mapTypeText[type] || mapTypeText[defaultType];
  },
  wrapClass: function wrapClass() {
    var isFull = this.data.get('layout') === 'full';
    return [prefixCls, isFull && "".concat(prefixCls, "-fullpage")].filter(function (c) {
      return c;
    });
  }
});

Error.types = errorTypes;