"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

var _san = require("san");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-search';

var Search =
/*#__PURE__*/
function (_Component) {
  _inherits(Search, _Component);

  function Search() {
    _classCallCheck(this, Search);

    return _possibleConstructorReturn(this, _getPrototypeOf(Search).apply(this, arguments));
  }

  _createClass(Search, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        autoFocus: false,
        border: false,
        fillMode: 'inside',
        inputId: 'searchbox',
        inputValue: '',
        isAndroid: false,
        maxlength: 20,
        placeholder: '请输入搜索关键词',
        showBtn: true,
        showBtnConfirm: false,
        confirmEmpty: false,
        hasFocus: false
      };
    }
  }, {
    key: "attached",
    value: function attached() {
      var _this = this;

      var autoFocus = this.data.get('autoFocus');
      autoFocus && this.triggerFocus();
      !this.data.get('isAndroid') && document.addEventListener('click', function (e) {
        if (e.target !== _this.ref('search-form') && e.target !== _this.ref('search-input')) {
          _this.triggerBlur();
        }
      }, false);
    }
  }, {
    key: "triggerFocus",
    value: function triggerFocus() {
      var $input = this.ref('search-input');
      $input.focus();
    }
  }, {
    key: "triggerBlur",
    value: function triggerBlur() {
      var $input = this.ref('search-input');
      $input.blur();
    } // 事件类型: submit, input, focus, blur, clear, cancel, confirm

  }, {
    key: "handleEvent",
    value: function handleEvent(e, eventType) {
      e.preventDefault();
      e.stopPropagation();

      var _this$data$get = this.data.get(),
          inputValue = _this$data$get.inputValue,
          confirmEmpty = _this$data$get.confirmEmpty,
          placeholder = _this$data$get.placeholder;

      var value = inputValue.trim();
      var fallback = false;

      switch (eventType) {
        case 'clear':
          {
            this.data.set('inputValue', '');
            this.triggerFocus();
            break;
          }

        case 'submit':
        case 'confirm':
          {
            this.triggerBlur();
            break;
          }

        case 'blur':
          {
            this.data.set('hasFocus', false);
            break;
          }

        case 'focus':
          {
            this.data.set('hasFocus', true);
            break;
          }

        default:
          break;
      }

      if (!value && confirmEmpty && (eventType === 'submit' || eventType === 'confirm')) {
        value = placeholder;
        fallback = true;
        this.data.set('inputValue', placeholder);
      }

      this.fire(eventType, {
        inputValue: value,
        fallback: fallback
      });
    }
  }]);

  return Search;
}(_san.Component);

exports.default = Search;

_defineProperty(Search, "template",
/*html*/
"\n        <div class=\"{{wrapClass}}\">\n            <form class=\"".concat(prefixCls, "\" action=\"\" on-submit=\"handleEvent($event, 'submit')\" s-ref=\"search-form\">\n                <label for=\"{{inputId}}\" class=\"").concat(prefixCls, "-label\" s-ref=\"search-label\">\n                    <input\n                        s-ref=\"search-input\"\n                        id=\"{{inputId}}\"\n                        class=\"").concat(prefixCls, "-input\"\n                        value=\"{=inputValue=}\"\n                        placeholder=\"{{placeholder}}\"\n                        maxlength=\"{{maxlength}}\"\n                        autocomplete=\"off\"\n                        type=\"search\"\n                        on-blur=\"handleEvent($event, 'blur')\"\n                        on-focus=\"handleEvent($event, 'focus')\"\n                        on-input=\"handleEvent($event, 'input')\"\n                        on-click=\"triggerFocus\"\n                    />\n                </label>\n                <template s-if=\"showBtn\">\n                    <span\n                        s-if=\"hasFocus && showBtnClear\"\n                        class=\"").concat(prefixCls, "-btn-clear\"\n                        on-click=\"handleEvent($event, 'clear')\"\n                    />\n                    <i class=\"").concat(prefixCls, "-line\"/>\n                    <a\n                        s-if=\"isAndroid && hasFocus && showBtnClear\"\n                        class=\"{{searchButtonClass}}\"\n                        on-click=\"handleEvent($event, 'confirm')\"\n                    >\u641C\u7D22</a>\n                    <a\n                        s-else-if=\"hasFocus\"\n                        class=\"").concat(prefixCls, "-btn\"\n                        on-click=\"handleEvent($event, 'cancel')\"\n                    >\u53D6\u6D88</a>\n                </template>\n            </form>\n        </div>\n    "));

_defineProperty(Search, "dataTypes", {
  autoFocus: _san.DataTypes.bool,
  border: _san.DataTypes.bool,
  fillMode: _san.DataTypes.oneOf(['none', 'inside', 'outside']),
  inputId: _san.DataTypes.string,
  inputValue: _san.DataTypes.string,
  isAndroid: _san.DataTypes.bool,
  maxlength: _san.DataTypes.number,
  placeholder: _san.DataTypes.string,
  showBtn: _san.DataTypes.bool,
  showBtnConfirm: _san.DataTypes.bool,
  confirmEmpty: _san.DataTypes.bool
});

_defineProperty(Search, "computed", {
  wrapClass: function wrapClass() {
    var data = this.data;
    var border = data.get('border');
    var isAndroid = data.get('isAndroid');
    var fillMode = data.get('fillMode');
    return [isAndroid && 'android', "".concat(prefixCls, "-wrap"), "".concat(prefixCls, "-fill-").concat(fillMode), !border && fillMode !== 'none' && "".concat(prefixCls, "-borderless")].filter(function (c) {
      return c;
    });
  },
  searchButtonClass: function searchButtonClass() {
    var showBtnClear = this.data.get('showBtnClear');
    var confirmEmpty = this.data.get('confirmEmpty');
    return ["".concat(prefixCls, "-btn"), !showBtnClear && !confirmEmpty && 'disabled'].filter(function (c) {
      return c;
    });
  },
  showBtnClear: function showBtnClear() {
    return this.data.get('inputValue.length') > 0;
  }
});