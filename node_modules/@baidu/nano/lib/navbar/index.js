"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

var _san = require("san");

var _stickiness = _interopRequireDefault(require("../utils/stickiness"));

var _pr2px = _interopRequireDefault(require("../utils/pr2px"));

var _pr2rem = _interopRequireDefault(require("../utils/pr2rem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-navbar';

var Navbar =
/*#__PURE__*/
function (_Component) {
  _inherits(Navbar, _Component);

  function Navbar() {
    _classCallCheck(this, Navbar);

    return _possibleConstructorReturn(this, _getPrototypeOf(Navbar).apply(this, arguments));
  }

  _createClass(Navbar, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        fixed: false,
        showBorder: true,
        showTitle: true,
        sticky: false,
        top: 0,
        unit: 'pr'
      };
    }
  }, {
    key: "attached",
    value: function attached() {
      var that = this;

      var _that$data$get = that.data.get(),
          sticky = _that$data$get.sticky,
          top = _that$data$get.top,
          unit = _that$data$get.unit;

      if (sticky) {
        _stickiness.default.add({
          el: that.ref('body'),
          top: unit === 'pr' ? (0, _pr2px.default)(top) : top,
          change: function change(isSticky) {
            that.fire('sticky-change', isSticky);
          }
        });
      }
    }
  }]);

  return Navbar;
}(_san.Component);

exports.default = Navbar;

_defineProperty(Navbar, "template",
/*html*/
"\n        <div class=\"{{wrapClass}}\" style=\"{{wrapStyle}}\">\n            <div s-ref=\"body\" class=\"{{bodyClass}}\" style=\"{{bodyStyle}}\">\n                <div s-if=\"showTitle\" class=\"".concat(prefixCls, "-title\">{{title}}</div>\n                <div class=\"").concat(prefixCls, "-aside\">\n                    <slot name=\"aside\"/>\n                </div>\n                <div class=\"").concat(prefixCls, "-tools\">\n                    <slot name=\"tools\"/>\n                </div>\n                <div s-if=\"showBorder\" class=\"hairline\"/>\n            </div>\n        </div>\n    "));

_defineProperty(Navbar, "dataTypes", {
  showBorder: _san.DataTypes.bool,
  showTitle: _san.DataTypes.bool,
  sticky: _san.DataTypes.bool,
  title: _san.DataTypes.string,
  top: _san.DataTypes.number,
  unit: _san.DataTypes.oneOf(['pr', 'px'])
});

_defineProperty(Navbar, "computed", {
  wrapClass: function wrapClass() {
    var fixed = this.data.get('fixed');
    var sticky = this.data.get('sticky');
    return [prefixCls, !fixed && _stickiness.default.native && sticky && "".concat(prefixCls, "-sticky")].filter(function (c) {
      return c;
    });
  },
  wrapStyle: function wrapStyle() {
    var top = this.data.get('top');
    var unit = this.data.get('unit');
    var ret = {};

    if (_stickiness.default.native && Math.abs(top) > 0) {
      ret.top = unit === 'pr' ? "".concat((0, _pr2rem.default)(top), "rem") : "".concat(top, "px");
    }

    return ret;
  },
  bodyClass: function bodyClass() {
    var fixed = this.data.get('fixed');
    return ["".concat(prefixCls, "-body"), fixed && "".concat(prefixCls, "-fixed")].filter(function (c) {
      return c;
    });
  },
  bodyStyle: function bodyStyle() {
    var fixed = this.data.get('fixed');
    var top = this.data.get('top');
    var unit = this.data.get('unit');
    var ret = {};

    if (fixed && _stickiness.default.native && Math.abs(top) > 0) {
      ret.top = unit === 'pr' ? "".concat((0, _pr2rem.default)(top), "rem") : "".concat(top, "px");
    }

    return ret;
  }
});