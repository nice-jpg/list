"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

var _san = require("san");

var _icon = _interopRequireDefault(require("../icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-action-sheet';

var ActionSheet =
/*#__PURE__*/
function (_Component) {
  _inherits(ActionSheet, _Component);

  function ActionSheet() {
    _classCallCheck(this, ActionSheet);

    return _possibleConstructorReturn(this, _getPrototypeOf(ActionSheet).apply(this, arguments));
  }

  _createClass(ActionSheet, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        actions: [],
        closeText: '取消',
        layout: 'list',
        // TODO: grid
        maskClosable: true,
        round: true,
        show: false
      };
    }
  }, {
    key: "handleAction",
    value: function handleAction(action) {
      this.fire('action', action);
    }
  }, {
    key: "handleClose",
    value: function handleClose() {
      this.data.set('show', false);
    }
  }, {
    key: "handleMaskClick",
    value: function handleMaskClick() {
      var maskClosable = this.data.get('maskClosable');
      maskClosable && this.handleClose();
    }
  }, {
    key: "handleTouchmove",
    value: function handleTouchmove(e) {
      e.preventDefault();
    }
  }]);

  return ActionSheet;
}(_san.Component);

exports.default = ActionSheet;

_defineProperty(ActionSheet, "template",
/*html*/
"\n        <div s-if=\"show\" class=\"{{wrapClass}}\" on-touchmove=\"handleTouchmove\">\n            <div class=\"".concat(prefixCls, "-container\">\n                <slot name=\"header\"/>\n                <div class=\"").concat(prefixCls, "-content\">\n                    <slot name=\"content\">\n                        <div\n                            s-for=\"action, index in actions trackby action.id\"\n                            class=\"").concat(prefixCls, "-action {{action.class}}\"\n                            style=\"color: {{action.color}};\"\n                            on-click=\"handleAction(action)\"\n                        >\n                            <s-icon\n                                s-if=\"action.icon\"\n                                color=\"{{action.iconColor || action.color}}\"\n                                size=\"{{action.iconSize || 'md'}}\"\n                                type=\"{{action.icon}}\"\n                            />\n                            {{action.text}}\n                        </div>\n                    </slot>\n                </div>\n                <div\n                    s-if=\"closeText\"\n                    class=\"").concat(prefixCls, "-footer\"\n                    on-click=\"handleClose\"\n                ><span>{{closeText}}</span></div>\n            </div>\n            <div class=\"").concat(prefixCls, "-mask\" on-click=\"handleMaskClick\"/>\n        </div>\n    "));

_defineProperty(ActionSheet, "components", {
  's-icon': _icon.default
});

_defineProperty(ActionSheet, "dataTypes", {
  actions: _san.DataTypes.array,
  closeText: _san.DataTypes.string,
  layout: _san.DataTypes.oneOf(['grid', 'list']),
  maskClosable: _san.DataTypes.bool,
  round: _san.DataTypes.bool,
  show: _san.DataTypes.bool
});

_defineProperty(ActionSheet, "computed", {
  wrapClass: function wrapClass() {
    var round = this.data.get('round');
    return [prefixCls, round && "".concat(prefixCls, "-round")].filter(function (c) {
      return c;
    });
  }
});