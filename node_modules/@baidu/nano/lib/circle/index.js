"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

var _san = require("san");

var _pr2rem = _interopRequireDefault(require("../utils/pr2rem"));

var _isNumeric = _interopRequireDefault(require("../utils/is-numeric"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-circle';
var viewBox = 282; // 视觉稿尺寸

var Circle =
/*#__PURE__*/
function (_Component) {
  _inherits(Circle, _Component);

  function Circle() {
    _classCallCheck(this, Circle);

    return _possibleConstructorReturn(this, _getPrototypeOf(Circle).apply(this, arguments));
  }

  _createClass(Circle, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        size: 141,
        rate: 0,
        color: '#fff',
        layerColor: '#5d5d5d',
        fill: '#ccc',
        speed: 0,
        strokeWidth: 10,
        strokeLinecap: 'round',
        clockwise: true,
        text: '',
        textClass: ''
      };
    }
  }, {
    key: "getDasharray",
    value: function getDasharray(num, strockWidth) {
      // 进度
      var rate = this.format(num); // 周长

      var p = 2 * Math.PI * (viewBox / 2 - strockWidth); // 偏移

      var o = p * rate / 100;
      return "".concat(o, " ").concat(p);
    }
  }, {
    key: "getPath",
    value: function getPath(strockWidth, clockwise) {
      // https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths
      var size = viewBox;
      var half = size / 2;
      var flag = clockwise ? 1 : 0;
      var r = half - strockWidth;
      var m = "M ".concat(half, " ").concat(half, " m 0 -").concat(r);
      var a1 = "a ".concat(r, " ").concat(r, " 0 0 ").concat(flag, " 0 ").concat(r * 2);
      var a2 = "a ".concat(r, " ").concat(r, " 0 0 ").concat(flag, " 0 -").concat(r * 2);
      return [m, a1, a2].join(' ');
    } // 取 0 ~ 100 之间整数

  }, {
    key: "format",
    value: function format(num) {
      return Math.floor(Math.max(0, Math.min(100, num)));
    }
  }]);

  return Circle;
}(_san.Component);

exports.default = Circle;

_defineProperty(Circle, "template",
/*html*/
"\n        <div class=\"".concat(prefixCls, "\" style=\"{{wrapStyle}}\">\n            <svg viewBox=\"0 0 ").concat(viewBox, " ").concat(viewBox, "\">\n                <path\n                    d=\"{{getPath(strokeWidth, clockwise)}}\"\n                    fill=\"{{fill}}\"\n                    stroke=\"{{layerColor}}\"\n                    stroke-width=\"{{strokeWidth * 2}}\"\n                />\n                <path\n                    d=\"{{getPath(strokeWidth, clockwise)}}\"\n                    fill=\"none\"\n                    stroke=\"{{color}}\"\n                    stroke-width=\"{{strokeWidth * 2}}\"\n                    stroke-linecap=\"{{strokeLinecap}}\"\n                    stroke-dasharray=\"{{getDasharray(rate, strokeWidth)}}\"\n                />\n            </svg>\n            <div class=\"").concat(prefixCls, "-content\">\n                <slot>\n                    <span class=\"").concat(prefixCls, "-text {{textClass}}\">{{text || format(rate) + '%'}}</span>\n                </slot>\n            </div>\n        </div>\n    "));

_defineProperty(Circle, "dataTypes", {
  size: _san.DataTypes.oneOfType([_san.DataTypes.string, _san.DataTypes.number]),
  rate: _san.DataTypes.oneOfType([_san.DataTypes.string, _san.DataTypes.number]),
  color: _san.DataTypes.string,
  layerColor: _san.DataTypes.string,
  fill: _san.DataTypes.string,
  speed: _san.DataTypes.oneOfType([_san.DataTypes.string, _san.DataTypes.number]),
  text: _san.DataTypes.string,
  strokeWidth: _san.DataTypes.oneOfType([_san.DataTypes.string, _san.DataTypes.number]),
  strokeLinecap: _san.DataTypes.oneOf(['butt', 'round', 'square']),
  clockwise: _san.DataTypes.bool,
  textClass: _san.DataTypes.string
});

_defineProperty(Circle, "computed", {
  wrapStyle: function wrapStyle() {
    var size = this.data.get('size');

    if ((0, _isNumeric.default)(size)) {
      var width = (0, _pr2rem.default)(size) + 'rem';
      return {
        width: width,
        height: width
      };
    }
  }
});