"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

require("../assets/svg/g-close.svg");

require("../assets/svg/g-cross.svg");

var _san = require("san");

var _icon = _interopRequireDefault(require("../icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-dialog';

var Dialog =
/*#__PURE__*/
function (_Component) {
  _inherits(Dialog, _Component);

  function Dialog() {
    _classCallCheck(this, Dialog);

    return _possibleConstructorReturn(this, _getPrototypeOf(Dialog).apply(this, arguments));
  }

  _createClass(Dialog, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        title: '',
        content: '',
        contentAlign: 'center',
        cancelText: '',
        cancelColor: '',
        confirmText: '',
        confirmColor: '',
        showCancel: false,
        showConfirm: true,
        showClose: false,
        closeType: 'inside',
        maskClosable: false
      };
    }
  }, {
    key: "handleCancel",
    value: function handleCancel() {
      this.handleClose();
      this.fire('cancel');
    }
  }, {
    key: "handleConfirm",
    value: function handleConfirm() {
      this.handleClose();
      this.fire('confirm');
    }
  }, {
    key: "handleClose",
    value: function handleClose() {
      this.fire('close');
    }
  }, {
    key: "handleMaskClick",
    value: function handleMaskClick() {
      var maskClosable = this.data.get('maskClosable');
      maskClosable && this.handleClose();
    }
  }, {
    key: "handleTouchmove",
    value: function handleTouchmove(e) {
      e.preventDefault();
    }
  }]);

  return Dialog;
}(_san.Component);

exports.default = Dialog;

_defineProperty(Dialog, "template",
/*html*/
"\n        <div class=\"".concat(prefixCls, "-wrap\" on-touchmove=\"handleTouchmove\">\n            <div class=\"").concat(prefixCls, "\">\n                <slot name=\"title\">\n                    <div s-if=\"title\" class=\"").concat(prefixCls, "-header\">{{title}}</div>\n                </slot>\n                <slot name=\"content\">\n                    <div class=\"{{contentClass}}\" style=\"text-align:{{contentAlign}}\">{{content | raw}}</div>\n                </slot>\n                <slot name=\"footer\">\n                    <div s-if=\"hasFooter\" class=\"").concat(prefixCls, "-footer\">\n                        <div\n                            s-if=\"showCancel\"\n                            class=\"").concat(prefixCls, "-cancel\"\n                            style=\"{{cancelColor ? 'color:' + cancelColor : ''}}\"\n                            on-click=\"handleCancel\"\n                        >\n                            <span>{{cancelText}}</span>\n                        </div>\n                        <div\n                            s-if=\"showConfirm\"\n                            class=\"{{confirmClass}}\"\n                            style=\"{{confirmColor ? 'color:' + confirmColor : ''}}\"\n                            on-click=\"handleConfirm\"\n                        >\n                            <span>{{confirmText}}</span>\n                        </div>\n                    </div>\n                    <div\n                        s-if=\"hasClose && closeType === 'inside'\"\n                        class=\"{{closeClass}}\"\n                        on-click=\"handleClose\"\n                    >\n                        <s-icon type=\"g-cross\"/>\n                    </div>\n                </slot>\n            </div>\n            <div\n                s-if=\"hasClose && closeType === 'outside'\"\n                class=\"{{closeClass}}\"\n                on-click=\"handleClose\"\n            >\n                <s-icon type=\"g-close\"/>\n            </div>\n            <div class=\"").concat(prefixCls, "-mask\" on-click=\"handleMaskClick\"/>\n        </div>\n    "));

_defineProperty(Dialog, "components", {
  's-icon': _icon.default
});

_defineProperty(Dialog, "dataTypes", {
  title: _san.DataTypes.string,
  content: _san.DataTypes.string,
  contentAlign: _san.DataTypes.oneOf(['left', 'center', 'right']),
  cancelText: _san.DataTypes.string,
  cancelColor: _san.DataTypes.string,
  confirmText: _san.DataTypes.string,
  confirmColor: _san.DataTypes.string,
  showCancel: _san.DataTypes.bool,
  showConfirm: _san.DataTypes.bool,
  showClose: _san.DataTypes.bool,
  closeType: _san.DataTypes.oneOf(['inside', 'outside']),
  maskClosable: _san.DataTypes.bool
});

_defineProperty(Dialog, "computed", {
  contentClass: function contentClass() {
    var title = this.data.get('title');
    return ["".concat(prefixCls, "-content"), !title && "".concat(prefixCls, "-content-enhance")].filter(function (c) {
      return c;
    });
  },
  confirmClass: function confirmClass() {
    var showCancel = this.data.get('showCancel');
    return ["".concat(prefixCls, "-confirm"), showCancel && "".concat(prefixCls, "-hairline")].filter(function (c) {
      return c;
    });
  },
  closeClass: function closeClass() {
    var closeType = this.data.get('closeType');
    return ["".concat(prefixCls, "-close"), !!closeType && "".concat(prefixCls, "-close-").concat(closeType)].filter(function (c) {
      return c;
    });
  },
  hasFooter: function hasFooter() {
    var data = this.data;
    var cancelText = data.get('cancelText');
    var confirmText = data.get('confirmText');
    var showCancel = data.get('showCancel');
    var showConfirm = data.get('showConfirm');
    return cancelText && showCancel || confirmText && showConfirm;
  },
  hasClose: function hasClose() {
    var data = this.data;
    var showClose = data.get('showClose');
    var hasFooter = data.get('hasFooter');
    return showClose || !hasFooter;
  }
});