"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

var _san = require("san");

var _avatar = _interopRequireDefault(require("../avatar"));

var _icon = _interopRequireDefault(require("../icon"));

var _button = _interopRequireDefault(require("../button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-toast';

var Toast =
/*#__PURE__*/
function (_Component) {
  _inherits(Toast, _Component);

  function Toast() {
    _classCallCheck(this, Toast);

    return _possibleConstructorReturn(this, _getPrototypeOf(Toast).apply(this, arguments));
  }

  _createClass(Toast, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        animationName: '',
        buttonType: 'default',
        duration: 2,
        iconColor: '#f2f2f2',
        imageShape: 'circle',
        placement: 'center',
        text: '提示信息'
      };
    }
  }, {
    key: "attached",
    value: function attached() {
      var _this = this;

      var _this$data$get = this.data.get(),
          duration = _this$data$get.duration;

      this.timer && clearTimeout(this.timer);
      this.timer = duration > 0 ? setTimeout(function () {
        _this.close();
      }, duration * 1e3) : null;
    }
  }, {
    key: "disposed",
    value: function disposed() {
      this.timer && clearTimeout(this.timer);
    }
  }, {
    key: "handleClick",
    value: function handleClick(e) {
      var onClick = this.data.get('onClick');

      if (typeof onClick === 'function') {
        onClick(e);
      }

      this.fire('click', e);
      this.close();
    }
  }, {
    key: "fadeTrans",
    value: function fadeTrans() {
      var that = this;
      return {
        enter: function enter(el, done) {
          that.animationApply('active fade-enter', done);
        }
      };
    }
  }, {
    key: "close",
    value: function close() {
      var _this2 = this;

      this.animationApply('fade-leave', function () {
        _this2.dispose();
      });
    } // 初始保留这个空函数，避免下面的警告信息
    // [SAN WARNING] animationend listen fail,"animationEnd" not exist

  }, {
    key: "animationEnd",
    value: function animationEnd() {}
  }, {
    key: "animationApply",
    value: function animationApply(name, callback) {
      this.data.set('animationName', name);

      this.animationEnd = function () {
        callback && callback();
      };
    }
  }]);

  return Toast;
}(_san.Component);

exports.default = Toast;

_defineProperty(Toast, "template",
/*html*/
"\n        <div class=\"{{wrapClass}}\">\n            <div class=\"{{toastClass}}\"\n                s-transition=\"fadeTrans\"\n                on-animationend=\"animationEnd\"\n            >\n                <s-avatar s-if=\"image && !icon\" size=\"sm\" src=\"{{image}}\" shape=\"{{imageShape}}\"/>\n                <div s-else class=\"".concat(prefixCls, "-ico\">\n                    <div s-if=\"!button && loading\" class=\"").concat(prefixCls, "-spinner\"/>\n                    <s-icon s-elif=\"icon\" type=\"{{icon}}\" color=\"{{iconColor}}\"/>\n                </div>\n                <div class=\"").concat(prefixCls, "-txt\">\n                    <span>{{text | raw}}</span>\n                    <div s-if=\"button && subText\" class=\"").concat(prefixCls, "-subtxt\">{{subText}}</div>\n                </div>\n                <template s-if=\"button\">\n                    <div s-if=\"buttonType === 'default'\" class=\"").concat(prefixCls, "-btn\" on-click=\"handleClick\">\n                        <span>{{button}}</span>\n                        <s-icon type=\"g-triangle\"/>\n                    </div>\n                    <s-button s-else size=\"sm\" text=\"{{button}}\" type=\"{{buttonType}}\" on-click=\"handleClick\"/>\n                </template>\n            </div>\n        </div>\n    "));

_defineProperty(Toast, "components", {
  's-avatar': _avatar.default,
  's-icon': _icon.default,
  's-button': _button.default
});

_defineProperty(Toast, "dataTypes", {
  button: _san.DataTypes.string,
  buttonType: _san.DataTypes.oneOf(['default', 'primary', 'danger', 'weak']),
  duration: _san.DataTypes.number,
  icon: _san.DataTypes.string,
  iconColor: _san.DataTypes.string,
  image: _san.DataTypes.string,
  imageShape: _san.DataTypes.oneOf(['circle', 'square']),
  loading: _san.DataTypes.bool,
  placement: _san.DataTypes.oneOf(['center', 'bottom']),
  text: _san.DataTypes.string,
  subText: _san.DataTypes.string,
  onClick: _san.DataTypes.func
});

_defineProperty(Toast, "computed", {
  toastClass: function toastClass() {
    var animationName = this.data.get('animationName');
    return [prefixCls, !!animationName && animationName].filter(function (c) {
      return c;
    });
  },
  wrapClass: function wrapClass() {
    var button = this.data.get('button');
    var icon = this.data.get('icon');
    var image = this.data.get('image');
    var loading = this.data.get('loading');
    var placement = button ? 'bottom' : loading || icon ? 'center' : this.data.get('placement');
    return ["".concat(prefixCls, "-wrap"), "".concat(prefixCls, "-").concat(placement), !!button && "".concat(prefixCls, "-with-action"), (loading || (icon || image) && !button) && "".concat(prefixCls, "-with-icon")].filter(function (c) {
      return c;
    });
  }
});