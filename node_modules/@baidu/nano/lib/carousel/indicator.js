"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

var _san = require("san");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-carousel';

var Indicator =
/*#__PURE__*/
function (_Component) {
  _inherits(Indicator, _Component);

  function Indicator() {
    _classCallCheck(this, Indicator);

    return _possibleConstructorReturn(this, _getPrototypeOf(Indicator).apply(this, arguments));
  }

  _createClass(Indicator, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        index: 0,
        count: 1,
        type: 'dot'
      };
    }
  }, {
    key: "inited",
    value: function inited() {
      var count = this.data.get('count');

      if (count > 5) {
        this.data.set('type', 'num');
      }
    }
  }]);

  return Indicator;
}(_san.Component);

exports.default = Indicator;

_defineProperty(Indicator, "template",
/*html*/
"\n        <div s-if=\"count > 1\" class=\"{{wrapClass}}\">\n            <span s-if=\"type === 'num'\">{{current}}/{{count}}</span>\n            <div s-if=\"type === 'dot'\" s-for=\"v, k in list\" class=\"dot {{k === index ? 'active' : ''}}\"/>\n        </div>\n    ");

_defineProperty(Indicator, "dataTypes", {
  index: _san.DataTypes.number,
  count: _san.DataTypes.number,
  type: _san.DataTypes.oneOf(['dot', 'num'])
});

_defineProperty(Indicator, "computed", {
  list: function list() {
    return new Array(this.data.get('count'));
  },
  current: function current() {
    var index = this.data.get('index');
    var count = this.data.get('count');
    return index <= 0 ? 1 : index >= count ? count : index + 1;
  },
  wrapClass: function wrapClass() {
    var type = this.data.get('type');
    return ["".concat(prefixCls, "-indicator"), "".concat(prefixCls, "-indicator-").concat(type)];
  }
});