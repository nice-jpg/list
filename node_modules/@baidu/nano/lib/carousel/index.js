"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

var _san = require("san");

var _image = _interopRequireDefault(require("../image"));

var _indicator = _interopRequireDefault(require("./indicator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-carousel';
var initTouchData = {
  startX: 0,
  startY: 0,
  deltaX: 0,
  deltaY: 0,
  offsetX: 0,
  offsetY: 0,
  direction: '',
  startTime: 0
};
var MIN_DISTANCE = 10;

function getDirection(x, y) {
  if (x > y && x > MIN_DISTANCE) {
    return 'horizontal';
  }

  if (y > x && y > MIN_DISTANCE) {
    return 'vertical';
  }

  return '';
}

var calcWidth = Math.min(window.innerWidth, 750); // const halfWidth = calcWidth / 2;

var Carousel =
/*#__PURE__*/
function (_Component) {
  _inherits(Carousel, _Component);

  function Carousel() {
    _classCallCheck(this, Carousel);

    return _possibleConstructorReturn(this, _getPrototypeOf(Carousel).apply(this, arguments));
  }

  _createClass(Carousel, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        activeIndex: 0,
        // loop为true时：-1 ~ list.length
        curIndex: 0,
        animating: false,
        autoplay: true,
        delay: 3000,
        delta: '0',
        height: 0,
        list: [],
        loop: true,
        showIndicator: true,
        speedThreshold: 0.25,
        touchable: true,
        title: ''
      };
    }
  }, {
    key: "inited",
    value: function inited() {
      if (this.data.get('count') < 2) {
        this.data.set('touchable', false);
        this.data.set('loop', false);
      }
    }
  }, {
    key: "attached",
    value: function attached() {
      this.autoplay();
    }
  }, {
    key: "disposed",
    value: function disposed() {
      this.stopAutoplay();
    }
  }, {
    key: "handleItemClick",
    value: function handleItemClick(item, index) {
      var _this$data$get = this.data.get(),
          list = _this$data$get.list,
          listData = _this$data$get.listData;

      this.fire('item-click', {
        item: item,
        index: list.length === listData.length ? index : index - 1
      });
    }
  }, {
    key: "handleTouchStart",
    value: function handleTouchStart(e) {
      if (!this.touchable || e.changedTouches.length > 1) {
        return;
      }

      this.stopAutoplay();
      this.resetTouchData();
      this.swiping = true;
      this.fixIndex();
      this.data.set('animating', false);
      var touch = e.touches[0];
      Object.assign(this.touchData, {
        startX: touch.clientX,
        startY: touch.clientY,
        startTime: +new Date()
      });
    }
  }, {
    key: "handleTouchMove",
    value: function handleTouchMove(e) {
      if (!this.touchable || !this.swiping) {
        return;
      }

      var _this$data$get2 = this.data.get(),
          activeIndex = _this$data$get2.activeIndex,
          loop = _this$data$get2.loop,
          count = _this$data$get2.count;

      var touch = e.touches[0];
      var deltaX = touch.clientX - this.touchData.startX;
      var deltaY = touch.clientY - this.touchData.startY;
      var target = {
        deltaX: deltaX,
        deltaY: deltaY,
        offsetX: Math.abs(deltaX),
        offsetY: Math.abs(deltaY)
      };
      target.direction = this.touchData.direction || getDirection(target.offsetX, target.offsetY);

      if (target.direction === 'horizontal') {
        e.preventDefault();

        if (!loop && (activeIndex === 0 && deltaX > 0 || activeIndex === count - 1 && deltaX < 0)) {
          this.swiping = false;
        } else {
          var delta = (deltaX - calcWidth * this.activeIndex) / calcWidth * 100;
          this.data.set('delta', "".concat(delta, "%"));
        }
      }

      Object.assign(this.touchData, target);
    }
  }, {
    key: "handleTouchEnd",
    value: function handleTouchEnd() {
      if (!this.touchable || !this.swiping) {
        return;
      }

      if (this.touchData.direction === 'horizontal') {
        var index = this.activeIndex;
        var speedThreshold = this.data.get('speedThreshold');
        var speed = this.touchData.offsetX / (+new Date() - this.touchData.startTime);

        if (this.touchData.offsetX >= calcWidth / 5 || speed >= speedThreshold) {
          this.touchData.deltaX > 0 ? --index : ++index;
        }

        this.moveTo(index);
      }

      this.swiping = false;
      this.autoplay();
    }
  }, {
    key: "moveTo",
    value: function moveTo(index) {
      var immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var delta = -index * 100;
      this.data.set('animating', !immediate);
      this.data.set('activeIndex', index);
      this.data.set('delta', delta ? "".concat(delta, "%") : '0');

      var _this$data$get3 = this.data.get(),
          count = _this$data$get3.count,
          curIndex = _this$data$get3.curIndex;

      if (index !== curIndex) {
        if (index > count - 1) {
          index = 0;
        }

        if (index < 0) {
          index = count - 1;
        }

        this.fire('change', {
          from: curIndex,
          to: index
        });
        this.data.set('curIndex', index);
      }
    }
  }, {
    key: "autoplay",
    value: function autoplay() {
      var _this = this;

      var _this$data$get4 = this.data.get(),
          autoplay = _this$data$get4.autoplay,
          delay = _this$data$get4.delay,
          loop = _this$data$get4.loop;

      if (!autoplay || !loop) {
        return;
      }

      this.stopAutoplay();
      this.interval = setInterval(function () {
        _this.moveTo(_this.activeIndex + 1);
      }, delay);
    }
  }, {
    key: "stopAutoplay",
    value: function stopAutoplay() {
      this.interval && clearInterval(this.interval);
    }
  }, {
    key: "resetTouchData",
    value: function resetTouchData() {
      this.touchData = Object.assign({}, initTouchData);
    }
  }, {
    key: "fixIndex",
    value: function fixIndex() {
      var _this$data$get5 = this.data.get(),
          count = _this$data$get5.count,
          activeIndex = _this$data$get5.activeIndex;

      if (activeIndex >= count) {
        activeIndex = 0;
      } else if (activeIndex <= -1) {
        activeIndex = count - 1;
      }

      this.data.set('animating', false);
      this.moveTo(activeIndex, true);
    }
  }, {
    key: "activeIndex",
    get: function get() {
      return this.data.get('activeIndex');
    }
  }, {
    key: "touchable",
    get: function get() {
      return this.data.get('touchable');
    }
  }]);

  return Carousel;
}(_san.Component);

exports.default = Carousel;

_defineProperty(Carousel, "template",
/*html*/
"\n        <div s-ref=\"carousel\"\n            class=\"".concat(prefixCls, "-wrap\"\n            style=\"{{wrapStyle}}\"\n            on-touchstart=\"handleTouchStart\"\n            on-touchmove=\"handleTouchMove\"\n            on-touchend=\"handleTouchEnd\"\n        >\n            <div\n                class=\"{{calcClass}}\"\n                style=\"{{calcStyle}}\"\n                on-transitionend=\"fixIndex\"\n            >\n                <div\n                    s-for=\"item, index in listData\"\n                    class=\"").concat(prefixCls, "-item\"\n                    on-click=\"handleItemClick(item, index)\"\n                >\n                    <s-image\n                        size=\"full\"\n                        url=\"{{item.imgSrc}}\"\n                    />\n                </div>\n            </div>\n            <slot name=\"info\">\n                <div class=\"{{infoClass}}\">\n                    <div s-if=\"title\" class=\"").concat(prefixCls, "-mask\"/>\n                    <div s-if=\"title\" class=\"").concat(prefixCls, "-title\">{{title}}</div>\n                    <s-indicator\n                        s-if=\"showIndicator\"\n                        index=\"{{curIndex}}\"\n                        count=\"{{count}}\"\n                        type=\"{{indicatorType}}\"\n                    />\n                </div>\n            </slot>\n        </div>\n    "));

_defineProperty(Carousel, "components", {
  's-image': _image.default,
  's-indicator': _indicator.default
});

_defineProperty(Carousel, "dataTypes", {
  activeIndex: _san.DataTypes.number,
  curIndex: _san.DataTypes.number,
  animating: _san.DataTypes.bool,
  autoplay: _san.DataTypes.bool,
  delay: _san.DataTypes.number,
  delta: _san.DataTypes.string,
  height: _san.DataTypes.number,
  indicatorType: _san.DataTypes.oneOf(['dot', 'num']),
  indicatorPlacement: _san.DataTypes.oneOf(['left', 'center', 'right']),
  list: _san.DataTypes.array,
  loop: _san.DataTypes.bool,
  showIndicator: _san.DataTypes.bool,
  speedThreshold: _san.DataTypes.number,
  touchable: _san.DataTypes.bool,
  title: _san.DataTypes.string
});

_defineProperty(Carousel, "computed", {
  wrapStyle: function wrapStyle() {
    var height = this.data.get('height');
    return _defineProperty({}, 'padding-top', height > 0 && "".concat(height / 12.42, "%"));
  },
  calcStyle: function calcStyle() {
    var _ref2;

    var delta = this.data.get('delta');
    var transform = "translateX(".concat(delta, ") scale(1)");
    return _ref2 = {}, _defineProperty(_ref2, '-webkit-transform', transform), _defineProperty(_ref2, 'transform', transform), _ref2;
  },
  calcClass: function calcClass() {
    var animating = this.data.get('animating');
    var loop = this.data.get('loop');
    return [prefixCls, animating && "".concat(prefixCls, "-animate"), loop && "".concat(prefixCls, "-loop")].filter(function (c) {
      return c;
    });
  },
  infoClass: function infoClass() {
    var title = this.data.get('title');
    var placement = this.data.get('indicatorPlacement');
    return ["".concat(prefixCls, "-info"), !!title && "".concat(prefixCls, "-with-title"), !title && placement && "align-".concat(placement)].filter(function (c) {
      return c;
    });
  },
  count: function count() {
    return this.data.get('list.length') || 0;
  },
  listData: function listData() {
    var list = this.data.get('list') || [];
    var loop = this.data.get('loop');
    return list.length && loop ? [list[list.length - 1]].concat(_toConsumableArray(list), [list[0]]) : list;
  }
});