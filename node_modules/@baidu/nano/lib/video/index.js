"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

require("../assets/svg/v-play.svg");

require("../assets/svg/v-pause.svg");

require("../assets/svg/g-refresh.svg");

require("../assets/svg/v-voice.svg");

require("../assets/svg/v-mute.svg");

require("../assets/svg/v-fullscreen.svg");

var _san = require("san");

var _icon = _interopRequireDefault(require("../icon"));

var _slider = _interopRequireDefault(require("../slider"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-video';

var pad = function pad(val) {
  val = Math.floor(val);

  if (val < 10) {
    return '0' + val;
  }

  return val + '';
};

var Video =
/*#__PURE__*/
function (_Component) {
  _inherits(Video, _Component);

  function Video() {
    _classCallCheck(this, Video);

    return _possibleConstructorReturn(this, _getPrototypeOf(Video).apply(this, arguments));
  }

  _createClass(Video, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        name: 'video',
        muted: true,
        controlsShow: true,
        currentTime: 0,
        duration: 0,
        videoStatus: 'paused',
        sources: [],
        poster: ''
      };
    }
  }, {
    key: "inited",
    value: function inited() {
      var sources = this.data.get('sources');

      if (!Array.isArray(sources)) {
        this.data.set('sources', [sources]);
      }
    }
  }, {
    key: "attached",
    value: function attached() {
      this.video = this.ref('video');
      this.data.set('muted', this.video.muted);
    }
  }, {
    key: "handleSound",
    value: function handleSound(e) {
      e && e.stopPropagation();
      this.video.muted = !this.video.muted;
      this.data.set('muted', this.video.muted);
    }
  }, {
    key: "handleSliderChange",
    value: function handleSliderChange(value) {
      this.data.set('currentTime', value);
      this.video.currentTime = value;
    }
  }, {
    key: "playVideo",
    value: function playVideo() {
      this.video.play();
    }
  }, {
    key: "pauseVideo",
    value: function pauseVideo() {
      this.video.pause();
    }
  }, {
    key: "replayVideo",
    value: function replayVideo(e) {
      e && e.stopPropagation();
      this.video.currentTime = 0;
      this.playVideo();
      this.fire('replayClick');
    }
  }, {
    key: "setVideoLoop",
    value: function setVideoLoop(loop) {
      this.video.loop = loop;
    }
  }, {
    key: "setPlaySpeed",
    value: function setPlaySpeed(speed) {
      this.video.playbackRate = speed;
    }
  }, {
    key: "handleControls",
    value: function handleControls() {
      var _this = this;

      var controlsShow = this.data.get('controlsShow');
      this.data.set('controlsShow', !controlsShow);

      if (this.contrlHideTimer) {
        clearTimeout(this.contrlHideTimer);
      }

      if (!controlsShow) {
        this.contrlHideTimer = setTimeout(function () {
          _this.data.set('controlsShow', false);

          _this.contrlHideTimer = null;
        }, 5000);
      }
    }
  }, {
    key: "handlePlayClick",
    value: function handlePlayClick(e) {
      e && e.stopPropagation();
      this.playVideo();
      this.fire('playClick');
    }
  }, {
    key: "handlePauseClick",
    value: function handlePauseClick(e) {
      e && e.stopPropagation();
      this.pauseVideo();
      this.fire('pauseClick');
    }
  }, {
    key: "handleClick",
    value: function handleClick(e) {
      this.fire('click', e);
    }
  }, {
    key: "handlePlaying",
    value: function handlePlaying(e) {
      this.data.set('videoStatus', 'playing');
      this.data.set('controlsShow', false);
      this.fire('playing', e);
    }
  }, {
    key: "handleCanplay",
    value: function handleCanplay(e) {
      this.data.set('duration', parseInt(this.video.duration, 10));
      this.fire('canplay', e);
    }
  }, {
    key: "handleTimeupdate",
    value: function handleTimeupdate(e) {
      this.data.set('currentTime', parseInt(this.video.currentTime, 10));
      this.fire('timeupdate', e);
    }
  }, {
    key: "handleFullScreen",
    value: function handleFullScreen() {
      if (this.video.requestFullscreen) {
        // 最新标准
        this.video.requestFullscreen();
      } else if (this.video.webkitRequestFullScreen) {
        // 安卓
        this.video.webkitRequestFullScreen();
      } else {
        // ios
        this.video.webkitEnterFullScreen();
      }
    }
  }, {
    key: "handlePause",
    value: function handlePause(e) {
      this.data.set('videoStatus', 'paused');
      this.fire('pause', e);
    }
  }, {
    key: "handleEnded",
    value: function handleEnded(e) {
      this.data.set('videoStatus', 'ended');
      this.fire('ended', e);
    }
  }]);

  return Video;
}(_san.Component);

exports.default = Video;

_defineProperty(Video, "template",
/*html*/
"\n        <div class=\"".concat(prefixCls, "\" on-click=\"handleControls\">\n            <video s-ref=\"video\"\n                class=\"").concat(prefixCls, "-video\"\n                playsinline\n                webkit-playsinline\n                x5-video-player-type=\"h5-page\"\n                x5-playsinline\n                x5-video-player-fullscreen=\"true\"\n                x5-video-orientation=\"portraint\"\n                x-webkit-airplay=\"true\"\n                t7-video-player-type=\"h5\"\n                poster=\"{{poster}}\"\n                controlsList=\"nodownload\"\n                on-playing=\"handlePlaying\"\n                on-canplay=\"handleCanplay\"\n                on-pause=\"handlePause\"\n                on-timeupdate=\"handleTimeupdate\"\n                on-click=\"handleClick\"\n                on-ended=\"handleEnded\"\n            >\n                <source s-for=\"source in sources\" src=\"{{source.src}}\" type=\"{{source.type}}\"/>\n            </video>\n            <div class=\"").concat(prefixCls, "-edit ").concat(prefixCls, "-play\"\n                on-click=\"handlePlayClick\"\n                s-if=\"videoStatus === 'paused'\">\n                <s-icon\n                    color=\"#ffffff\"\n                    type=\"v-play\"\n                    size=\"{{72}}\"\n                />\n            </div>\n            <div class=\"").concat(prefixCls, "-edit ").concat(prefixCls, "-pause\"\n                on-click=\"handlePauseClick\"\n                s-if=\"videoStatus === 'playing' && controlsShow\">\n                <s-icon\n                    color=\"#ffffff\"\n                    type=\"v-pause\"\n                    size=\"{{72}}\"\n                />\n            </div>\n            <div class=\"").concat(prefixCls, "-edit ").concat(prefixCls, "-replay\" on-click=\"replayVideo\" s-if=\"videoStatus === 'ended'\">\n                <s-icon\n                    color=\"#ffffff\"\n                    type=\"g-refresh\"\n                    size=\"{{60}}\"\n                />\n            </div>\n            <div class=\"").concat(prefixCls, "-control\" s-if=\"controlsShow && duration\">\n                <button class=\"").concat(prefixCls, "-control-sound\" on-click=\"handleSound\">\n                    <s-icon\n                        s-if=\"!muted\"\n                        color=\"#ffffff\"\n                        size=\"{{66}}\"\n                        type=\"v-voice\"\n                    />\n                    <s-icon\n                        s-if=\"muted\"\n                        color=\"#ffffff\"\n                        size=\"{{66}}\"\n                        type=\"v-mute\"\n                    />\n                </button>\n                <div class=\"").concat(prefixCls, "-control-slider\">\n                    <s-slider value=\"{{currentTime}}\" max=\"{{duration || 100}}\" on-change=\"handleSliderChange\">\n                        <div slot=\"lead\" class=\"s-slider-lead\">{{currentTime | dateFormat}}</div>\n                        <div slot=\"button\" class=\"s-slider-button\"/>\n                        <div slot=\"tail\" class=\"s-slider-tail\">{{duration | dateFormat}}</div>\n                    </s-slider>\n                </div>\n                <button class=\"").concat(prefixCls, "-control-screen\" on-click=\"handleFullScreen\">\n                    <s-icon\n                        color=\"#ffffff\"\n                        size=\"{{66}}\"\n                        type=\"v-fullscreen\"\n                    />\n                </button>\n            </div>\n        </div>\n    "));

_defineProperty(Video, "components", {
  's-icon': _icon.default,
  's-slider': _slider.default
});

_defineProperty(Video, "dataTypes", {
  autoplay: _san.DataTypes.bool,
  poster: _san.DataTypes.string,
  sources: _san.DataTypes.oneOfType([_san.DataTypes.array, _san.DataTypes.object])
});

_defineProperty(Video, "filters", {
  dateFormat: function dateFormat(sec) {
    var min = 0;
    min = Math.floor(sec / 60);
    sec = sec - min * 60;
    return pad(min) + ':' + pad(sec);
  }
});