"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

require("../assets/svg/new-right.svg");

var _san = require("san");

var _icon = _interopRequireDefault(require("../icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-scroll';

var Scroll =
/*#__PURE__*/
function (_Component) {
  _inherits(Scroll, _Component);

  function Scroll() {
    _classCallCheck(this, Scroll);

    return _possibleConstructorReturn(this, _getPrototypeOf(Scroll).apply(this, arguments));
  }

  _createClass(Scroll, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        title: '',
        showHeader: false,
        showMore: false
      };
    }
  }, {
    key: "handleMoreClick",
    value: function handleMoreClick(e) {
      e.stopPropagation();
      this.fire('more-click', e);
    }
  }]);

  return Scroll;
}(_san.Component);

exports.default = Scroll;

_defineProperty(Scroll, "template",
/*html*/
"\n        <div class=\"".concat(prefixCls, "-wrap\">\n            <div s-if=\"showHead || title\" class=\"").concat(prefixCls, "-header\">\n                <slot name=\"header\">\n                    <div s-if=\"title\" class=\"").concat(prefixCls, "-title\">{{title}}</div>\n                    <div s-if=\"showMore\" class=\"").concat(prefixCls, "-more\" on-click=\"handleMoreClick\">\n                        \u66F4\u591A<s-icon type=\"new-right\"/>\n                    </div>\n                </slot>\n            </div>\n            <div class=\"").concat(prefixCls, "\">\n                <div class=\"").concat(prefixCls, "-container\"><slot/></div>\n                <div class=\"").concat(prefixCls, "-placeholder\"/>\n            </div>\n        </div>\n    "));

_defineProperty(Scroll, "components", {
  's-icon': _icon.default
});

_defineProperty(Scroll, "dataTypes", {
  showHead: _san.DataTypes.bool,
  showMore: _san.DataTypes.bool,
  title: _san.DataTypes.string
});