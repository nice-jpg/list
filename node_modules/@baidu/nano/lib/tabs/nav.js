"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _san = require("san");

var _tab = _interopRequireDefault(require("./tab"));

var _raf = require("../utils/raf");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-tabs';

var Nav =
/*#__PURE__*/
function (_Component) {
  _inherits(Nav, _Component);

  function Nav() {
    _classCallCheck(this, Nav);

    return _possibleConstructorReturn(this, _getPrototypeOf(Nav).apply(this, arguments));
  }

  _createClass(Nav, [{
    key: "attached",
    // eslint-disable-next-line
    value: function attached() {
      var _this = this;

      this.$tabs = {};
      var owner = this.owner;
      owner.watch('activeIndex', function (index) {
        var curTab = _this.ref("tab-".concat(index));

        owner.fire('change', {
          activeIndex: index,
          name: curTab.data.get('name')
        });

        _this.scrollIntoView(); // 代码手动触发改变index


        _this.changeTabHandler(index);
      });
    }
  }, {
    key: "scrollIntoView",
    value: function scrollIntoView(immediate) {
      var owner = this.owner;

      var _owner$data$get = owner.data.get(),
          activeIndex = _owner$data$get.activeIndex,
          scrollable = _owner$data$get.scrollable;

      if (!scrollable || !this.ref("tab-".concat(activeIndex))) {
        return;
      }

      var $curTab = this.$tabs[activeIndex].el;
      var $scroll = owner.ref('scroll');
      var to = $curTab.offsetLeft - (this.el.offsetWidth - $curTab.offsetWidth) / 2;

      if (immediate) {
        $scroll.scrollLeft = to;
      } else {
        this.scrollLeftTo($scroll, to);
      }
    }
  }, {
    key: "scrollLeftTo",
    value: function scrollLeftTo(el, to) {
      var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.2;
      var count = 0;
      var from = el.scrollLeft;
      var frames = duration === 0 ? 1 : Math.round(duration * 1000 / 16);

      function animate() {
        el.scrollLeft += (to - from) / frames;

        if (++count < frames) {
          (0, _raf.raf)(animate);
        }
      }

      animate();
    }
  }, {
    key: "tabClickHandler",
    value: function tabClickHandler(curActiveIndex, tab) {
      if (!tab.disabled) {
        this.owner.data.set('activeIndex', curActiveIndex);
        this.changeTabHandler(curActiveIndex);
      }

      this.owner.fire('tab-click', {
        activeIndex: curActiveIndex,
        disabled: tab.disabled,
        name: tab.name
      });
    }
  }, {
    key: "changeTabHandler",
    value: function changeTabHandler(curActiveIndex) {
      var _this2 = this;

      this.owner.$panels.forEach(function (panel, index) {
        var isActive = index === curActiveIndex;

        _this2.ref("tab-".concat(index)).data.set('active', isActive);

        panel.data.set('active', isActive);
      });
    }
  }, {
    key: "updateCursorStyle",
    value: function updateCursorStyle(offset) {
      if (!offset) {
        var activeIndex = this.owner.data.get('activeIndex');
        var $curTab = this.$tabs[activeIndex];
        offset = $curTab.offset;
      }

      this.data.set('cursorWidth', offset.width);
      this.data.set('cursorOffsetX', offset.left);
    }
  }]);

  return Nav;
}(_san.Component);

exports.default = Nav;

_defineProperty(Nav, "template", "\n        <div class=\"".concat(prefixCls, "-nav\">\n            <s-tab\n                s-for=\"tab, index in tabs\"\n                s-ref=\"tab-{{index}}\"\n                active=\"{{tab.active}}\"\n                disabled=\"{{tab.disabled}}\"\n                name=\"{{tab.name}}\"\n                index=\"{{index}}\"\n                last=\"{{index === tabs.length - 1}}\"\n                on-click=\"native:tabClickHandler(index, tab)\"\n            />\n            <div s-if=\"type === 'line'\"\n                class=\"").concat(prefixCls, "-cursor\"\n                style=\"{{cursorStyle}}\"\n            />\n        </div>\n    "));

_defineProperty(Nav, "components", {
  's-tab': _tab.default
});

_defineProperty(Nav, "dataTypes", {
  color: _san.DataTypes.string,
  cursorOffsetX: _san.DataTypes.number,
  cursorWidth: _san.DataTypes.number,
  tabs: _san.DataTypes.array,
  type: _san.DataTypes.string
});

_defineProperty(Nav, "computed", {
  cursorStyle: function cursorStyle() {
    var x = this.data.get('cursorOffsetX');

    if (x === undefined) {
      return {
        display: 'none'
      };
    }

    var color = this.data.get('color');
    var width = this.data.get('cursorWidth') + 'px';
    var trans = "translate3d(".concat(x, "px, 0, 0)");
    return {
      'background-color': color,
      'transform': trans,
      '-webkit-transform': trans,
      width: width
    };
  }
});