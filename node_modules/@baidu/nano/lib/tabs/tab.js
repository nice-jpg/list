"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _san = require("san");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-tab';

var Tab =
/*#__PURE__*/
function (_Component) {
  _inherits(Tab, _Component);

  function Tab() {
    _classCallCheck(this, Tab);

    return _possibleConstructorReturn(this, _getPrototypeOf(Tab).apply(this, arguments));
  }

  _createClass(Tab, [{
    key: "attached",
    value: function attached() {
      var _this = this;

      var _this$data$get = this.data.get(),
          index = _this$data$get.index,
          last = _this$data$get.last;

      var owner = this.owner;
      owner.$tabs[index] = this; // 最后一个tab挂载之后的下一个时钟处理

      if (last) {
        this.owner.updateCursorStyle();
        this.owner.scrollIntoView(true);
      }

      this.watch('active', function (active) {
        if (active) {
          _this.owner.updateCursorStyle(_this.offset);
        }
      });
    }
  }, {
    key: "detached",
    value: function detached() {
      var index = this.data.get('index');
      this.owner.$tabs[index] = null;
    }
  }, {
    key: "offset",
    // eslint-disable-next-line
    get: function get() {
      var ret = {};
      var $node = this.ref('node');

      if ($node) {
        ret.width = $node.offsetWidth;
        ret.left = $node.offsetLeft;
      }

      return ret;
    }
  }]);

  return Tab;
}(_san.Component);

exports.default = Tab;

_defineProperty(Tab, "template",
/*html*/
"\n        <div class=\"{{tabClass}}\">\n            <span s-ref=\"node\">{{name}}</span>\n        </div>\n    ");

_defineProperty(Tab, "dataTypes", {
  active: _san.DataTypes.bool,
  disabled: _san.DataTypes.bool,
  name: _san.DataTypes.string,
  last: _san.DataTypes.bool
});

_defineProperty(Tab, "computed", {
  tabClass: function tabClass() {
    var active = this.data.get('active');
    var disabled = this.data.get('disabled');
    return [prefixCls, active && "".concat(prefixCls, "-active"), disabled && "".concat(prefixCls, "-disabled")].filter(function (c) {
      return c;
    });
  }
});