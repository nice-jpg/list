"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _san = require("san");

var _nav = _interopRequireDefault(require("./nav"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-tabs';

var Tabs =
/*#__PURE__*/
function (_Component) {
  _inherits(Tabs, _Component);

  function Tabs() {
    _classCallCheck(this, Tabs);

    return _possibleConstructorReturn(this, _getPrototypeOf(Tabs).apply(this, arguments));
  }

  _createClass(Tabs, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        activeIndex: 0,
        animated: false,
        // isSticky: false,
        scrollable: false,
        tabs: [],
        // top: 0,
        type: 'line'
      };
    }
  }, {
    key: "inited",
    value: function inited() {
      this.$panels = [];
    }
  }, {
    key: "getPanels",
    value: function getPanels() {
      var _this = this;

      var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var panels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      children.forEach(function (child) {
        if (child) {
          if (child.isTabPanel) {
            if (_this.data.get('activeIndex') === panels.length) {
              child.data.set('active', true);
            }

            panels.push(child);
          } else if (child.children && child.children.length) {
            _this.getPanels(child.children, panels);
          }
        }
      });
      return panels;
    }
  }, {
    key: "updateTabPanel",
    value: function updateTabPanel() {
      var panels = this.$panels = this.getPanels(this.children);
      var tabs = panels.map(function (panel) {
        return panel.data.get();
      });
      this.data.set('tabs', tabs);
    }
  }]);

  return Tabs;
}(_san.Component);

exports.default = Tabs;

_defineProperty(Tabs, "template",
/*html*/
"\n        <div class=\"{{wrapClass}}\">\n            <div class=\"".concat(prefixCls, "-wrap\">\n                <div s-if=\"scrollable\" s-ref=\"scroll\" class=\"").concat(prefixCls, "-scrollable\">\n                    <s-nav color=\"{{color}}\" tabs=\"{{tabs}}\" type=\"{{type}}\"/>\n                </div>\n                <s-nav s-else color=\"{{color}}\" tabs=\"{{tabs}}\" type=\"{{type}}\"/>\n                <div class=\"nav-right\">\n                    <div s-if=\"scrollable\" class=\"").concat(prefixCls, "-mask\"/>\n                    <slot name=\"nav-right\"/>\n                </div>\n                <div class=\"").concat(prefixCls, "-hairline\"/>\n            </div>\n            <div class=\"{{contentClass}}\">\n                <div s-if=\"animated\"\n                    class=\"").concat(prefixCls, "-track\"\n                    style=\"{{trackStyle}}\"\n                ><slot/></div>\n                <slot s-else/>\n            </div>\n        </div>\n    "));

_defineProperty(Tabs, "components", {
  's-nav': _nav.default
});

_defineProperty(Tabs, "dataTypes", {
  activeIndex: _san.DataTypes.number,
  animated: _san.DataTypes.bool,
  color: _san.DataTypes.string,
  scrollable: _san.DataTypes.bool,
  tabs: _san.DataTypes.array,
  type: _san.DataTypes.oneOf(['line', 'card'])
});

_defineProperty(Tabs, "computed", {
  wrapClass: function wrapClass() {
    var type = this.data.get('type');
    return [prefixCls, "".concat(prefixCls, "-").concat(type)];
  },
  contentClass: function contentClass() {
    var animated = this.data.get('animated');
    return ["".concat(prefixCls, "-content"), animated && "".concat(prefixCls, "-animated")].filter(function (c) {
      return c;
    });
  },
  trackStyle: function trackStyle() {
    var index = this.data.get('activeIndex');
    var x = index > 0 ? "-".concat(index, "00%") : 0;
    var trans = "translate3d(".concat(x, ", 0, 0)");
    return {
      'transform': trans,
      '-webkit-transform': trans
    };
  }
});

_defineProperty(Tabs, "messages", {
  's-tabs:updateTabPanel': function sTabsUpdateTabPanel() {
    this.updateTabPanel();
  }
});