"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _san = require("san");

var _cell = _interopRequireDefault(require("../cell"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-collapse-item';

var Item =
/*#__PURE__*/
function (_Component) {
  _inherits(Item, _Component);

  function Item() {
    _classCallCheck(this, Item);

    return _possibleConstructorReturn(this, _getPrototypeOf(Item).apply(this, arguments));
  }

  _createClass(Item, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        name: '',
        avatar: '',
        title: '',
        subtitle: '',
        helper: '',
        helperIcon: {},
        disabled: false
      };
    }
  }, {
    key: "inited",
    value: function inited() {
      var _this = this;

      var name = this.data.get('name');
      var _this$parentData = this.parentData,
          accordion = _this$parentData.accordion,
          value = _this$parentData.value;
      var expanded = value.indexOf(name) >= 0;
      var _this$sourceSlots$nam = this.sourceSlots.named,
          aside = _this$sourceSlots$nam.aside,
          content = _this$sourceSlots$nam.content,
          helper = _this$sourceSlots$nam.helper;
      this.data.set('expanded', expanded);
      this.data.set('hasAsideSlot', !!aside);
      this.data.set('hasContentSlot', !!content);
      this.data.set('hasHelperSlot', !!helper); // 监听value变化

      this.parentComponent.watch('value', function (value) {
        var expanded = accordion ? value === name : value.indexOf(name) >= 0;

        _this.data.set('expanded', expanded);

        _this.expand(expanded, true);
      });
    }
  }, {
    key: "attached",
    value: function attached() {
      this.expand(this.data.get('expanded'));
    }
  }, {
    key: "expand",
    value: function expand(expanded, animate) {
      var _this2 = this;

      var height = this.ref('content').offsetHeight + 'px';
      this.data.set('expanded', expanded);
      this.data.set('arrow', expanded ? 'up' : 'down');
      this.ref('panel').style.height = (expanded || animate) && height || 0;
      animate && this.nextTick(function () {
        _this2.data.set('panelStyle', {
          height: expanded ? height : 0
        });
      });
    }
  }, {
    key: "transitionEnd",
    value: function transitionEnd(expanded) {
      if (expanded) {
        this.ref('panel').style.height = '';
      }
    }
  }, {
    key: "handleTitleClick",
    value: function handleTitleClick() {
      if (this.data.get('disabled')) {
        return;
      }

      var _this$data$get = this.data.get(),
          name = _this$data$get.name,
          expanded = _this$data$get.expanded;

      var _this$parentData2 = this.parentData,
          accordion = _this$parentData2.accordion,
          value = _this$parentData2.value;

      if (accordion && name === value) {
        name = '';
      }

      this.parentComponent.switch(name, !expanded);
    }
  }, {
    key: "parentData",
    get: function get() {
      return this.parentComponent.data.get();
    }
  }]);

  return Item;
}(_san.Component);

exports.default = Item;

_defineProperty(Item, "template",
/*html*/
"\n        <div class=\"".concat(prefixCls, "\">\n            <s-cell class=\"{{headerClass}}\" s-bind=\"cellProps\" on-click=\"handleTitleClick\">\n                <slot name=\"aside\" slot=\"aside\"/>\n                <slot name=\"content\" slot=\"content\"/>\n                <slot name=\"helper\" slot=\"helper\"/>\n            </s-cell>\n            <div\n                s-ref=\"panel\"\n                class=\"").concat(prefixCls, "-panel\"\n                style=\"{{panelStyle}}\"\n                on-transitionend=\"transitionEnd(expanded)\"\n            >\n                <div s-ref=\"content\" class=\"").concat(prefixCls, "-content\">\n                    <slot/>\n                </div>\n            </div>\n            <div class=\"").concat(prefixCls, "-hairline\"/>\n        </div>\n    "));

_defineProperty(Item, "components", {
  's-cell': _cell.default
});

_defineProperty(Item, "dataTypes", {
  name: _san.DataTypes.string,
  disabled: _san.DataTypes.bool,
  avatar: _san.DataTypes.string,
  title: _san.DataTypes.string,
  subtitle: _san.DataTypes.string,
  helper: _san.DataTypes.string,
  helperIcon: _san.DataTypes.object
});

_defineProperty(Item, "computed", {
  headerClass: function headerClass() {
    var disabled = this.data.get('disabled');
    var expanded = this.data.get('expanded');
    return ["".concat(prefixCls, "-header"), disabled && "".concat(prefixCls, "-header-disabled"), expanded && "".concat(prefixCls, "-header-expanded")].filter(function (c) {
      return c;
    });
  },
  cellProps: function cellProps() {
    var data = this.data;
    var avatar = data.get('avatar');
    var title = data.get('title');
    var subtitle = data.get('subtitle');
    var helper = data.get('helper');
    var helperIcon = data.get('helperIcon');
    var clickable = !data.get('disabled');
    var hasAsideSlot = data.get('hasAsideSlot');
    var hasContentSlot = data.get('hasContentSlot');
    var hasHelperSlot = data.get('hasHelperSlot');
    var expanded = this.data.get('expanded');
    var arrow = expanded ? 'up' : 'down';
    var hairline = expanded;
    return {
      avatar: avatar,
      title: title,
      subtitle: subtitle,
      helper: helper,
      helperIcon: helperIcon,
      arrow: arrow,
      clickable: clickable,
      hairline: hairline,
      hasAsideSlot: hasAsideSlot,
      hasContentSlot: hasContentSlot,
      hasHelperSlot: hasHelperSlot
    };
  }
});