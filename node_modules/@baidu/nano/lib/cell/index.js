"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

require("../assets/svg/new-right.svg");

require("../assets/svg/new-checkmark.svg");

var _san = require("san");

var _avatar = _interopRequireDefault(require("../avatar"));

var _icon = _interopRequireDefault(require("../icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-cell';

var Cell =
/*#__PURE__*/
function (_Component) {
  _inherits(Cell, _Component);

  function Cell() {
    _classCallCheck(this, Cell);

    return _possibleConstructorReturn(this, _getPrototypeOf(Cell).apply(this, arguments));
  }

  _createClass(Cell, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        avatar: '',
        title: '',
        subtitle: '',
        helper: '',
        arrow: false,
        clickable: true,
        hairline: true,
        selected: false
      };
    }
  }, {
    key: "inited",
    value: function inited() {
      var _this$data$get = this.data.get(),
          selected = _this$data$get.selected,
          hasAsideSlot = _this$data$get.hasAsideSlot,
          hasContentSlot = _this$data$get.hasContentSlot,
          hasHelperSlot = _this$data$get.hasHelperSlot;

      var _this$sourceSlots$nam = this.sourceSlots.named,
          aside = _this$sourceSlots$nam.aside,
          content = _this$sourceSlots$nam.content,
          helper = _this$sourceSlots$nam.helper;

      if (selected) {
        this.data.set('helperIcon', {
          type: 'new-checkmark',
          color: '#3388ff',
          size: 'sm'
        });
      }

      this.data.set('hasAsideSlot', hasAsideSlot && !!aside);
      this.data.set('hasContentSlot', hasContentSlot && !!content);
      this.data.set('hasHelperSlot', hasHelperSlot && !!helper);
    }
  }, {
    key: "handleClick",
    value: function handleClick() {
      var data = this.data.get();
      data.clickable && this.fire('click', data);
    }
  }]);

  return Cell;
}(_san.Component);

exports.default = Cell;

_defineProperty(Cell, "template",
/*html*/
"\n        <div class=\"{{wrapClass}}\" on-click=\"handleClick\">\n            <slot name=\"aside\"/>\n            <s-avatar\n                s-if=\"!hasAsideSlot && avatar\"\n                class=\"".concat(prefixCls, "-avatar\"\n                size=\"lg\"\n                src=\"{{avatar}}\"\n            />\n            <div class=\"").concat(prefixCls, "-content\">\n                <slot name=\"content\"/>\n                <template s-if=\"!hasContentSlot\">\n                    <div class=\"").concat(prefixCls, "-title\" s-if=\"title\">{{title}}</div>\n                    <div s-if=\"subtitle\" class=\"").concat(prefixCls, "-subtitle\">{{subtitle}}</div>\n                </template>\n            </div>\n            <div class=\"").concat(prefixCls, "-helper\">\n                <slot name=\"helper\"/>\n                <template s-if=\"!hasHelperSlot\">\n                    <span>{{helper}}</span>\n                    <s-icon\n                        s-if=\"arrow\"\n                        class=\"").concat(prefixCls, "-arrow {{arrow}}\"\n                        type=\"new-right\"\n                    />\n                    <s-icon\n                        s-elif=\"helperIcon && helperIcon.type\"\n                        size=\"{{helperIcon.size || 'xs'}}\"\n                        color=\"{{helperIcon.color || ''}}\"\n                        type=\"{{helperIcon.type}}\"\n                    />\n                </template>\n            </div>\n            <div s-if=\"hairline\" class=\"").concat(prefixCls, "-hairline\"/>\n        </div>\n    "));

_defineProperty(Cell, "components", {
  's-avatar': _avatar.default,
  's-icon': _icon.default
});

_defineProperty(Cell, "dataTypes", {
  avatar: _san.DataTypes.string,
  title: _san.DataTypes.string,
  subtitle: _san.DataTypes.string,
  helper: _san.DataTypes.string,
  arrow: _san.DataTypes.oneOf([false, 'right', 'up', 'down']),
  clickable: _san.DataTypes.bool,
  hairline: _san.DataTypes.bool,
  selected: _san.DataTypes.bool
});

_defineProperty(Cell, "computed", {
  wrapClass: function wrapClass() {
    var data = this.data;
    var avatar = data.get('avatar');
    var hairline = data.get('hairline');
    var clickable = data.get('clickable');
    var title = data.get('title');
    var subtitle = data.get('subtitle');
    return [prefixCls, !hairline && "".concat(prefixCls, "-borderless"), clickable && "".concat(prefixCls, "-clickable"), (avatar || title && subtitle) && "".concat(prefixCls, "-higher")].filter(function (c) {
      return c;
    });
  }
});