"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

var _san = require("san");

var _isNumeric = _interopRequireDefault(require("../utils/is-numeric"));

var _pr2rem = _interopRequireDefault(require("../utils/pr2rem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-avatar';
var sizeType = {
  xs: 84,
  sm: 105,
  md: 129,
  lg: 156,
  xl: 192,
  xxl: 219
};

var format = function format(size) {
  if ((0, _isNumeric.default)(size)) {
    var type = 'xs';

    switch (true) {
      case size >= sizeType.xxl:
        type = 'xxl';
        break;

      case size >= sizeType.xl:
        type = 'xl';
        break;

      case size >= sizeType.lg:
        type = 'lg';
        break;

      case size >= sizeType.md:
        type = 'md';
        break;

      case size >= sizeType.sm:
        type = 'sm';
        break;
    }

    return type;
  }

  return size;
};

var Avatar =
/*#__PURE__*/
function (_Component) {
  _inherits(Avatar, _Component);

  function Avatar() {
    _classCallCheck(this, Avatar);

    return _possibleConstructorReturn(this, _getPrototypeOf(Avatar).apply(this, arguments));
  }

  _createClass(Avatar, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        badge: false,
        hairline: true,
        shape: 'circle',
        size: 'md',
        src: '',
        vip: ''
      };
    }
  }, {
    key: "inited",
    value: function inited() {
      var _this = this;

      var data = this.data;
      var src = this.data.get('src');
      var img = new Image();

      img.onload = function () {
        data.set('loaded', true);
      };

      img.onerror = img.onabort = function (e) {
        _this.fire('error', e);
      };

      img.src = src;
    }
  }]);

  return Avatar;
}(_san.Component);

exports.default = Avatar;

_defineProperty(Avatar, "template",
/*html*/
"\n        <div class=\"{{wrapClass}}\" style=\"{{wrapStyle}}\">\n            <div class=\"".concat(prefixCls, "-placeholder\"/>\n            <div class=\"").concat(prefixCls, "-img\" style=\"{{imgStyle}}\"/>\n            <div s-if=\"shape !== 'square' && !!vip\" class=\"").concat(prefixCls, "-vip vip-{{vip}}\"/>\n            <span s-if=\"badge\" class=\"").concat(prefixCls, "-badge\"/>\n        </div>\n    "));

_defineProperty(Avatar, "dataTypes", {
  badge: _san.DataTypes.bool,
  hairline: _san.DataTypes.bool,
  shape: _san.DataTypes.oneOf(['circle', 'square']),
  size: _san.DataTypes.oneOfType([_san.DataTypes.number, _san.DataTypes.oneOf(Object.keys(sizeType))]),
  src: _san.DataTypes.string,
  vip: _san.DataTypes.oneOf(['', '0', '1', '2', '3', '10', 'swan', 'select', 'unselect'])
});

_defineProperty(Avatar, "computed", {
  wrapClass: function wrapClass() {
    var hairline = this.data.get('hairline');
    var shape = this.data.get('shape');
    var size = this.data.get('size');
    return [prefixCls, "".concat(prefixCls, "-").concat(shape), "".concat(prefixCls, "-").concat(format(size)), hairline && "".concat(prefixCls, "-hairline")].filter(function (c) {
      return c;
    });
  },
  wrapStyle: function wrapStyle() {
    var ret = {};
    var size = this.data.get('size');

    if ((0, _isNumeric.default)(size)) {
      var width = "".concat((0, _pr2rem.default)(size), "rem");
      ret = {
        width: width,
        height: width
      };
    }

    return ret;
  },
  imgStyle: function imgStyle() {
    var data = this.data;
    var src = data.get('src');
    var loaded = data.get('loaded');

    if (loaded && src) {
      return {
        'background-image': "url(".concat(src, ")")
      };
    }
  }
});

Avatar.sizeType = sizeType;