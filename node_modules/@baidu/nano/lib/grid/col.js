"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _san = require("san");

var _pr2rem = _interopRequireDefault(require("../utils/pr2rem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-col';

var Col =
/*#__PURE__*/
function (_Component) {
  _inherits(Col, _Component);

  function Col() {
    _classCallCheck(this, Col);

    return _possibleConstructorReturn(this, _getPrototypeOf(Col).apply(this, arguments));
  }

  _createClass(Col, [{
    key: "inited",
    // eslint-disable-next-line
    value: function inited() {
      var gutter = this.parentComponent.data.get('gutter') || 0;
      this.data.set('gutter', gutter);
    }
  }]);

  return Col;
}(_san.Component);

exports.default = Col;

_defineProperty(Col, "template",
/*html*/
"\n        <div class=\"{{colClass}}\" style=\"{{colStyle}}\">\n            <slot/>\n        </div>\n    ");

_defineProperty(Col, "dataTypes", {
  span: _san.DataTypes.oneOfType([_san.DataTypes.string, _san.DataTypes.number]),
  offset: _san.DataTypes.oneOfType([_san.DataTypes.string, _san.DataTypes.number])
});

_defineProperty(Col, "computed", {
  colClass: function colClass() {
    var data = this.data;
    var span = Math.floor(data.get('span'));
    var offset = Math.floor(data.get('offset'));
    return [prefixCls, span > 0 && span <= 12 && "".concat(prefixCls, "-").concat(span), offset > 0 && offset < 12 && "offset-".concat(offset)].filter(function (c) {
      return c;
    });
  },
  colStyle: function colStyle() {
    var gutter = this.data.get('gutter');
    var padding = "".concat((0, _pr2rem.default)(gutter / 2), "rem");

    if (gutter > 0) {
      return {
        'padding-left': padding,
        'padding-right': padding
      };
    }
  }
});