"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("./style/index.less");

var _san = require("san");

var _isNumeric = _interopRequireDefault(require("../utils/is-numeric"));

var _pr2rem = _interopRequireDefault(require("../utils/pr2rem"));

var _icon = _interopRequireDefault(require("../icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var prefixCls = 's-button';

var Button =
/*#__PURE__*/
function (_Component) {
  _inherits(Button, _Component);

  function Button() {
    _classCallCheck(this, Button);

    return _possibleConstructorReturn(this, _getPrototypeOf(Button).apply(this, arguments));
  }

  _createClass(Button, [{
    key: "initData",
    // eslint-disable-next-line
    value: function initData() {
      return {
        block: false,
        disabled: false,
        ghost: false,
        hairline: false,
        icon: '',
        loading: false,
        shape: '',
        size: 'md',
        text: '',
        type: 'default'
      };
    }
  }, {
    key: "handleClick",
    value: function handleClick(e) {
      e.stopPropagation();
      var context = this.data.get();
      var disabled = context.disabled,
          loading = context.loading;

      if (!disabled && !loading) {
        this.fire('click', context);
      }
    }
  }, {
    key: "handleTouchstart",
    value: function handleTouchstart(e) {
      e.stopPropagation();
      this.fire('touchstart', this.data.get());
    }
  }]);

  return Button;
}(_san.Component);

exports.default = Button;

_defineProperty(Button, "template",
/*html*/
"\n        <div\n            class=\"{{wrapClass}}\"\n            style=\"{{wrapStyle}}\"\n            on-click=\"handleClick\"\n            on-touchstart=\"handleTouchstart\"\n        >\n            <slot>\n                <s-icon s-if=\"icon\" class=\"icon\" type=\"{{icon}}\"/>\n                <div s-else class=\"spinner\"/>\n                <div s-if=\"text\" class=\"text\">{{text}}</div>\n            </slot>\n        </div>\n    ");

_defineProperty(Button, "components", {
  's-icon': _icon.default
});

_defineProperty(Button, "dataTypes", {
  block: _san.DataTypes.bool,
  color: _san.DataTypes.string,
  disabled: _san.DataTypes.bool,
  ghost: _san.DataTypes.bool,
  hairline: _san.DataTypes.bool,
  icon: _san.DataTypes.string,
  loading: _san.DataTypes.bool,
  shape: _san.DataTypes.oneOf(['', 'round', 'square']),
  size: _san.DataTypes.oneOf(['sm', 'md', 'lg']),
  text: _san.DataTypes.string,
  type: _san.DataTypes.oneOf(['primary', 'danger', 'default', 'weak']),
  width: _san.DataTypes.oneOfType([_san.DataTypes.number, _san.DataTypes.string]),
  height: _san.DataTypes.oneOfType([_san.DataTypes.number, _san.DataTypes.string])
});

_defineProperty(Button, "computed", {
  wrapClass: function wrapClass() {
    var data = this.data;
    var block = data.get('block');
    var color = data.get('color');
    var disabled = data.get('disabled');
    var ghost = data.get('ghost');
    var hairline = data.get('hairline');
    var loading = data.get('loading');
    var shape = data.get('shape');
    var size = data.get('size');
    var text = data.get('text');
    var type = color ? 'color' : data.get('type');
    return [prefixCls, "".concat(prefixCls, "-").concat(size), "".concat(prefixCls, "-").concat(type), block && "".concat(prefixCls, "-block"), disabled && "".concat(prefixCls, "-disabled"), ghost && "".concat(prefixCls, "-ghost"), hairline && "".concat(prefixCls, "-hairline"), loading && "".concat(prefixCls, "-loading"), !text && "".concat(prefixCls, "-notext"), !!shape && "".concat(prefixCls, "-").concat(shape)].filter(function (c) {
      return c;
    });
  },
  wrapStyle: function wrapStyle() {
    var ret = {};
    var data = this.data;
    var color = data.get('color');
    var width = data.get('width');
    var height = data.get('height');

    if (color) {
      ret.color = color;
    }

    if ((0, _isNumeric.default)(width)) {
      ret.width = "".concat((0, _pr2rem.default)(width), "rem");
    }

    if ((0, _isNumeric.default)(height)) {
      ret.height = "".concat((0, _pr2rem.default)(height), "rem");
    }

    return ret;
  }
});