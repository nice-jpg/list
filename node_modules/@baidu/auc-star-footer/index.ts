import {Component} from 'san';
import styles from './style.module.less';
import {aucStarFooter} from './types';
import {request} from '@baidu/auc-star-header/request';
import share from '@baidu/xbox/na/data/share';
import {WujiGrid} from '@baidu/wuji-san';
import {env} from '@baidu/auc-base/env';
import {jump} from "@baidu/auc-base/jump";
import boxx from '@baidu/auc-base/boxx';

const PRAISEAPI = 'https://ext.baidu.com/api/like/v1/like/receive';

export class aucArrow extends Component {
    static template: string = `
    <div class="{{styles.AucStarFooter}}">
        <wuji-row gutter="{{51}}" margin="0">
            <wuji-col span="{{4}}">
                <div class="{{styles.aucFooterItem}}" on-click="shareClick">
                    <div class="{{styles.icon}} {{styles.share}}"></div>
                    分享
                </div>
            </wuji-col>
            <wuji-col span="{{4}}">
                <div class="{{styles.aucFooterItem}}" on-click="commentClick">
                    <div class="{{styles.icon}} {{styles.comment}}"></div>
                    {{comment_num != 0 ? comment_num : '评论'}}
                </div>
            </wuji-col>
            <wuji-col span="{{4}}">
                <div class="{{styles.aucFooterItem}} {{praisedClass}}" on-click="praiseClick">
                    <div 
                        class="{{styles.icon}} {{praisedIconClass}}"
                        style="{{praiseIconUrl && praiseIconNoErr ? 'background-image:url(' + praiseIconUrl + ')' : ''}}"
                    ></div>
                    <img s-if="praiseIconUrl" class="{{styles.imgIcon}}" src="{{praiseIconUrl}}" on-error="iconError">
                    {{praisenum != 0 ? praisenum : ((icon_type === 'candle_dt_bar' || praiseStyle['icon_type'] === 'candle_general') ? '缅怀' : '赞')}}
                </div>
            </wuji-col>
        </wuji-row>
    </div>
    `;
    static components: object = {
        'wuji-col': WujiGrid.Col,
        'wuji-row': WujiGrid.Row
    };
    concernApi = null;

    static computed: object = {
        praisedIconClass() {
            let praisedClassName = '';
            const data = this.data;
            if (data.get('icon_type') === 'candle_dt_bar'  || this.data.get('praiseStyle.icon_type') === 'candle_general') {
                praisedClassName = +data.get('isliked') ? styles.candlePraised : styles.candlePraise; 
            } else {
                praisedClassName = +data.get('isliked') ? styles.praised : styles.praise;
            }
            return praisedClassName;
        },
        praisedClass(){
            if (+this.data.get('isliked')) {
                return (this.data.get('icon_type') === 'candle_dt_bar' || this.data.get('praiseStyle.icon_type') === 'candle_general')
                ? styles.reminiscenceLiked : styles.liked;
            }
        },
        praiseIconUrl() {
            let praiseIconUrl = '';
            const data = this.data;
            const praiseStyle = data.get('praiseStyle');
            if (!praiseStyle || JSON.stringify(data.get('boxPraseIconList')) === '{}') {
                return praiseIconUrl;
            }
            const iconType = praiseStyle ? praiseStyle['icon_type'] : '';
            let boxPraseIcon = data.get('boxPraseIconList') ? data.get('boxPraseIconList')[iconType] : false;
            const pageMode = data.get('pageMode') === 'day' ? 'default' : data.get('pageMode');
            if (boxPraseIcon) {
                boxPraseIcon = boxPraseIcon.boxIcon;
                praiseIconUrl = boxPraseIcon[+data.get('isliked') ? 'praise' : 'unPraise'][pageMode];
            }
            return praiseIconUrl;
        }
    };

    initData(): aucStarFooter {
        return {
            styles,
            link: '',
            title: '',
            imgurl: '',
            commentcmd: '',
            comment_num: 0,
            praisenum: 0,
            zanid: '', // 赞id
            isliked: 0, // 是否喜欢 1 喜欢
            icon_type: '',
            praisePosition: '',
            praiseFlag: true,
            praiseIconNoErr: true
        };
    }

    inited(): void {
        this.data.get('praiseStyle') && (this.data.set('praiseStyle', JSON.parse(this.data.get('praiseStyle')).normal));
    }

    attached(): void {
        if (JSON.stringify(this.data.get('boxPraseIconList')) !== '{}') {
            this.watch('isLiked', val =>{
                this.data.set('praiseIconNoErr', true);
            })
        }
    }

    shareClick(): void {
        let that = this;
        this.fire('log', 'dt_share_click');
        if (env.isBoxSeries|| env.isXiaoMiBaiPai || env.isMatrix) {
            share({
                mediaType: 'all',
                title: that.data.get('title'),
                content: that.data.get('title'),
                imageUrl: that.data.get('shareImageUrl'),
                iconUrl: that.data.get('shareImageUrl'),
                linkUrl: that.data.get('link'),
                link: that.data.get('link'),
                source: 'feednewsLand',
                type: 'url'
            }).then((res) => {
                console.log(res);
            })
        } else {
            this.fire('back-shoubai', '');
        }
    }

    commentClick(): void {
        this.fire('log', 'dt_comment_click');
        if (env.isBoxSeries|| env.isXiaoMiBaiPai || env.isMatrix) {
            const cmd = this.data.get('commentcmd');
            const link = this.data.get('link');
            jump({
                cmd,
                link
            })
        } else {
            this.fire('back-shoubai', '');
        }
    }

    praiseClick(event): void {
        if (!this.data.get('praiseFlag')) {
            return;
        }
        this.data.set('praiseFlag', false);
        let xy = this.getXY(event);
        this.data.set('praisePosition', `${xy.left}-${xy.top}-${xy.width}-${xy.height}`);

        this.fire('log', 'dt_praise_click');
        const islike = this.data.get('isliked');

        if (env.isBoxSeries || env.isXiaoMiBaiPai || env.isMatrix) {
            let params = {
                type: 'feed',
                op_type: !islike ? 'add' : 'cancel',
                sfrom: 'star',
                source: env.isBoxSeries ? 'star_feedlist_theme' : 'star_feedlist_theme_w',
                id: this.data.get('zanid')
            };
            request(PRAISEAPI, params).then((res) => {
                if (+res.errno === 0) {
                    if (!islike) {
                        // this.data.get('icon_type') !== 'candle_dt_bar' && 
                        if (!+this.data.get('praiseStyle.is_disable_animation')) {
                            this.pariseSuccAni();
                        }
                        this.data.set('isliked', 1);
                        this.data.set('praisenum', +this.data.get('praisenum') + 1);
                    } else {
                        this.data.set('isliked', 0);
                        let praisenum = +this.data.get('praisenum') - 1;
                        this.data.set('praisenum', praisenum < 0 ? 0 : praisenum);
                    }
                } else if (+res.errno === 202206) {
                    this.alreadyClickFunc();
                } else {
                    // 获取登录状态，未登录调起登录
                    // const isLogin = window.sortsData.isLogin;
                    // if (!isLogin) {
                        // this.userLogin();
                    // } else {
                        boxx.call('commonUI.showToast', {
                            type: '1',
                            message: '请求超时，请稍后重试'
                        });
                    // }
                }
                this.data.set('praiseFlag', true);
            });
        } else {
            this.fire('back-shoubai', '');
            this.data.set('praiseFlag', true);
        }
    }
    alreadyClickFunc = () => {
        this.data.set('isliked', 1);
        this.data.set('praisenum', +this.data.get('praisenum') + 1);
        boxx.call('commonUI.showToast', {
            type: '1',
            message: '您已赞过'
        });
    }
    // 点赞动画
    pariseSuccAni(): void {
        // 端能力获取动画支持能力，可用就可用
        boxx.call('praise.isAnimationAvailable', {
            source: 'h5_topic',
            ubc: {
                source: 'h5_topic',
            },
            success: (data) => {
                if (data && data.data && data.data.data) {
                    this.motionEvent();
                } else {
                    this.data.set('isliked', 1);
                }
            },
            fail: () => {
                this.data.set('isliked', 1);
            }
        });
    }

    // 点赞动画
    motionEvent(): void {
        let praisePosition = this.data.get('praisePosition');
        let zanid = this.data.get('zanid');
        let that = this;
        boxx.call('praise.motionEvent', {
            position: praisePosition,
            source: 'h5_topic',
            ubc: {
                source: 'topic'
            },
            isUped: '0',
            intercept: '1',
            type: '1',
            id: zanid,
            success: (data) => {
                // that.data.set('isliked', 1);
            },
            fail: (err) => {
                // that.data.set('isliked', 1);
            }
        })
        that.data.set('isliked', 1);
    }

    userLogin(): void {
        let that = this;
        if (env.isBoxSeries|| env.isXiaoMiBaiPai || env.isMatrix) {
            boxx.call('account.login', {
                loginType: 'fast',
                showThirdLogin: '1',
                loginSource: 'hudong_trusted',
                normalizeAccount: '1',
                success() {
                    that.praiseClick();
                },
                fail() {
                    boxx.call('commonUI.showToast', {
                        type: '1',
                        message: '登录失败'
                    });
                }
            });
        } else {
            window.location.href = '//wappass.baidu.com/passport/?login&u='
                + encodeURIComponent(window.location.href);
        }
    }

    getXY(event) {
        let position = event.target;
        let {left, top, width, height} = position.getBoundingClientRect();            
        const resultTop = top + position.offsetHeight * 0.1  + height / 2 - (this.data.get('isImmersive') && env.isAndroid ? this.data.get('statusBarHeight') : 3);
        return {
            left: parseInt(left + width / 2, 10),
            top: parseInt(resultTop, 10),
            height: parseInt(position.offsetHeight * 0.21, 10),
            width: parseInt(position.offsetWidth * 0.23, 10)
        };
    }
    iconError() {
        this.data.set('praiseIconNoErr', false);
    }
}

export default aucArrow;
