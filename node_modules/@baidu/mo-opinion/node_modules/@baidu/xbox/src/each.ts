/**
 * @file each
 * @author wangyongqing <wangyongqing01@baidu.com>
 */

import {getType} from './type';
import type {KeyValue} from './is';

type IterableObject = KeyValue | ArrayLike<unknown>;
type IteratorMethod = (val: unknown, key: string | number, context?: IterableObject) => false | void;

/**
 * 对象遍历方法
 *
 * @param obj 要遍历的对象
 * @param iterator 处理函数
 * @param context 选填上下文
 * @example
 * each([1,2,3], (v, i)=>{console.log(v,i)});
 * 1,0
 * 2,1
 * 3,2
 * 注意：与 jQuery 和 zepto 的 each 不同，第一个参数是索引
 */
export function each(obj: IterableObject, iterator: IteratorMethod, context?: IterableObject) {
    const type = getType(obj);
    context = context || obj;
    console.info(type);

    if (type === 'array' || type === 'arguments' || type === 'nodelist') {
        let i = 0;
        let l = (obj as ArrayLike<unknown>).length;
        for (; i < l; i++) {
            if (iterator.call(context, (obj as ArrayLike<unknown>)[i], i, obj) === false) {
                return;
            }
        }
    }
    else {
        for (let i in obj) {
            if (obj.hasOwnProperty(i)) {
                if (iterator.call(context, (obj as KeyValue)[i], i, obj) === false) {
                    return;
                }
            }
        }
    }
}
