/**
 * @file 将对象转成url，但是没有添加对数组支持
 * @author wangyongqing <wangyongqing01@baidu.com>
 */

import {isString, isPlainObject, isArray, isNil, isFunction} from './is';
import {getType} from './type';
import {getGlobalFunc} from './get-global-func';
import {uriEncode} from './strict-uri-encode';
import type {KeyValue} from './is';

export function mapArray(args: unknown[]) {
    return args.map(arg => {
        switch (getType(arg)) {
            case 'function':
                return getGlobalFunc(arg);
            default:
                return arg;
        }
    });
}

/**
 * 将对象转成url，但是没有添加对数组、对象支持，直接 JSON.stringify 输出
 *
 * @param json 待处理的json对象
 * @param [encode = false] 是否 encodeURI 对象/数组字符串
 * @return 处理之后的结果
 * @example
 * json2query({
 *       a: 1,
 *       b: 'string'
 *  });
 * //'a=1&b=string'
 * json2query({
 *       a: 1,
 *       b: 'string',
 *       c: [1, 2, 3]
 *   });
 * //'a=1&b=string&c=[1,2,3]'
 * json2query({
 *       a: 1,
 *       b: 'string',
 *       c: [1, 2, 3]
 *   }, true);
 * //'a=1&b=string&c=%5B1%2C2%2C3%5D'
 */
export function json2query(json: string | KeyValue, encode = false) {
    if (isString(json)) {
        return json as string;
    }

    const arr: string[] = [];
    const keys = Object.keys(json);

    keys.forEach(key => {
        let val = (json as KeyValue)[key];
        // 处理非 string/number/boolean
        if (isNil(val)) {
            val = '';
        }
        else if (isArray(val)) {
            val = JSON.stringify(mapArray(val as unknown[]));
        }
        else if (isPlainObject(val)) {
            // 这里不再遍历处理，对于深层的 callback 需要注意了
            val = JSON.stringify(val);
        }
        else if (isFunction(val)) {
            val = getGlobalFunc(val);
        }

        arr.push(`${key}=${encode ? uriEncode(val as string) : val}`);
    });

    return arr.join('&');
}
