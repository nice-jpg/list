/**
 * @file ios invoke
 * @module ios
 */

import {isFunction, isString, isWindow} from '../../is';
import {globalObject} from '../../get-global-object';
import {getSchemaHead} from '../../get-schema-head';
import {json2query} from '../../json2query';
import {stringify} from '../../stringify';
import type {KeyValue} from '../../is';

/**
 * 校验schema协议
 *
 * @param schema iOS schema 或双端统一调起协议
 * @returns 判断结果
 */
export function isSchemaValid(schema: unknown) {
    return isString(schema) && (schema as string).length > 10 && isWindow(globalObject);
}

/**
 * 任意 scheme 调起，不校验 baiduboxapp://
 *
 * @param scheme 任意 scheme
 */
export function iosInvoke(schema: string) {
    if (!isSchemaValid(schema)) {
        return;
    }

    const body = document.body || document.getElementsByTagName('body')[0];
    let $node: HTMLIFrameElement | null = document.createElement('iframe');
    $node.style.display = 'none';
    $node.src = schema;

    body.appendChild($node);
    // 销毁 iframe
    setTimeout(() => {
        $node && body.removeChild($node);
        $node = null;
    }, 0);
}

export type InvokeCallback = (data: any) => any;
export type InvokeParams = KeyValue | InvokeCallback;

/**
 * iosInvokeApp，因为需要创建iframe，所以回调是异步的请求
 *
 * @param action 调用的action，例如downloadnovel
 * @param params 参数对象
 * @param callback 回调函数
 * @example
 * iosInvokeApp('getspeedlogdata', function(cData) {
 *     console.log(cData);
 * });
 * iosInvokeApp('downloadnovel', {
 *     url:'xxxx',
 *     title: 'xxxxxxx'
 * }, function(cData) {
 *     if(cData.error==0){
 *         console.log('success');
 *         alert(cData.result);
 *     }else{
 *         console.log('fail');
 *     }
 * });
 */
export function iosInvokeApp(
    action: string,
    params?: InvokeParams,
    callback?: string | InvokeCallback,
    schemaHead: string = getSchemaHead()
) {
    let queryObject = {};
    if (isFunction(params)) {
        Object.assign(queryObject, {func: params});
    }
    else {
        Object.assign(queryObject, params);
    }
    if (callback && (isFunction(callback) || isString(callback))) {
        Object.assign(queryObject, {func: callback});
    }

    return iosInvoke(schemaHead + '://' + action + '?' + json2query(queryObject));
}

/**
 * 使用 postMsg 调起
 * BBAMNPJSBridge.postMessage
 *
 * @param schema 调起命令
 */
export function postMsgInvoke(schema: string) {
    if (isSchemaValid(schema)) {
        globalObject?.webkit?.messageHandlers?.BBAMNPJSBridge?.postMessage(schema);
    }
}

/**
 * BBAMNPJSBridgeWebViewComponent.postMessage
 *
 * @param scheme 调起命令
 */
export function componentInvoke(schema: string) {
    if (isSchemaValid(schema)) {
        globalObject?.webkit?.messageHandlers?.BBAMNPJSBridgeWebViewComponent?.postMessage(schema);
    }
}

/**
 * iosSyncInvoke
 *
 * @param schema 调起协议
 * @return 返回结果
 */
export function iosSyncInvoke(schema: string) {
    if (!isSchemaValid(schema)) {
        return null;
    }

    return globalObject?.prompt(
        `BdboxApp:${stringify({
            obj: 'mnp',
            func: 'dispatch',
            args: [schema],
        })}`
    );
}

/**
 * 带回调的端能力
 *
 * @deprecated
 * @param url 页面地址
 * @param callback 回调函数
 */
export function invokeWithCallback(url: string, callback: InvokeCallback) {
    if (!url && isFunction(callback)) {
        callback(false);
        return;
    }
    // 记录起始时间
    const last = Date.now();
    // 创建一个iframe
    const ifr = document.createElement('iframe');
    ifr.src = url;
    ifr.style.display = 'none';
    // 飘出屏幕外
    ifr.style.position = 'absolute';
    ifr.style.left = '-2000px';
    ifr.style.top = '-1000px';
    ifr.style.width = '1px';
    ifr.style.height = '1px';
    // 设置一个4秒的动画用于检查客户端是否被调起
    ifr.style.webkitTransition = 'all 1s';
    ifr.style.transition = 'all 1s';
    document.body.appendChild(ifr);
    setTimeout(() => {
        let end = () => {
            document.body.removeChild(ifr);
            if (Date.now() - last < 1500) {
                // 如果动画执行时间在预设范围内，就认为没有调起客户端
                callback(true);
            }
            else {
                // 动画执行超过预设范围，认为调起成功
                callback(false);
            }
        };

        // 监听动画完成时间
        ifr.addEventListener('webkitTransitionEnd', end, false);
        ifr.addEventListener('transitionEnd', end, false);
        // 启动动画
        ifr.style.left = '-10px';
    }, 0);
}
