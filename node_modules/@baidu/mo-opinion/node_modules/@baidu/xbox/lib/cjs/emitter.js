"use strict";
/**
 * @file EventEmitter 实现
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.eventEmitter = exports.EventEmitter = void 0;
var is_1 = require("./is");
var type_error_1 = require("./type-error");
/**
 * 事件发射器类
 *
 * @class EventEmitter
 */
var EventEmitter = /** @class */ (function () {
    function EventEmitter() {
        this._events = {};
        this._events = {};
    }
    /**
     * 绑定事件
     *
     * @param name 事件名称
     * @param callback 监听函数
     * @param 可选，上下文
     * @return 当前 emitter 实例
     */
    EventEmitter.prototype.on = function (name, callback, ctx) {
        if (!(0, is_1.isString)(name)) {
            throw (0, type_error_1.typeError)('name', 'string', name);
        }
        if (!(0, is_1.isFunction)(callback)) {
            throw (0, type_error_1.typeError)('callback', 'function', callback);
        }
        var events = this._events;
        if (!events[name]) {
            events[name] = [];
        }
        events[name].push({
            fn: callback,
            ctx: ctx,
        });
        return this;
    };
    /**
     * 一次绑定事件
     *
     * @param {string} name 事件名称
     * @param {function} callback 监听函数
     * @param {object} [ctx] 可选，上下文
     * @return 当前 emitter 实例
     */
    EventEmitter.prototype.once = function (name, callback, ctx) {
        var _this = this;
        var listener = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this.off(name, listener);
            callback.apply(ctx, args);
        };
        listener._ = callback;
        return this.on(name, listener, ctx);
    };
    /**
     * 事件发送
     *
     * @param name 事件名称
     * @param data 发送的数据
     * @return 当前 emitter 实例
     */
    EventEmitter.prototype.emit = function (name) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        if (!(0, is_1.isString)(name)) {
            throw (0, type_error_1.typeError)('name', 'string', name);
        }
        var evts = (this._events[name] || []).slice();
        for (var i = 0, len = evts.length; i < len; i++) {
            var _a = evts[i], fn = _a.fn, _b = _a.ctx, ctx = _b === void 0 ? null : _b;
            fn.apply(ctx, data);
        }
        return this;
    };
    /**
     * 移除事件
     *
     * @param name 事件名称
     * @param callback 监听函数，不传在移除 name 下的所有事件
     * @return 当前 emitter 实例
     */
    EventEmitter.prototype.off = function (name, callback) {
        var events = this._events;
        var evts = events[name];
        if (evts && evts.length) {
            if ((0, is_1.isUndefined)(callback)) {
                // 清理 name 的回调数组
                // 解除所有 name 的事件监听
                delete events[name];
            }
            else if ((0, is_1.isFunction)(callback)) {
                var liveEvents = [];
                for (var i = 0, len = evts.length; i < len; i++) {
                    var fn = evts[i].fn;
                    if (fn !== callback && fn._ !== callback) {
                        liveEvents.push(evts[i]);
                    }
                }
                if (liveEvents.length) {
                    events[name] = liveEvents;
                }
                else {
                    delete events[name];
                }
            }
        }
        return this;
    };
    return EventEmitter;
}());
exports.EventEmitter = EventEmitter;
/**
 * 获取一个 EventEmitter 类实例
 *
 * @return 返回默认实例
 */
function eventEmitter() {
    return new EventEmitter();
}
exports.eventEmitter = eventEmitter;
