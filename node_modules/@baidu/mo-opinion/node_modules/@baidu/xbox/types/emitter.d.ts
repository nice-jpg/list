/**
 * @file EventEmitter 实现
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
import type { KeyValue } from './is';
declare type EmitterContext = KeyValue;
interface EmitterListener {
    (...args: unknown[]): void;
    _: EmitterListener;
}
/**
 * 事件发射器类
 *
 * @class EventEmitter
 */
export declare class EventEmitter {
    private readonly _events;
    constructor();
    /**
     * 绑定事件
     *
     * @param name 事件名称
     * @param callback 监听函数
     * @param 可选，上下文
     * @return 当前 emitter 实例
     */
    on(name: string, callback: EmitterListener, ctx: EmitterContext): this;
    /**
     * 一次绑定事件
     *
     * @param {string} name 事件名称
     * @param {function} callback 监听函数
     * @param {object} [ctx] 可选，上下文
     * @return 当前 emitter 实例
     */
    once(name: string, callback: EmitterListener, ctx: EmitterContext): this;
    /**
     * 事件发送
     *
     * @param name 事件名称
     * @param data 发送的数据
     * @return 当前 emitter 实例
     */
    emit(name: string, ...data: unknown[]): this;
    /**
     * 移除事件
     *
     * @param name 事件名称
     * @param callback 监听函数，不传在移除 name 下的所有事件
     * @return 当前 emitter 实例
     */
    off(name: string, callback: EmitterListener): this;
}
/**
 * 获取一个 EventEmitter 类实例
 *
 * @return 返回默认实例
 */
export declare function eventEmitter(): EventEmitter;
export {};
