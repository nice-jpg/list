/**
 * @file 评论模块bdcloud打点组件
 * @author jianglian(jianglian01@baidu.com)
 * 参考手百数据组日志新规范的bdCloud打点
 * 相关wiki: http://wiki.baidu.com/pages/viewpage.action?pageId=337347739
 * @version 1.1 只支持事件打点， 1.1更新ext参数在event打点时以拓展形式，而非重置形式
 * 初始化： let log = pblogExt('100'); || pblogExt('100', {...}) 同时配置参数
 * 配置基本公参： log.config({cuid: 1000});
 * 统计上报：log.event({type: 'pageclk'}); || event({...}, '11100') 上报修改初始化id
 *         || event({...}, function(){...}) 上报，完成后执行函数回调
 *
 */
import {clone} from '../clone';
import extend from '../extend';
import queryToJson from '../query2json';
import {isPlainObject} from '../is';
import isBoxApp from '../is-box';
import guid from '../guid';
import UA from '../ua';
import getVer, {getV} from '../get-box-version';

// 根据白名单进行属性复制，对于ext额外处理
function setAttr(target, source, isResetExt) {
    if (!isResetExt) {
        source.ext && (target.ext = extend(target.ext || {}, source.ext));
    } else {
        source.ext && (target.ext = source.ext);
    }
    ['type', 'source', 'from', 'page', 'value', 'cuid', 'ref', 'gmv'].forEach(v => {
        source[v] !== undefined && (target[v] = source[v]);
    });
}

let protocol = window.location.protocol;
if (protocol !== 'http:') {
    protocol = 'https:';
} else {
    protocol = 'http:';
}

const GIF_URI = protocol + '//m.baidu.com/tcbox';
const URL = queryToJson(location.search); // 获取url信息（框内包含公参）
let version = getVer();
let actiondata = {
    id: '',
    content: {
        // 公共维度，非hybrid，因此不设置hybridVersion
        boxVersion: version,
        boxV: getV(),
        boxPlatform: UA.match(/(iPad|iPhone|iPod)/gim) ? 'ios' : 'android',
        network: 'unknown',
        cuid: ''
    }
};
let baseData = {
    // 模块名
    action: 'pblog',
    // 服务标识
    service: 'bdbox',
    data: {
        // 客户端标记，默认基础版
        appid: 1,
        // 日志来源，12---UBC日志  99---H5前端日志 100---Server端日志
        cateid: 99,
        // 区分主动/被动，1---主动  0---被动
        actiontype: 1,
        actiondata: actiondata
    }
};

// 若存在公参，带上7大公参
if (URL.uid && URL.osname) {
    ['osname', 'ua', 'ut', 'from', 'cfrom', 'uid', 'pkgname'].forEach(function (v) {
        URL[v] && (baseData[v] = URL[v]);
    });
}
// 更新版本标记
if (isBoxApp('lite')) {
    baseData.data.appid = 10001;
} else if (isBoxApp('info')) {
    baseData.data.appid = 10002;
}

/**
 * 打点规范类
 *
 * @class BdCloud
 * @param {string} id 设置对应打点id
 * @param {?Object} obj 公参设置
 */
/* eslint-disable fecs-prefer-class */
function BdCloudLog(id, obj) {
/* eslint-enable fecs-prefer-class */
    let self = this;
    self.param = clone(baseData);
    self.actiondata = self.param.data.actiondata;
    self.actiondata.id = id;
    isPlainObject(obj) && setAttr(self.actiondata.content, obj, true);
}

BdCloudLog.prototype.config = function (arg) {
    let self = this;
    if (typeof arg === 'string') {
        self.actiondata.id = arg;
    } else if (isPlainObject(arg)) {
        setAttr(self.actiondata.content, arg, true);
    }
};

BdCloudLog.prototype.report = function (obj, callback) {
    let items = [];
    for (let i in obj) {
        if (isPlainObject(obj[i])) {
            obj[i] = JSON.stringify(obj[i]);
        }
        items.push(i + '=' + window.encodeURIComponent(String(obj[i])));
    }
    let url = items.join('&');

    let img = new Image(1, 1);
    let imgName = '_box_mt' + guid();
    window[imgName] = img;
    let isCallbackCalled = false;
    img.onload = img.onerror = img.onabort = function () {
        // 打点结束之后，执行 callback
        if (callback && typeof callback === 'function' && !isCallbackCalled) {
            isCallbackCalled = true;
            callback();
        }
        img.onload = img.onerror = img.onabort = null;
        window[imgName] = img = null;
    };

    url = GIF_URI + '?' + url;
    img.src = url;

    // 为了避免打点超时，设置 100ms 之后强制执行 callback
    setTimeout(function () {
        if (callback && typeof callback === 'function' && !isCallbackCalled) {
            isCallbackCalled = true;
            callback();
        }
    }, 100);
    return this;
};

BdCloudLog.prototype.event = function (data, ext, callback) {
    if (isPlainObject(data)) {
        let param = clone(this.param);
        param.data.actiondata.type = '0';
        param.data.actiondata.timestamp = Math.floor(Date.now() / 1000);
        let content = param.data.actiondata.content;
        setAttr(content, data);
        if (typeof ext === 'string') {
            param.data.actiondata.id = ext;
        } else {
            callback = ext;
        }
        this.report(param, callback);
    }
    return this;
};

export default (id, obj) => {
    return new BdCloudLog(id, obj);
};
