/**
 * @file cookie操作
 * @author wangyongqing <wangyongqing01@baidu.com>
 */
import {isNumber, isUndefined, isFunction} from '../is';

const extend = Object.assign;

const inBrowser = !isUndefined(document) && document.cookie;
function decode(s) {
    return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
}
/**
 * Cookie 类，支持传入 converter
 * @class Cookie
 * @param converter 转换函数对象，支持 read 和 write 两个函数
 */
export class Cookie {
    constructor(converter) {
        this.converter = converter || {};
    }

    /**
     * 设置 cookie
     * @param {string} key - cookie name
     * @param {string|object} value - cookie value
     * @param {object} options - cookie 配置，expire 支持Date、天数或者秒
     */
    set(key, value, options) {
        if (!inBrowser) {
            return;
        }

        options = extend(
            {
                path: '/'
            },
            options
        );

        if (isNumber(options.expires)) {
            // 传入的是时间；ms
            let expires = options.expires;
            if (options.expires < 500) {
                // 传入的是天
                expires = expires * 864e5;
            }

            options.expires = new Date(Date.now() + expires);
        }

        options.expires = options.expires ? options.expires.toUTCString() : '';

        try {
            const result = JSON.stringify(value);
            // eslint-disable-next-line
            if (/^[\{[]/.test(result)) {
                value = result;
            }
        } catch (e) {
            console.log(e);
        }
        const converter = this.converter.write;
        value = isFunction(converter)
            ? converter(value, key)
            : encodeURIComponent(String(value)).replace(
                  /%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,
                  decode
              );

        key = encodeURIComponent(String(key))
            .replace(/%(23|24|26|2B|5E|60|7C)/g, decode)
            .replace(/[\()]/g, escape); // eslint-disable-line

        let stringifiedAttributes = '';
        Object.keys(options).forEach(opt => {
            if (options[opt]) {
                stringifiedAttributes += '; ' + opt;
                if (options[opt] !== true) {
                    stringifiedAttributes += '=' + options[opt].split(';')[0];
                }
            }
        });

        return (document.cookie = key + '=' + value + stringifiedAttributes);
    }
    /**
     * 取 Cookie
     * @param {string} key - 读取cookie的 key
     * @param {boolean} toJson - 是否尝试转换成 json 对象
     * @return {any} 获取到的 cookie
     */
    get(key, toJson = false) {
        if (!inBrowser) {
            return;
        }

        const jar = {};
        const cookies = document.cookie.split('; ');

        for (let i = 0, len = cookies.length; i < len; i++) {
            const parts = cookies[i].split('=');
            let cookie = parts.slice(1).join('=');

            if (!toJson && cookie.charAt(0) === '"') {
                cookie = cookie.slice(1, -1);
            }

            try {
                const name = decode(parts[0]);
                const converter = this.converter.read;
                cookie = isFunction(converter) ? converter(cookie) : decode(cookie);

                if (toJson) {
                    try {
                        cookie = JSON.parse(cookie);
                    } catch (e) {
                        console.log(e);
                    }
                }

                jar[name] = cookie;
                if (key === name) {
                    break;
                }
            } catch (e) {
                console.log(e);
            }
        }

        return key ? jar[key] : jar;
    }
    /**
     * 移除某个 cookie
     * @param {string} key - 需要移出的 cookie key
     * @param {object} options - 需要移出的参数，支持按照参数精准移除 cookie
     */
    remove(key, options = {}) {
        this.set(
            key,
            '',
            extend(options, {
                expires: -1
            })
        );
    }
}

// 导出默认的 cookie，如果需要增加自己解析的，使用 new Cookie 传入 Converter
export default new Cookie();
