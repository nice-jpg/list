"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EventEmitter = void 0;

var _is = require("./is");

var _typeError = _interopRequireDefault(require("./type-error"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * 事件发射器类
 * @class EventEmitter
 */
var EventEmitter = /*#__PURE__*/function () {
  function EventEmitter() {
    _classCallCheck(this, EventEmitter);

    this._events = {};
  }
  /**
   * 绑定事件
   * @param {string} name - 事件名称
   * @param {function} callback - 监听函数
   * @param {object} [ctx] - 可选，上下文
   */


  _createClass(EventEmitter, [{
    key: "on",
    value: function on(name, callback, ctx) {
      if (!(0, _is.isString)(name)) {
        throw (0, _typeError.default)('name', 'string', name);
      }

      if (!(0, _is.isFunction)(callback)) {
        throw (0, _typeError.default)('callback', 'function', callback);
      }

      var events = this._events;
      (events[name] || (events[name] = [])).push({
        fn: callback,
        ctx: ctx
      });
      return this;
    }
    /**
     * 一次绑定事件
     * @param {string} name - 事件名称
     * @param {function} callback - 监听函数
     * @param {object} [ctx] - 可选，上下文
     */

  }, {
    key: "once",
    value: function once(name, callback, ctx) {
      var self = this;

      function listener() {
        self.off(name, listener);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        callback.apply(ctx, args);
      }

      listener._ = callback;
      return this.on(name, listener, ctx);
    }
    /**
     * 事件发送
     * @param {string} name - 事件名称
     * @param  {...any} data - 发送的数据
     */

  }, {
    key: "emit",
    value: function emit(name) {
      if (!(0, _is.isString)(name)) {
        throw (0, _typeError.default)('name', 'string', name);
      }

      var evts = (this._events[name] || []).slice();

      for (var _len2 = arguments.length, data = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        data[_key2 - 1] = arguments[_key2];
      }

      for (var i = 0, len = evts.length; i < len; i++) {
        var _evts$i = evts[i],
            fn = _evts$i.fn,
            _evts$i$ctx = _evts$i.ctx,
            ctx = _evts$i$ctx === void 0 ? null : _evts$i$ctx;
        fn.apply(ctx, data);
      }

      return this;
    }
    /**
     * 移除事件
     * @param {string} name - 事件名称
     * @param { function} callback - 监听函数，不传在移除 name 下的所有事件
     */

  }, {
    key: "off",
    value: function off(name, callback) {
      var events = this._events;
      var evts = events[name];

      if (evts && evts.length) {
        if ((0, _is.isUndefined)(callback)) {
          // 清理 name 的回调数组
          // 解除所有 name 的事件监听
          delete events[name];
        } else if ((0, _is.isFunction)(callback)) {
          var liveEvents = [];

          for (var i = 0, len = evts.length; i < len; i++) {
            var fn = evts[i].fn;

            if (fn !== callback && fn._ !== callback) {
              liveEvents.push(evts[i]);
            }
          }

          if (liveEvents.length) {
            events[name] = liveEvents;
          } else {
            delete events[name];
          }
        }
      }

      return this;
    }
  }]);

  return EventEmitter;
}();

exports.EventEmitter = EventEmitter;

var _default = function _default() {
  return new EventEmitter();
};

exports.default = _default;