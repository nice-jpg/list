"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = json2query;

var _is = require("./is");

var _type = _interopRequireDefault(require("./type"));

var _getGlobalFunc = _interopRequireDefault(require("./get-global-func"));

var _strictUriEncode = _interopRequireDefault(require("./strict-uri-encode"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file 将对象转成url，但是没有添加对数组支持
 * @author wangyongqing <wangyongqing01@baidu.com>
 */

/**
 * 将对象转成url，但是没有添加对数组、对象支持，直接 JSON.stringify 输出
 * @function json2query
 * @param  {object} json - 待处理的json对象
 * @param  {boolean} [encode = false] - 是否 encodeURI 对象/数组字符串
 * @return {string}  str  - 处理之后的string字符串
 * @example
 * json2query({
 *       a: 1,
 *       b: 'string'
 *  });
 * //'a=1&b=string'
 * json2query({
 *       a: 1,
 *       b: 'string',
 *       c: [1, 2, 3]
 *   });
 * //'a=1&b=string&c=[1,2,3]'
 * json2query({
 *       a: 1,
 *       b: 'string',
 *       c: [1, 2, 3]
 *   }, true);
 * //'a=1&b=string&c=%5B1%2C2%2C3%5D'
 */
function json2query(json) {
  var encode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if ((0, _is.isString)(json)) {
    return json;
  }

  var arr = [];

  for (var i in json) {
    var j = json[i];

    if ((0, _is.isArray)(j)) {
      j = JSON.stringify(mapArray(j));
    } else if ((0, _is.isNil)(j)) {
      j = '';
    } else if ((0, _is.isPlainObject)(j)) {
      // 这里不再遍历处理，对于深层的 callback 需要注意了
      j = JSON.stringify(j);
    } else if ((0, _is.isFunction)(j)) {
      j = (0, _getGlobalFunc.default)(j);
    } // string/number/boolean 不处理


    arr.push("".concat(i, "=").concat(encode ? (0, _strictUriEncode.default)(j) : j));
  }

  return arr.join('&');
}

function mapArray(args) {
  return args.map(function (arg) {
    switch ((0, _type.default)(arg)) {
      case 'string':
        return arg;

      case 'function':
        return (0, _getGlobalFunc.default)(arg);

      default:
        return arg;
    }
  });
}