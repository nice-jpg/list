/**
 * @file thunder hn fetch
 * @author okaychen<chenglong13@baidu.com>
 */
import { __awaiter, __generator } from "tslib";
import merge from 'lodash.merge';
import { isString, isPlainObject } from './utils.common';
var ThunderHN = /** @class */ (function () {
    function ThunderHN(props, options) {
        if (options === void 0) { options = { home: '' }; }
        var _this = this;
        this.HOME = 'https://hpd.baidu.com/v.gif';
        this.getFetchUrl = function (props) {
            _this._validateProps(props);
            var query = merge({}, _this.query, props);
            if (query && query.logExtra) {
                if (isPlainObject(query.logExtra)) {
                    query.logExtra.page = 'undefined' === typeof query.logExtra.page
                        ? query.tabId : query.logExtra.page;
                    query.logExtra.value = 'undefined' === typeof query.logExtra.value
                        ? query.tabId : query.logExtra.value;
                }
                else if (Array.isArray(query.logExtra)) {
                    query.logExtra.map(function (item) {
                        if (!item) {
                            return {
                                page: query.tabId
                            };
                        }
                        item.page = 'undefined' === typeof item.page ? query.tabId : item.page;
                        item.value = 'undefined' === typeof item.value ? query.tabId : item.value;
                        return item;
                    });
                }
            }
            var searches = [];
            for (var key in query) {
                var val = query[key];
                var stringified = void 0;
                switch (true) {
                    case ('number' === typeof val && !isNaN(val)):
                    case ('boolean' === typeof val):
                        searches.push("".concat(key, "=").concat(val));
                        break;
                    case ('' === val || (val && (val.constructor === String))):
                        searches.push("".concat(key, "=").concat(encodeURIComponent(val)));
                        break;
                    case isPlainObject(val) || Array.isArray(val):
                        stringified = JSON.stringify(val);
                        searches.push("".concat(key, "=").concat(encodeURIComponent(stringified)));
                        break;
                }
            }
            return _this.HOME + searches.join('&');
        };
        this.send = function (props) { return __awaiter(_this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._fetch(this.getFetchUrl(props))];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.text()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        this._validateProps(props);
        this.query = {};
        this.setQueries(props);
        this.HOME = (options.home && isString(options.home)) ? options.home : this.HOME;
        if (this.HOME.charAt(this.HOME.length - 1) !== '?') {
            this.HOME = this.HOME + '?';
        }
    }
    ThunderHN.prototype.setQueries = function (props) {
        merge(this.query, props || {});
    };
    ThunderHN.prototype._validateProps = function (props) {
        if (null != props && !isPlainObject(props)) {
            throw new Error('Thunder takes a plain object');
        }
    };
    ThunderHN.prototype._fetch = function (URL) {
        return __awaiter(this, void 0, void 0, function () {
            var res, specialLogInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetch(URL, {
                            credentials: 'include',
                            mode: 'no-cors'
                        })];
                    case 1:
                        res = _a.sent();
                        specialLogInfo = {
                            ct: 3,
                            cst: 9,
                            logFrom: 'feed_tab',
                            logInfo: 'log_req_fail',
                            ssid: 0,
                            logExtra: {
                                type: res.status
                            }
                        };
                        if (!(res.status !== 200 && Math.floor(Math.random() * 100) === 50)) return [3 /*break*/, 3];
                        // 414：日志请求被拦截，随机监控打点
                        /* istanbul ignore next */
                        return [4 /*yield*/, fetch(this.getFetchUrl(specialLogInfo), {
                                credentials: 'include',
                                mode: 'no-cors'
                            })];
                    case 2:
                        // 414：日志请求被拦截，随机监控打点
                        /* istanbul ignore next */
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, res];
                }
            });
        });
    };
    return ThunderHN;
}());
export default ThunderHN;
;
