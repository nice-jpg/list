/**
 * @file base log
 * @author okaychen<chenglong13@baidu.com>
 */
import { __assign } from "tslib";
import merge from 'lodash.merge';
import ThunderH5 from './lib/thunder.h5';
import * as ubc from '@baidu/ubc-report-sdk';
import { RANDOM, INITARGS, TBASEURL, LOGARGS, UBCID } from './lib/const';
var BaseLog = /** @class */ (function () {
    function BaseLog(initArgs) {
        this.ubcIds = {};
        // 初始化合并默认值
        this.finalParams = merge({}, INITARGS, initArgs);
        // thunder base params
        this.baseParams = __assign({}, this.finalParams.tParams);
    }
    ;
    // ubc set
    BaseLog.prototype.ubcInit = function (ubcId) {
        // 给每个ubcid绑定随机数实例
        this.ubcIds[ubcId] = RANDOM;
        this.ubcIds[ubcId] = new ubc.UbcLogger(__assign({ serverId: ubcId }, this.finalParams.params));
        // return实例支持ubc api
        return this.ubcIds[ubcId];
    };
    ;
    // ubc send
    BaseLog.prototype.ubcSend = function (ubcList, callback) {
        var ubcId = ubcList.ubcId, params = ubcList.params, queryParams = ubcList.queryParams;
        if (queryParams) {
            this.ubcIds[ubcId].set({
                queryParams: __assign({}, queryParams)
            });
        }
        ;
        this.ubcIds[ubcId].send(__assign({}, params)).then(callback);
    };
    ;
    /**
     * 发送ubc日志
     *
     * @param {Object} [ubcList] 发送日志需要携带的参数
     * @param {Function} [callback] 完成后的回调函数
     */
    BaseLog.prototype.sendUbc = function (ubcList, callback) {
        var ubcId = ubcList.ubcId;
        if (ubcId) {
            if (!this.ubcIds[ubcId]) {
                // 该id未被初始化
                this.ubcInit(ubcId);
                this.ubcSend(__assign({}, ubcList), callback);
            }
            else {
                this.ubcSend(__assign({}, ubcList), callback);
            }
            ;
        }
        ;
    };
    ;
    /**
     * 发送thunder日志
     *
     * @param {Object} [params] 需要携带的参数
     * @param {Function} [callback] 完成后的回调函数
     * @param {string} [url] 发送日志的跟路径
     */
    BaseLog.prototype.sendThunder = function (params, callback, url) {
        var thunder = new ThunderH5(this.baseParams);
        var tFinnalParams = merge({}, this.baseParams, params);
        thunder.send(__assign({}, tFinnalParams), callback, url);
    };
    ;
    /**
     * 小流量迁移日志，支持双打，ubc/thunder小流量
     *
     * @param {Object} [thunderList] thunder日志参数
     * @param {number} [ubcId] 迁移ubcid，默认13587
     * @param {Function} [callback] 完成后的回调
     * @param {string} [url] 发送日志的跟路径
     */
    BaseLog.prototype.sendLog = function (thunderList, ubcId, callback, url) {
        if (ubcId === void 0) { ubcId = UBCID; }
        if (url === void 0) { url = TBASEURL; }
        var mode = this.finalParams.mode;
        var thunder = new ThunderH5(this.baseParams);
        var thunderURL = thunder.assembleUrl(url, this.baseParams, thunderList);
        LOGARGS.ubcId = ubcId;
        LOGARGS.params.ext = {
            url: thunderURL + '&fromUbc=1'
        };
        if (mode === 'both') {
            // 双打
            this.sendUbc(__assign({}, LOGARGS), callback);
            this.sendThunder(thunderList, callback, url);
        }
        else if ((mode && Math.random() < +mode) || (!mode && mode !== 0)) {
            // 小流量ubc，mode不传默认选择
            this.sendUbc(__assign({}, LOGARGS), callback);
        }
        else {
            // 小流量Thunder
            var mergeList = merge({}, thunderList, { fromUbc: 0 });
            this.sendThunder(mergeList, callback, url);
        }
        ;
    };
    ;
    return BaseLog;
}());
export default BaseLog;
;
