/**
 * @file index.d.ts
 * @author okaychen<chenglong13@baidu.com>
 */

/**
 * BaseLog H5
 */
export default class BaseLog {
    finalParams: InitArgs;
    baseParams: object;
    private ubcIds;
    constructor(initArgs?: InitArgs);
    ubcInit<P>(ubcId: string | number): P;
    ubcSend<T, U>(ubcList: ConfigType<T, U>, callback?: Function): void;
    sendUbc<T, U>(ubcList: ConfigType<T, U>, callback?: Function): void;
    sendThunder<T>(params: T, callback?: Function, url?: string): void;
    sendLog<T>(thunderList: T, ubcId?: number, callback?: Function, url?: string): void;
}
/**
 * BaseLog HN
 */
export declare class BaseLogHN {
    finalParams: InitArgs;
    baseParams: object;
    private ubcIds;
    thunderHome: string;
    constructor(initArgs?: InitArgs, thunderHome?: string);
    ubcInit<T extends object>(ubcId: string | number, queryList: T): void;
    ubcSend<T extends string | number>(ubcId: T, callback?: Function): void;
    sendUbc(ubcListHN: any): void;
    sendThunder<T>(params: T): void;
    sendLog<T>(thunderList: T, ubcId?: number): void;
}
/**
 * BaseLog devtools
 */
export declare class $BaseLog<U> extends BaseLog {
    constructor(InitArgs?: U);
    sendThunder<T>(params: T, callback?: Function, url?: string): void;
    sendUbc<T, U>(ubcList: ConfigType<T, U>, callback?: Function, url?: string): void;
    $handleParams(ubcName?: string, args?: ArgsType, url?: string, requestURL?: string): void;
}

export interface UbcType<T> {
    page?: string;
    value?: string | number;
    type?: string | number;
    ext?: T;
}
export interface ConfigType<T, U> {
    ubcId: number | string;
    params?: UbcType<T> | Record<string, unknown>;
    queryParams?: U;
}
export interface UbcBase {
    page?: string;
    from?: string;
    source?: string;
    queryParams?: object;
    testMode?: boolean;
    testUrl?: string;
    idfrom?: string;
    ifHeartbeatTime?: boolean;
    useSendBeacon?: boolean;
}
export interface ThunderBase {
    ct?: number | string;
    logFrom?: string;
}
export interface InitArgs {
    mode?: number | string;
    params?: UbcBase | Record<string, unknown>;
    tParams?: ThunderBase | Record<string, unknown>;
}
export interface ArgsType {
    tid?: number | string;
    ubcId?: number | string;
}

export declare const getTag: <T>(value: T) => string;
export declare const isObjectLike: <T>(value: T) => boolean;
export declare const isString: <U>(value: U) => boolean;
export declare const isPlainObject: <P>(value: P) => boolean;

export declare class ThunderH5 {
    private opt;
    private baseURL;
    private baseParams;
    constructor(opt: object);
    simpleMerge(obj1: any, obj2: any): object;
    assembleUrl(url: string, baseParams: object, assParams: any): string;
    config(opt: any): object;
    send<T>(pobj: T, callback?: Function, url?: any): void;
}
export declare class ThunderHN<T> {
    private HOME;
    private query;
    constructor(props: T, options?: {
        home: string;
    });
    setQueries<U>(props: U): void;
    _validateProps<U>(props: U): void;
    _fetch<U>(URL: string): Promise<any>;
    getFetchUrl: (props: any) => string;
    send: <U>(props: U) => Promise<string>;
}