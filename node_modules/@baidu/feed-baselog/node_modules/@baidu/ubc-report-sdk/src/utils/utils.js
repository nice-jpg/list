/**
 * @file 工具方法
 * @author wangbing11(wangbing11@baidu.com)
 */

export const getUa = () => {
    try {
        return window.navigator.userAgent;
    } catch (e) {
        return '';
    }
}

export const isBox = () => {
    const ua = getUa();
    const IS_LITE_BOX = / (lite|info) baiduboxapp\//i.test(ua);
    const IS_KANDUODUO_BOX = / mission baiduboxapp\//i.test(ua);
    // IS_BOX 标识是否手百基础版内，不能是Lite、不是看多多
    return / baiduboxapp\//i.test(ua) && !IS_LITE_BOX && !IS_KANDUODUO_BOX;
}

export const isSwan = () => {
    const ua = getUa();
    return /swan/i.test(ua);
}

export const getLocation = () => {
    try {
        return document.location;
    } catch (e) {
        return {
            href: '',
            protocol: 'https:',
            origin: '',
            pathname: ''
        };
    }
}


// 这个函数用于将其他函数的输入转换成一个对象，这个规则适用于UBC所有对外的接口API
// transformInput(['a', 'b', 'c'], [1, 2, 3]);
// ==> {a: 1, b: 2, c: 3}
// transformInput(['a', 'b', 'c'], [1, 2, {c: 3, d: 4}]);
// ==> {a: 1, b: 2, c: { c: 3, d: 4}}
/**
 * 获取url中制定参数的值
 *
 * @param  {array} paramNames 对应key
 * @param  {array} args 对应值
 * @return {Object}
 */
export const transformInput = function (paramNames, args) {
    if (!Array.isArray(paramNames) || !Array.isArray(args)) {
        return {};
    }
    let c = {};
    let d = Math.min(paramNames.length + 1, args.length);
    for (let i = 0; i < d; i++) {
        if ('object' === typeof args[i]) {
            c[paramNames[i]] = {};
            for (let g in args[i]) {
                if (args[i].hasOwnProperty(g)) {
                    c[paramNames[i]][g] = args[i][g];
                }
            }
        } else {
            i < paramNames.length && (c[paramNames[i]] = args[i]);
        }
    }
    return c;
};

/**
 * 获取url中制定参数的值
 *
 * @param  {string} name 参数名
 * @param  {string} url url地址
 * @return {Object}      值
 */
export function getQueryParams(name, url = window.location.href) {
    let reg = new RegExp(
        '(^|&)' + name + '=([^&]*)(&|$)',
        'i'
    );
    if (url.split('?')[1]) {
        let r = url.split('?')[1].match(reg);
        return r != null ? decodeURIComponent(r[2]) : null;
    } else {
        return null;
    }
}


/**
 * 字符串化query
 *
 * [注]：
 * 默认：如果`value`是数组，其`toString`会自动转为逗号分隔的字符串
 * 这里：如果 是 Array 和 Object 参数 都进行 JSON.stringify + encodeURIComponent 了
 *
 * @param {Object} query 查询条件
 * @return {string}
 */
export function stringify(query = {}) {
    if (!query) {
        return '';
    }

    let search = '';
    for (let key in query) {
        if (query.hasOwnProperty(key)) {
            let value = query[key];
            if (value == null) {
                value = '';
            } else if (typeof value === 'object') {
                value = JSON.stringify(value);
            }
            search += '&' + encodeURIComponent(key) + '=' + encodeURIComponent(value);
        }
    }

    return search.slice(1);
}


/**
 * 在url上加指定参数
 *
 * @param  {string} url  url
 * @param {Object} query 参数对象
 * @example
 * {
 *    a: 1
 * }
 * @return {string}    添加参数后的url
 */
export function renderUrl(url = '', query = {}) {
    return url + (~url.indexOf('?') ? '&' : '?') + stringify(query);
}

/**
 * isObject
 *
 * @param {*} value value
 * @return {boolean} 如果是对象则返回 true, 否则 false
 */
export function isObject(value) {
    // Avoid a V8 JIT bug in Chrome 19-20.
    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
    let type = typeof value;
    return type === 'function' || (!!value && type === 'object');
}

/**
 * isBoolean
 *
 * @param {*} value value
 * @return {boolean} 如果是布尔类型则返回 true, 否则 false
 */
export function isBoolean(value) {
    return value === true || value === false;
}

/**
 * isFunction
 *
 * @param {*} value value
 * @return {boolean}
 */
export function isFunction(value) {
    return typeof value === 'function';
}

export function loadScript(src) {
    if (src) {
        let script = document.createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.src = src;
        let lastScr = document.getElementsByTagName('script')[0];
        lastScr.parentNode.insertBefore(script, lastScr);
    }
}

export function noop() {
}


/**
 * getUrlQuery  从url中获取query对象
 *
 * @param   {Object} key urlQuery中获得key对应的参数，如果不传则返回整个query对象
 * @return  {string | Object} queryStr 或 整个query对象
 */
export const getUrlQuery = (key) => {
    let url = getLocation().href;
    let reg = new RegExp('[\\?&]([^\\?&\\=\\/]+)=([^\\?\\&\\=\\/]*)', 'g');
    let query = {};
    let regResult;
    while ((regResult = reg.exec(url)) !== null) {
        query[regResult[1]] = regResult[2];
    }
    if (key) {
        return query[key];
    } else {
        return query;
    }
};


/**
 * getUrl
 *
 * @param   {string}  url       请求url
 * @param   {Object}  params    参数
 * @return  {string}  更新url(过滤为空的参数)
 */
export const getUrl = (url, params) => {
    let realParams = {};
    Object.keys(params).forEach(item => {
        // TODO params[item]是不是有可能为0
        params[item] && (realParams[item] = params[item]);
    });
    if (Object.keys(realParams).length === 0) {
        return url;
    }
    return renderUrl(url, realParams);
};


/**
 * 获得key对应的cookie值
 * @param {string} sKey cookie的key
 * @return {string} cookie的value
 */
export const getCookieByName = (sKey) => {
    let cookie = document.cookie || '';
    return decodeURIComponent(cookie.replace(new RegExp('(?:(?:^|.*;)\\s*' + encodeURIComponent(sKey).replace(/[-.+*]/g, '\\$&') + '\\s*\\=\\s*([^;]*).*$)|^.*$'), '$1')) || '';
};

/**
 * 获得key对应的cookie值
 * @param {any} source merge的第一个对象
 * @param {any} other merge的第二个对象
 * @return {any} merge后的对象
 */
export const merge = (source, other) => {
    if (!isObject(source) || !isObject(other)) {
        return other === undefined ? source : other
    }
    // 合并两个对象的 key，另外要区分数组的初始值为 []
    return Object.keys({
        ...source,
        ...other,
    }).reduce((acc, key) => {
        // 递归合并 value
        acc[key] = merge(source[key], other[key])
        return acc
    }, Array.isArray(source) ? [] : {})
}
