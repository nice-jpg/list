import {Component} from 'san';
import styles from './style.module.less';
import {AucNavData, NavItem} from './types';
import {WujiButton} from '@baidu/wuji-san';
import {aucArrow} from '@baidu/auc-arrow';
import {hex2rgb} from '@baidu/auc-base/utils';

export class topicNavs extends Component {
    static template:string = `
    <div class="{{wrapClass}}" style="top: {{top}}; background-color: {{isTransparentWrap && !isFixed ? 'transparent' : bigEventColor}}">
        <div class="{{styles.aucNavWrap}}" id="aucScroll{{isFixed ? 'Fixed' : ''}}" s-ref="navWrap">
            <div class="{{styles.aucNavInner}}" id="aucScrollInner{{isFixed ? 'Fixed' : ''}}" s-ref="navInner">
                <div 
                    s-for="nav,index in navs"
                    class="{{styles.aucNavBtnBox}}"
                >
                    <wuji-button
                        s-ref="wujiBtn"
                        text="{{nav.text}}"
                        height="90"
                        theme="twotone"
                        radius="J_X06"
                        class="{{styles.aucNavBtn}} {{activeIndex === index ? styles.active : ''}} {{aucNavBtnSpecial}}"
                        on-click="handleClick(index)"
                        style="{{landType !== 0 ? nav.btnStyle : ''}}"
                    >
                    </wuji-button>
                    <div
                        s-show="navColor && activeIndex === index"
                        class="{{styles.specialBtm}}"
                        style="background-color:{{navColor}};"
                    ></div>
                </div>
            </div>
        </div>
        <div class="{{styles.moreArrow}}" s-if="canShowMore" style="{{moreArrowStyle}}">
            <auc-arrow
            arrowType="{{arrow}}"
            on-click="moreClick"
            landType="{{landType}}"
            ></auc-arrow>
        </div>
        <div class="{{styles.before}}" style="{{beforeBg}}"></div>
    </div>`;
    static components:object = {
        'wuji-button': WujiButton,
        'auc-arrow': aucArrow
    };

    initData(): AucNavData {
        return {
            styles,
            activeIndex: 0,
            isMore: false,
            showMore: false,
            navs: [],
            isFixed: false,
            top: '0',
            isPc: false,
        };
    }

    static computed = {
        wrapClass() {
            const result = [
                styles.aucNavs,
                styles[this.data.get('isFixed') ? 'fixed' : ''],
                styles[this.data.get('isPc') && this.data.get('isFixed')  ? 'pcfixed' : ''],
            ];
            this.data.get('bigEventClass').forEach(bgClass => {
                bgClass && result.push(styles[bgClass]);
            });
            return result;
        },
        arrow () {
            return this.data.get('showMore') ? 'up' : 'down';
        },
        beforeBg() {
            const isBigEvent = this.data.get('landType') !== 0;
            const beforeBg = hex2rgb(this.data.get('bigEventColor'));
            return isBigEvent ? `background: linear-gradient(to left, ${beforeBg.rgb0}, ${beforeBg.rgb} 50%);` : ''
        },
        moreArrowStyle() {
            const isBigEvent = this.data.get('landType') !== 0;
            const beforeBg = hex2rgb(this.data.get('bigEventColor'));
            return isBigEvent ? `background: linear-gradient(to right, ${beforeBg.rgb0}, ${beforeBg.rgb} 50%);` : ''
        }
    };
    inited(): void {
    }
    attached(): void {
        this.checkShowMore();
        this.bindFirstScroll();
    }

    // 初次滑动nav触发。用于页面数据加载
    bindFirstScroll(): void {
        const navWrap:HTMLElement = this.ref('navWrap');
        const scrollEvent = () => {
            this.fire('first-scroll');
            navWrap.removeEventListener('scroll', scrollEvent);
        };
        navWrap.addEventListener('scroll', scrollEvent);
    }

    // 检查是否显示下拉按钮
    checkShowMore() {
        const navWrap:HTMLElement = this.ref('navWrap');
        const navInner:HTMLElement = this.ref('navInner');
        const navs:Array<NavItem> = this.data.get('navs');
        const rect:DOMRect = navInner.children[navs.length - 1].getBoundingClientRect();

        if (rect.width + rect.x > navWrap.getBoundingClientRect().width) {
            this.data.set('canShowMore', true);
        } else {
            this.data.set('canShowMore', false);
        }
    }

    handleClick(index?:number): void {
        this.fire('nav-click', index);
    }
    moveAnimation(index?:number):void {
        let fixed:string = this.data.get('isFixed') ? 'Fixed' : '';
        // 当前元素
        let currNav:HTMLElement = document.getElementById('aucScrollInner' + fixed).children[index];
        // 屏幕中点
        let screenCenterPoint:number = window.innerWidth / 2;
        // 移动距离
        let distance:number = currNav.getBoundingClientRect().left - screenCenterPoint + (+currNav.offsetWidth / 2);
        // 当前位置
        let nowPosition:number = document.getElementById('aucScrollInner' + fixed).scrollLeft;
        const space = +((distance / 10)).toFixed(2);
        let count = 0;
        let inter = setInterval(()=>{
            if (count >= 10) {
                clearInterval(inter);
                return;
            }
            document.getElementById('aucScrollInner' + fixed).scrollLeft = nowPosition + space * count++;
        }, 10);
    }
    moreClick() {
        this.fire('more-click');
    }
}

export default topicNavs;
