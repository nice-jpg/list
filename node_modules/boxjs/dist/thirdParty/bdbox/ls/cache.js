module.exports = function () {
  var $ = require('boxjs/dist/utils/_bdboxWrapper');
  /* jshint -W801,-W061*/


  var emptyFn = $.emptyFn;
  var execScript = window.execScript ? window.execScript : function (code) {
    window['eval'].call(window, code);
  };
  var ls = window.localStorage; // var supportLS = ls && ls.setItem;

  /**
   * 通过url获取内容，并且缓存进localstorage，第二次不用再联网获取
   * @memberOf Bdbox.ls
   * @name cache
   * @function
   * @param  {string|BdboxLSCacheOptions} opts 参数对象：url,check,success, error
   * @author wangyongqing01
   * @version  $Id: cache.js 251156 2015-06-11 02:27:09Z wangyongqing01 $
   * @example
   * //只传url的情况
   * Bdbox.ls.cache('http://libs.baidu.com/jquery/2.0.0/jquery.min.js');
   * //多个参数
   * Bdbox.ls.cache({
   *     url:'http://libs.baidu.com/jquery/2.0.0/jquery.min.js',
   *     check: function(){
   *         if(jQuery && jQuery.fn){
   *             return true;
   *         }
   *     },
   *     success: function(){
   *         alert(jQuery);
   *     },
   *     error: function(){
   *         alert('缓存失败');
   *     }
   * });
   * //or
   * require('common:bdbox/ls/cache');
   * Bdbox.lscache({
   *     url:'http://www.baidu.com/zepto.js',
   *     version: 'xxxxx',
   *     check: function(){
   *         if(Zepto){
   *             return true;
   *         }
   *     },
   *     success: function(){console.log('success')}
   * });
   * //or
   * Bdbox.lscache('http://www.baidu.com/zepto.js');
   * //or
   * Bdbox.lscache({
   *     url: 'http://www.baidu.com/zepto.js',
   *     version:'xxxx',
   *     success: function(){
   *         $.ajax(..);
   *     }
   * });
   */

  return function (opts) {
    opts = $.isString(opts) ? {
      url: opts
    } : opts;

    if (!opts.url) {
      throw 'Bdbox.ls.cache: url is empty';
    }

    var url = opts.url;
    var checkFn = opts.check;
    var success = $.isFunction(opts.success) ? opts.success : emptyFn;
    var error = $.isFunction(opts.error) ? opts.error : success;

    if ($.isFunction(checkFn) && checkFn()) {
      //过了check
      success();
      return;
    }

    var content = ls && ls[url];
    var code = '';

    try {
      content = JSON.parse(content);
      code = content.data;
    } catch (e) {
      code = '';
    }

    if (code && code.length > 100 && content.version === opts.version) {
      //直接读ls， 少于100Byte的暂时不缓存
      try {
        exec(code, url);
        success();
        return;
      } catch (e) {}
    }

    var cb = function (code) {
      if (code) {
        //存入ls
        exec(code, url);
        success();

        if (ls) {
          ls[url] = JSON.stringify({
            version: opts.version | 0,
            data: code
          });
        }
      } else {
        error();
      }
    };

    get(url, cb, opts.timeout | 0 || 2e4);
  };

  function exec(code, url) {
    if (code && /\S/.test(code)) {
      var $head = getHead();

      if (/\.css(?:\?|$)/i.test(url)) {
        var $node = document.createElement('style');
        $node.type = 'text/css';
        $head.appendChild(node);

        if ($node.styleSheet) {
          $node.styleSheet.cssText = code;
        } else {
          $node.appendChild(document.createTextNode(code));
        }

        $head.appendChild($node);
      } else {
        code += '//@ sourceURL=' + url;
        execScript(code);
      }
    }
  }

  function get(url, callback, timeout) {
    var xhr = new window.XMLHttpRequest();
    var timer = setTimeout(function () {
      xhr.abort();
      callback();
    }, timeout || 2e4);
    xhr.open('GET', url, true);

    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4) {
        clearTimeout(timer);

        if (xhr.status === 200) {
          callback(xhr.responseText);
        } else {
          callback();
        }
      }
    };

    xhr.send(null);
  }

  function getHead() {
    return document.head || document.getElementsByTagName('head')[0] || document.documentElement;
  }
  /**
   * @typedef {Object} BdboxLSCacheOptions
   * @property {String} url 要缓存的url地址，必须是js或者css，作为localstorage-key，少于100Byte的暂时不缓存
   * @property {String} version 缓存版本号
   * @property {Function} check 需要检测函数，如果返回时true，则不需要重复获取
   * @property {Function} success 获取成功回调
   * @property {Function} error 获取失败回调函数
   */

}();