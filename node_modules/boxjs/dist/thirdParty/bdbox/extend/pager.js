module.exports = function () {
  var $ = require('boxjs/dist/utils/_bdboxWrapper');
  /* jshint ignore: start */

  /** pager 分页组件
    * core ： 元素
    * tn ： 总页数
    * pn ：当前页数
    * rn ：每页条数
    * author : lyf 3-6
    */


  !function ($) {
    var Pager = function (ops) {
      this.core = null;
      this.list = [];
      this.pn = 1;
      this.tn = null;
      this.rn = null;
      this.auto = true;
      this.count = null;
      this.init.apply(this, arguments);
    };

    $.extend(Pager.prototype, {
      init: function (ops) {
        $.extend(this, ops);

        this._bind();

        if (this.auto) {
          this.render();
        }
      },
      render: function () {
        this.draw();
      },
      to: function (index) {},
      _bind: function () {
        var _self = this;

        $(this.core).click(function (e) {
          if (!e.target || e.target.nodeName != 'A' && e.target.nodeName != 'BUTTON') {
            return;
          }

          if (e.target.nodeName == 'BUTTON') {
            var pn = $('.pager-text', this.core).val();

            if (isNaN(pn)) {
              return;
            }
          } else {
            var pn = $(e.target).attr('data-pn');

            if (isNaN(pn)) {
              return;
            }
          }

          e.preventDefault();

          if (_self.to(pn) === false) {
            return;
          }

          _self.pn = pn | 0;

          _self.draw();
        });
      },
      builder: function () {
        this.count = Math.ceil(this.tn / this.rn);
        this.list.length = 0;
        var list = this.list,
            tn = this.tn,
            rn = this.rn,
            pn = this.pn,
            count = this.count;

        if (count <= 1) {
          return;
        }

        if (pn > 1) {
          list.push({
            type: 'prev',
            index: pn - 1,
            enabled: true
          });
        } else {
          list.push({
            type: 'prev',
            enabled: false
          });
        }

        if (count > 12) {
          if (pn < 8) {
            for (var i = 1; i <= Math.min(count, 9); ++i) {
              if (pn == i) {
                list.push({
                  type: 'index',
                  index: i,
                  selected: true
                });
              } else {
                list.push({
                  type: 'index',
                  index: i,
                  selected: false
                });
              }
            }

            list.push({
              type: 'last',
              index: count
            });
          } else if (pn + 8 > count) {
            list.push({
              type: 'first',
              index: 1
            });

            for (var i = Math.max(count - 9, 1); i <= count; ++i) {
              if (pn == i) {
                list.push({
                  type: 'index',
                  index: i,
                  selected: true
                });
              } else {
                list.push({
                  type: 'index',
                  index: i,
                  selected: false
                });
              }
            }
          } else {
            list.push({
              type: 'first',
              index: 1
            });

            for (var i = pn - 4; i < pn; ++i) {
              list.push({
                type: 'index',
                index: i,
                selected: false
              });
            }

            list.push({
              type: 'index',
              index: pn,
              selected: true
            });

            for (var i = pn + 1; i <= pn + 4; ++i) {
              list.push({
                type: 'index',
                index: i,
                selected: false
              });
            }

            list.push({
              type: 'last',
              index: count
            });
          }
        } else {
          for (var i = 1; i <= count; ++i) {
            if (pn == i) {
              list.push({
                type: 'index',
                index: i,
                selected: true
              });
            } else {
              list.push({
                type: 'index',
                index: i,
                selected: false
              });
            }
          }
        }

        if (pn < count) {
          list.push({
            type: 'next',
            index: pn + 1,
            enabled: true
          });
        } else {
          list.push({
            type: 'next',
            enabled: false
          });
        }

        if (count > 12) {
          list.push({
            type: 'to',
            enabled: true
          });
        }
      },
      ToString: function () {
        var tpl = {
          index: function (e) {
            if (!e.selected) {
              return '<li class="pager-selected"><a href="' + e.index + '" data-pn="' + e.index + '">' + e.index + '</a></li>';
            } else {
              return '<li>' + e.index + '</li>';
            }
          },
          prev: function (e) {
            if (e.enabled) {
              return '<li class="pager-prev"><a href="' + e.index + '" data-pn="' + e.index + '">前一页</a></li>';
            } else {
              return '<li class="pager-prev">前一页</li>';
            }
          },
          next: function (e) {
            if (e.enabled) {
              return '<li class="pager-next"><a href="' + e.index + '" data-pn="' + e.index + '">下一页</a></li>';
            } else {
              return '<li class="pager-next">下一页</li>';
            }
          },
          to: function (e) {
            return ''; // return '<li class="pager-to">到<input type="text" class="pager-text" />页<span class="btn btn-normal"><span><button type="button">确定</button></span></span></li>';
          },
          first: function (e) {
            return '<li class="pager-first"><a href="' + e.index + '" data-pn="' + e.index + '">' + e.index + '</a>...</li>';
          },
          last: function (e) {
            return '<li class="pager-last">...<a href="' + e.index + '" data-pn="' + e.index + '">' + e.index + '</a></li>';
          }
        };
        var ret = [];

        for (var i = 0, list = this.list; i < list.length; ++i) {
          if (!tpl[list[i].type]) {
            continue;
          }

          ret[i] = tpl[list[i].type](list[i]);
        }

        return '<ul>' + ret.join('') + '</ul>';
      },
      draw: function () {
        this.builder();
        $(this.core).html(this.ToString());
      }
    });

    $.fn.pager = function (options) {
      var pager = $(this).data('pager');

      if (typeof options == 'object' || !options) {
        if (pager) {
          return this;
        }

        var p = $.extend({
          core: this
        }, options);
        pager = new Pager(p);
        $(this).data('pager', pager);
      } else {
        if (typeof pager[options] == 'function') {
          var ret = pager[options].apply(pager, [].slice.call(arguments, 1));
          return typeof ret == 'undefined' ? this : ret;
        }
      }

      return this;
    };
  }(Zepto);
}();