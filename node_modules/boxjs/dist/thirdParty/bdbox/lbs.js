module.exports = function () {
  var $ = require('boxjs/dist/utils/_bdboxWrapper');
  /* eslint-disable */

  /*jshint -W802 */


  var Cookie = require('./utils/cookie');

  var loadJS = require('./io/loadJS');

  var isAndroid = /android/i.test(navigator.userAgent);
  var isInLightApp = window.BLightApp && BLightApp.getCurrentPosition;
  var LBS_SERVICE_URL = 'http://aladdin.wapmap.baidu.com/plugin?ptype=1';
  var MAP_API_URL = 'http://api.map.baidu.com/?qt=rgc&dis_poi=100&poi_num=10&ie=utf-8&oue=1&res=api&callback=?';
  var IP_SERVICE_URL = 'http://api.map.baidu.com/location/ip?ak=syDXGG8s0DjYkYSnCj7jQlUq&coor=bd09ll&callback=?'; //服务cache，防止多次请求

  var serviceHandlerCache = {};
  var cache = {};
  /**
   * lbs接口默认配置
   * @typedef LBSObject
   * @property {Number} [expireTime=0] 过期时间戳
   * @property {Boolean} [onlyFromCookie=false] 是否只用cookie
   * @property {Boolean} [useLBSService=true] 是否将获取的latlon经过lbs接口转换
   * @property {Function} onFail 错误回调
   * @property {Function} OnSuccess 成功回调
   * @property {Number} [ipTimeout=8000] 获取ip超时时间
   * @property {Number} [html5Timeout=8000] 获取html5接口超时时间
   * @property {Number} [nativeTimeout=8000] 获取moplus和轻应用接口超时时间
   * @type {Object}
   */

  var defaultOptions = {
    expireTime: 0,
    onlyFromCookie: false,
    ipTimeout: 8000,
    html5Timeout: 8000,
    nativeTimeout: 8000,
    onSuccess: $.emptyFn,
    onFail: $.emptyFn,
    useLBSService: true
  };
  /**
   * lbs定位库
   * @author wangyongqing01
   * @version $Id$
   * @namespace Bdbox.lbs
   */

  /** @lends Bdbox.lbs */

  var LBS = {
    /**
     * 获取定位信息
     * @param  {LBSObject} options 配置对象
     * @return {LBS}         返回this
     * @example
     * Bdbox.lbs.get({
     *   onSuccess:function(data){
     *       console.log('====get接口====');
     *       console.log(data);
     *   },
     *   onFail: function(data){
     *       console.log('====get=失败===');
     *       console.log(data);
     *   }
     * });
     */
    get: function (options) {
      options = extend({}, defaultOptions, options);
      var expireTime = options.expireTime;

      if (expireTime > 0 || expireTime === 0 && options.onlyFromCookie === true) {
        var cookieData = this.getFromCookie();

        if (cookieData && (parseInt(Date.now(), 10) - cookieData.timestamp <= expireTime || expireTime === 0)) {
          options.onSuccess(cookieData);
          return;
        }
      }

      var self = this;
      var stack = ['IP'];

      if (isAndroid) {
        //如果是android，则使用moplus定位
        stack.unshift('Moplus');
      }

      if ($.$isBox()) {
        //框内
        if (isInLightApp) {
          stack.unshift('LightApp');
        }
      } else {
        stack.splice(1, 0, 'Html5'); // stack = ['Html5'];
      }

      var cb = function (data) {
        if (data && data.error === 0) {
          options.onSuccess(data);
        } else if (stack.length !== 0) {
          // _console.log(stack.join(','), data);
          self['getFrom' + stack.shift()](opts);
        } else {
          options.onFail(cookieData);
        }
      };

      var opts = extend({}, options, {
        onSuccess: cb,
        onFail: cb
      });
      self['getFrom' + stack.shift()](opts);
    },

    /**
     * 从轻应用接口获取经纬度
     * @param  {LBSObject} options 配置对象
     * @return {LBS}         返回this
     * @example
     * Bdbox.lbs.getFromLightApp({
     *     onSuccess:function(data){
     *         console.log('====getFromLightApp====');
     *         console.log(data);
     *     },
     *     onFail: function(data){
     *         console.log('====getFromLightApp=失败===');
     *         console.log(data);
     *     }
     * });
     */
    getFromLightApp: function (options) {
      options = options || {};

      if (cache.lightapp && cache.lightapp.error === 0) {
        options.onSuccess(cache.lightapp);
        return this;
      }

      var back = {
        error: 10,
        from: 'lightapp'
      };

      if (!isInLightApp) {
        return back;
      }

      if (!options.nativeTimeout) {
        options.nativeTimeout = 3000;
      }

      var failName = '_box_lbs' + $.getId();
      var sucName = '_box_lbs' + $.getId();
      var timer,
          isTimeout = false;

      var clear = function () {
        timer && clearTimeout(timer);
        delete window[sucName];
        delete window[failName];
      };

      window[sucName] = function (data) {
        if (data.result === 0) {
          if (options.useLBSService) {
            self.parseHtml5Coords(data.coords, function (position) {
              position.from = 'lightapp'; //存入cache

              cache.lightapp = position;
              options.onSuccess(position);
            }, function () {
              options.onFail({
                from: 'lightapp',
                //geolocation定位失败
                error: 7
              });
            }, options.nativeTimeout);
          } else {
            data.error = 0;
            data.from = 'lightapp';
            options.onSuccess(data);
          }
        } else {
          options.onFail({
            error: data.result,
            //lightapp返回失败
            from: 'lightapp'
          });
        }
      };

      window[failName] = function () {
        clear();
        options.onFail({
          error: 3,
          //lightapp返回失败
          from: 'lightapp'
        });
      };

      timer = setTimeout(function () {
        isTimeout = true;
        clear();
        options.onFail(back);
      }, options.nativeTimeout);
      BLightApp.getCurrentPosition(sucName, failName);
      return this;
    },

    /**
     * 从html5接口获取经纬度信息
     * @param  {LBSObject} options 配置对象
     * @return {LBS}         返回this
     * @example
     * Bdbox.lbs.getFromHtml5({
     *     onSuccess:function(data){
     *         console.log('====getFromHtml5====');
     *         console.log(data);
     *     },
     *     onFail: function(data){
     *         console.log('====getFromHtml5=失败===');
     *         console.log(data);
     *     }
     * });
     */
    getFromHtml5: function (options) {
      options = options || {};

      if (cache.html5 && cache.html5.error === 0) {
        options.onSuccess(cache.html5);
        return this;
      }

      if (!options.html5Timeout) {
        options.html5Timeout = 3000;
      }

      var self = this;

      if (navigator.geolocation) {
        var timer,
            isTimeout = false;
        navigator.geolocation.getCurrentPosition(function (pos) {
          if (isTimeout) {
            return;
          }

          if (timer) {
            clearTimeout(timer);
          }

          var data = pos.coords;

          if (data) {
            if (options.useLBSService) {
              //使用定位服务
              self.parseHtml5Coords(data, function (position) {
                cache.html5 = position;
                options.onSuccess(position);
              }, function () {
                options.onFail({
                  from: 'html5',
                  //geolocation定位失败
                  error: 7
                });
              }, options.html5Timeout);
            } else {
              data.from = 'html5';
              data.error = 0;
              options.onSuccess(data);
            }
          } else {
            options.onFail({
              from: 'html5',
              //geolocation定位失败
              error: 7
            });
          }
        }, function (e) {
          if (isTimeout) {
            return;
          }

          if (timer) {
            clearTimeout(timer);
          }

          options.onFail({
            from: 'html5',
            //geolocation定位失败
            error: 7
          });
        }, {
          timeout: options.html5Timeout,
          maximumAge: 0,
          enableHighAccuracy: true
        });
        timer = setTimeout(function () {
          isTimeout = true;
          options.onFail({
            from: 'html5',
            //geolocation定位超时
            error: 13
          });
        }, options.html5Timeout);
      } else {
        options.onFail({
          from: 'html5',
          //不支持geolocation
          error: 6
        });
      }

      return this;
    },

    /**
     * 通过cookie获取经纬度，这个不是异步请求，直接返回点信息
     * @return {object}            position对象
     */
    getFromCookie: function (callback) {
      //BAIDULOC =12936521_4580521_1000_149_1383542366651
      var geoCookie = Cookie.get('BAIDULOC');
      var back = {
        error: 1,
        //cookie返回失败
        from: 'cookie'
      };
      var locs = geoCookie.split('_');

      if (locs.length === 5) {
        back = Position(locs[0], locs[1], locs[2], locs[3], locs[4], 'cookie');
      }

      $.isFunction(callback) && callback(back);
      return back;
    },

    /**
     * 通过moplus接口获取经纬度信息
     * @param  {LBSObject} options 配置对象
     * @return {LBS}         返回this
     * @example
     * Bdbox.lbs.getFromMoplus({
     *     onSuccess:function(data){
     *         console.log('====getFromMoplus====');
     *         console.log(data);
     *     },
     *     onFail: function(data){
     *         console.log('====getFromMoplus=失败===');
     *         console.log(data);
     *     }
     * });
     */
    getFromMoplus: function (options) {
      options = options || {};

      if (cache.moplus && cache.moplus.error === 0) {
        options.onSuccess(cache.moplus);
        return this;
      }

      if (!isAndroid) {
        options.onFail({
          error: 9,
          //只有android才有moplus
          from: 'moplus'
        });
      }

      if (!options.nativeTimeout) {
        options.nativeTimeout = 3000;
      }

      var self = this;
      var handlerCacheName = 'moplus';

      if (serviceHandlerCache[handlerCacheName] && serviceHandlerCache[handlerCacheName].length > 0) {
        serviceHandlerCache[handlerCacheName].push(options);
        return;
      }

      serviceHandlerCache[handlerCacheName] = [];
      serviceHandlerCache[handlerCacheName].push(options);

      var cb = function (data, isTimeout) {
        var handler;

        while (handler = serviceHandlerCache[handlerCacheName].shift()) {
          if (data && data.error === 0 && data.coords) {
            if (handler.useLBSService) {
              self.parseMercatorCoords(data.coords, function (handler) {
                return function (position) {
                  //存入cache
                  cache.moplus = position;
                  handler.onSuccess(position);
                };
              }(handler), function (handler) {
                return function () {
                  handler.onFail({
                    error: 11,
                    //解析失败
                    from: 'moplus'
                  });
                };
              }(handler), handler.nativeTimeout);
            } else {
              data.error = 0;
              data.from = 'moplus';
              handler.onSuccess(data);
            }
          } else {
            data = {
              error: 2,
              //404过期，或者不存在moplus
              from: 'moplus'
            };
            handler.onFail(data);
          }
        }
      };

      loadJS({
        url: 'http://127.0.0.1:6259/geolocation?mcmdf=inapp_boxserver&gps=1&timeout=10000&callback=?',
        success: cb,
        error: cb,
        timeout: options.nativeTimeout
      });
      return this;
    },

    /**
     * 解析墨卡托坐标
     * @param  {Object} coords    经纬度对象
     * @param  {function} onSuccess 成功回调
     * @param  {function} onFail    失败回调
     * @param  {number} [timeout=8000]   超时时间
     * @return {LBS}           返回this
     * @example
     * Bdbox.lbs.parseMercatorCoords({longitude:xxx,latitude:xxx},function(data){
     *     console.log(data);
     * }, function(err){
     *     console.log(err);
     * }, 3e3);
     */
    parseMercatorCoords: function (coords, onSuccess, onFail, timeout) {
      if (!$.isFunction(onFail)) {
        onFail = $.emptyFn;
      }

      var handlerCacheName = 'mercator' + coords.longitude + '_' + coords.latitude;

      if (serviceHandlerCache[handlerCacheName] && serviceHandlerCache[handlerCacheName].length > 0) {
        serviceHandlerCache[handlerCacheName].push({
          success: onSuccess,
          fail: onFail
        });
        return;
      }

      timeout = timeout | 0;

      if (timeout === 0) {
        timeout = 8e3;
      }

      serviceHandlerCache[handlerCacheName] = [];
      serviceHandlerCache[handlerCacheName].push({
        success: onSuccess,
        fail: onFail
      });

      var cb = function (result, isError) {
        var handler;
        var cbname = 'success',
            data = {};

        if (isError) {
          cbname = 'fail';
        } else {
          var content = result && result.content,
              addressDetail = content && content.address_detail,
              cityCode = addressDetail && addressDetail.city_code,
              point = content && content.point;

          if (content && addressDetail && cityCode !== 0 && point) {
            data = Position(coords.longitude, coords.latitude, coords.accuracy, cityCode, Date.now(), 'moplus', content.address, {
              city: addressDetail.city,
              district: addressDetail.district,
              street: addressDetail.street,
              cityCode: cityCode
            });
          } else {
            cbname = 'fail';
          }
        }

        while (handler = serviceHandlerCache[handlerCacheName].shift()) {
          if ($.isFunction(handler[cbname])) {
            handler[cbname](data);
          }
        }
      };

      loadJS({
        url: MAP_API_URL + '&x=' + coords.longitude + '&y=' + coords.latitude,
        success: cb,
        error: function () {
          cb(null, true);
        },
        timeout: timeout
      });
    },

    /**
     * 将html5经纬度转换成百度经纬度
     * @param  {Object} coords    经纬度对象，包括精度
     * @param  {function} onSuccess 成功回调
     * @param  {function} onFail    失败回调函数
     * @param  {number} [timeout=8000]   超时时间
     * @return {this}           返回this
     */
    parseHtml5Coords: function (coords, onSuccess, onFail, timeout) {
      if (!$.isFunction(onFail)) {
        onFail = $.emptyFn;
      }

      var handlerCacheName = 'mercator' + coords.longitude + '_' + coords.latitude + '_' + coords.accuracy;

      if (serviceHandlerCache[handlerCacheName] && serviceHandlerCache[handlerCacheName].length > 0) {
        serviceHandlerCache[handlerCacheName].push({
          success: onSuccess,
          fail: onFail
        });
        return;
      }

      timeout = timeout | 0;

      if (timeout === 0) {
        timeout = 8e3;
      }

      serviceHandlerCache[handlerCacheName] = [];
      serviceHandlerCache[handlerCacheName].push({
        success: onSuccess,
        fail: onFail
      });

      var cb = function (result, isError) {
        var handler,
            cbname = 'success',
            data = {};

        if (isError) {
          cbname = 'fail';
        } else {
          var point = result.point,
              addr = result.addr;

          if (!result || !point || !addr || !addr.city_code || addr.city_code === 0) {
            cbname = 'fail';
          } else {
            data = Position(point.x, point.y, coords.accuracy, addr.city_code, Date.now(), 'html5', result.address, addr);
          }
        }

        while (handler = serviceHandlerCache[handlerCacheName].shift()) {
          handler[cbname](data);
        }
      };

      loadJS({
        url: LBS_SERVICE_URL + '&xyr=' + [coords.longitude, coords.latitude, coords.accuracy].join('_') + '&callback=?',
        timeout: timeout,
        success: cb,
        error: function () {
          cb(null, true);
        }
      });
    },

    /**
     * 通过ip接口获取经纬度
     * @param  {LBSObject} options 配置对象
     * @return {this}         返回this
     */
    getFromIP: function (options) {
      if (cache.ip && cache.ip.error === 0) {
        options.onSuccess(cache.ip);
        return this;
      }

      if (!options.ipTimeout) {
        options.ipTimeout = 3000;
      }

      var handlerCacheName = 'ip';

      if (serviceHandlerCache[handlerCacheName] && serviceHandlerCache[handlerCacheName].length > 0) {
        serviceHandlerCache[handlerCacheName].push(options);
        return;
      }

      serviceHandlerCache[handlerCacheName] = [];
      serviceHandlerCache[handlerCacheName].push(options);

      var cb = function (data) {
        var handler,
            cbname = 'onSuccess';

        if (data && data.status === 0 && data.content && data.content.point) {
          var content = data.content;
          var point = content.point;
          var addressDetail = content.address_detail;
          var position = new Position(point.x, point.y, 0, addressDetail.city_code, Date.now(), 'ip', content.address, addressDetail); //存入cache

          cache.ip = position;
          data = position;
        } else {
          cbname = 'onFail';
          data = {
            error: 2,
            //404过期，或者不存在moplus
            from: 'ip'
          };
        }

        while (handler = serviceHandlerCache[handlerCacheName].shift()) {
          handler[cbname](data);
        }
      };

      loadJS({
        url: IP_SERVICE_URL,
        success: cb,
        error: cb,
        timeout: options.ipTimeout
      });
      return this;
    }
  };
  return LBS; //http://bigbox.searchbox.baidu.com/bigbox?action=loc&type=locinfo&format=json&prod=searchbox&resource_name=other&sec=1405923180&authcode=f20eab&cip=223.104.12.250&cuid=9A34AC1B4F1BF41D21E1C2B9D6F8A7A99D44C44FFFNLMELLSGE&log_id=3006043974&data={'location':'102.646135%2C25.053514%2C--460-02'}
  //http://bigbox.searchbox.baidu.com/bigbox?action=loc&type=locinfo&format=json&prod=searchbox&resource_name=other&sec=1387259363&authcode=af0c79&cip=172.22.137.8&cuid=225009FC0378E8A79CE445AF0B37AD81%7C602657110551768&log_id=2787637532&data={22apinfo%22:%22ghh1ha0f8h884e2bhf47f35acd8a3khf47f3599af42%22}&
  //柏湘桂<sfcuboy> 14:16:44
  // 不要直接用额，要使用的话，先跟我申请哈
  // 我要跟op谈

  function Position(x, y, accuracy, cityCode, timestamp, from, address, addr) {
    return {
      error: 0,
      x: parseFloat(x),
      y: parseFloat(y),
      accuracy: parseFloat(accuracy),
      cityCode: parseInt(cityCode, 10),
      timestamp: parseInt(timestamp, 10) || '',
      from: from || 'unkown',
      address: address || '',
      addr: addr || {}
    };
  }

  function extend(merged) {
    var sources = [].slice.call(arguments, 1);

    for (var i = 0; i < sources.length; i++) {
      for (var property in sources[i]) {
        merged[property] = sources[i][property];
      }
    }

    return merged;
  }
}();