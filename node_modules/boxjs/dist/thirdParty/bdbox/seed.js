module.exports = function () {
  var $ = require('boxjs/dist/utils/_bdboxWrapper')
  /**
   * 框Bdbox基础库
   * @namespace Bdbox
   * @global
   * @author wangyongqing01
   * @version $Id: seed.js 304476 2016-08-11 08:49:03Z wangyongqing01 $
   */
  (function (window, document, undefined) {
    var ls = window.localStorage;
    var CACHE = {};
    /* eslint-disable */

    var now = +new Date();

    var _id = (now + '').slice(-3);

    var ua = navigator.userAgent;
    /** @lends Bdbox */

    var $ = {
      /**
       * 当前环境是否为框，通过userAgent判断
       * @type {Boolean}
       */
      isBoxApp: function (subName) {
        subName = subName || '';

        if (/ baiduboxapp\//i.test(ua) === false) {
          // 框外
          return false;
        }

        if (ua.indexOf(subName + ' baiduboxapp') < 0) {
          // 具体的 app ：主线 / lite / info 等
          return false;
        }

        return true;
      },
      isBox: / baiduboxapp\//i.test(ua) && !/ (lite|info|pro|mission) baiduboxapp/.test(ua),
      $isBox: function () {
        var navigator = window.navigator || {};
        var ua = navigator.userAgent;
        return / baiduboxapp\//i.test(ua) && !/ (lite|info|pro|mission) baiduboxapp/.test(ua);
      },
      isLiteBox: / (lite|info) baiduboxapp\//i.test(ua),
      $isLiteBox: function () {
        /* istanbul ignore next */
        var navigator = window.navigator || {};
        /* istanbul ignore next */

        var ua = navigator.userAgent;
        /* istanbul ignore next */

        return / (lite|info) baiduboxapp\//i.test(ua);
      },
      isInfoBox: / info baiduboxapp\//i.test(ua),
      $isInfoBox: function () {
        /* istanbul ignore next */
        var navigator = window.navigator || {};
        /* istanbul ignore next */

        var ua = navigator.userAgent;
        /* istanbul ignore next */

        return / info baiduboxapp\//i.test(ua);
      },
      isProBox: / pro baiduboxapp\//i.test(ua),
      $isProBox: function () {
        /* istanbul ignore next */
        var navigator = window.navigator || {};
        /* istanbul ignore next */

        var ua = navigator.userAgent;
        /* istanbul ignore next */

        return / pro baiduboxapp\//i.test(ua);
      },
      isMissionBox: / mission baiduboxapp\//i.test(ua),

      /**
       * 当前系统是否为iOS
       * @type {Boolean}
       */
      isIOS: /(iPhone|iPod|iPad)/.test(ua),
      $isIOS: function () {
        var navigator = window.navigator || {};
        return /(iPhone|iPod|iPad)/.test(navigator.userAgent);
      },

      /**
       * 当前系统是否为android
       * @type {Boolean}
       */
      isAndroid: /(Android);?[\s\/]+([\d.]+)?/.test(ua),
      $isAndroid: function () {
        var navigator = window.navigator || {};
        return /(Android);?[\s\/]+([\d.]+)?/.test(navigator.userAgent);
      },

      /**
       * 获取唯一id，用于一些随机数
       * @return {Number} id 随机数
       * @example
       * var jsonpFnName = '_box_' + Bdbox.getId();
       */
      getId: function () {
        return _id++;
      },

      /**
       * 空数组
       * @type {Array}
       */
      emptyArr: [],

      /**
       * 空function，用于一些回调函数默认函数
       * @return {Undefined} undefined 未定义
       */
      emptyFn: function () {},

      /**
       * 空object
       * @type {Object}
       */
      cleanObj: {},

      /**
       * document.getElementById实现
       * @param  {String} id nodeID，不带#
       * @return {Object} domlist  DOM节点
       * @example
       * Bdbox.getId('id').style.display = 'none';
       */
      byId: function (id) {
        return $.isString(id) ? document.getElementById(id) : id;
      },

      /**
       * 泛数组转换为数组
       * @description 转换后的数组可以用数组方法
       * @param  {Object} arrayLike 类似数组的对象
       * @return {Array}  array 转成数组类型的数组
       * Bdbox.toArray(document.querySelectorAll('*')).forEach(function(node){
       *     console.log(node);
       * });
       */
      toArray: function (arrayLike) {
        return $.emptyArr.slice.call(arrayLike);
      },

      /**
       * querySelectorAll选择器
       * @param  {String} selector 选择器
       * @param  {DOM} [context=document]  上下文
       * @return {DomList}   array  返回toArray处理好的dom节点数组
       */
      $: function (selector, context) {
        context = context && context.nodeType === 1 ? context : document;
        return $.toArray(context.querySelectorAll(selector));
      }
    };
    /**
     * 是否是function类型
     * @name isFunction
     * @function
     * @memberOf Bdbox
     * @param  {Object} obj 要判断的对象
     * @return {Boolean} bool  true|false
     */

    /**
     * 是否是string类型
     * @name isString
     * @function
     * @memberOf Bdbox
     * @param  {Object} obj 要判断的对象
     * @return {Boolean} bool true|false
     */

    /**
     * 是否是array类型
     * @name isArray
     * @function
     * @memberOf Bdbox
     * @param  {Object} obj 要判断的对象
     * @return {Boolean} bool 返回true|false
     */

    /**
     * 是否是一个Number类型
     * @name isNumber
     * @function
     * @memberOf Bdbox
     * @param  {Object} obj 要判断的对象
     * @return {Boolean} bool  返回true|false
     */

    /**
     * 是否是一个RegExp类型
     * @name isRegExp
     * @function
     * @memberOf Bdbox
     * @param  {Object} obj 要判断的对象
     * @return {Boolean} bool  返回true|false
     */

    'Function,String,Array,Number,RegExp'.replace(/[^, ]+/g, function (t) {
      $['is' + t] = function (s) {
        return isType(s, t);
      };
    });
    /**
     * 是否为布尔
     * @function
     * @name isBoolean
     * @memberOf Bdbox
     * @param  {Object}  obj 要判断的对象
     * @return {Boolean}  bool true|false
     */

    $.isBoolean = function (obj) {
      return obj === true || obj === false;
    };
    /**
     * 是否为object
     * @function
     * @name isObject
     * @memberOf Bdbox
     * @param  {Object}  obj 要判断的对象
     * @return {Boolean} bool true|false
     */


    $.isObject = function (obj) {
      return typeof obj === 'object';
    };
    /**
     * 是否为undefined
     * @function
     * @name isUndefined
     * @memberOf Bdbox
     * @param  {Object}  obj 要判断的对象
     * @return {Boolean} bool  true|false
     */


    $.isUndefined = function (obj) {
      return obj === undefined;
    };
    /**
     * 是否是window对象
     * @function
     * @name isWindow
     * @memberOf Bdbox
     * @param  {Object}  obj 要判断的对象
     * @type {Boolean}
     */


    $.isWindow = function (obj) {
      return obj != null && obj == obj.window;
    };
    /**
     * 是否是纯object对象
     * @function
     * @name isPlainObject
     * @memberOf Bdbox
     * @param  {Object}  obj 要判断的对象
     * @type {Boolean}
     */


    $.isPlainObject = function (obj) {
      return $.isObject(obj) && !$.isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;
    };

    function isType(obj, type) {
      return $.cleanObj.toString.call(obj).slice(8, -1) === type;
    }

    ;
    $._v = 'seed1.0';
    var Bdbox = $;
    var DEFAULT_NS = 'seed:bdbox/'; //AMD模块

    var modulesMap = {};
    var factoryMap = {};
    var loadingMap = {};
    $.define = define;

    function define(id, factory, hash) {
      id = id.replace(/\.js$/i, '');
      factoryMap[id] = factory;
      loadingMap[id] = 1; //存入localstorage

      if ($._options.cache && hash && hash.length > 5) {
        try {
          ls[id] = JSON.stringify({
            code: factory.toString(),
            v: hash
          });
        } catch (e) {
          $._options.cache = false;
        }
      }
    }
    /**
     * 判断模块是否已经定义
     * @param  {String} id 模块名
     * @return {Boolean}    是否已经定义
     */


    $.defined = function (id) {
      return loadingMap[id];
    };

    $.required = function (id) {
      return modulesMap[id] && modulesMap[id].exports;
    };
    /**
     * require方法
     * @description 请求需要一个模块，id按照fis规范：`命名空间:xxx/xxx`，
     * 例如Bdbox的模块都是：`common:bdbox/xxx`
     * @function
     * @name require
     * @memberOf Bdbox
     * @param  {String} id 模块名
     * @return {Object} obj  模块对象
     * @example
     * var module = require('common:bdbox/someModule');
     * module.someFn();
     * //test.js
     * var version_compare = require('common:bdbox/utils/version_compare');
     * var getVersion = require('common:bdbox/utils/getVersion');
     * var boxversion = getVersion();
     * console.log(boxversion);
     * //也可以直接使用Bdbox.xxx.xxx形式，例如：
     * require('common:bdbox/android/invokeApp');
     * Bdbox.android.invokeApp('bd_query', 'setQuery', ['web','上框关键词']);
     */


    function require(id) {
      var mod = modulesMap[id];

      if (mod) {
        return mod.exports;
      }

      var factory = factoryMap[id];

      if (!factory) {
        throw 'Cannot find module `' + id + '`';
      }

      var ids = id.split(':');
      var names = ids.pop().split('/');
      var root = $;
      var name, lastName;

      while (name = names.shift()) {
        if (name === 'bdbox') {
          continue;
        }

        lastName = name;

        if (names.length) {
          root = root[name] = root[name] || {};
        }
      }

      var mod = modulesMap[id] = {
        exports: {}
      };
      var ret = $.isFunction(factory) ? factory.apply(mod, [require, mod.exports, mod, $]) : factory;

      if (ret) {
        mod.exports = ret;
      }

      return root[lastName] = mod.exports;
    }

    $._options = {
      cache: 1,
      timeout: 15,
      // seconds
      alias: {},
      // key - name, value - id
      map: {},
      // key - id, value - name/id
      pkg: {},
      //支持pack
      urlPattern: null,
      // '/path/to/resources/%s'
      comboPattern: '<!--[COMBO_SEVER_URL]-->??%s',
      // '/path/to/combo-service/%s' or function (ids) { return url; }
      combo: 1,
      maxFiles: 15 // approximate value of combo url's max length (recommend 2000)

    }; //引入each

    var $ = require('boxjs/dist/utils/_bdboxWrapper');
    /**
     * each方法
     * @memberOf Bdbox
     * @function each
     * @param  {Object} obj      要遍历的对象
     * @param  {Function} iterator 处理函数
     * @param  {Object} context  选填上下文
     * @return {Object}          Bdbox对象
     * @example
     * Bdbox.each([1,2,3], function(v, i){console.log(v,i)});
     * 1,0
     * 2,1
     * 3,2
     * //注意和jQuery和zepto的each不同，第一个参数是索引
     */


    return function (obj, iterator, context) {
      if (typeof obj !== 'object') {
        return;
      }

      var i,
          l,
          t = type(obj);
      context = context || obj;

      if (t === 'array' || t === 'arguments' || t === 'nodelist') {
        for (i = 0, l = obj.length; i < l; i++) {
          if (iterator.call(context, obj[i], i, obj) === false) return;
        }
      } else {
        for (i in obj) {
          if (obj.hasOwnProperty(i)) {
            if (iterator.call(context, obj[i], i, obj) === false) return;
          }
        }
      }
    };

    function type(obj) {
      var t;

      if (obj == null) {
        t = String(obj);
      } else {
        t = Object.prototype.toString.call(obj).toLowerCase();
        t = t.substring(8, t.length - 1);
      }

      return t;
    }

    ;

    var $ = require('boxjs/dist/utils/_bdboxWrapper');
    /**
     * 版本比较；
     * @memberOf Bdbox.utils
     * @name version_compare
     * @param  {String} version1 第一个版本号
     * @param  {String} version2 第二个版本号
     * @return {Nubmer} num  version1==version2返回0；version1>version2返回1；小于返回-1
     * @author wangyongqing01
     * @version $Id: version_compare.js 175996 2014-05-16 00:48:03Z wangyongqing01 $
     * @example
     * var version_compare = require('common:bdbox/utils/version_compare');
     * var getVersion = require('common:bdbox/utils/getVersion');
     * version_compare(getVersion(), '4.7.1');
     * //version1==version2返回0；
     * //version1>version2返回1；
     * //小于返回-1
     */


    var self = function (version1, version2) {
      version2 += '';
      version1 += '';
      var a = version1.split('.'),
          b = version2.split('.'),
          i = 0,
          len = Math.max(a.length, b.length);

      for (; i < len; i++) {
        if (a[i] && !b[i] && parseInt(a[i]) > 0 || parseInt(a[i]) > parseInt(b[i])) {
          return 1;
        } else if (b[i] && !a[i] && parseInt(b[i]) > 0 || parseInt(a[i]) < parseInt(b[i])) {
          return -1;
        }
      }

      return 0;
    };

    return self;
    ;

    var $ = require('boxjs/dist/utils/_bdboxWrapper');
    /* eslint-disable */

    /**
     * 获取框的版本号
     * @memberOf Bdbox.utils
     * @name getVersion
     * @function
     * @return {String} version 返回框的版本号
     * @author wangyongqing01
     * @version  $Id: getVersion.js 175996 2014-05-16 00:48:03Z wangyongqing01 $
     */


    var self = function () {
      var back = 0;

      if (window.baiduboxapp_version) {
        back = window.baiduboxapp_version;
      } else if ($.$isBox()) {
        var str = navigator.userAgent;
        var a;

        if (a = /([\d+.]+)_(?:diordna|enohpi)_/.exec(str)) {
          a = a[1].split('.');
          back = a.reverse().join('.');
        } else if (a = /baiduboxapp\/([\d+.]+)/.exec(str)) {
          back = a[1];
        }
      }

      self = function () {
        return back;
      };

      return back;
    };

    return self;

    var $ = require('boxjs/dist/utils/_bdboxWrapper');
    /* eslint-disable */

    /**
     * 获取框的版本号
     * @memberOf Bdbox.utils
     * @name getLiteVersion
     * @function
     * @return {String} version 返回框的版本号
     * @author wangyongqing01
     * @version  $Id: getLiteVersion.js 175996 2017-04-16 00:48:03Z wangyongqing01 $
     */


    var self = function () {
      var back = 0;

      if ($.$isLiteBox()) {
        var str = navigator.userAgent;
        var a;

        if (a = /baiduboxapp\/([\d+.]+)/.exec(str)) {
          back = a[1];
        }
      }

      self = function () {
        return back;
      };

      return back;
    };

    return self;

    var $ = require('boxjs/dist/utils/_bdboxWrapper');
    /* eslint-disable */


    var version_compare = require('../utils/version_compare');

    var getVersion = require('../utils/getVersion');

    var getLiteVersion = require('../utils/getLiteVersion');
    /**
     * @namespace Bdbox.android
     */

    /**
     * @memberOf Bdbox.android
     * @name invokeApp
     * @function
     * @param  {String} name android提供的命名空间
     * @param  {String} func android命名空间下的方法名
     * @param  {Array} args 接受参数
     * @return {Object}      返回对象格式的json
     * @requires common:bdbox/utils/version_compare
     * @requires common:bdbox/utils/getVersion
     * @version  $Id: invokeApp.js 286328 2016-03-14 08:32:28Z wangyongqing01 $
     */


    function invokeApp(name, func, args) {
      if (args && !$.isArray(args)) {
        args = Array.prototype.slice.call(arguments, 0).slice(2);
      } //如果存在就执行，如果不存在就通过版本号来判断


      if (window[name] && window[name][func]) {
        var result = window[name][func].apply(window[name], args); //直接调用

        return {
          error: 0,
          result: result,
          __from: 'js' //打个标记

        };
      }

      var version = getVersion();

      if (version_compare(version, 4.8) >= 0 || $.$isLiteBox() || $.isMissionBox) {
        //调用方法拿4.8版本来判断
        //prompt调用一个不存在的接口，也不会报错，只是调用无效
        //但有错误值
        //2017年04月20日 新增lite版本2.0以上增加lite版本调起
        var back = execCaller(name, func, args);
        back = back ? JSON.parse(back) : {};
        back.__from = 'app';
        return back;
      } else if (version === '4.7.1' || version == '4.7') {
        //需要给4.7加个特殊标记
        //对于4.8出现的接口或者不存在的接口，在4.7内调用
        //会进入下面的逻辑，但是有风险！！！！！
        //4.7~4.7.1对于不存在的接口，使用prompt调用会出现假死状态
        //无法解决，因为无解……
        //只能在使用4.8之后的js接口，在invokeApp之前提前做判断
        //例如：bd_searchbox_interface.sendLog方法是4.8引入的
        //在使用4.7中使用invokeApp调用，会走到的逻辑，然后假死！！！切记！！！！
        var rs = execCaller(name, func, args);
        return {
          error: 0,
          result: rs,
          __from: 'app4.7'
        };
      }

      return {
        error: 200
      };
    }

    function execCaller(nameSpace, funcName, funcArgs) {
      if (!$.$isBox() && !$.$isLiteBox() && !$.isMissionBox) {
        return {
          error: 201
        };
      } else if (!$.$isAndroid()) {
        return {
          error: 202
        };
      } //保证要有[]


      var caller = {
        obj: nameSpace,
        func: funcName,
        args: funcArgs ? funcArgs : []
      };

      try {
        return window.prompt('BdboxApp:' + JSON.stringify(caller));
      } catch (e) {
        return {
          error: 201
        };
      }
    }

    return invokeApp;
    ;

    var $ = require('boxjs/dist/utils/_bdboxWrapper');
    /* eslint-disable */

    /**
     * @namespace Bdbox.ios
     */

    /**
     * ios.invokeApp，因为需要创建iframe，所以回调是异步的请求
     * @memberOf Bdbox.ios
     * @function
     * @name invokeApp
     * @param  {String}   action   调用的action，例如downloadnovel
     * @param  {Object}   params   参数对象
     * @param  {Function} callback 回调函数
     * @example
     * Bdbox.ios.invokeApp('getspeedlogdata', function(cData) {
     *     console.log(cData);
     * });
     * Bdbox.ios.invokeApp('downloadnovel', {
     *     url:'xxxx',
     *     title: 'xxxxxxx'
     * }, function(cData) {
     *     if(cData.error==0){
     *         console.log('success');
     *         alert(cData.result);
     *     }else{
     *         console.log('fail');
     *     }
     * });
     * $Id: invokeApp.js 286585 2016-03-15 11:57:15Z wangyongqing01 $
     */


    return function (action, params, callback) {
      //baiduboxapp://jsbridge?action=ios-action&func=js-func-name&params=ios-action-arguments
      if (!action || !$.isBoxApp()) {
        return;
      }

      var url = [];

      if ($.isFunction(params)) {
        callback = params;
      } else {
        for (var i in params) {
          url.push(i + '=' + params[i]);
        }
      }

      if ($.isFunction(callback)) {
        var funcName = '_bdbox_js_' + $.getId();

        window[funcName] = function () {
          callback.apply(window, [].slice.call(arguments, 0));
          /*delete window[funcName];*/
        };

        url.push('func=' + funcName);
      } else {
        if (callback) {
          url.push('func=' + callback);
        }
      }

      url = 'baiduboxapp://' + action + '?' + url.join('&'); // console.log(decodeURIComponent(url));

      var $node = document.createElement('iframe');
      $node.style.display = 'none';
      $node.src = url;
      var body = document.body || document.getElementsByTagName('body')[0];
      body.appendChild($node); // 销毁 iframe

      setTimeout(function () {
        body.removeChild($node);
        $node = null;
      }, 0);
    };
    ;

    var $ = require('boxjs/dist/utils/_bdboxWrapper');
    /**
     * 探测ua，已经集成到zepto，**不需要**单独引用，直接用Zepto.os
     * Zepto.os里面没有微信微博的判断方法，如果使用，请单独引入detect模块
     * @memberOf Bdbox.utils
     * @name detect
     * @function
     * @param  {String} ua userAgent字符串
     * @return {Object} obj  返回对象
     * @example
     * if(Bdbox.os.android){alert(Bdbox.os.version);}
     * if(Bdbox.os.isWechat){
     *     alert('微信');
     * }
     * if(Bdbox.os.isWeibo){
     *     alert('微博');
     * }
     * //部分userAgent可能是后注入的，所以需要重新获取
     * var os = Bdbox.utils.detect();
     * if(os.isWechat){
     *     alert('微信');
     * }
     * //还可以传入一个userAgent
     * var os = Bdbox.utils.detect(userAgent);
     * console.log(os);
     *
     * @author wangyongqing01
     * $Id: detect.js 286951 2016-03-17 09:28:35Z wangyongqing01 $
     */


    function detect(ua) {
      var os = {
        name: 'unknown',
        version: 0
      }; //赋值

      if (this !== window && !this.os) {
        this.os = os;
      }

      ua = ua || navigator.userAgent; //增加微信和微博判断

      var iobj = {
        Weibo: /weibo/i,
        Wechat: /micromessenger\//i,
        QQ: /QQ\//
      };

      for (var i in iobj) {
        if (iobj.hasOwnProperty(i)) {
          os['is' + i] = iobj[i].test(ua);
        }
      }

      os.isUC = ua.match(/UC/) || window.ucweb || window.ucbrowser;
      var win10 = ua.match(/Windows Phone ([\d.]+)/);

      if (win10) {
        os.win10 = true;
        os.version = win10[1];
        os.name = 'win10';
        return os;
      }

      var android = ua.match(/(Android);?\s+([\d.]+)?/);

      if (android) {
        os.android = true;
        os.version = android[2];
        os.name = 'android';
        return os;
      }

      var ipad = ua.match(/(iPad).*OS\s([\d_]+)/),
          ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/),
          iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);

      if (iphone && !ipod) {
        os.ios = os.iphone = true;
        os.version = iphone[2].replace(/_/g, '.');
        os.name = 'ios';
        return os;
      }

      if (ipad) {
        os.ios = os.ipad = true;
        os.name = 'ios';
        os.version = ipad[2].replace(/_/g, '.');
        return os;
      }

      if (ipod) {
        os.name = 'ios';
        os.ios = os.ipod = true;
        os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
        return os;
      }

      return os;
    }

    ;
    detect.apply($);
    return detect;
    ;

    var $ = require('boxjs/dist/utils/_bdboxWrapper');
    /**
     * dom ready方法
     *
     * @memberOf Bdbox
     * @function
     * @name ready
     * @param  {Array} ready的回调函数队列
     * @example
     * Bdbox.utils.ready(function() {
     *     console.log('dom is ready');
     * });
     * @version $Id: ready.js 266107 2015-09-28 06:01:02Z wangyongqing01 $
     */


    var funList = [];
    var isReady = false;

    function onReady() {
      funList.forEach(function (fun) {
        fun();
      });
      funList.length = 0;
      isReady = true;
    }

    function ready(fun) {
      if (typeof fun !== 'function') {
        return;
      }

      if (isReady) {
        fun();
      } else {
        funList.push(fun);
      }
    }

    if ('complete,loaded,interactive'.indexOf(document.readyState) > -1 && document.body) {
      onReady();
    } else {
      document.addEventListener('DOMContentLoaded', onReady, false);
    }

    return ready;
    ;
    $.version = require(DEFAULT_NS + 'utils/getVersion');
    $.version_compare = require(DEFAULT_NS + 'utils/version_compare');
    $.require = require;

    var each = require(DEFAULT_NS + 'each');

    $.alias = function (name, alias) {
      var aliasMap = $._options.alias;

      if (arguments.length > 1) {
        aliasMap[name] = alias;
        return $.alias(name);
      }

      while (aliasMap[name] && name !== aliasMap[name]) {
        if ($.isFunction(aliasMap[name])) {
          name = aliasMap[name](name);
          break;
        } else if ($.isString(aliasMap[name])) {
          name = aliasMap[name];
          break;
        }
      }

      return name;
    };

    $.config = function (obj) {
      var options = $._options;
      each(obj, function (value, key) {
        var data = options[key];

        if (data && $.isPlainObject(data)) {
          each(value, function (v, k) {
            data[k] = v;
          });
        } else {
          if ($.isArray(data)) value = data.concat(value);
          options[key] = value;
        }
      }); // 先检测下localstorage可用吗？

      try {
        if (options.cache) {
          var name = '@@THEO@@';
          ls.setItem(name, name);

          if (ls[name] === name) {
            ls.removeItem(name);
          } else {
            options.cache = 0;
          }
        }
      } catch (e) {
        options.cache = 0;
      }

      return options;
    };
    /**
     * Load any types of resources from specified url
     * @param {string} url
     * @param {Function|Object} [onload|options]
     */


    $.load = function (url, options) {
      // comboUrl 拼接最后
      if ($.isFunction(options)) {
        options = {
          onload: options
        };
        if ($.isFunction(arguments[2])) options.onerror = arguments[2];
      }

      var t = options.type || fileType(url),
          isScript = t === 'js',
          isCss = t === 'css',
          isOldWebKit = +navigator.userAgent.replace(/.*AppleWebKit\/(\d+)\..*/, '$1') < 536,
          head = document.head,
          node = document.createElement(isScript ? 'script' : 'link'),
          supportOnload = ('onload' in node),
          tid = setTimeout(onerror, (options.timeout || 15) * 1000),
          intId,
          intTimer;

      if (isScript) {
        node.type = 'text/javascript';
        node.async = false;
        node.src = url;
      } else {
        if (isCss) {
          node.type = 'text/css';
          node.rel = 'stylesheet';
        }

        node.href = url;
      }

      node.onload = node.onreadystatechange = function () {
        if (node && (!node.readyState || /loaded|complete/.test(node.readyState))) {
          clearTimeout(tid);
          clearInterval(intId);
          node.onload = node.onreadystatechange = null;
          if (isScript && head && node.parentNode) head.removeChild(node);
          if (options.onload) options.onload.call($);
          node = null;
        }
      };

      function onerror(e) {
        clearTimeout(tid);
        clearInterval(intId);
        e = (e || {}).error || new Error('load url timeout');
        e.message = 'Error loading url: ' + url + '. ' + e.message;
        if (options.onerror) options.onerror.call($, e);else throw e;
      }

      node.onerror = onerror;
      head.appendChild(node); // trigger onload immediately after nonscript node insertion

      if (isCss) {
        if (isOldWebKit || !supportOnload) {
          intTimer = 0;
          intId = setInterval(function () {
            if ((intTimer += 20) > options.timeout || !node) {
              clearTimeout(tid);
              clearInterval(intId);
              return;
            }

            if (node.sheet) {
              clearTimeout(tid);
              clearInterval(intId);
              if (options.onload) options.onload.call($);
              node = null;
            }
          }, 20);
        }
      } else if (!isScript) {
        if (options.onload) options.onload.call($);
      }
    };

    var Reactor = function (names, callback) {
      this.length = 0;
      this.depends = {};
      this.depended = {};
      this.push.apply(this, names);
      this.callback = callback;
    };

    var rproto = Reactor.prototype;

    rproto.get = function (id) {
      var res = CACHE[id];

      if (res) {
        return res;
      }

      if ($.defined(id)) {
        return CACHE[id] = {
          loaded: 1,
          id: id
        };
      }

      return null;
    };

    rproto.push = function () {
      var that = this,
          args = $.toArray(arguments);
      var options = $._options,
          map = options.map,
          PKG = options.pkg;

      function onload() {
        if (--that.length === 0) that.callback();
      }

      for (var i = 0, l = args.length; i < l; i++) {
        var id = $.alias(args[i]); //将andorid/invokeApp缩写，转成common:bdbox/android/invokeApp,
        //android/invokeApp.js
        //这里通过map.json实现
        //所有的id做了格式统一：ns:xxx/xxx/xx，如果是简写，则拼上common:bdbox, 不符合则直接认为id就是url,然后做id

        if (!~id.indexOf(':') && !TYPE_RE.test(id)) {
          id = DEFAULT_NS + id;
        }

        var res = that.get(id);

        if (!res) {
          res = CACHE[id] = {
            id: id,
            loaded: 0
          };
        } else if (that.depended[id] || res.loaded) {
          continue;
        }

        if (!res.onload) {
          res.onload = [];
        }

        that.depended[id] = 1; //开始依赖

        var conf = map[id] || {
          url: id
        };
        var deps = conf.deps;
        deps && deps.length && that.push.apply(that, deps); //如果找到pkg，直接加载pkg文件，pkg包含所有依赖

        var pkg = conf.pkg;
        var isPkg = false;

        if (pkg && PKG[pkg]) {
          // console.log(id);
          res.url = PKG[pkg].url;
          isPkg = true;
        } else {
          res.url = conf.url || conf.uri;
        }

        var type = conf.type || fileType(res.url);

        if (!isPkg && type === 'js') {
          try {
            //如果在ls中，需要校验依赖是否都已经defined
            var mod;

            if (ls && (mod = ls[id])) {
              mod = JSON.parse(mod);
              var childHash = conf.hash;

              if (childHash && mod.code && mod.v === childHash) {
                var s = document.createElement('script');
                s.appendChild(document.createTextNode('Bdbox.define("' + id + '",' + mod.code + ')'));
                document.head.appendChild(s);
                res.loaded = 1;
                continue;
              }
            }
          } catch (e) {
            error(e);
          }
        }

        !res.loaded && (that.depends[type] || (that.depends[type] = [])).push(res);
        ++that.length;
        res.onload.push(onload);
      }
    };

    rproto.genUrl = function (uris) {
      uris = $.isString(uris) ? [uris] : uris;
      var options = $._options,
          url = options.combo && options.comboPattern || options.urlPattern;

      if ($.isString(url)) {
        var _u = url.replace('%s', '');

        _u = new RegExp('^' + _u, '');
        url = url.replace('%s', uris.map(function (v) {
          return v.replace(_u, '');
        }).join(','));
      } else if ($.isFunction(url)) {
        url = url(uris);
      } else {
        url = uris.join(',');
      } // The omission of `_hash=` might cause problem in wechat's webview


      return url;
    };

    rproto.run = function () {
      var that = this,
          options = $._options,
          combo = options.combo,
          cache = options.cache,
          depends = this.depends;
      if (this.length === 0) return this.callback();
      each(depends.unknown, function (res) {
        //加载不知道类型的文件
        $.load(that.genUrl(res.url), function () {
          res.loaded = true;
        });
      });

      function resourceCombo(resdeps) {
        var uris = [],
            deps = [];
        each(resdeps, function (res, i) {
          var onload;

          if (uris.length < options.maxFiles) {
            uris.push(res.url);
            deps.push(res);
          } else {
            onload = makeOnload(deps);
            $.load(that.genUrl(uris), onload, onload);
            uris = [res.url];
            deps = [res];
          }

          if (i === resdeps.length - 1) {
            onload = makeOnload(deps);
            $.load(that.genUrl(uris), onload, onload);
          }
        });
      }

      if (combo) {
        resourceCombo(depends.css || []);
        resourceCombo(depends.js || []);
      } else {
        each((depends.css || []).concat(depends.js || []), function (res) {
          var onload = makeOnload([res]);
          $.load(that.genUrl(res.url), onload);
        });
      }
    };

    $.async = function (names, onload) {
      names = $.isString(names) ? [names] : names;
      var reactor = new Reactor(names, function () {
        var args = [];
        each(names, function (id) {
          id = !~id.indexOf(':') ? DEFAULT_NS + id : id;
          args.push(require(id));
        });
        if (onload) onload.apply($, args);
      });
      reactor.run();
    };

    var TYPE_RE = /\.(js|css)(?=[?&,]|$)/i;

    function fileType(str) {
      var ext = 'js';
      str.replace(TYPE_RE, function (m, $1) {
        ext = $1;
      });
      if (ext !== 'js' && ext !== 'css') ext = 'unknown';
      return ext;
    }

    function makeOnload(deps) {
      deps = deps.slice();
      return function (e) {
        if (e) error(e);
        each(deps, function (res) {
          if (!e) res.loaded = true;

          while (res.onload && res.onload.length) {
            var onload = res.onload.shift();
            onload.call(res);
          }
        });
      };
    }

    function error() {
      if (console && $.isFunction(console.error)) {
        console.error.apply(console, arguments);
      }
    } //兼容modjs写法


    require.async = $.async;

    require.resourceMap = function (obj) {
      if (obj && obj.res) {
        var map = $._options.map;
        $.each(obj.res, function (v, k) {
          map[k] = v;
        });
      }

      if (obj && obj.pkg) {
        var pkg = $._options.pkg;
        $.each(obj.pkg, function (v, k) {
          pkg[k] = v;
        });
      }
    };

    window.Bdbox = $;

    if (!window.require) {
      window.require = $.require;
    }
  }(window, document));
}();