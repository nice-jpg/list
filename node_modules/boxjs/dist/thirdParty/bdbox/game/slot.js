module.exports = function () {
  var $ = require('boxjs/dist/utils/_bdboxWrapper')
  /**
   * 老虎机游戏
   * @author wangyongqing01
   * $Id: slot.js 175996 2014-05-16 00:48:03Z wangyongqing01 $
   */
  (function (window, document, $, undefined) {
    var style = "#box{\n\n}\n#box:after{\n    font-size:0;\n    line-height: 0;\n    display: table;\n    content: \" \";\n    clear: both;\n}\n._slot{\n    width:86px;\n    height:70px;\n    float:left;\n    overflow: hidden;\n    padding:6px 1px 0;\n}\n._slot_ct{\n\n}\n";
    var defaultOptions = {
      img: 'slot/reel_normal.fw.png',
      img_blur: 'slot/reel_blur.fw.png',
      width: 86,
      height: 70,
      count: 6,
      duration: 10000,
      fps: 50,
      speed: 3,
      onfinish: function () {},

      /**
       * t: current time（当前时间）；
       * b: beginning value（初始值）；
       * c: change in value（变化量）；
       * d: duration（持续时间）
       */
      easeFn: function (t, b, c, d) {
        //easeInOutCubic
        if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
        return c / 2 * ((t -= 2) * t * t + 2) + b;
      }
    }; // Date.now = Date.now ? Date.now : function() {
    //     return (new Date()).getTime();
    // };

    var Slot = function (container, opts) {
      var $container = this.$container = $(container);
      var self = this;
      opts = this.opts = $.extend(defaultOptions, opts || {});
      this.width = opts.width;
      this.height = opts.height;
      this.img = opts.img;

      if (opts.img_blur) {
        this.img_blur = new Image();
        this.img_blur.src = opts.img_blur;
      }

      this.interval = 1000 / this.opts.fps;

      if (isNaN(this.interval)) {
        this.interval = 20;
      }

      this.count = this.opts.count;
      this.maxLength = this.count * this.height;
      [0, 1, 2].forEach(function (v) {
        var $node = $('<div class="_slot" ' + '><div id="_slot' + v + '"  class="_slot_ct"><img src="' + self.img + '" /><img src="' + self.img + '" /></div></div>');
        self['$slot' + v] = $node.find('._slot_ct');
        $container.append($node);
      });
      this.init();
    };

    Slot.prototype = {
      constructor: Slot,
      init: function () {
        this.roadmap = [];
        $('body').append('<style>' + style + '</style>');
        return this.reset();
      },
      //设置最终目标
      setGoal: function (index) {
        return this;
      },
      start: function (easeFunc) {
        if (this.status === 'play') {
          return this;
        } //缓动动画函数


        var easeF = easeFunc || this.opts.easeFn,
            self = this;
        this.status = 'play'; //生成地图

        this.roadmap.length = 0;
        var stepTime = this.interval,
            speed = this.opts.speed,
            duration = this.opts.duration;
        var allCount = self.count * (duration / 1000 * speed);
        var delay = 500;
        [0, 1, 2].forEach(function (v) {
          var d = duration - (2 - v) * delay,
              arr = [],
              curTime = 0,
              cur = self.cur[v],
              curVal = cur * self.height,
              goal = self.goal[v],
              nextVal = 0,
              endVal = (allCount + goal - cur) * self.height;

          while (curTime <= d) {
            nextVal = Math.floor(easeF(curTime, curVal, endVal, d));
            curTime += stepTime; //算出是第n圈

            arr.push(0 - nextVal % self.maxLength);
          } //todolist,纠正最终结果


          self.roadmap.push(arr); // console.log(arr);
        });
        this.loop();
        return this;
      },
      loop: function () {
        var self = this;
        setTimeout(function () {
          [0, 1, 2].forEach(function (v) {
            if (self.roadmap[v].length) {
              var map = self.roadmap[v].shift(); // console.log(map);

              self['$slot' + v].css('marginTop', map);
              self.cur[v] = Math.floor(-map / self.height);
            }
          }); //因为第三个是最长的数组

          if (self.roadmap[2].length) {
            self.loop();
          } else {
            setTimeout(function () {
              self.status = 'finish';

              if (typeof self.opts.onfinish) {
                self.opts.onfinish(self.goal, self);
              }
            }, 300);
          }
        }, this.interval);
      },
      reset: function () {
        this.status = 'pending';
        this.now = 0;
        this.roadmap.length = 0;
        this.cur = [0, 0, 0];
        this.goal = [2, 1, 3];
        return this;
      },
      destory: function () {}
    };
    window.Slot = Slot;
  }(window, document, Zepto));
}();