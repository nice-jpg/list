module.exports = function () {
  var $ = require('boxjs/dist/utils/_bdboxWrapper');
  /*jshint -W802*/


  var json2Query = require('./utils/jsonToQuery');

  var loadJS = require('./io/loadJS');

  var version_compare = require('./utils/version_compare');

  var tc = require('./monitor/pblog');

  var schemaInvoke = require('./schema');

  var defaultPKGName = 'com.baidu.searchbox'; //http://127.0.0.1:6259/getpackageinfo?callback=getinfo&packagename=com.baidu.searchbox
  //http://wiki.babel.baidu.com/twiki/bin/view/Com/CloudOS/Moplus

  var OLD_MOPLUS_HOST = 'http://127.0.0.1:6259/';
  var NEW_MOPLUS_HOST = 'http://127.0.0.1:40310/';
  var MCMDF = 'inapp_boxserver';
  var IS_HTTPS = location.protocol === 'https:'; // var MOPLUS_BOXINFO = NEW_MOPLUS_HOST + 'getsearchboxinfo?mcmdf=' + MCMDF + '&callback=?';
  // var MOPLUS_SENDINTENT = NEW_MOPLUS_HOST + 'sendintent?mcmdf=' + MCMDF + '&callback=?&intent=';

  var TIMEOUT = 500;
  var _BOX_INFO = null;
  var MOPLUS_STORAGE = '__moplus_host__';
  /**
   * tc统计
   */

  var sampleStat = {
    /**
     * tc pv打点标识，防止多次打点
     */
    isSendPv: false,

    /**
     * 是否命中抽样
     */
    isHit: false,

    /**
     * 解析ua
     * @return  {object}  obj  浏览器类型以及版本
     */
    parseUA: function () {
      var ua = navigator.userAgent;
      var reg = {
        uc: /UCBrowser\/(\S*) \S*/g,
        // uc浏览器
        bd: /baidubrowser\/(\S*) \(Baidu/g,
        // baidu浏览器
        qq: /MQQBrowser\/(\S*) Mobile/g,
        // qq浏览器
        chr: /Chrome\/(\S*) Mobile/g,
        // chrome浏览器
        qh: /360 Aphone Browser \((\S*)\)/g,
        // 360浏览器
        sg: /SogouMobileBrowser\/(\S*)/g,
        // 搜狗浏览器
        mi: /MiuiBrowser\/(\S*)/g // miui浏览器

      };
      var t, v; // 浏览器类别、版本

      for (var k in reg) {
        var ex = reg[k].exec(ua);

        if (ex) {
          t = k;
          v = ex[1];
          break;
        }
      }

      t = t ? t : 'other';
      v = v ? v : '0';
      return {
        t: t,
        v: v
      };
    },

    /**
     * 解析新旧端口
     * @return  {number}  num  1为新端口，0为旧端口
     */
    parseHost: function () {
      return Moplus.curHost === NEW_MOPLUS_HOST ? 1 : 0;
    },

    /**
     * tc event打点
     * @param  {string}  evtName  事件名
     */
    sendEvt: function (evtName, evtType, source, intent) {
      if (!this.isHit) {
        return;
      }

      this.send(evtName, evtType, source, intent);
    },
    send: function (evtName, evtType, source, intent) {
      var ua = this.parseUA();
      var brName = ua.t;
      var brVer = ua.v;
      var isHttp = IS_HTTPS ? 0 : 1;
      var isNew = this.parseHost();
      tc('event', [evtName, {
        evtType: evtType || '',
        brName: brName,
        brVer: brVer,
        isHttp: isHttp,
        isNew: isNew,
        source: source || '',
        intent: intent || ''
      }]);
    },

    /**
     * 初始化函数
     */
    init: function () {
      this.isHit = Date.now() % 100 === 1;
      tc('init', [2]);
    }
  };
  /**
   * 请直接使用`Bdbox.moplus`函数
   * moplus新旧两个版本同时存在，需要判断moplus的新旧情况：
   * 如果sessionStorage中有moplus新旧版本信息，则取sessionStorage中的值，
   * 如果sessionStorage中无moplus新旧版本信息，则新旧端口同时发起请求，得到moplus的新旧版本信息，并将值存入sessionStorage中
   * @inner
   * @class
   * @param {String} minversion 最小版本号
   * @param {String} mcmdf moplus申请的mcmdf
   * @requires Bdbox.io.loadJS
   * @requires Bdbox.utils.version_compare
   * @author wangyongqing01
   * @version $Id: moplus.js 304599 2016-08-12 06:11:50Z wangyongqing01 $
   */

  var Moplus = function (minversion, mcmdf, host) {
    this.version = '2.0';
    this.isHttps = IS_HTTPS;
    /**
     * 当前moplus host
     * @name curHost
     * @type {String}
     */

    this.curHost = host || '';
    /**
     * new moplus host
     * @name newHost
     * @type {String}
     */

    this.newHost = NEW_MOPLUS_HOST;
    /**
     * old moplus host
     * @name newHost
     * @type {String}
     */

    this.oldHost = this.isHttps ? NEW_MOPLUS_HOST : OLD_MOPLUS_HOST;
    /**
     * mcmdf
     * @name MCMDF
     * @type {string}
     */

    this.MCMDF = mcmdf || MCMDF; // this.MOPLUS_BOXINFO = this.host + 'getsearchboxinfo?mcmdf=' + this.MCMDF + '&callback=?';
    // this.MOPLUS_SENDINTENT = this.host + 'sendintent?mcmdf=' + this.MCMDF + '&callback=?&intent=';
    //放回调函数栈

    this._infoFuncs = [];
    this._verFuncs = [];
    /**
     * 最小版本
     *
     * @name minVersion
     * @type {String}
     */

    this.minVersion = minversion ? minversion : 0;
    /**
     * 包名
     * @name pkgName
     * @type {String}
     */

    this.pkgName = defaultPKGName;
    sampleStat.init();
  };
  /**
   * 设置sessionStorage值
   * @param {String} k key值
   * @param {String} v value值
   */


  var setStorage = function (k, v) {
    try {
      sessionStorage.setItem(k, v);
    } catch (e) {}
  };
  /**
   * 获取sessionStorage值
   * @param  {String} k key值
   * @return {String} v value值
   */


  var getStorage = function (k) {
    var v;

    try {
      v = sessionStorage.getItem(k);
    } catch (e) {}

    return v;
  };

  Moplus.prototype = {
    constructor: Moplus,

    /**
     * 设置mcmdf白名单
     * @param {string} mcmdf mcmdf白名单
     */
    setMcmdf: function (mcmdf) {
      this.MCMDF = mcmdf;
      return this;
    },

    /**
     * 设置当前moplus host，并将值存入sessionStorage中
     * @param {string} host url
     */
    setHost: function (host) {
      // this.curHost = host;
      // setStorage(MOPLUS_STORAGE, host);
      return this;
    },

    /**
     * 从sessionStorage中获取moplus host，
     * 如果sessionStorage中存在，则赋值给this.curHost
     * @return {String} this.curHost url
     */
    getHost: function () {
      // if (this.isHttps) {
      //   this.curHost = this.newHost;
      //   return this.newHost;
      // }
      // var host = getStorage(MOPLUS_STORAGE);
      // if (host) {
      //   this.curHost = host;
      //   return this.curHost;
      // }
      return;
    },

    /**
     * 使用moplusapi接口
     * @param  {string}   action   moplus的api接口
     * @param  {object}   params   参数数据
     * @param  {Function} callback 回调函数
     * @param {number} timeout 超时时间
     * @return {Moplus}            moplus本身
     * @example
     * moplus.api('geolocation', function(data){
     *     console.log(data);
     * });
     * moplus.api('getcuid',{secret:1,mcmdf:'inapp_test'}, function(data){
     *     console.log(data);
     * });
     * //getcuid?callback=xxx&secret=1&mcmdf=inapp_test
     */
    api: function (action, params, callback, timeout) {
      callback({
        error: 233
      });
      return this;
    },

    /**
     * 获取moplus信息
     * @param  {Function} callback 回调函数
     * @param {number} timeout 超时时间
     */
    getInfo: function (callback, timeout) {
      callback({
        error: 233
      });
      return this;
    },

    /**
     * 满足`this.minversion`之后的回调
     * @param  {Function} callback 回调函数
     * @param {number} timeout 超时时间
     */
    getHVersion: function (callback, timeout) {
      callback({
        error: 233
      });
      return this;
    },

    /**
     * 解析moplus信息
     * @param  {Object} json       moplus返回信息
     * @param  {String} minVersion 最小版本好
     * @return {MoplusObject}    MoplusObject       moplus版本对象
     */
    parseInfo: function (json, minVersion) {
      return false;
    },

    /**
     * 获取moplus信息
     * @param  {Object} data schema的param值
     * @param {number} callback 调函数
     */
    schema: function (data, callback) {
      /**
       * schema 说明
       * baiduboxapp://utils?action=sendIntent&params={
       *  icodentent: xxxx,
       *  source:'',
       *  mcmdf:'',
       *  needlog:0 }&minver=xxxx
       * @intent: xxxx, string类型
       * @source: 统计来源, string类型
       * @mcmdf moplus统计, string类型
       * @needlog 是否要实时打点,默认为0 取值 0/1
       * @minver是默认的 可以不传；
       */
      if (!data.intent) {
        throw 'schema intent is empty';
      }

      if (!data.mcmdf) {
        data.mcmdf = this.MCMDF;
      }

      var success = function () {
        sampleStat.sendEvt('schema', 'success', data.source, data.intent);
        $.isFunction(callback) && callback({
          error: 0,
          from: 'schema'
        });
      };

      var fail = function () {
        sampleStat.sendEvt('schema', 'fail', data.source, data.intent);
        $.isFunction(callback) && callback({
          error: 20,
          from: 'schema'
        });
      };

      var schema = data.schema || '';

      if (data.intent && !data.schema) {
        //处理6.9的bug, by shanghuibo邮件
        // 1. 检查sendIntent收到的intent中的component是否为com.baidu.searchbox开头，或者是否有package=com.baidu.searchbox。
        // 2. 如果满足1的条件，直接转schema调起
        // 3. 如果不满足1的条件，将minVer设置为7.0，再转schema调起，这样可以避免因调用第三方app引发崩溃。在7.0版本中会对此处进行处理，解决崩溃问题。
        var intent = data.intent;

        if (intent.indexOf(defaultPKGName) == -1) {
          sampleStat.sendEvt('defaultPKGName', 'fail', data.source || "", data.intent);
          data.minver = data.minver ? data.minver : '6.9.1';
        }
      }

      if (!schema) {
        schema = 'baiduboxapp://utils?action=sendIntent&params=' + encodeURIComponent(JSON.stringify(data)) + '&minver=' + (data.minver ? data.minver : '6.9');
      }

      schemaInvoke(schema, function (isTimeout) {
        if (isTimeout) {
          fail();
        } else {
          success();
        }
      });
    },

    /**
     * 发送intent信息
     * @param  {string}   intent   intent信息
     * @param  {Function} callback 回调函数，第一个参数是data对象，第二个是是否出错，如果出错则第一个参数是event对象
     * @param {number|object|boolean} timeout 超时时间，或者schema对象，或者是否失败调用schema
     *
     * @return {this}     this Moplus对象
     */
    sendIntent: function (intent, callback, timeout) {
      //因为都使用了https，moplus也不太行了，所以下掉代码，by wangyongqing01
      callback({
        error: 233
      });
      return this;
    },

    /**
     * 同时向新旧moplus端口发起请求，得到moplus的新旧版本情况
     * @param  {Object}  opts 新旧端口的请求信息
     * @return {this}    this Moplus对象
     */
    request: function (url, callback, timeout) {
      //因为都使用了https，moplus也不太行了，所以下掉代码，by wangyongqing01
      callback({
        error: 233
      });
      return this;
    }
  };
  /**
   * 框moplus实现
   * @memberOf Bdbox
   * @name moplus
   * @function
   * @param {string} minv 最小版本号
   * @param {String} mcmdf moplus的mcmdf值
   * @return {Moplus} moplus Moplus对象
   *
   * @example
   * var moplus = Bdbox.moplus(5.3);
   * //获取符合最小版本的框moplus版本
   * moplus.getHVersion(function(info) {
   *     if (info && info.version) {
   *         //发送moplus请求
   *         moplus.sendIntent('#Intent;');
   *     } else {
   *         //moplus不满足需求
   *         showUpdate();
   *     }
   * });`
   */

  return function (minv, mcmdf) {
    return new Moplus(minv, mcmdf);
  };
  module.exports.Moplus = Moplus;
}();