module.exports = function () {
  var $ = require('boxjs/dist/utils/_bdboxWrapper');
  /* jshint -W061*/


  var emptyFn = $.emptyFn;
  /**
   * @typedef ajaxSettings
   * @type {Object}
   * @property {function} beforeSend - 发送之前回调函数.
   * @property {function} success - 成功回调函数.
   * @property {function} error - 失败函数.
   * @property {String} url - 请求url.
   * @property {(Object|String)} error - 请求数据.
   * @property {String} [type="GET"] - 请求类型.
   * @property {Boolean} [async=true] - 是否异步.
   * @property {Boolean} [cache=false] -是否使用缓存，如果设置成false是get，则会在url后面添加随机数
   * @property {String} [dataType="json"] - 请求数据格式，默认是json.
   * @property {Number} [timeout=20000] - 超时时间，默认20s.
   */

  var opts = {
    beforeSend: emptyFn,
    success: emptyFn,
    error: emptyFn,
    url: '',
    data: '',
    type: 'GET',
    async: true,
    cache: false,
    dataType: 'json',
    timeout: 20e3
  };
  var parseJSON = window.JSON && window.JSON.parse ? function (json) {
    return window.JSON.parse(json);
  } : function (json) {
    return eval('(' + json + ')');
  };
  var timer;

  function getXHR() {
    return new window.XMLHttpRequest();
  }

  function appendQuery(url, query) {
    return (url + '&' + query).replace(/[&?]{1,2}/, '?');
  }

  function serializeData(options) {
    var data = options.data;
    var arr = [];

    if (options.data && !$.isString(options.data)) {
      for (var i in data) {
        arr.push(i + '=' + data[i]);
      }

      options.data = arr.join('&');
    }

    if (options.data && (!options.type || options.type.toUpperCase() == 'GET')) {
      options.url = appendQuery(options.url, options.data);
    }
  }
  /**
   * @function
   * @name  Bdbox.io.ajax
   * @param  {ajaxSettings} settings ajax配置，参数同jquery和zepto的ajax
   * @return {Object} xhr  返回xmlhttprequest对象
   * @author wangyongqing01
   * @version $Id: ajax.js 251156 2015-06-11 02:27:09Z wangyongqing01 $
   * @example
   * Bdbox.io.ajax({
   *     url: 'xxx',
   *     success: function(json){
   *     }
   * });
   */


  return function (settings) {
    settings = settings || opts;

    for (var i in opts) {
      if (!(i in settings)) {
        settings[i] = opts[i];
      }
    }

    var xhr = getXHR();
    var ajaxError = settings.error;
    var ajaxSuccess = settings.success;
    var ajaxBeforeSend = settings.beforeSend;
    var dataType = settings.dataType;
    if (!settings.url) settings.url = window.location.toString();
    serializeData(settings);

    if (settings.cache === false) {
      settings.url = appendQuery(settings.url, '_t=' + $.getId());
    }

    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4) {
        xhr.onreadystatechange = emptyFn;
        clearTimeout(timer);
        var result,
            error = false;

        if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304) {
          result = xhr.responseText;

          try {
            if (dataType === 'xml') {
              result = xhr.responseXML;
            } else if (dataType === 'json') {
              result = parseJSON(result);
            }
          } catch (e) {
            error = e;
          }

          if (error) {
            ajaxError(error, 'parsererror', xhr, settings);
          } else {
            ajaxSuccess(result, xhr, settings);
          }
        } else {
          ajaxError(null, xhr.status ? 'error' : 'abort', xhr, settings);
        }
      }
    };

    var async = 'async' in settings ? settings.async : true;
    xhr.open(settings.type, settings.url, async);

    if (ajaxBeforeSend(xhr, settings) === false) {
      xhr.abort();
      xhr = null;
      return false;
    }

    settings.type = settings.type.toUpperCase();

    if (settings.type === 'POST') {
      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    }

    if (settings.timeout > 0) {
      timer = setTimeout(function () {
        xhr.onreadystatechange = emptyFn;
        xhr.abort();
        ajaxError(null, 'timeout');
        xhr = null;
      }, settings.timeout);
    } // console.log(settings);


    xhr.send(settings.data ? settings.data : null);
    return xhr;
  };
}();