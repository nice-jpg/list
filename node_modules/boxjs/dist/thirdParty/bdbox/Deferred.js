module.exports = function () {
  var $ = require('boxjs/dist/utils/_bdboxWrapper');

  var emptyFn = $.emptyFn;
  /**
   * @description Promises/A 简单实现，方法使用等同jQuery.Deferred
   * @memberOf Bdbox
   * @function
   * @param {*} mixin 待转promise对象，或处理函数
   * @return {Promise} promise Promise对象
   * @author wangyongqing01
   * @version  $Id: Deferred.js 175996 2014-05-16 00:48:03Z wangyongqing01 $
   */

  function Deferred(mixin) {
    var state = 'pending',
        dirty = false;

    function ok(x) {
      state = 'fulfilled';
      return x;
    }

    function ng(e) {
      state = 'rejected';
      throw e;
    }

    var dfd = {
      callback: {
        resolve: ok,
        reject: ng,
        notify: emptyFn,
        ensure: emptyFn
      },
      dirty: function () {
        return dirty;
      },
      state: function () {
        return state;
      },

      /**
       * @typedef Promise
       * @property {function} then then实现
       */
      promise: {
        /**
         * then实现
         * @return {Promise} promise promise
         * @example
         * Bdbox.Deferred().then(function(a) {
         *     console.log(a + "resolve 1")
         *     return a + 10
         * }).then(function(a) {
         *     console.log(a + "resolve 2")
         *     return a + 2
         * }).then(function(a) {
         *     console.log(a + "last")
         * })
         */
        then: function () {
          return _post.apply(null, arguments);
        },
        otherwise: function (onReject) {
          return _post(0, onReject);
        },
        //https://github.com/cujojs/when/issues/103
        ensure: function (onEnsure) {
          return _post(0, 0, 0, onEnsure);
        },
        _next: null
      }
    };

    if ($.isFunction(mixin)) {
      mixin(dfd.promise);
    } else if (mixin && $.isObject(mixin)) {
      for (var i in mixin) {
        if (!dfd.promise[i]) {
          dfd.promise[i] = mixin[i];
        }
      }
    } //http://thanpol.as/javascript/promises-a-performance-hits-you-should-be-aware-of/


    'resolve,reject,notify'.replace(/\w+/g, function (method) {
      dfd[method] = function () {
        var that = this,
            args = arguments; //http://promisesaplus.com/ 4.1

        if (that.dirty()) {
          _fire.call(that, method, args);
        } else {
          Deferred.nextTick(function () {
            _fire.call(that, method, args);
          });
        }
      };
    });
    return dfd;

    function _post() {
      var index = -1,
          fns = arguments;
      'resolve,reject,notify,ensure'.replace(/\w+/g, function (method) {
        var fn = fns[++index];

        if ($.isFunction(fn)) {
          dirty = true;

          if (method === 'resolve' || method === 'reject') {
            dfd.callback[method] = function () {
              try {
                var value = fn.apply(this, arguments);
                state = 'fulfilled';
                return value;
              } catch (err) {
                state = 'rejected';
                return err;
              }
            };
          } else {
            dfd.callback[method] = fn;
          }
        }
      });
      var deferred = dfd.promise._next = Deferred(mixin);
      return deferred.promise;
    }

    function _fire(method, array) {
      var next = 'resolve',
          value;

      if (this.state() === 'pending' || method === 'notify') {
        var fn = this.callback[method];

        try {
          value = fn.apply(this, array);
        } catch (e) {
          //处理notify的异常
          value = e;
        }

        if (this.state() === 'rejected') {
          next = 'reject';
        } else if (method === 'notify') {
          next = 'notify';
        }

        array = [value];
      }

      var ensure = this.callback.ensure;

      if (emptyFn !== ensure) {
        try {
          ensure.call(this); //模拟finally
        } catch (e) {
          next = 'reject';
          array = [e];
        }
      }

      var nextDeferred = this.promise._next;

      if (Deferred.isPromise(value)) {
        value._next = nextDeferred;
      } else {
        if (nextDeferred) {
          _fire.call(nextDeferred, next, array);
        }
      }
    }
  }
  /**
   * 是否是promise对象
   * @memberOf Bdbox.Deferred
   * @function
   * @name isPromise
   * @param  {object}  obj 待检测对象
   * @return {Boolean} bool true|false
   */


  Deferred.isPromise = function (obj) {
    return !!(obj && $.isFunction(obj.then));
  };

  function some(any, promises) {
    var deferred = Deferred(),
        n = 0,
        result = [],
        end;

    function loop(promise, index) {
      promise.then(function (ret) {
        if (!end) {
          result[index] = ret; //保证回调的顺序

          n++;

          if (any || n >= promises.length) {
            deferred.resolve(any ? ret : result);
            end = true;
          }
        }
      }, function (e) {
        end = true;
        deferred.reject(e);
      });
    }

    for (var i = 0, l = promises.length; i < l; i++) {
      loop(promises[i], i);
    }

    return deferred.promise;
  }
  /**
   * 当全部传入的promise对象都resolve时才触发
   * @memberOf Bdbox.Deferred
   * @name all
   * @function
   * @return {Promise} promise Promise对象
   * @example
   * function aaa() {
   *     var d = Bdbox.Deferred();
   *     setTimeout(function() {
   *         d.resolve(1000)
   *     }, 1000)
   *     return d.promise
   * }
   * function bbb() {
   *     var d = Bdbox.Deferred();
   *     setTimeout(function() {
   *         d.resolve(2000)
   *     }, 2000)
   *     return d.promise
   * }
   * function ccc() {
   *     var d = Bdbox.Deferred();
   *     setTimeout(function() {
   *         d.resolve(500)
   *     }, 500)
   *     return d.promise
   * }
   * //待到所有完成才触发
   * Bdbox.Deferred.all(aaa(), bbb(), ccc()).then(function(a) {
   *     console.log(a)
   * })
   */


  Deferred.all = function () {
    return some(false, arguments);
  };
  /**
   * 当传入的promise其中之一resolve时触发
   * @memberOf Bdbox.Deferred
   * @name any
   * @function
   * @return {Promise} promise Promise对象
   * @example
   * function aaa() {
   *     var d = Bdbox.Deferred();
   *     setTimeout(function() {
   *         d.resolve(1000)
   *     }, 1000)
   *     return d.promise
   * }
   * function bbb() {
   *     var d = Bdbox.Deferred();
   *     setTimeout(function() {
   *         d.resolve(2000)
   *     }, 2000)
   *     return d.promise
   * }
   * function ccc() {
   *     var d = Bdbox.Deferred();
   *     setTimeout(function() {
   *         d.resolve(500)
   *     }, 500)
   *     return d.promise
   * }
   * //只收集最先到达的那个
   * Bdbox.Deferred.any(aaa(), bbb(), ccc()).then(function(a) {
   *     console.log(a)
   * })
   */


  Deferred.any = function () {
    return some(true, arguments);
  }; //http://www.raychase.net/1329
  //http://www.cnblogs.com/iamzhanglei/archive/2013/02/24/2924680.html


  var BrowserMutationObserver = window.MutationObserver || window.WebKitMutationObserver;

  if (BrowserMutationObserver) {
    //chrome firefox
    Deferred.nextTick = function (callback) {
      var input = document.createElement('input');
      var observer = new BrowserMutationObserver(function (mutations) {
        mutations.forEach(function () {
          callback();
        });
      });
      observer.observe(input, {
        attributes: true
      });
      input.setAttribute('value', Math.random());
    };
  } else if (window.postMessage && window.addEventListener) {
    //safar opera
    Deferred.nextTick = function (callback) {
      function onGlobalMessage(event) {
        console.log(event);

        if (typeof event.data === 'string' && event.data.indexOf('__BdboxDeferred__') === 0) {
          callback();
        }
      }

      window.addEventListener('message', onGlobalMessage);
      var now = $.getId();
      window.postMessage('__BdboxDeferred__' + now, '*');
    };
  } else {
    Deferred.nextTick = function (callback) {
      setTimeout(callback, 0);
    };
  }

  return Deferred;
}();