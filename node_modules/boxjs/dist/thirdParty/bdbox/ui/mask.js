module.exports = function () {
  var $ = require('boxjs/dist/utils/_bdboxWrapper');
  /* jshint -W030 */


  var Bdbox = $;
  $ = Zepto;
  /**
   * @memberOf Bdbox.ui
   * @name mask
   * @namespace Bdbox.ui.mask
   * @requires Zepto
   * @param {Object} option
   * @param {string} option.classPrefix 蒙层class
   * @param {element} option.container 蒙层父容器
   * @param {number} option.opacity 蒙层透明度
  
  
   * @example
   *  var _m = window.Box.ui.mask;
          _m.init({
            opacity: 0.4,
            maskColor: "#fff"
          });
   */

  /** @lends mask */

  var Mask = {
    defaultOpts: {
      classPrefix: 'J-common-dialog-mask',
      container: document.body,
      opacity: 1,
      top: '',
      left: '',
      width: '',
      height: '',
      bgColor: 'rgba(0,0,0,0.6)',
      closeWithClick: true,
      closeSelector: 'J-mask-close',
      autoRender: true,
      zindex: 9999,
      showing: false,
      resizeAdjust: true,
      onOpen: function () {},
      onClose: function () {}
    },
    init: function (opts) {
      var me = this,
          attr,
          opts = opts || {};

      for (attr in this.defaultOpts) {
        if (!opts.hasOwnProperty(attr)) {
          opts[attr] = this.defaultOpts[attr];
        }
      }

      $.extend(me, opts);
      this.create();
      this.autoRender && this.show();
    },
    isshow: function () {
      return this.showing;
    },
    create: function () {
      var me = this,
          className = "." + me.classPrefix,
          dom;

      if (!$(me.container).find(className)) {
        dom = document.getElementsByClassName(className)[0];
        this.setStyle(dom);
      } else {
        dom = document.createElement('div');
        dom.className = this.classPrefix;
        dom.innerHTML = "<div class='" + this.closeSelector + "'></div>";
        this.setStyle(dom);
        this.render(dom);
      }
    },
    setStyle: function (dom) {
      var container = this.container,
          me = this,
          pos = $(container).position();

      if (typeof dom === "undefined") {
        dom = document.getElementsByClassName(me.classPrefix)[0];
      }

      var _height = container.offsetHeight - window.innerHeight < 0 ? window.innerHeight : container.offsetHeight;

      dom.style.cssText += [';top : ' + (this.top || pos.top) + 'px', 'left : ' + (this.left || pos.left) + 'px', 'width : ' + (this.width || container.offsetWidth) + 'px', 'height : ' + (this.height || _height) + 'px', 'background : ' + this.bgColor, 'opacity : ' + this.opacity, 'position : absolute', 'display : ' + (this.showing ? 'block' : 'none'), 'z-index: ' + this.zindex].join(';');
      $(container).css('position', 'relative');
    },
    render: function (dom) {
      $(this.container).append(dom);
      this.bind();
      return this;
    },
    getElement: function () {
      return $("." + this.classPrefix);
    },
    bind: function () {
      var me = this;
      /*监听onresize重新居中定位dialog*/

      if (this.resizeAdjust) {
        var resizeTime = null;
        $(window).on('resize', function (event) {
          event.preventDefault();
          resizeTime && clearTimeout(resizeTime);
          resizeTime = setTimeout(function () {
            me.setStyle();
          }, 100);
        });
      }

      if (this.closeWithClick) {
        $(document).delegate("." + this.classPrefix, 'click', function (event) {
          me.close();
        });
      }
    },
    show: function () {
      var me = this;
      this.getElement().show();
      this.onOpen();
      this.showing = true;
    },
    close: function () {
      var me = this;
      this.getElement().hide();
      this.onClose();
      this.showing = false;
    },
    destroy: function () {
      this.getElement().remove();
    }
  };
  return Mask;
}();