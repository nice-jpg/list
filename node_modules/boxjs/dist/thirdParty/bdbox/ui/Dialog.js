module.exports = function () {
  var $ = require('boxjs/dist/utils/_bdboxWrapper');

  var Bdbox = $;
  $ = Zepto;

  var Mask = require('./mask');
  /**
   * @memberOf Bdbox.ui
   * @constructor Bdbox.ui.Dialog
   * @requires Zepto
   * @requires ../ui/mask
   * @param {Object} options 配置
   * @example
   *  var dialog = new Box.ui.Dialog({
        resizeAdjust : true,
        content : "<p>12312312</p>"
      });
   */

  /** @lends Bdbox.ui.Dialog */


  function Dialog(options) {
    var opt = options || {};
    this.init(opt);
  }

  Dialog.prototype = {
    constructor: Dialog,
    defaultOpts: {
      zIndex: 10000,
      width: 200,

      /*预设top偏移量……因为ue经常不画居中的dialog啊*/
      preTop: 0,
      classPrefix: 'J-common-dialog',
      bgColor: "#FFFFFF",
      mask: true,
      maskOpacity: 1,

      /*opacity在某些webview会有渲染bug */
      maskColor: "rgba(0,0,0,0.6)",

      /*此处应写rgba*/
      autoRender: true,
      resizeAdjust: false,
      container: document.body,
      content: "",
      onBeforeopen: function () {},
      onOpen: function () {},
      onBeforeclose: function () {},
      onClose: function () {}
      /*onAccept: function() {},
        onCancel: function() {}*/

    },
    init: function (opts) {
      var me = this;
      this.showing = false;
      $.extend(me, this.extendOpts(opts, this.defaultOpts));
      this.counter = 0;
      this.el = null;
      this.create();
    },
    extendOpts: function (opts, lastopts) {
      var attr,
          opts = opts || {};

      for (attr in lastopts) {
        if (!opts.hasOwnProperty(attr)) {
          opts[attr] = lastopts[attr];
        }
      }

      return opts;
    },
    getElement: function () {
      return this.el;
    },
    create: function () {
      var me = this;
      this.buildDom();
      this.onBeforeopen.call(me);
      this.bind();
      this.autoRender && this.show();
      return this;
    },
    buildDom: function () {
      var el = document.createElement('div');
      el.className = this.classPrefix;
      el.innerHTML = this.content;
      el.style.cssText += [';width : ' + this.width + 'px', 'background : ' + this.bgColor, 'position : absolute', 'display : ' + (this.showing ? 'block' : 'none'), 'z-index: ' + this.zIndex].join(';');
      this.el = $(el);

      var _tmp = $('.' + el.className, this.container);

      if (_tmp.length > 0) {
        _tmp.remove();
      }

      $(this.container).css('position', 'relative').append(el);
      return this;
    },
    refresh: function (newopts) {
      var me = this;
      $.extend(me, newopts);
      this.buildDom().centerfy();
      this.autoRender && this.show();
    },
    remove: function () {
      this.el.parentNode.removeChild(this.el);
    },
    setPosition: function (position) {
      var left = +position.left,
          top = +position.top,
          container = this.getElement();

      if (typeof left === 'number') {
        this.left = left;
        container.css('left', left + 'px');
      }

      if (typeof top === 'number') {
        this.top = top;
        container.css('top', top + 'px');
      }

      return this;
    },
    getPostion: function () {
      return {
        left: this.left,
        top: this.top
      };
    },
    centerfy: function () {
      var body = $(document.body),
          _winHeight = $(window).height(),
          _top = body.scrollTop(),
          _left = body.scrollLeft(),
          _width = body.width(),
          left = ((_width - this.width) / 2 | 0) + _left,
          top = ((_winHeight - this.getElement().height()) / 2 | 0) + _top + this.preTop;

      top < _top && (top = _top);
      left < _left && (left = _left);
      this.setPosition({
        left: left,
        top: top
      });
      this.getElement().css("visibility", "visible");
      return this;
    },
    bind: function (un) {
      var me = this,
          resizeTime = null,
          method = un ? 'un' : 'on';

      var onresize = function (e) {
        e.preventDefault();
        resizeTime && clearTimeout(resizeTime);
        resizeTime = setTimeout(function () {
          me.centerfy();
        }, 200);
      };

      if (un) {
        $(window).un('resize', onresize);
        return;
      }
      /*监听onresize重新居中定位dialog*/


      this.resizeAdjust && $(window).on('resize', onresize);
    },
    show: function () {
      var me = this,
          opts = this;
      this.showing = true;

      if (opts.mask) {
        if (Mask.getElement().length === 0) {
          Mask.init({
            bgColor: opts.maskColor,
            closeWithClick: false
          });
        } else {
          Mask.show();
        }
      }

      this.getElement().css("visibility", "hidden").show();
      this.centerfy();
      this.onOpen.call(me);
      $('body').bind('touchmove', function (e) {
        e.preventDefault();
      });
      return this;
    },
    hide: function () {
      var me = this;

      if (this.onBeforeclose.call(me) === false) {
        return false;
      }

      this.showing = false;
      this.getElement().hide();

      if (Mask) {
        Mask.close();
      }

      $('body').unbind('touchmove');
      this.onClose.call(me);
      return this;
    },
    destory: function (html, opts) {
      this.bind('un');
      this.remove();
    }
  };
  return Dialog;
}();