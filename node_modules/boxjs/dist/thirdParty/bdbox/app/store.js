module.exports = function () {
  var $ = require('boxjs/dist/utils/_bdboxWrapper');

  var support = {};
  'local session'.replace(/\S+/g, function (v) {
    try {
      var t = v + 'Storage' in window && window[v + 'Storage'] !== null,
          test = {
        k: 'box test',
        v: 'it\'s great'
      };

      if (t) {
        var storage = window[v + 'Storage'];
        storage.setItem(test.k, test.v);
        t = test.v === storage.getItem(test.k);
        storage.removeItem(test.k);
      }

      support[v] = true;
    } catch (e) {
      support[v] = false;
    }
  });
  var storage = {
    data: {},
    setItem: function (k, v) {
      storage.data[k] = v;
    },
    getItem: function (k) {
      return storage.data[k];
    },
    removeItem: function (k) {
      delete storage.data[k];
    }
  };
  var now = Date.now ? Date.now : function () {
    return +new Date();
  };
  /**
   * localstorage和sessionStorage函数封装类，如果不支持则自动封装内存对象
   * @lends Bdbox.app.store
   * @class Store
   * @param  {string} prefix 缓存前缀
   * @param  {number} expire 缓存时间
   * @param  {string} [type='local']   类型，local或者session
   * @author wangyongqing01
   * @version $Id: store.js 251156 2015-06-11 02:27:09Z wangyongqing01 $
   */

  var Store = function (prefix, expire, type) {
    //前缀
    this.prefix = prefix || ''; //过期时间，0则不过期

    this.expire = expire || 0; //storage类型，默认sessionstorage

    this.type = type || 'session';

    if (this.type.length > 7) {
      //处理localstorage -> local
      //sessionstorage -> session
      this.type = this.type.slice(0, -7);
    } // this.storage = window[this.type + 'Storage'];
    //是否支持


    this.storage = support[this.type] ? window[this.type + 'Storage'] : storage;
    this.clearExpire();
  };

  Store.prototype =
  /** @lends Store */
  {
    construstor: Store,

    /**
     * 清理过期key
     * @return {Store} 返回cache
     */
    clearExpire: function () {
      var keys = this.getKeys();
      var self = this;
      keys.forEach(function (key) {
        //利用get清理过期storage
        self.get(key);
      });
      return this;
    },

    /**
     * 设置缓存
     * @param {string} key    缓存名字
     * @param {mix} value  缓存内容，支持object
     * @param {number} [expire=0] 缓存时间
     * @return {Store} 返回cache
     */
    set: function (key, value, expire) {
      expire = (expire || this.expire) | 0;
      var data = {
        data: value
      };

      if (expire !== 0) {
        data.expire = now() + expire;
      }

      key = this.prefix + key;
      this.storage.setItem(key, JSON.stringify(data));
      return this;
    },

    /**
     * 获取缓存
     * @param  {string} key 缓存名称
     * @return {mix}     缓存内容，过期返回null
     */
    get: function (key) {
      var value = null;
      key = this.prefix + key;
      var self = this;

      try {
        value = JSON.parse(self.storage.getItem(key));
        var t = now();

        if ('expire' in value && value.expire <= t) {
          //数据过期，清空
          value = null;
          self.storage.removeItem(key);
        } else {
          value = value.data;
        }
      } catch (e) {
        value = null;
      }

      return value;
    },

    /**
     * 清除所有缓存
     * @return {Store} 返回cache
     */
    clear: function () {
      var keys = this.getKeys();
      var self = this;
      keys.forEach(function (key) {
        self.remove(key);
      });
      return this;
    },

    /**
     * 删除key的缓存内容
     * @param  {string} key 要删除的key
     * @return {cache}     返回cache
     */
    remove: function (key) {
      this.storage.removeItem(this.prefix + key);
      return this;
    },

    /**
     * 获取所有keys
     * @return {Array} 返回keys
     */
    getKeys: function () {
      var keys = [];
      var storage = this.storage;
      var reg = new RegExp('^' + this.prefix);

      for (var i in storage) {
        if (storage.hasOwnProperty(i) && reg.test(i)) {
          keys.push(i);
        }
      }

      return keys;
    },

    /**
     * 获取所有值
     * @return {object} 返回对象
     */
    getAll: function () {
      var values = {},
          value;
      var storage = this.storage;
      var reg = new RegExp('^' + this.prefix);

      for (var i in storage) {
        if (storage.hasOwnProperty(i) && reg.test(i)) {
          value = this.get(i);

          if (value) {
            values[i] = value;
          }
        }
      }

      return value;
    }
  };
  /**
   * localstorage和sessionStorage函数封装类，如果不支持则自动封装内存对象
   * @memberOf Bdbox.app
   * @function
   * @name store
   * @param  {string} prefix 缓存前缀
   * @param  {number} expire 缓存时间
   * @param  {string} [type='local']   类型，local或者session
   * @return {Store}        store对象
   *
   * @example
   * var store = Bdbox.app.store('name', 60e3, 'session');
   * store.set('a', {abc:1});
   * console.log(store.get('a'));
   * //缓存30s
   * store.set('b',{a:1}, 30E3);
   */

  return function (prefix, expire, type) {
    return new Store(prefix, expire, type);
  };
}();