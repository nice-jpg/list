module.exports = function () {
  var $ = require('boxjs/dist/utils/_bdboxWrapper');

  var Router = require('./router');

  var Observer = require('./observer');

  var View = require('./view');

  var Controller = require('./controller');

  var Api = require('./api');

  var Store = require('./store');
  /**
   * SPA粘合剂类
   * @class  One
   * @lends  Bdbox.app
   * @author wangyongqing01
   * @version  $Id: app.js 286585 2016-03-15 11:57:15Z wangyongqing01 $
   */


  var One = function () {
    Observer(this);
    this.controllers = {};
  };

  var proto = One.prototype;
  proto.router = Router;
  proto.observer = Observer;
  proto.view = View;
  proto.controller = Controller;
  proto.api = Api;
  proto.store = Store;
  /**
   * 注册controller控制器
   *
   * @memberOf Bdbox.app
   * @function register
   * @alias Bdbox.app.add
   * @param  {Class} controller Bdbox.app.controller实例
   * @return {Bdbox.app}            返回this
   */

  proto.register = function (controller) {
    if (!$.isArray(controller)) {
      controller = [controller];
    }

    var self = this;
    controller.forEach(function (v) {
      self._reg(v);
    });
    return this;
  };

  proto._reg = function (controller) {
    var self = this;
    var name = controller.name;

    controller._router = function (query, pathname, match) {
      //卸载之前的controller
      var c = self.curController;
      c && c.emit('unload', c.view); //全局的before

      self.emit('before', controller, controller.view, query, pathname);

      if (!controller.__init__) {
        //初始化执行
        $.isFunction(controller.init) && controller.init();
        controller.__init__ = true;
      }

      self.curController = controller; //controller的 before

      controller.emit('before', controller.view, query, pathname) //doit
      .emit('main', controller.view, query, pathname, match) //after
      .emit('after', controller.view, query, pathname); //全局的after

      self.emit('after', controller, c, query, pathname);
    };

    this.controllers[name] = controller; //绑定router

    Router(controller.router, controller._router);
  };
  /**
   * 根据name返回控制器
   * @memberOf Bdbox.app
   * @function get
   * @param  {String} name 控制器名称
   * @return {Controller}      返回控制器
   */


  proto.get = function (name) {
    return name ? this.controllers[name] : this.controllers;
  };
  /**
   * 移除控制器
   * @memberOf Bdbox.app
   * @function remove
   * @alias Bdbox.app.unregister
   * @param  {Mix} controller 控制器或者控制器名称
   */


  proto.remove = function (controller) {
    var controllers = this.controllers;

    if ($.isString(controller)) {
      //删除事件和controller
      var m = controllers[controller];
      this.off(new RegExp('^' + m.name + ':'));
      delete controllers[controller];
    } else if ($.isObject(controller)) {
      for (var key in controllers) {
        if (controllers.hasOwnProperty(key)) {
          if (controllers[key] === controller) {
            var m = controllers[controller];
            this.off(new RegExp('^' + m.name + ':'));
            delete controllers[controller];
          }
        }
      }
    }

    return this;
  };
  /**
   * 跳转到某个页面
   * @memberOf Bdbox.app
   * @function redirect
   * @param  {String} name 页面名称
   * @param  {mix} data 页面数据
   * @return {this}      返回this
   */


  proto.redirect = function (name, data) {
    this.emit('redirectTo:' + name, data);
    return this;
  };
  /**
   * 添加页面
   * @memberOf Bdbox.app
   * @function addPage
   * @param {string} name    名称
   * @param {function} handler 处理函数
   */


  proto.addPage = function (name, handler) {
    return this.on('redirectTo:' + name, handler);
  };
  /**
   * 添加404页面
   * @memberOf Bdbox.app
   * @function otherwise
   * @param  {function} handler 处理函数
   * @return {this}         返回this
   */


  proto.otherwise = function (handler) {
    //这是404
    return this.addPage('404', handler);
  };
  /**
   * 启动函数
   * @memberOf Bdbox.app
   * @function run
   * @param  {string} a 非必须，启动spa，传入a则是启动a，不传入则按照hash执行
   */


  proto.run = function (a) {
    Router.start();

    if (a) {
      a = a.replace(/^#!/, '');
      location.hash = '#!' + a;
      var a = this.curController = this.controllers[a];

      if (a) {
        a._router();
      } else {
        Router.exec(location.hash);
      }
    } else {
      Router.exec(location.hash);
    }

    return this;
  };

  proto.go = function (hash) {
    location.hash = '#!' + hash;
    return this;
  };

  proto.unregister = proto.remove;
  proto.add = proto.register;
  /**
   * SPA框架
   * @namespace Bdbox.app
   * @type {One}
   */

  return new One();
}();