module.exports = function () {
  /**
  * @file getSchemeHead.js
  * @author renzhonghua@baidu.com
  * @description 获取scheme头部信息
  */
  var versionMap = require('../core/versionMap');

  function setCache(arr) {
    var ma = ['storage', arr[1]].join('/');
    return ma;
  }

  function setData(arr) {
    var ma = '';

    if (arr[1] === 'get' || arr[1] === 'set') {
      var name = arr[2] || '';
      var module = name.split('-')[0];
      var fstring = name.split('-')[1] && name.split('-')[1].substring(0, 1).toUpperCase();
      var other = name.split('-')[1] && name.split('-')[1].substring(1);
      var action = arr[1] + fstring + other;
    } else if (arr[1] === 'toggle') {
      var module = arr[3];
      var fstring = arr[2].substring(0, 1).toUpperCase();
      var other = arr[2].substring(1);
      var action = 'toggle' + fstring + other;
    }

    ma = [module, action].join('/');
    return ma;
  }

  function setLog(arr) {
    var ma = '';
    var logMap = {
      durationDisappear: 'ubc/duration/disappear',
      durationAppear: 'ubc/duration/appear',
      channelStatistics: 'channelStatistics/action'
    };
    var name = arr[1];
    ma = logMap[name] || name;
    return ma;
  }

  function setNet(arr) {
    var ma = '';

    if (arr[1] === 'download') {
      var name = arr[2] || '';
      var nameArr = name.split('-');
      var module = nameArr[0];
      var action = nameArr[1];
      ma = [module, action].join('/');
    } else if (arr[1] === 'prefetch') {
      var ma = [arr[2], 'prefetch'].join('/');
    }

    return ma;
  }

  function setUi(arr) {
    var ma = '';

    if (arr[1] === 'close' || arr[1] === 'open') {
      var nameArr = arr[2].split('-');

      if (nameArr[1]) {
        var fstring = nameArr[1].substring(0, 1).toUpperCase();
        var other = nameArr[1].substring(1);
        var action = arr[1] + fstring + other;
        ma = [nameArr[0], action].join('/');
      } else {
        ma = [nameArr[0], arr[1]].join('/');
      }
    } else if (arr[1] === 'update') {
      ma = [arr[2], 'update'].join('/');
    }

    return ma;
  }

  function setView(arr) {
    var ma = '';

    if (arr[1] === 'close') {
      ma = [arr[2], arr[1]].join('/');
    } else if (arr[1] === 'open') {
      var name = arr[2];
      var type = arr[3];

      if (type && type === 'hybrid') {
        ma = name + '/hybrid';
      } else if (type) {
        ma = name + '/open';
      }
    }

    return ma;
  }

  function setDevice(arr) {
    var ma = '';

    if (arr[1] === 'info') {
      switch (arr[2]) {
        case 'netInfo':
          ma = 'utils/getDeviceInfo';
          break;

        case 'platformInfo':
          ma = 'utils/getPlatformInfo';
          break;
      }
    } else if (arr[1] === 'vibrate') {
      ma = 'device/vibrate';
    }

    return ma;
  }

  function setMedia(arr) {
    var ma = '';

    if (arr[1] === 'tts') {
      ma = [arr[1], arr[2]].join('/');
    }

    return ma;
  }

  function setEvent(arr) {
    var ma = '';

    switch (arr[1]) {
      case 'fire':
        ma = 'datachannel/sendbroadcast';
        break;

      case 'on':
        ma = 'datachannel/register';
        break;

      case 'off':
        ma = 'datachannel/unregister';
        break;
    }

    return ma;
  }

  function setGame(arr) {
    var ma = '';

    switch (arr[1]) {
      case 'getRoomInfo':
        ma = 'minigame/getRoomInfo';
        break;

      case 'over':
        ma = 'minigame/over';
        break;

      case 'setBackHandler':
        ma = 'immerseBrowser/backHandler';
        break;

      case 'exit':
        ma = 'minigame/exit';
        break;

      case 'start':
        ma = 'minigame/startGame';
        break;

      case 'closeLoading':
        ma = 'minigame/closeLoading';
        break;

      case 'getPerformanceData':
        ma = 'minigame/getPerformanceData';
        break;
    }

    return ma;
  }

  function splitMA(scheme) {
    var ma = '';
    var arr = scheme.split('/');

    if (arr.length < 2) {
      return '';
    }

    switch (arr[0]) {
      case 'cache':
        ma = setCache(arr);
        break;

      case 'data':
        ma = setData(arr);
        break;

      case 'log':
        ma = setLog(arr);
        break;

      case 'net':
        ma = setNet(arr);
        break;

      case 'ui':
        ma = setUi(arr);
        break;

      case 'view':
        ma = setView(arr);
        break;

      case 'device':
        ma = setDevice(arr);
        break;

      case 'event':
        ma = setEvent(arr);
        break;

      case 'media':
        ma = setMedia(arr);
        break;

      case 'game':
        ma = setGame(arr);
        break;
    }

    return ma;
  }

  function schemeSplicer(path, vm) {
    var filter = vm.filter;
    var arr = path.split('/');
    var v = vm.v;

    if (!!filter) {
      var result = filter({});

      if (!!result.action) {
        path = 'v' + v + '/' + result.module + '/' + result.action;
      }
    }

    return path;
  }

  var getSchemeHead = function (scheme) {
    var ma = splitMA(scheme);

    if (!ma) {
      return false;
    } else {
      var vm = versionMap[ma];

      if (vm) {
        var version = vm.v || '';
        var action = ['v' + version, ma].join('/');
        var head = schemeSplicer(action, vm);
        return head;
      } else {
        return false;
      }
    }
  };

  return getSchemeHead;
}();