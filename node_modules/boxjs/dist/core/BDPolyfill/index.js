module.exports = function () {
  /**
  * @file core/BDPolyfill/index.js
  * @author gaojiexuan@baidu.com
  * @description 各种老的端能力扔这个目录下，此文件是统一入口
  */
  var $ = require('../../utils/_bdboxWrapper');
  /* istanbul ignore next */


  var androidInvoke = require('../../thirdParty/bdbox/android/invokeApp');
  /* istanbul ignore next */


  var iosInvoke = require('../../thirdParty/bdbox/ios/invokeApp');

  var parser = require('./parser');
  /* istanbul ignore next */


  var extend = require('../../thirdParty/bdbox/extend');

  var postMessageUser = require('../../utils/postMessageUser');

  function iosInvokeForpostMessageUser(action, params, callback) {
    /* istanbul ignore next */
    var url = [];
    /* istanbul ignore next */

    for (var i in params) {
      /* istanbul ignore next */
      url.push(i + '=' + params[i]);
    }
    /* istanbul ignore if */

    /* istanbul ignore next */


    if (callback) {
      var funcName = '_bdbox_js_' + $.getId();

      window[funcName] = function () {
        callback.apply(window, [].slice.call(arguments, 0));
      };

      url.push('func=' + funcName);
    }
    /* istanbul ignore next */


    url = 'baiduboxapp://' + action + '?' + url.join('&'); // console.log(decodeURIComponent(url));

    /* istanbul ignore next */

    window.webkit.messageHandlers.BBAMNPJSBridge.postMessage(url);
  }

  return function (path, data, cb) {
    /** 判断iOS/Android、判断lite、判断版本号：过滤数据 */

    /** 维护action名到iOS、Android的老接口module、action的映射 */
    var func = '';
    var arr = path.split('/');
    var module = arr[0];
    var action = arr[1];
    var platform = $.isIOS ? 'ios' : $.isAndroid ? 'android' : '';
    var result = parser(module, action, data, platform);
    var thunk = !result ? undefined : result.thunk;

    if ($.isFunction(cb)) {
      func = $.cbWithoutCache(cb, thunk);
    } else if (cb) {
      func = cb;
    }

    if (!result) {
      window[func](JSON.stringify($.sdkError['COMMAND_NOT_EXIST']));
    } else {
      var params = {};

      if ($.isObject(result.data)) {
        if ($.isArray(result.data)) {
          data = result.data || [];
        } else {
          data = data || {};
          extend(data, result.data);
        }
      } else {
        data = result.data;
      }

      if (platform === 'ios' && !result.noParams) {
        if (!!result.action) {
          params = {
            action: result.action
          };
        }

        var paramName = result.paramName || 'params';

        if (!!data && $.isObject(data) && JSON.stringify(data) !== '{}') {
          params[paramName] = encodeURIComponent(JSON.stringify(data));
        }

        if (!!data && $.isString(data) && data.length) {
          params[paramName] = encodeURIComponent(data);
        }

        if (result.next) {
          params.next = result.next;
        }
      } else {
        params = data;
      }

      if ($.isObject(result.extData)) {
        extend(params, result.extData);
      }

      switch (platform) {
        case 'ios':
          if (result.data && result.data.shareSuccessCB) {
            params.successcallback = result.data.shareSuccessCB;
          }

          if (result.data && result.data.shareErrorCB) {
            params.errorcallback = result.data.shareErrorCB;
          }
          /* istanbul ignore if */


          if (postMessageUser.indexOf(window.searchboxBoxjsId) > -1) {
            if (result.module === 'callShare') {
              iosInvokeForpostMessageUser(result.module, params);
            } else {
              iosInvokeForpostMessageUser(result.module, params, func);
            }
          } else if (result.hasCB === false) {
            iosInvoke(result.module, params);
          } else {
            iosInvoke(result.module, params, func);
          }

          break;

        case 'android':
          var pArr = [];

          if ($.isString(params) && !!params) {
            pArr.push(params);
          } else if ($.isObject(params) && !$.isArray(params) && JSON.stringify(params) !== '{}') {
            pArr.push(JSON.stringify(params));
          } else if ($.isArray(params) && JSON.stringify(params) !== '[]') {
            for (var i = 0; i < params.length; i++) {
              pArr.push(params[i]);
            }
          }

          if (result.callbackKey && result.callbackKey === 'func') {
            pArr.push(result.data.func);
          } else if (!!result.tchasOwncallback) {
            pArr.push('onLogSuccess');
          } else {
            if (result.hasCB !== false && result.async !== false) {
              pArr.push(func);
            }

            if (result.data && result.data.shareSuccessCB) {
              pArr.push(result.data.shareSuccessCB);
            }

            if (result.data && result.data.shareErrorCB) {
              pArr.push(result.data.shareErrorCB);
            }
          }

          if (pArr.length <= 0) {
            var re = androidInvoke(result.module, result.action);
          } else {
            var re = androidInvoke(result.module, result.action, pArr);
          }

          if (result.async === false) {
            window[func](re);
          }

          break;
      }

      if (result.hasCB === false) {
        window[func](JSON.stringify($.sdkError['COMMAND_SUCCESS']));
      }
    }
  };
}();