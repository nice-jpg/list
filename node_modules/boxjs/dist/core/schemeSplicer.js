module.exports = function () {
  /**
  * @file core/schemeSplicer.js
  * @author gaojiexuan@baidu.com
  * @description 拼接最新的scheme协议
  */
  var $ = require('../utils/_bdboxWrapper');

  var platform = require('../utils/platform');

  var postMessageUser = require('../utils/postMessageUser');

  var versionCompare = platform.versionCompare;
  var boxVersion = platform.boxVersion;
  return function (action, data, cb, vm, abtest) {
    var query = [];
    var scheme = '';
    var func = '';
    var hasCallback = vm.hasCB === false ? false : true;
    var useCompontentBridge = data.useCompontentBridge;
    var tmpData = {};
    var path = 'v' + vm.v + '/' + action;
    var result = {};
    var callbackFun = data && data.func ? data.func : null;
    var abtest = abtest ? abtest : false; // swan/launch 增加 from 字段供统计使用

    if (path.match('swan/launch') && data.from) {
      query.push('from=' + data.from);
      data.from = undefined;
    }

    if (JSON.stringify(data) !== '{}') {
      tmpData = {
        params: encodeURIComponent(JSON.stringify(data))
      };
    }

    if (!!vm.filter) {
      result = vm.filter(data);
      data = result.data || tmpData;

      if (!!result.action) {
        path = 'v' + vm.v + '/' + result.module + '/' + result.action;
      }

      if (vm.schemeNoV) {
        path = result.module + '/' + result.action;
      }
    } else {
      data = tmpData;
    }

    for (var i in data) {
      query.push(i + '=' + data[i]);
    }

    if ($.isFunction(cb)) {
      func = $.cbWithoutCache(cb, vm.thunk);
    } else if (cb) {
      func = cb;
    } // 大搜setTcStatisticData需求 需要用自己的callback


    if (!!result.tchasOwncallback) {
      func = 'onLogSuccess';
    }

    if (!!hasCallback) {
      query.push('callback=' + func);
    }

    if (!!abtest) {
      query.push('abtest=' + encodeURIComponent(JSON.stringify(abtest)));
    } // 大搜长语音需求voice/play 需要拼func（持续调用方法）


    if (!!result.callbackKey) {
      query.push(result.callbackKey + '=' + callbackFun);
    } // 增加鉴权type给端上使用


    if (window.searchboxBoxjsId && window.searchboxBoxjsId !== 'swan') {
      scheme = 'baiduboxapp://' + path + '?' + query.join('&') + '&upgrade=0&oauthType=' + window.searchboxBoxjsId;
    } else {
      scheme = 'baiduboxapp://' + path + '?' + query.join('&') + '&upgrade=0';
    } // console.log(decodeURIComponent(scheme));

    /* istanbul ignore if */


    if (path.match('Sync')) {
      var re = {};

      if ($.isAndroid) {
        re = androidSync(scheme);
      } else {
        re = iosSync(scheme);
      }

      if (!!re) {
        try {
          return JSON.parse(re);
        } catch (e) {
          return $.sdkError['COMMAND_FAIL'];
        }
      }
    } else if ($.isAndroid && versionCompare(boxVersion, '9.0') >= 0) {
      var re = androidInvoke(scheme);
      /* istanbul ignore if */

      if (!!re) {
        try {
          re = JSON.parse(re);

          if (re && re.result === 'false') {
            window[func]($.sdkError['COMMAND_FAIL']);
          }
        } catch (e) {
          window[func]($.sdkError['COMMAND_FAIL']);
        }
      }
    } else if (useCompontentBridge) {
      /* istanbul ignore next */
      iosComponentInvoke(scheme);
    } else if (postMessageUser.indexOf(window.searchboxBoxjsId) > -1) {
      /* istanbul ignore next */
      iosPostmessageInvoke(scheme);
    } else {
      iosInvoke(scheme);
    } // 如果端能力没有callback就手动返回。Todo:后续增加xxx手百版本之前判断是否有callback，xxx版本之后直接调用


    if (!hasCallback) {
      cb($.sdkError['COMMAND_SUCCESS']);
    }
  };

  function iosInvoke(scheme) {
    var elem = document.createElement('iframe');
    var body = document.body || document.getElementsByTagName('body')[0];
    elem.style.display = 'none';
    elem.src = scheme;
    body.appendChild(elem);
    setTimeout(function () {
      body.removeChild(elem);
      elem = null;
    }, 0);
  }

  function androidInvoke(scheme) {
    var androidJsBridge = window.Bdbox_android_jsbridge;

    if (androidJsBridge && androidJsBridge.dispatch) {
      androidJsBridge.dispatch(scheme);
    } else {
      /* istanbul ignore next */
      var re = window.prompt('BdboxApp:' + JSON.stringify({
        obj: 'Bdbox_android_jsbridge',
        func: 'dispatch',
        args: [scheme]
      }));
      /* istanbul ignore next */

      return re;
    }
  }

  function iosPostmessageInvoke(scheme) {
    /* istanbul ignore next */
    window.webkit.messageHandlers.BBAMNPJSBridge.postMessage(scheme);
  }

  function iosComponentInvoke(scheme) {
    /* istanbul ignore next */
    window.webkit.messageHandlers.BBAMNPJSBridgeWebViewComponent.postMessage(scheme);
  }

  function androidSync(scheme) {
    /* istanbul ignore next */
    var androidJsBridge = window.Bdbox_aiapps_jsbridge;
    /* istanbul ignore next */

    return androidJsBridge.dispatch(scheme);
  }

  function iosSync(scheme) {
    /* istanbul ignore next */
    var re = window.prompt('BdboxApp:' + JSON.stringify({
      obj: 'mnp',
      func: 'dispatch',
      args: [scheme]
    }));
    /* istanbul ignore next */

    return re;
  }
}();