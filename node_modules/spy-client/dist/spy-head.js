(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = global || self, global.__spyHead = factory());
}(this, (function () { 'use strict';

    var spyHead = {
      conf: {},
      winerrors: [],
      errorDestroy: function errorDestroy() {},
      observerDestroy: function observerDestroy() {},
      entryMap: {},
      init: function init(conf) {
        this.conf = conf;
      },
      send: function send(obj, logServer) {
        obj.type = obj.type || 'except';
        var conf = this.conf;
        logServer = logServer || conf.logServer;
        var logUrl = "".concat(logServer, "?pid=").concat(conf.pid, "&lid=").concat(conf.lid, "&ts=").concat(Date.now()) + "&type=".concat(obj.type, "&group=").concat(obj.group, "&info=").concat(encodeURIComponent(JSON.stringify(obj.info)));

        if (obj.dim) {
          logUrl += '&dim=' + encodeURIComponent(JSON.stringify(obj.dim));
        }

        var img = new Image();
        img.src = logUrl;

        img.onload = img.onerror = function () {
          img = null;
        };
      }
    };

    function init(conf) {
      var resourceError = conf.resourceError || {};
      var jsError = conf.jsError || {};
      var isSendJserror = Math.random() < (jsError.sample ? jsError.sample : 0);
      var isSendResource = Math.random() < (resourceError.sample ? resourceError.sample : 0);
      var winerrors = spyHead.winerrors;

      function getxpath(el) {
        var xpath = [];

        while (el && el.nodeType === 1 && el !== el.parentNode) {
          xpath.push(el.tagName.toLowerCase());

          if (el === document.body) {
            break;
          }

          el = el.parentNode;
        }

        return {
          xpath: xpath.join('<')
        };
      }

      function spyListenError(event) {
        try {
          var el = event.target;
          var obj = {
            info: {},
            dim: {},
            group: ''
          };
          var info = obj.info;
          var srcElement = event.srcElement;
          var dataConnection = navigator.connection || {};
          info.downlink = dataConnection.downlink;
          info.effectiveType = dataConnection.effectiveType;
          info.rtt = dataConnection.rtt;
          info.deviceMemory = navigator.deviceMemory || 0;
          info.hardwareConcurrency = navigator.hardwareConcurrency || 0;

          if (srcElement === window) {
            obj.group = jsError.group;
            var error = event.error || {};
            info.msg = event.message;
            info.file = event.filename;
            info.ln = event.lineno;
            info.col = event.colno;
            info.stack = (error.stack || '').split('\n').slice(0, 3).join('\n');

            if (info.msg.indexOf('MODULE_TIMEOUT') !== -1) {
              var matches = info.msg.match(/^.*Hang:(.*); Miss:(.*)/);

              if (matches && matches[2]) {
                info.msg = 'MODULE_TIMEOUT for miss:' + matches[2];
              }
            }

            var historys = [];

            for (var index = 0; index < spyHead.winerrors.length; index++) {
              var item = spyHead.winerrors[index];
              var prefix = item.count > 1 ? "(".concat(item.count, ")") : '';
              historys.push(prefix + item.msg);
            }

            info.hisErrors = historys.join('----');
            var allow = true;

            if (jsError.handler) {
              allow = jsError.handler(obj);
            }

            if (allow !== false && isSendJserror) {
              spyHead.send(obj);
            }
          } else {
            obj.group = resourceError.group;
            obj.dim.type = srcElement.tagName.toLowerCase();
            var url = srcElement.src || srcElement.href;
            info.msg = url || 'unknown load eror';

            if (el && el.tagName === 'IMG') {
              info.xpath = getxpath(el).xpath;
            }

            var _allow = true;

            if (resourceError.handler) {
              _allow = resourceError.handler(obj);
            }

            if (_allow !== false && isSendResource) {
              spyHead.send(obj);
            }
          }

          if (winerrors.length > 0) {
            var lastInfo = winerrors[winerrors.length - 1];

            if (info.msg === lastInfo.msg) {
              lastInfo.count += lastInfo.count || 0;
              return;
            }
          }

          winerrors.push(info);
        } catch (e) {
          console.error(e);
        }
      }

      window.addEventListener('error', spyListenError, true);

      spyHead.errorDestroy = function () {
        window.removeEventListener('error', spyListenError, true);
        spyHead.winerrors = null;
      };
    }

    function init$1() {
      if (window.PerformanceObserver) {
        var observer = new window.PerformanceObserver(function spyObserveLongtask(list) {
          var entryMap = spyHead.entryMap;
          var entries = list.getEntries();

          for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];

            if (!entryMap[entry.entryType]) {
              entryMap[entry.entryType] = [];
            }

            entryMap[entry.entryType].push(entry);
          }
        });

        spyHead.observerDestroy = function () {
          observer.disconnect();
        };

        try {
          observer.observe({
            entryTypes: ['longtask', 'layout-shift', 'first-input', 'largest-contentful-paint']
          });
        } catch (e) {}
      }
    }

    function init$2(conf) {
      var whiteScreenError = conf.whiteScreenError || {};
      var handler = whiteScreenError.handler;
      var selector = whiteScreenError.selector;
      var subSelector = whiteScreenError.subSelector;
      var timeout = whiteScreenError.timeout || 6000;
      var isSend = Math.random() < (whiteScreenError.sample ? whiteScreenError.sample : 0);

      function getNetTime() {
        if (!window.performance) {
          return false;
        }

        var pf = window.performance.timing;
        var netStr = "&dns=".concat(pf.domainLookupEnd - pf.domainLookupStart) + "&tcp=".concat(pf.connectEnd - pf.connectStart) + "&requestTime=".concat(pf.responseStart - pf.requestStart) + "&resoneTime=".concat(pf.responseEnd - pf.responseStart);
        return netStr;
      }

      function getHisError() {
        if (!spyHead.winerrors) {
          return false;
        }

        var errors = spyHead.winerrors;
        var historys = [];

        for (var i = 0; i < errors.length; i++) {
          var stack = (errors[i].stack || '').split('\n')[0];
          historys.push("(".concat(i, ")").concat(stack || errors[i].msg));
        }

        return historys.join(';;');
      }

      function getDeviceInfo() {
        var ret = {};
        var dataConnection = navigator.connection || {};
        ret.downlink = dataConnection.downlink;
        ret.effectiveType = dataConnection.effectiveType;
        ret.rtt = dataConnection.rtt;
        ret.deviceMemory = navigator.deviceMemory || 0;
        ret.hardwareConcurrency = navigator.hardwareConcurrency || 0;
        return ret;
      }

      function isWhiteScreen() {
        var ele = document.querySelector(selector);

        if (!ele) {
          return true;
        }

        var sub = ele.querySelector(subSelector);

        if (!sub) {
          return true;
        }

        if (ele.clientHeight < window.innerHeight * 2 / 3) {
          return true;
        }

        return false;
      }

      if (isSend) {
        setTimeout(function () {
          var obj = {
            group: whiteScreenError.group,
            info: {
              msg: '',
              netTime: getNetTime(),
              hisErrors: getHisError(),
              deviceInfo: getDeviceInfo()
            }
          };

          if (isWhiteScreen()) {
            obj.info.msg = 'WhiteScren Error';
            var allow = true;

            if (handler) {
              allow = handler(obj);
            }

            if (allow !== false && obj.info.msg) {
              spyHead && spyHead.send(obj);
            }
          }
        }, timeout);
      }
    }

    spyHead.init = function (conf) {
      if (!conf.logServer) {
        conf.logServer = 'https://sp1.baidu.com/5b1ZeDe5KgQFm2e88IuM_a/mwb2.gif';
      }

      this.conf = conf;
      init(conf);
      init$1();
      init$2(conf);
    };

    if (window.__spyclientConf) {
      spyHead.init(window.__spyclientConf);
    }

    return spyHead;

})));
