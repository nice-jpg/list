{"remainingRequest":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/babel-loader/lib/index.js??ref--1-2!/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/@baidu/nano/es/avatar/index.js","dependencies":[{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/@baidu/nano/es/avatar/index.js","mtime":1696919503876},{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/san-hot-loader/index.js","mtime":1696919525187},{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/cache-loader/dist/cjs.js","mtime":1696919513896},{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/babel-loader/lib/index.js","mtime":1696919524615}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKCIvVXNlcnMvbGlhb2h1YW55dS9wcm9qZWN0cy9iYWlkdS13b3JrL2JhaWR1L2ZlZWQzL211bHRpLXBhZ2VzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdCIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlciIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuY29uc3RydWN0Iik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZyIpOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiL1VzZXJzL2xpYW9odWFueXUvcHJvamVjdHMvYmFpZHUtd29yay9iYWlkdS9mZWVkMy9tdWx0aS1wYWdlcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIvVXNlcnMvbGlhb2h1YW55dS9wcm9qZWN0cy9iYWlkdS13b3JrL2JhaWR1L2ZlZWQzL211bHRpLXBhZ2VzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIikpOwoKdmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi9Vc2Vycy9saWFvaHVhbnl1L3Byb2plY3RzL2JhaWR1LXdvcmsvYmFpZHUvZmVlZDMvbXVsdGktcGFnZXMvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMiKSk7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIvVXNlcnMvbGlhb2h1YW55dS9wcm9qZWN0cy9iYWlkdS13b3JrL2JhaWR1L2ZlZWQzL211bHRpLXBhZ2VzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iKSk7Cgp2YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiL1VzZXJzL2xpYW9odWFueXUvcHJvamVjdHMvYmFpZHUtd29yay9iYWlkdS9mZWVkMy9tdWx0aS1wYWdlcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZiIpKTsKCnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIvVXNlcnMvbGlhb2h1YW55dS9wcm9qZWN0cy9iYWlkdS13b3JrL2JhaWR1L2ZlZWQzL211bHRpLXBhZ2VzL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5IikpOwoKcmVxdWlyZSgiLi9zdHlsZS9pbmRleC5sZXNzIik7Cgp2YXIgX3NhbiA9IHJlcXVpcmUoInNhbiIpOwoKdmFyIF9pc051bWVyaWMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4uL3V0aWxzL2lzLW51bWVyaWMiKSk7Cgp2YXIgX3ByMnJlbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi4vdXRpbHMvcHIycmVtIikpOwoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKdmFyIHByZWZpeENscyA9ICdzLWF2YXRhcic7CnZhciBzaXplVHlwZSA9IHsKICB4czogODQsCiAgc206IDEwNSwKICBtZDogMTI5LAogIGxnOiAxNTYsCiAgeGw6IDE5MiwKICB4eGw6IDIxOQp9OwoKdmFyIGZvcm1hdCA9IGZ1bmN0aW9uIGZvcm1hdChzaXplKSB7CiAgaWYgKCgwLCBfaXNOdW1lcmljLmRlZmF1bHQpKHNpemUpKSB7CiAgICB2YXIgdHlwZSA9ICd4cyc7CgogICAgc3dpdGNoICh0cnVlKSB7CiAgICAgIGNhc2Ugc2l6ZSA+PSBzaXplVHlwZS54eGw6CiAgICAgICAgdHlwZSA9ICd4eGwnOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSBzaXplID49IHNpemVUeXBlLnhsOgogICAgICAgIHR5cGUgPSAneGwnOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSBzaXplID49IHNpemVUeXBlLmxnOgogICAgICAgIHR5cGUgPSAnbGcnOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSBzaXplID49IHNpemVUeXBlLm1kOgogICAgICAgIHR5cGUgPSAnbWQnOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSBzaXplID49IHNpemVUeXBlLnNtOgogICAgICAgIHR5cGUgPSAnc20nOwogICAgICAgIGJyZWFrOwogICAgfQoKICAgIHJldHVybiB0eXBlOwogIH0KCiAgcmV0dXJuIHNpemU7Cn07Cgp2YXIgQXZhdGFyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoQXZhdGFyLCBfQ29tcG9uZW50KTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihBdmF0YXIpOwoKICBmdW5jdGlvbiBBdmF0YXIoKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBBdmF0YXIpOwogICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoQXZhdGFyLCBbewogICAga2V5OiAiaW5pdERhdGEiLAogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdERhdGEoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYmFkZ2U6IGZhbHNlLAogICAgICAgIGhhaXJsaW5lOiB0cnVlLAogICAgICAgIHNoYXBlOiAnY2lyY2xlJywKICAgICAgICBzaXplOiAnbWQnLAogICAgICAgIHNyYzogJycsCiAgICAgICAgdmlwOiAnJwogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogImluaXRlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdGVkKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICAgIHZhciBzcmMgPSB0aGlzLmRhdGEuZ2V0KCdzcmMnKTsKICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpOwoKICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBkYXRhLnNldCgnbG9hZGVkJywgdHJ1ZSk7CiAgICAgIH07CgogICAgICBpbWcub25lcnJvciA9IGltZy5vbmFib3J0ID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICBfdGhpcy5maXJlKCdlcnJvcicsIGUpOwogICAgICB9OwoKICAgICAgaW1nLnNyYyA9IHNyYzsKICAgIH0KICB9XSk7CiAgcmV0dXJuIEF2YXRhcjsKfShfc2FuLkNvbXBvbmVudCk7CgpleHBvcnRzLmRlZmF1bHQgPSBBdmF0YXI7CigwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKEF2YXRhciwgInRlbXBsYXRlIiwKLypodG1sKi8KIlxuICAgICAgICA8ZGl2IGNsYXNzPVwie3t3cmFwQ2xhc3N9fVwiIHN0eWxlPVwie3t3cmFwU3R5bGV9fVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIiIuY29uY2F0KHByZWZpeENscywgIi1wbGFjZWhvbGRlclwiLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIiKS5jb25jYXQocHJlZml4Q2xzLCAiLWltZ1wiIHN0eWxlPVwie3tpbWdTdHlsZX19XCIvPlxuICAgICAgICAgICAgPGRpdiBzLWlmPVwic2hhcGUgIT09ICdzcXVhcmUnICYmICEhdmlwXCIgY2xhc3M9XCIiKS5jb25jYXQocHJlZml4Q2xzLCAiLXZpcCB2aXAte3t2aXB9fVwiLz5cbiAgICAgICAgICAgIDxzcGFuIHMtaWY9XCJiYWRnZVwiIGNsYXNzPVwiIikuY29uY2F0KHByZWZpeENscywgIi1iYWRnZVwiLz5cbiAgICAgICAgPC9kaXY+XG4gICAgIikpOwooMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShBdmF0YXIsICJkYXRhVHlwZXMiLCB7CiAgYmFkZ2U6IF9zYW4uRGF0YVR5cGVzLmJvb2wsCiAgaGFpcmxpbmU6IF9zYW4uRGF0YVR5cGVzLmJvb2wsCiAgc2hhcGU6IF9zYW4uRGF0YVR5cGVzLm9uZU9mKFsnY2lyY2xlJywgJ3NxdWFyZSddKSwKICBzaXplOiBfc2FuLkRhdGFUeXBlcy5vbmVPZlR5cGUoW19zYW4uRGF0YVR5cGVzLm51bWJlciwgX3Nhbi5EYXRhVHlwZXMub25lT2YoT2JqZWN0LmtleXMoc2l6ZVR5cGUpKV0pLAogIHNyYzogX3Nhbi5EYXRhVHlwZXMuc3RyaW5nLAogIHZpcDogX3Nhbi5EYXRhVHlwZXMub25lT2YoWycnLCAnMCcsICcxJywgJzInLCAnMycsICcxMCcsICdzd2FuJywgJ3NlbGVjdCcsICd1bnNlbGVjdCddKQp9KTsKKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoQXZhdGFyLCAiY29tcHV0ZWQiLCB7CiAgd3JhcENsYXNzOiBmdW5jdGlvbiB3cmFwQ2xhc3MoKSB7CiAgICB2YXIgaGFpcmxpbmUgPSB0aGlzLmRhdGEuZ2V0KCdoYWlybGluZScpOwogICAgdmFyIHNoYXBlID0gdGhpcy5kYXRhLmdldCgnc2hhcGUnKTsKICAgIHZhciBzaXplID0gdGhpcy5kYXRhLmdldCgnc2l6ZScpOwogICAgcmV0dXJuIFtwcmVmaXhDbHMsICIiLmNvbmNhdChwcmVmaXhDbHMsICItIikuY29uY2F0KHNoYXBlKSwgIiIuY29uY2F0KHByZWZpeENscywgIi0iKS5jb25jYXQoZm9ybWF0KHNpemUpKSwgaGFpcmxpbmUgJiYgIiIuY29uY2F0KHByZWZpeENscywgIi1oYWlybGluZSIpXS5maWx0ZXIoZnVuY3Rpb24gKGMpIHsKICAgICAgcmV0dXJuIGM7CiAgICB9KTsKICB9LAogIHdyYXBTdHlsZTogZnVuY3Rpb24gd3JhcFN0eWxlKCkgewogICAgdmFyIHJldCA9IHt9OwogICAgdmFyIHNpemUgPSB0aGlzLmRhdGEuZ2V0KCdzaXplJyk7CgogICAgaWYgKCgwLCBfaXNOdW1lcmljLmRlZmF1bHQpKHNpemUpKSB7CiAgICAgIHZhciB3aWR0aCA9ICIiLmNvbmNhdCgoMCwgX3ByMnJlbS5kZWZhdWx0KShzaXplKSwgInJlbSIpOwogICAgICByZXQgPSB7CiAgICAgICAgd2lkdGg6IHdpZHRoLAogICAgICAgIGhlaWdodDogd2lkdGgKICAgICAgfTsKICAgIH0KCiAgICByZXR1cm4gcmV0OwogIH0sCiAgaW1nU3R5bGU6IGZ1bmN0aW9uIGltZ1N0eWxlKCkgewogICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICB2YXIgc3JjID0gZGF0YS5nZXQoJ3NyYycpOwogICAgdmFyIGxvYWRlZCA9IGRhdGEuZ2V0KCdsb2FkZWQnKTsKCiAgICBpZiAobG9hZGVkICYmIHNyYykgewogICAgICByZXR1cm4gewogICAgICAgICdiYWNrZ3JvdW5kLWltYWdlJzogInVybCgiLmNvbmNhdChzcmMsICIpIikKICAgICAgfTsKICAgIH0KICB9Cn0pOwpBdmF0YXIuc2l6ZVR5cGUgPSBzaXplVHlwZTsKCmlmIChtb2R1bGUuaG90KSB7CiAgdmFyIF9fSE9UX0FQSV9fID0gcmVxdWlyZSgnL1VzZXJzL2xpYW9odWFueXUvcHJvamVjdHMvYmFpZHUtd29yay9iYWlkdS9mZWVkMy9tdWx0aS1wYWdlcy9ub2RlX21vZHVsZXMvc2FuLWhvdC1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LWNsaWVudC1hcGkuanMnKTsKCiAgdmFyIF9fSE9UX1VUSUxTX18gPSByZXF1aXJlKCcvVXNlcnMvbGlhb2h1YW55dS9wcm9qZWN0cy9iYWlkdS13b3JrL2JhaWR1L2ZlZWQzL211bHRpLXBhZ2VzL25vZGVfbW9kdWxlcy9zYW4taG90LWxvYWRlci9saWIvcnVudGltZS91dGlscy5qcycpOwoKICB2YXIgX19TQU5fQ09NUE9ORU5UX18gPSBfX0hPVF9VVElMU19fLmdldEV4cG9ydHMobW9kdWxlKTsKCiAgaWYgKF9fU0FOX0NPTVBPTkVOVF9fLnRlbXBsYXRlIHx8IF9fU0FOX0NPTVBPTkVOVF9fLnByb3RvdHlwZS50ZW1wbGF0ZSkgewogICAgbW9kdWxlLmhvdC5hY2NlcHQoKTsKCiAgICBfX0hPVF9BUElfXy5pbnN0YWxsKHJlcXVpcmUoJ3NhbicpKTsKCiAgICB2YXIgX19ITVJfSURfXyA9ICczMDYwNjUyNSc7CgogICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHsKICAgICAgX19IT1RfQVBJX18uY3JlYXRlUmVjb3JkKF9fSE1SX0lEX18sIF9fU0FOX0NPTVBPTkVOVF9fKTsKICAgIH0gZWxzZSB7CiAgICAgIF9fSE9UX0FQSV9fLmhvdFJlbG9hZChfX0hNUl9JRF9fLCBfX1NBTl9DT01QT05FTlRfXyk7CiAgICB9CiAgfQp9"},{"version":3,"sources":["/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/@baidu/nano/es/avatar/index.js"],"names":["prefixCls","sizeType","xs","sm","md","lg","xl","xxl","format","size","type","Avatar","badge","hairline","shape","src","vip","data","get","img","Image","onload","set","onerror","onabort","e","fire","Component","DataTypes","bool","oneOf","oneOfType","number","Object","keys","string","wrapClass","filter","c","wrapStyle","ret","width","height","imgStyle","loaded","module","hot","__HOT_API__","require","__HOT_UTILS__","__SAN_COMPONENT__","getExports","template","prototype","accept","install","__HMR_ID__","createRecord","hotReload"],"mappings":"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","sourcesContent":["/**\n * @file 组件 avatar 头像\n * @author baozhixin <baozhixin@baidu.com>\n *\n * mark: 头像小于sm则不显示vip图标\n */\n\nimport './style/index.less';\nimport {Component, DataTypes} from 'san';\nimport isNumeric from '../utils/is-numeric';\nimport pr2rem from '../utils/pr2rem';\n\nconst prefixCls = 's-avatar';\nconst sizeType = {\n    xs: 84,\n    sm: 105,\n    md: 129,\n    lg: 156,\n    xl: 192,\n    xxl: 219\n};\nconst format = size => {\n    if (isNumeric(size)) {\n        let type = 'xs';\n        switch (true) {\n            case size >= sizeType.xxl:\n                type = 'xxl';\n                break;\n            case size >= sizeType.xl:\n                type = 'xl';\n                break;\n            case size >= sizeType.lg:\n                type = 'lg';\n                break;\n            case size >= sizeType.md:\n                type = 'md';\n                break;\n            case size >= sizeType.sm:\n                type = 'sm';\n                break;\n        }\n        return type;\n    }\n    return size;\n};\n\nexport default class Avatar extends Component {\n    // eslint-disable-next-line\n    static template = /*html*/ `\n        <div class=\"{{wrapClass}}\" style=\"{{wrapStyle}}\">\n            <div class=\"${prefixCls}-placeholder\"/>\n            <div class=\"${prefixCls}-img\" style=\"{{imgStyle}}\"/>\n            <div s-if=\"shape !== 'square' && !!vip\" class=\"${prefixCls}-vip vip-{{vip}}\"/>\n            <span s-if=\"badge\" class=\"${prefixCls}-badge\"/>\n        </div>\n    `;\n\n    static dataTypes = {\n        badge: DataTypes.bool,\n        hairline: DataTypes.bool,\n        shape: DataTypes.oneOf(['circle', 'square']),\n        size: DataTypes.oneOfType([\n            DataTypes.number,\n            DataTypes.oneOf(Object.keys(sizeType))\n        ]),\n        src: DataTypes.string,\n        vip: DataTypes.oneOf(['', '0', '1', '2', '3', '10', 'swan', 'select', 'unselect'])\n    };\n\n    static computed = {\n        wrapClass() {\n            const hairline = this.data.get('hairline');\n            const shape = this.data.get('shape');\n            const size = this.data.get('size');\n            return [\n                prefixCls,\n                `${prefixCls}-${shape}`,\n                `${prefixCls}-${format(size)}`,\n                hairline && `${prefixCls}-hairline`\n            ].filter(c => c);\n        },\n\n        wrapStyle() {\n            let ret = {};\n            const size = this.data.get('size');\n            if (isNumeric(size)) {\n                const width = `${pr2rem(size)}rem`;\n                ret = {\n                    width,\n                    height: width\n                };\n            }\n            return ret;\n        },\n\n        imgStyle() {\n            const data = this.data;\n            const src = data.get('src');\n            const loaded = data.get('loaded');\n\n            if (loaded && src) {\n                return {\n                    'background-image': `url(${src})`\n                };\n            }\n        }\n    };\n\n    initData() {\n        return {\n            badge: false,\n            hairline: true,\n            shape: 'circle',\n            size: 'md',\n            src: '',\n            vip: ''\n        };\n    }\n\n    inited() {\n        const data = this.data;\n        const src = this.data.get('src');\n        const img = new Image();\n\n        img.onload = () => {\n            data.set('loaded', true);\n        };\n\n        img.onerror = img.onabort = e => {\n            this.fire('error', e);\n        };\n\n        img.src = src;\n    }\n}\n\nAvatar.sizeType = sizeType;\n"]}]}