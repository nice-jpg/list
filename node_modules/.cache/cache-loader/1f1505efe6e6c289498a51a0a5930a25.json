{"remainingRequest":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/babel-loader/lib/index.js??ref--1-2!/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/@baidu/nano/es/circle/index.js","dependencies":[{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/@baidu/nano/es/circle/index.js","mtime":1696919503876},{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/san-hot-loader/index.js","mtime":1696919525187},{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/cache-loader/dist/cjs.js","mtime":1696919513896},{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/babel-loader/lib/index.js","mtime":1696919524615}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/@baidu/nano/es/circle/index.js"],"names":["prefixCls","viewBox","Circle","size","rate","color","layerColor","fill","speed","strokeWidth","strokeLinecap","clockwise","text","textClass","num","strockWidth","format","p","Math","PI","o","half","flag","r","m","a1","a2","join","floor","max","min","Component","DataTypes","oneOfType","string","number","oneOf","bool","wrapStyle","data","get","width","height","module","hot","__HOT_API__","require","__HOT_UTILS__","__SAN_COMPONENT__","getExports","template","prototype","accept","install","__HMR_ID__","createRecord","hotReload"],"mappings":"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","sourcesContent":["/**\n * @file 组件 Circle 环形进度条\n * @author baozhixin <baozhixin@baidu.com>\n */\n\nimport './style/index.less';\nimport {Component, DataTypes} from 'san';\nimport pr2rem from '../utils/pr2rem';\nimport isNumeric from '../utils/is-numeric';\n\nconst prefixCls = 's-circle';\nconst viewBox = 282; // 视觉稿尺寸\n\nexport default class Circle extends Component {\n    // eslint-disable-next-line\n    static template = /*html*/ `\n        <div class=\"${prefixCls}\" style=\"{{wrapStyle}}\">\n            <svg viewBox=\"0 0 ${viewBox} ${viewBox}\">\n                <path\n                    d=\"{{getPath(strokeWidth, clockwise)}}\"\n                    fill=\"{{fill}}\"\n                    stroke=\"{{layerColor}}\"\n                    stroke-width=\"{{strokeWidth * 2}}\"\n                />\n                <path\n                    d=\"{{getPath(strokeWidth, clockwise)}}\"\n                    fill=\"none\"\n                    stroke=\"{{color}}\"\n                    stroke-width=\"{{strokeWidth * 2}}\"\n                    stroke-linecap=\"{{strokeLinecap}}\"\n                    stroke-dasharray=\"{{getDasharray(rate, strokeWidth)}}\"\n                />\n            </svg>\n            <div class=\"${prefixCls}-content\">\n                <slot>\n                    <span class=\"${prefixCls}-text {{textClass}}\">{{text || format(rate) + '%'}}</span>\n                </slot>\n            </div>\n        </div>\n    `;\n\n    static dataTypes = {\n        size: DataTypes.oneOfType([DataTypes.string, DataTypes.number]),\n        rate: DataTypes.oneOfType([DataTypes.string, DataTypes.number]),\n        color: DataTypes.string,\n        layerColor: DataTypes.string,\n        fill: DataTypes.string,\n        speed: DataTypes.oneOfType([DataTypes.string, DataTypes.number]),\n        text: DataTypes.string,\n        strokeWidth: DataTypes.oneOfType([DataTypes.string, DataTypes.number]),\n        strokeLinecap: DataTypes.oneOf(['butt', 'round', 'square']),\n        clockwise: DataTypes.bool,\n        textClass: DataTypes.string\n    };\n\n    static computed = {\n        wrapStyle() {\n            const size = this.data.get('size');\n            if (isNumeric(size)) {\n                const width = pr2rem(size) + 'rem';\n                return {\n                    width,\n                    height: width\n                };\n            }\n        }\n    };\n\n    initData() {\n        return {\n            size: 141,\n            rate: 0,\n            color: '#fff',\n            layerColor: '#5d5d5d',\n            fill: '#ccc',\n            speed: 0,\n            strokeWidth: 10,\n            strokeLinecap: 'round',\n            clockwise: true,\n            text: '',\n            textClass: ''\n        };\n    }\n\n    getDasharray(num, strockWidth) {\n        // 进度\n        const rate = this.format(num);\n        // 周长\n        let p = 2 * Math.PI * (viewBox / 2 - strockWidth);\n        // 偏移\n        let o = (p * rate) / 100;\n        return `${o} ${p}`;\n    }\n\n    getPath(strockWidth, clockwise) {\n        // https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths\n        const size = viewBox;\n        const half = size / 2;\n        const flag = clockwise ? 1 : 0;\n        const r = half - strockWidth;\n        const m = `M ${half} ${half} m 0 -${r}`;\n        const a1 = `a ${r} ${r} 0 0 ${flag} 0 ${r * 2}`;\n        const a2 = `a ${r} ${r} 0 0 ${flag} 0 -${r * 2}`;\n        return [m, a1, a2].join(' ');\n    }\n\n    // 取 0 ~ 100 之间整数\n    format(num) {\n        return Math.floor(Math.max(0, Math.min(100, num)));\n    }\n}\n"]}]}