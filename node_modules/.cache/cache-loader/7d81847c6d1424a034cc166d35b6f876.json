{"remainingRequest":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-2!/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-3!/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-4!/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/src/pages/news/components/small-video/style.less","dependencies":[{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/src/pages/news/components/small-video/style.less","mtime":1695633995759},{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/postcss.config.js","mtime":1695633995631},{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/cache-loader/dist/cjs.js","mtime":1696919513896},{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/css-loader/dist/cjs.js","mtime":1696919524705},{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/postcss-loader/src/index.js","mtime":1696919524980},{"path":"/Users/liaohuanyu/projects/baidu-work/baidu/feed3/multi-pages/node_modules/less-loader/dist/cjs.js","mtime":1696575121311}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}