#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const san_project_1 = require("../models/san-project");
const fs_1 = require("fs");
const path_1 = require("path");
const yargs = __importStar(require("yargs"));
const buffer_1 = require("../utils/buffer");
yargs
    .usage('$0 -o <OUT_FILE> [OPTION]... <FILE>')
    .option('output', {
    alias: 'o',
    type: 'string',
    description: 'output file path, output to STDOUT if not specified'
})
    .option('helpers', {
    description: 'emit source code for helpers'
})
    .option('target', {
    alias: 't',
    default: 'js',
    type: 'string',
    description: 'target SSR file format'
})
    .option('targetOptions', {
    alias: 'j',
    type: 'string',
    default: '{}',
    description: 'JSON format options to target code generation'
})
    .option('tsconfig', {
    alias: 'c',
    type: 'string',
    description: 'tsconfig path, will auto resolve if not specified'
})
    .check(argv => {
    if (argv._.length === 0 && !argv.helpers) {
        throw new Error('component file must be provided');
    }
    return true;
});
const target = yargs.argv.target;
const options = JSON.parse(yargs.argv.targetOptions);
const tsConfigFilePath = yargs.argv.tsconfig;
const outputFile = yargs.argv.output;
const helpers = yargs.argv.helpers;
const project = new san_project_1.SanProject(tsConfigFilePath);
if (helpers) {
    const helpers = project.emitHelpers(target, options);
    output(helpers);
    process.exit(0);
}
const componentFile = path_1.resolve(yargs.argv._[0]);
const targetCode = project.compile(componentFile, target, options);
output(targetCode);
function output(content) {
    console.error(chalk_1.default.gray('emitting'), 'to', outputFile || 'STDOUT');
    if (outputFile !== undefined) {
        fs_1.writeFileSync(outputFile, content);
        console.error(chalk_1.default.green('success'), `${buffer_1.byteCount(content)} bytes written`);
    }
    else {
        process.stdout.write(content);
        console.error(chalk_1.default.green('success'), `${buffer_1.byteCount(content)} bytes in total`);
    }
}
//# sourceMappingURL=ssr.js.map